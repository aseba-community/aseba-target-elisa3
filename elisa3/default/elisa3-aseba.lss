
elisa3-aseba.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000d60  00800200  0000b4b4  0000b568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b4b4  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001255  00800f60  00800f60  0000c2c8  2**0
                  ALLOC
  3 .eeprom       00000802  00810000  00810000  0000c2c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .comment      00000030  00000000  00000000  0000caca  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000cafc  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  0000cb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000db36  00000000  00000000  0000d34c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000026b2  00000000  00000000  0001ae82  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004375  00000000  00000000  0001d534  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001c0c  00000000  00000000  000218ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003272  00000000  00000000  000234b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000107f9  00000000  00000000  0002672a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001188  00000000  00000000  00036f23  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 c9 01 	jmp	0x392	; 0x392 <__ctors_end>
       4:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
       8:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
       c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      10:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      14:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      18:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      1c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      20:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      24:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      28:	0c 94 a1 44 	jmp	0x8942	; 0x8942 <__vector_10>
      2c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      30:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      34:	0c 94 d5 44 	jmp	0x89aa	; 0x89aa <__vector_13>
      38:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      3c:	0c 94 36 44 	jmp	0x886c	; 0x886c <__vector_15>
      40:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      44:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      48:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      4c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      50:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      54:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      58:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      5c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      60:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      64:	0c 94 92 31 	jmp	0x6324	; 0x6324 <__vector_25>
      68:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      6c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      70:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      74:	0c 94 3c 36 	jmp	0x6c78	; 0x6c78 <__vector_29>
      78:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      7c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      80:	0c 94 e0 30 	jmp	0x61c0	; 0x61c0 <__vector_32>
      84:	0c 94 f6 30 	jmp	0x61ec	; 0x61ec <__vector_33>
      88:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      8c:	0c 94 55 30 	jmp	0x60aa	; 0x60aa <__vector_35>
      90:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      94:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      98:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      9c:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      a0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      a4:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      a8:	0c 94 29 30 	jmp	0x6052	; 0x6052 <__vector_42>
      ac:	0c 94 3f 30 	jmp	0x607e	; 0x607e <__vector_43>
      b0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      b4:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__vector_45>
      b8:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      bc:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      c0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      c4:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      c8:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      cc:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      d0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      d4:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      d8:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      dc:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      e0:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <__bad_interrupt>
      e4:	f3 1b       	sub	r31, r19
      e6:	fb 1b       	sub	r31, r27
      e8:	03 1c       	adc	r0, r3
      ea:	13 1c       	adc	r1, r3
      ec:	0b 1c       	adc	r0, r11
      ee:	17 1c       	adc	r1, r7
      f0:	eb 1b       	sub	r30, r27
      f2:	e3 1b       	sub	r30, r19
      f4:	d8 39       	cpi	r29, 0x98	; 152
      f6:	cc 39       	cpi	r28, 0x9C	; 156
      f8:	c0 39       	cpi	r28, 0x90	; 144
      fa:	b4 39       	cpi	r27, 0x94	; 148
      fc:	a8 39       	cpi	r26, 0x98	; 152
      fe:	9d 39       	cpi	r25, 0x9D	; 157
     100:	91 39       	cpi	r25, 0x91	; 145
     102:	34 3a       	cpi	r19, 0xA4	; 164
     104:	21 3a       	cpi	r18, 0xA1	; 161
     106:	0e 3a       	cpi	r16, 0xAE	; 174
     108:	e7 39       	cpi	r30, 0x97	; 151
     10a:	43 3a       	cpi	r20, 0xA3	; 163
     10c:	e3 39       	cpi	r30, 0x93	; 147
     10e:	4f 4a       	sbci	r20, 0xAF	; 175
     110:	56 4a       	sbci	r21, 0xA6	; 166
     112:	5d 4a       	sbci	r21, 0xAD	; 173
     114:	61 4a       	sbci	r22, 0xA1	; 161
     116:	65 4a       	sbci	r22, 0xA5	; 165
     118:	6d 4a       	sbci	r22, 0xAD	; 173
     11a:	8b 4a       	sbci	r24, 0xAB	; 171
     11c:	93 4a       	sbci	r25, 0xA3	; 163
     11e:	97 4a       	sbci	r25, 0xA7	; 167
     120:	9b 4a       	sbci	r25, 0xAB	; 171
     122:	43 4a       	sbci	r20, 0xA3	; 163
     124:	9f 4a       	sbci	r25, 0xAF	; 175
     126:	a6 4a       	sbci	r26, 0xA6	; 166
     128:	ad 4a       	sbci	r26, 0xAD	; 173
     12a:	b4 4a       	sbci	r27, 0xA4	; 164
     12c:	bb 4a       	sbci	r27, 0xAB	; 171
     12e:	37 4a       	sbci	r19, 0xA7	; 167
     130:	4c 4a       	sbci	r20, 0xAC	; 172
     132:	e9 4b       	sbci	r30, 0xB9	; 185
     134:	f4 4b       	sbci	r31, 0xB4	; 180
     136:	21 4c       	sbci	r18, 0xC1	; 193
     138:	3f 4c       	sbci	r19, 0xCF	; 207
     13a:	64 4c       	sbci	r22, 0xC4	; 196
     13c:	8a 4c       	sbci	r24, 0xCA	; 202
     13e:	ba 4c       	sbci	r27, 0xCA	; 202
     140:	7f 4b       	sbci	r23, 0xBF	; 191
     142:	f5 4c       	sbci	r31, 0xC5	; 197
     144:	29 4d       	sbci	r18, 0xD9	; 217
     146:	3e 4d       	sbci	r19, 0xDE	; 222
     148:	7e 4d       	sbci	r23, 0xDE	; 222
     14a:	9d 4d       	sbci	r25, 0xDD	; 221
     14c:	b2 4b       	sbci	r27, 0xB2	; 178
     14e:	ce 4b       	sbci	r28, 0xBE	; 190
     150:	50 50       	subi	r21, 0x00	; 0
     152:	2c 50       	subi	r18, 0x0C	; 12
     154:	8f 50       	subi	r24, 0x0F	; 15
     156:	74 50       	subi	r23, 0x04	; 4
     158:	b8 50       	subi	r27, 0x08	; 8
     15a:	ee 4f       	sbci	r30, 0xFE	; 254
     15c:	b8 4f       	sbci	r27, 0xF8	; 248
     15e:	8a 4f       	sbci	r24, 0xFA	; 250
     160:	61 4f       	sbci	r22, 0xF1	; 241
     162:	4c 4f       	sbci	r20, 0xFC	; 252
     164:	0d 4f       	sbci	r16, 0xFD	; 253
     166:	e4 4e       	sbci	r30, 0xE4	; 228
     168:	cc 4e       	sbci	r28, 0xEC	; 236
     16a:	ac 4e       	sbci	r26, 0xEC	; 236
     16c:	59 50       	subi	r21, 0x09	; 9
     16e:	10 53       	subi	r17, 0x30	; 48
     170:	2d 53       	subi	r18, 0x3D	; 61
     172:	f0 54       	subi	r31, 0x40	; 64
     174:	df 54       	subi	r29, 0x4F	; 79
     176:	cc 54       	subi	r28, 0x4C	; 76
     178:	c2 54       	subi	r28, 0x42	; 66
     17a:	aa 54       	subi	r26, 0x4A	; 74
     17c:	7e 54       	subi	r23, 0x4E	; 78
     17e:	94 53       	subi	r25, 0x34	; 52
     180:	90 53       	subi	r25, 0x30	; 48
     182:	82 53       	subi	r24, 0x32	; 50
     184:	63 53       	subi	r22, 0x33	; 51
     186:	5f 53       	subi	r21, 0x3F	; 63
     188:	5b 53       	subi	r21, 0x3B	; 59
     18a:	57 53       	subi	r21, 0x37	; 55
     18c:	f1 52       	subi	r31, 0x21	; 33
     18e:	08 4a       	sbci	r16, 0xA8	; 168
     190:	d7 3b       	cpi	r29, 0xB7	; 183
     192:	3b ce       	rjmp	.-906    	; 0xfffffe0a <__eeprom_end+0xff7ef608>
     194:	01 6e       	ori	r16, 0xE1	; 225
     196:	84 bc       	out	0x24, r8	; 36
     198:	bf fd       	.word	0xfdbf	; ????
     19a:	c1 2f       	mov	r28, r17
     19c:	3d 6c       	ori	r19, 0xCD	; 205
     19e:	74 31       	cpi	r23, 0x14	; 20
     1a0:	9a bd       	out	0x2a, r25	; 42
     1a2:	56 83       	std	Z+6, r21	; 0x06
     1a4:	3d da       	rcall	.-2950   	; 0xfffff620 <__eeprom_end+0xff7eee1e>
     1a6:	3d 00       	.word	0x003d	; ????
     1a8:	c7 7f       	andi	r28, 0xF7	; 247
     1aa:	11 be       	out	0x31, r1	; 49
     1ac:	d9 e4       	ldi	r29, 0x49	; 73
     1ae:	bb 4c       	sbci	r27, 0xCB	; 203
     1b0:	3e 91       	ld	r19, -X
     1b2:	6b aa       	std	Y+51, r6	; 0x33
     1b4:	aa be       	out	0x3a, r10	; 58
     1b6:	00 00       	nop
     1b8:	00 80       	ld	r0, Z
     1ba:	3f 05       	cpc	r19, r15
     1bc:	a8 4c       	sbci	r26, 0xC8	; 200
     1be:	cd b2       	in	r12, 0x1d	; 29
     1c0:	d4 4e       	sbci	r29, 0xE4	; 228
     1c2:	b9 38       	cpi	r27, 0x89	; 137
     1c4:	36 a9       	ldd	r19, Z+54	; 0x36
     1c6:	02 0c       	add	r0, r2
     1c8:	50 b9       	out	0x00, r21	; 0
     1ca:	91 86       	std	Z+9, r9	; 0x09
     1cc:	88 08       	sbc	r8, r8
     1ce:	3c a6       	std	Y+44, r3	; 0x2c
     1d0:	aa aa       	std	Y+50, r10	; 0x32
     1d2:	2a be       	out	0x3a, r2	; 58
     1d4:	00 00       	nop
     1d6:	00 80       	ld	r0, Z
     1d8:	3f 00       	.word	0x003f	; ????

000001da <__trampolines_start>:
     1da:	0c 94 ce 4b 	jmp	0x979c	; 0x979c <AsebaVMStep+0xea>
     1de:	0c 94 82 53 	jmp	0xa704	; 0xa704 <AsebaVMDebugMessage+0x180>
     1e2:	0c 94 e9 4b 	jmp	0x97d2	; 0x97d2 <AsebaVMStep+0x120>
     1e6:	0c 94 94 53 	jmp	0xa728	; 0xa728 <AsebaVMDebugMessage+0x1a4>
     1ea:	0c 94 65 4a 	jmp	0x94ca	; 0x94ca <AsebaVMDoBinaryOperation+0x80>
     1ee:	0c 94 02 02 	jmp	0x404	; 0x404 <prox_network>
     1f2:	0c 94 9f 4a 	jmp	0x953e	; 0x953e <AsebaVMDoBinaryOperation+0xf4>
     1f6:	0c 94 57 53 	jmp	0xa6ae	; 0xa6ae <AsebaVMDebugMessage+0x12a>
     1fa:	0c 94 4f 4a 	jmp	0x949e	; 0x949e <AsebaVMDoBinaryOperation+0x54>
     1fe:	0c 94 8a 4f 	jmp	0x9f14	; 0x9f14 <AsebaVMRun+0x2ec>
     202:	0c 94 93 4a 	jmp	0x9526	; 0x9526 <AsebaVMDoBinaryOperation+0xdc>
     206:	0c 94 5b 53 	jmp	0xa6b6	; 0xa6b6 <AsebaVMDebugMessage+0x132>
     20a:	0c 94 2c 16 	jmp	0x2c58	; 0x2c58 <AsebaNative_rand>
     20e:	0c 94 b2 4b 	jmp	0x9764	; 0x9764 <AsebaVMStep+0xb2>
     212:	0c 94 63 53 	jmp	0xa6c6	; 0xa6c6 <AsebaVMDebugMessage+0x142>
     216:	0c 94 f5 4c 	jmp	0x99ea	; 0x99ea <AsebaVMStep+0x338>
     21a:	0c 94 3d 0a 	jmp	0x147a	; 0x147a <AsebaNative_vecaddscalar>
     21e:	0c 94 f4 4b 	jmp	0x97e8	; 0x97e8 <AsebaVMStep+0x136>
     222:	0c 94 1f 0f 	jmp	0x1e3e	; 0x1e3e <AsebaNative_vecsort>
     226:	0c 94 5f 53 	jmp	0xa6be	; 0xa6be <AsebaVMDebugMessage+0x13a>
     22a:	0c 94 b2 0f 	jmp	0x1f64	; 0x1f64 <AsebaNative_mathmuldiv>
     22e:	0c 94 ea 0c 	jmp	0x19d4	; 0x19d4 <AsebaNative_vecclamp>
     232:	0c 94 bf 10 	jmp	0x217e	; 0x217e <AsebaNative_mathatan2>
     236:	0c 94 50 50 	jmp	0xa0a0	; 0xa0a0 <AsebaVMRun+0x478>
     23a:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <setGreenLed+0x26>
     23e:	0c 94 f0 54 	jmp	0xa9e0	; 0xa9e0 <AsebaVMDebugMessage+0x45c>
     242:	0c 94 ad 4a 	jmp	0x955a	; 0x955a <AsebaVMDoBinaryOperation+0x110>
     246:	0c 94 b4 39 	jmp	0x7368	; 0x7368 <__vector_29+0x6f0>
     24a:	0c 94 13 1c 	jmp	0x3826	; 0x3826 <setGreenLed+0x76>
     24e:	0c 94 04 0e 	jmp	0x1c08	; 0x1c08 <AsebaNative_vecstat>
     252:	0c 94 f1 52 	jmp	0xa5e2	; 0xa5e2 <AsebaVMDebugMessage+0x5e>
     256:	0c 94 c0 0e 	jmp	0x1d80	; 0x1d80 <AsebaNative_vecargbounds>
     25a:	0c 94 de 13 	jmp	0x27bc	; 0x27bc <AsebaNative_mathrot2>
     25e:	0c 94 e4 4e 	jmp	0x9dc8	; 0x9dc8 <AsebaVMRun+0x1a0>
     262:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <AsebaNative_vecmax>
     266:	0c 94 2b 12 	jmp	0x2456	; 0x2456 <AsebaNative_mathsin>
     26a:	0c 94 7e 4d 	jmp	0x9afc	; 0x9afc <AsebaVMStep+0x44a>
     26e:	0c 94 8b 4a 	jmp	0x9516	; 0x9516 <AsebaVMDoBinaryOperation+0xcc>
     272:	0c 94 bb 4a 	jmp	0x9576	; 0x9576 <AsebaVMDoBinaryOperation+0x12c>
     276:	0c 94 21 4c 	jmp	0x9842	; 0x9842 <AsebaVMStep+0x190>
     27a:	0c 94 43 4a 	jmp	0x9486	; 0x9486 <AsebaVMDoBinaryOperation+0x3c>
     27e:	0c 94 56 4a 	jmp	0x94ac	; 0x94ac <AsebaVMDoBinaryOperation+0x62>
     282:	0c 94 3e 4d 	jmp	0x9a7c	; 0x9a7c <AsebaVMStep+0x3ca>
     286:	0c 94 d8 39 	jmp	0x73b0	; 0x73b0 <__vector_29+0x738>
     28a:	0c 94 5d 4a 	jmp	0x94ba	; 0x94ba <AsebaVMDoBinaryOperation+0x70>
     28e:	0c 94 0b 1c 	jmp	0x3816	; 0x3816 <setGreenLed+0x66>
     292:	0c 94 61 4a 	jmp	0x94c2	; 0x94c2 <AsebaVMDoBinaryOperation+0x78>
     296:	0c 94 c0 39 	jmp	0x7380	; 0x7380 <__vector_29+0x708>
     29a:	0c 94 e3 39 	jmp	0x73c6	; 0x73c6 <__vector_29+0x74e>
     29e:	0c 94 90 53 	jmp	0xa720	; 0xa720 <AsebaVMDebugMessage+0x19c>
     2a2:	0c 94 df 54 	jmp	0xa9be	; 0xa9be <AsebaVMDebugMessage+0x43a>
     2a6:	0c 94 8f 0a 	jmp	0x151e	; 0x151e <AsebaNative_vecadd>
     2aa:	0c 94 e3 1b 	jmp	0x37c6	; 0x37c6 <setGreenLed+0x16>
     2ae:	0c 94 c6 09 	jmp	0x138c	; 0x138c <AsebaNative_veccopy>
     2b2:	0c 94 6b 0d 	jmp	0x1ad6	; 0x1ad6 <AsebaNative_vecdot>
     2b6:	0c 94 c2 54 	jmp	0xa984	; 0xa984 <AsebaVMDebugMessage+0x400>
     2ba:	0c 94 cc 4e 	jmp	0x9d98	; 0x9d98 <AsebaVMRun+0x170>
     2be:	0c 94 97 4a 	jmp	0x952e	; 0x952e <AsebaVMDoBinaryOperation+0xe4>
     2c2:	0c 94 64 4c 	jmp	0x98c8	; 0x98c8 <AsebaVMStep+0x216>
     2c6:	0c 94 a8 39 	jmp	0x7350	; 0x7350 <__vector_29+0x6d8>
     2ca:	0c 94 61 4f 	jmp	0x9ec2	; 0x9ec2 <AsebaVMRun+0x29a>
     2ce:	0c 94 10 53 	jmp	0xa620	; 0xa620 <AsebaVMDebugMessage+0x9c>
     2d2:	0c 94 cc 39 	jmp	0x7398	; 0x7398 <__vector_29+0x720>
     2d6:	0c 94 8f 50 	jmp	0xa11e	; 0xa11e <AsebaVMRun+0x4f6>
     2da:	0c 94 37 4a 	jmp	0x946e	; 0x946e <AsebaVMDoBinaryOperation+0x24>
     2de:	0c 94 ee 4f 	jmp	0x9fdc	; 0x9fdc <AsebaVMRun+0x3b4>
     2e2:	0c 94 0d 4f 	jmp	0x9e1a	; 0x9e1a <AsebaVMRun+0x1f2>
     2e6:	0c 94 ac 4e 	jmp	0x9d58	; 0x9d58 <AsebaVMRun+0x130>
     2ea:	0c 94 21 3a 	jmp	0x7442	; 0x7442 <__vector_29+0x7ca>
     2ee:	0c 94 f3 1b 	jmp	0x37e6	; 0x37e6 <setGreenLed+0x36>
     2f2:	0c 94 2d 0b 	jmp	0x165a	; 0x165a <AsebaNative_vecmul>
     2f6:	0c 94 b8 50 	jmp	0xa170	; 0xa170 <AsebaVMRun+0x548>
     2fa:	0c 94 9d 4d 	jmp	0x9b3a	; 0x9b3a <AsebaVMStep+0x488>
     2fe:	0c 94 7f 4b 	jmp	0x96fe	; 0x96fe <AsebaVMStep+0x4c>
     302:	0c 94 3f 4c 	jmp	0x987e	; 0x987e <AsebaVMStep+0x1cc>
     306:	0c 94 fb 1b 	jmp	0x37f6	; 0x37f6 <setGreenLed+0x46>
     30a:	0c 94 9d 39 	jmp	0x733a	; 0x733a <__vector_29+0x6c2>
     30e:	0c 94 74 50 	jmp	0xa0e8	; 0xa0e8 <AsebaVMRun+0x4c0>
     312:	0c 94 4c 4f 	jmp	0x9e98	; 0x9e98 <AsebaVMRun+0x270>
     316:	0c 94 91 39 	jmp	0x7322	; 0x7322 <__vector_29+0x6aa>
     31a:	0c 94 b8 4f 	jmp	0x9f70	; 0x9f70 <AsebaVMRun+0x348>
     31e:	0c 94 aa 54 	jmp	0xa954	; 0xa954 <AsebaVMDebugMessage+0x3d0>
     322:	0c 94 2c 50 	jmp	0xa058	; 0xa058 <AsebaVMRun+0x430>
     326:	0c 94 cc 54 	jmp	0xa998	; 0xa998 <AsebaVMDebugMessage+0x414>
     32a:	0c 94 84 0b 	jmp	0x1708	; 0x1708 <AsebaNative_vecdiv>
     32e:	0c 94 e7 39 	jmp	0x73ce	; 0x73ce <__vector_29+0x756>
     332:	0c 94 17 1c 	jmp	0x382e	; 0x382e <setGreenLed+0x7e>
     336:	0c 94 29 02 	jmp	0x452	; 0x452 <setObstacleAvoidance>
     33a:	0c 94 59 50 	jmp	0xa0b2	; 0xa0b2 <AsebaVMRun+0x48a>
     33e:	0c 94 7e 54 	jmp	0xa8fc	; 0xa8fc <AsebaVMDebugMessage+0x378>
     342:	0c 94 34 3a 	jmp	0x7468	; 0x7468 <__vector_29+0x7f0>
     346:	0c 94 a6 4a 	jmp	0x954c	; 0x954c <AsebaVMDoBinaryOperation+0x102>
     34a:	0c 94 2d 53 	jmp	0xa65a	; 0xa65a <AsebaVMDebugMessage+0xd6>
     34e:	0c 94 29 4d 	jmp	0x9a52	; 0x9a52 <AsebaVMStep+0x3a0>
     352:	0c 94 43 3a 	jmp	0x7486	; 0x7486 <__vector_29+0x80e>
     356:	0c 94 0b 13 	jmp	0x2616	; 0x2616 <AsebaNative_mathcos>
     35a:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <resetOdom>
     35e:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <AsebaNative_vecfill>
     362:	0c 94 6d 4a 	jmp	0x94da	; 0x94da <AsebaVMDoBinaryOperation+0x90>
     366:	0c 94 ba 4c 	jmp	0x9974	; 0x9974 <AsebaVMStep+0x2c2>
     36a:	0c 94 91 15 	jmp	0x2b22	; 0x2b22 <AsebaNative_mathsqrt>
     36e:	0c 94 9b 4a 	jmp	0x9536	; 0x9536 <AsebaVMDoBinaryOperation+0xec>
     372:	0c 94 b4 4a 	jmp	0x9568	; 0x9568 <AsebaVMDoBinaryOperation+0x11e>
     376:	0c 94 8a 4c 	jmp	0x9914	; 0x9914 <AsebaVMStep+0x262>
     37a:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <AsebaNative_vecmin>
     37e:	0c 94 0e 3a 	jmp	0x741c	; 0x741c <__vector_29+0x7a4>
     382:	0c 94 03 1c 	jmp	0x3806	; 0x3806 <setGreenLed+0x56>
     386:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <setCliffAvoidance>
     38a:	0c 94 4c 4a 	jmp	0x9498	; 0x9498 <AsebaVMDoBinaryOperation+0x4e>
     38e:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <AsebaNative_vecsub>

00000392 <__ctors_end>:
     392:	11 24       	eor	r1, r1
     394:	1f be       	out	0x3f, r1	; 63
     396:	cf ef       	ldi	r28, 0xFF	; 255
     398:	d1 e2       	ldi	r29, 0x21	; 33
     39a:	de bf       	out	0x3e, r29	; 62
     39c:	cd bf       	out	0x3d, r28	; 61
     39e:	00 e0       	ldi	r16, 0x00	; 0
     3a0:	0c bf       	out	0x3c, r16	; 60

000003a2 <__do_copy_data>:
     3a2:	1f e0       	ldi	r17, 0x0F	; 15
     3a4:	a0 e0       	ldi	r26, 0x00	; 0
     3a6:	b2 e0       	ldi	r27, 0x02	; 2
     3a8:	e4 eb       	ldi	r30, 0xB4	; 180
     3aa:	f4 eb       	ldi	r31, 0xB4	; 180
     3ac:	00 e0       	ldi	r16, 0x00	; 0
     3ae:	0b bf       	out	0x3b, r16	; 59
     3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <__do_copy_data+0x14>
     3b2:	07 90       	elpm	r0, Z+
     3b4:	0d 92       	st	X+, r0
     3b6:	a0 36       	cpi	r26, 0x60	; 96
     3b8:	b1 07       	cpc	r27, r17
     3ba:	d9 f7       	brne	.-10     	; 0x3b2 <__do_copy_data+0x10>

000003bc <__do_clear_bss>:
     3bc:	21 e2       	ldi	r18, 0x21	; 33
     3be:	a0 e6       	ldi	r26, 0x60	; 96
     3c0:	bf e0       	ldi	r27, 0x0F	; 15
     3c2:	01 c0       	rjmp	.+2      	; 0x3c6 <.do_clear_bss_start>

000003c4 <.do_clear_bss_loop>:
     3c4:	1d 92       	st	X+, r1

000003c6 <.do_clear_bss_start>:
     3c6:	a5 3b       	cpi	r26, 0xB5	; 181
     3c8:	b2 07       	cpc	r27, r18
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <.do_clear_bss_loop>
     3cc:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <main>
     3d0:	0c 94 58 5a 	jmp	0xb4b0	; 0xb4b0 <_exit>

000003d4 <__bad_interrupt>:
     3d4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000003d8 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
     3d8:	40 e9       	ldi	r20, 0x90	; 144
     3da:	50 e0       	ldi	r21, 0x00	; 0
     3dc:	6c e6       	ldi	r22, 0x6C	; 108
     3de:	7f e0       	ldi	r23, 0x0F	; 15
     3e0:	8a eb       	ldi	r24, 0xBA	; 186
     3e2:	90 e2       	ldi	r25, 0x20	; 32
     3e4:	0e 94 15 5a 	call	0xb42a	; 0xb42a <eeprom_update_block>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
     3e8:	65 e5       	ldi	r22, 0x55	; 85
     3ea:	7a ea       	ldi	r23, 0xAA	; 170
     3ec:	8a e6       	ldi	r24, 0x6A	; 106
     3ee:	9f e0       	ldi	r25, 0x0F	; 15
     3f0:	0c 94 37 5a 	jmp	0xb46e	; 0xb46e <eeprom_update_word>

000003f4 <readCalibrationFromFlash>:
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
     3f4:	40 e9       	ldi	r20, 0x90	; 144
     3f6:	50 e0       	ldi	r21, 0x00	; 0
     3f8:	6c e6       	ldi	r22, 0x6C	; 108
     3fa:	7f e0       	ldi	r23, 0x0F	; 15
     3fc:	8a eb       	ldi	r24, 0xBA	; 186
     3fe:	90 e2       	ldi	r25, 0x20	; 32
     400:	0c 94 f7 59 	jmp	0xb3ee	; 0xb3ee <eeprom_read_block>

00000404 <prox_network>:
		{1, "state"},
		{0,0},
	}
};
		
void prox_network(AsebaVMState * vm) {
     404:	dc 01       	movw	r26, r24
	int enable = vm->variables[AsebaNativePopArg(vm)];
     406:	18 96       	adiw	r26, 0x08	; 8
     408:	8d 91       	ld	r24, X+
     40a:	9c 91       	ld	r25, X
     40c:	19 97       	sbiw	r26, 0x09	; 9
     40e:	1c 96       	adiw	r26, 0x0c	; 12
     410:	ed 91       	ld	r30, X+
     412:	fc 91       	ld	r31, X
     414:	1d 97       	sbiw	r26, 0x0d	; 13
// support functions

/*! Return an argument on the stack, including the value of template parameters */
static inline sint16 AsebaNativePopArg(AsebaVMState *vm)
{
	return vm->stack[vm->sp--];
     416:	52 96       	adiw	r26, 0x12	; 18
     418:	2d 91       	ld	r18, X+
     41a:	3c 91       	ld	r19, X
     41c:	53 97       	sbiw	r26, 0x13	; 19
     41e:	a9 01       	movw	r20, r18
     420:	41 50       	subi	r20, 0x01	; 1
     422:	51 09       	sbc	r21, r1
     424:	53 96       	adiw	r26, 0x13	; 19
     426:	5c 93       	st	X, r21
     428:	4e 93       	st	-X, r20
     42a:	52 97       	sbiw	r26, 0x12	; 18
     42c:	22 0f       	add	r18, r18
     42e:	33 1f       	adc	r19, r19
     430:	e2 0f       	add	r30, r18
     432:	f3 1f       	adc	r31, r19
     434:	01 90       	ld	r0, Z+
     436:	f0 81       	ld	r31, Z
     438:	e0 2d       	mov	r30, r0
     43a:	ee 0f       	add	r30, r30
     43c:	ff 1f       	adc	r31, r31
     43e:	e8 0f       	add	r30, r24
     440:	f9 1f       	adc	r31, r25
	if(enable) {
     442:	80 81       	ld	r24, Z
     444:	91 81       	ldd	r25, Z+1	; 0x01
     446:	89 2b       	or	r24, r25
     448:	11 f4       	brne	.+4      	; 0x44e <prox_network+0x4a>
		irCommInit();
	} else {
		irCommDeinit();
     44a:	0c 94 bc 02 	jmp	0x578	; 0x578 <irCommDeinit>
};
		
void prox_network(AsebaVMState * vm) {
	int enable = vm->variables[AsebaNativePopArg(vm)];
	if(enable) {
		irCommInit();
     44e:	0c 94 81 02 	jmp	0x502	; 0x502 <irCommInit>

00000452 <setObstacleAvoidance>:
		{1, "state"},
		{0,0},
	}
};

void setObstacleAvoidance(AsebaVMState * vm) {
     452:	dc 01       	movw	r26, r24
	int enable = vm->variables[AsebaNativePopArg(vm)];
     454:	18 96       	adiw	r26, 0x08	; 8
     456:	8d 91       	ld	r24, X+
     458:	9c 91       	ld	r25, X
     45a:	19 97       	sbiw	r26, 0x09	; 9
     45c:	1c 96       	adiw	r26, 0x0c	; 12
     45e:	ed 91       	ld	r30, X+
     460:	fc 91       	ld	r31, X
     462:	1d 97       	sbiw	r26, 0x0d	; 13
     464:	52 96       	adiw	r26, 0x12	; 18
     466:	2d 91       	ld	r18, X+
     468:	3c 91       	ld	r19, X
     46a:	53 97       	sbiw	r26, 0x13	; 19
     46c:	a9 01       	movw	r20, r18
     46e:	41 50       	subi	r20, 0x01	; 1
     470:	51 09       	sbc	r21, r1
     472:	53 96       	adiw	r26, 0x13	; 19
     474:	5c 93       	st	X, r21
     476:	4e 93       	st	-X, r20
     478:	52 97       	sbiw	r26, 0x12	; 18
     47a:	22 0f       	add	r18, r18
     47c:	33 1f       	adc	r19, r19
     47e:	e2 0f       	add	r30, r18
     480:	f3 1f       	adc	r31, r19
     482:	01 90       	ld	r0, Z+
     484:	f0 81       	ld	r31, Z
     486:	e0 2d       	mov	r30, r0
     488:	ee 0f       	add	r30, r30
     48a:	ff 1f       	adc	r31, r31
     48c:	e8 0f       	add	r30, r24
     48e:	f9 1f       	adc	r31, r25
	if(enable) {
     490:	80 81       	ld	r24, Z
     492:	91 81       	ldd	r25, Z+1	; 0x01
     494:	89 2b       	or	r24, r25
     496:	11 f4       	brne	.+4      	; 0x49c <setObstacleAvoidance+0x4a>
		enableObstacleAvoidance();
	} else {
		disableObstacleAvoidance();
     498:	0c 94 c3 33 	jmp	0x6786	; 0x6786 <disableObstacleAvoidance>
};

void setObstacleAvoidance(AsebaVMState * vm) {
	int enable = vm->variables[AsebaNativePopArg(vm)];
	if(enable) {
		enableObstacleAvoidance();
     49c:	0c 94 bf 33 	jmp	0x677e	; 0x677e <enableObstacleAvoidance>

000004a0 <setCliffAvoidance>:
		{1, "state"},
		{0,0},
	}
};

void setCliffAvoidance(AsebaVMState * vm) {
     4a0:	dc 01       	movw	r26, r24
	int enable = vm->variables[AsebaNativePopArg(vm)];
     4a2:	18 96       	adiw	r26, 0x08	; 8
     4a4:	8d 91       	ld	r24, X+
     4a6:	9c 91       	ld	r25, X
     4a8:	19 97       	sbiw	r26, 0x09	; 9
     4aa:	1c 96       	adiw	r26, 0x0c	; 12
     4ac:	ed 91       	ld	r30, X+
     4ae:	fc 91       	ld	r31, X
     4b0:	1d 97       	sbiw	r26, 0x0d	; 13
     4b2:	52 96       	adiw	r26, 0x12	; 18
     4b4:	2d 91       	ld	r18, X+
     4b6:	3c 91       	ld	r19, X
     4b8:	53 97       	sbiw	r26, 0x13	; 19
     4ba:	a9 01       	movw	r20, r18
     4bc:	41 50       	subi	r20, 0x01	; 1
     4be:	51 09       	sbc	r21, r1
     4c0:	53 96       	adiw	r26, 0x13	; 19
     4c2:	5c 93       	st	X, r21
     4c4:	4e 93       	st	-X, r20
     4c6:	52 97       	sbiw	r26, 0x12	; 18
     4c8:	22 0f       	add	r18, r18
     4ca:	33 1f       	adc	r19, r19
     4cc:	e2 0f       	add	r30, r18
     4ce:	f3 1f       	adc	r31, r19
     4d0:	01 90       	ld	r0, Z+
     4d2:	f0 81       	ld	r31, Z
     4d4:	e0 2d       	mov	r30, r0
     4d6:	ee 0f       	add	r30, r30
     4d8:	ff 1f       	adc	r31, r31
     4da:	e8 0f       	add	r30, r24
     4dc:	f9 1f       	adc	r31, r25
	if(enable) {
     4de:	80 81       	ld	r24, Z
     4e0:	91 81       	ldd	r25, Z+1	; 0x01
     4e2:	89 2b       	or	r24, r25
     4e4:	11 f4       	brne	.+4      	; 0x4ea <setCliffAvoidance+0x4a>
		enableCliffAvoidance();
	} else {
		disableCliffAvoidance();
     4e6:	0c 94 ca 33 	jmp	0x6794	; 0x6794 <disableCliffAvoidance>
};

void setCliffAvoidance(AsebaVMState * vm) {
	int enable = vm->variables[AsebaNativePopArg(vm)];
	if(enable) {
		enableCliffAvoidance();
     4ea:	0c 94 c6 33 	jmp	0x678c	; 0x678c <enableCliffAvoidance>

000004ee <resetOdom>:
		{0,0},
	}
};

void resetOdom(AsebaVMState * vm) {
	resetOdometry();
     4ee:	0c 94 4d 44 	jmp	0x889a	; 0x889a <resetOdometry>

000004f2 <irCommInitReceiver>:
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 ee 17 	sts	0x17EE, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
     4f8:	80 93 eb 17 	sts	0x17EB, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
     4fc:	80 93 ed 17 	sts	0x17ED, r24
     500:	08 95       	ret

00000502 <irCommInit>:
	memset(irCommMinSensorValueAdc, 0xFF, 16);
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
}

void irCommInit() {
	irCommProxValuesAdc = irCommProxValuesBuff1;
     502:	83 e0       	ldi	r24, 0x03	; 3
     504:	9e e1       	ldi	r25, 0x1E	; 30
     506:	90 93 96 20 	sts	0x2096, r25
     50a:	80 93 95 20 	sts	0x2095, r24
	irCommProxValuesCurr = irCommProxValuesBuff2;
     50e:	83 e4       	ldi	r24, 0x43	; 67
     510:	9f e1       	ldi	r25, 0x1F	; 31
     512:	90 93 84 20 	sts	0x2084, r25
     516:	80 93 83 20 	sts	0x2083, r24
	irCommMaxSensorValueAdc = irCommMaxSensorValueBuff1;
     51a:	e2 e5       	ldi	r30, 0x52	; 82
     51c:	f1 e2       	ldi	r31, 0x21	; 33
     51e:	f0 93 76 21 	sts	0x2176, r31
     522:	e0 93 75 21 	sts	0x2175, r30
	irCommMaxSensorValueCurr = irCommMaxSensorValueBuff2;
     526:	80 ea       	ldi	r24, 0xA0	; 160
     528:	91 e2       	ldi	r25, 0x21	; 33
     52a:	90 93 e1 1d 	sts	0x1DE1, r25
     52e:	80 93 e0 1d 	sts	0x1DE0, r24
	irCommMinSensorValueAdc = irCommMinSensorValueBuff1;
     532:	85 e8       	ldi	r24, 0x85	; 133
     534:	90 e2       	ldi	r25, 0x20	; 32
     536:	90 93 02 1e 	sts	0x1E02, r25
     53a:	80 93 01 1e 	sts	0x1E01, r24
	irCommMinSensorValueCurr = irCommMinSensorValueBuff2;
     53e:	8a ea       	ldi	r24, 0xAA	; 170
     540:	90 e2       	ldi	r25, 0x20	; 32
     542:	90 93 df 1d 	sts	0x1DDF, r25
     546:	80 93 de 1d 	sts	0x1DDE, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
}

void irCommInitVars() {
	memset(irCommMaxSensorValueAdc, 0x00, 16);
     54a:	80 e1       	ldi	r24, 0x10	; 16
     54c:	df 01       	movw	r26, r30
     54e:	1d 92       	st	X+, r1
     550:	8a 95       	dec	r24
     552:	e9 f7       	brne	.-6      	; 0x54e <irCommInit+0x4c>
	memset(irCommMinSensorValueAdc, 0xFF, 16);
     554:	40 e1       	ldi	r20, 0x10	; 16
     556:	50 e0       	ldi	r21, 0x00	; 0
     558:	6f ef       	ldi	r22, 0xFF	; 255
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	85 e8       	ldi	r24, 0x85	; 133
     55e:	90 e2       	ldi	r25, 0x20	; 32
     560:	0e 94 f0 59 	call	0xb3e0	; 0xb3e0 <memset>
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
     564:	10 92 ec 17 	sts	0x17EC, r1
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
     568:	81 e0       	ldi	r24, 0x01	; 1
     56a:	80 93 ee 17 	sts	0x17EE, r24
	irCommState = IRCOMM_RX_IDLE_STATE;
     56e:	80 93 eb 17 	sts	0x17EB, r24
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
     572:	80 93 ed 17 	sts	0x17ED, r24
     576:	08 95       	ret

00000578 <irCommDeinit>:
	irCommInitVars();
	irCommInitReceiver();
}

void irCommDeinit() {
	irCommEnabled = IRCOMM_MODE_SENSORS_SAMPLING;
     578:	10 92 ee 17 	sts	0x17EE, r1
	irCommMode = IRCOMM_MODE_SENSORS_SAMPLING;
     57c:	10 92 ec 17 	sts	0x17EC, r1
     580:	08 95       	ret

00000582 <irCommTasks>:
}

void irCommTasks() {
     582:	6f 92       	push	r6
     584:	7f 92       	push	r7
     586:	8f 92       	push	r8
     588:	9f 92       	push	r9
     58a:	af 92       	push	r10
     58c:	bf 92       	push	r11
     58e:	cf 92       	push	r12
     590:	df 92       	push	r13
     592:	ef 92       	push	r14
     594:	ff 92       	push	r15
     596:	0f 93       	push	r16
     598:	1f 93       	push	r17
     59a:	cf 93       	push	r28
     59c:	df 93       	push	r29
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {
     59e:	10 91 ec 17 	lds	r17, 0x17EC
     5a2:	11 30       	cpi	r17, 0x01	; 1
     5a4:	09 f4       	brne	.+2      	; 0x5a8 <irCommTasks+0x26>
     5a6:	b7 c0       	rjmp	.+366    	; 0x716 <irCommTasks+0x194>
			case IRCOMM_RX_STOP:
				break;
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {
     5a8:	12 30       	cpi	r17, 0x02	; 2
     5aa:	79 f0       	breq	.+30     	; 0x5ca <irCommTasks+0x48>

		}

	}

}
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	ff 90       	pop	r15
     5b6:	ef 90       	pop	r14
     5b8:	df 90       	pop	r13
     5ba:	cf 90       	pop	r12
     5bc:	bf 90       	pop	r11
     5be:	af 90       	pop	r10
     5c0:	9f 90       	pop	r9
     5c2:	8f 90       	pop	r8
     5c4:	7f 90       	pop	r7
     5c6:	6f 90       	pop	r6
     5c8:	08 95       	ret
					
		}

	} else if(irCommMode==IRCOMM_MODE_TRANSMIT) {

		switch(irCommState) {
     5ca:	80 91 eb 17 	lds	r24, 0x17EB
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <irCommTasks+0x52>
     5d2:	6c c1       	rjmp	.+728    	; 0x8ac <irCommTasks+0x32a>
     5d4:	85 30       	cpi	r24, 0x05	; 5
     5d6:	51 f7       	brne	.-44     	; 0x5ac <irCommTasks+0x2a>
				break;

			case IRCOMM_TX_PREPARE_TRANSMISSION:				
				//updateBlueLed(255);
				//updateBlueLed(0);
				irCommTickCounter = getTime100MicroSec()-irCommTickCounter2;
     5d8:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
     5dc:	20 91 e1 17 	lds	r18, 0x17E1
     5e0:	30 91 e2 17 	lds	r19, 0x17E2
     5e4:	40 91 e3 17 	lds	r20, 0x17E3
     5e8:	50 91 e4 17 	lds	r21, 0x17E4
     5ec:	dc 01       	movw	r26, r24
     5ee:	cb 01       	movw	r24, r22
     5f0:	82 1b       	sub	r24, r18
     5f2:	93 0b       	sbc	r25, r19
     5f4:	a4 0b       	sbc	r26, r20
     5f6:	b5 0b       	sbc	r27, r21
     5f8:	80 93 e5 17 	sts	0x17E5, r24
     5fc:	90 93 e6 17 	sts	0x17E6, r25
     600:	a0 93 e7 17 	sts	0x17E7, r26
     604:	b0 93 e8 17 	sts	0x17E8, r27
				irCommTickCounter2 = getTime100MicroSec();
     608:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
     60c:	60 93 e1 17 	sts	0x17E1, r22
     610:	70 93 e2 17 	sts	0x17E2, r23
     614:	80 93 e3 17 	sts	0x17E3, r24
     618:	90 93 e4 17 	sts	0x17E4, r25
				irCommTxBitToTransmit[0] = 2;	// start bit 1
     61c:	10 93 e8 1d 	sts	0x1DE8, r17
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
     620:	83 e0       	ldi	r24, 0x03	; 3
     622:	80 93 e9 1d 	sts	0x1DE9, r24
     626:	80 91 be 17 	lds	r24, 0x17BE
     62a:	28 2f       	mov	r18, r24
     62c:	30 e0       	ldi	r19, 0x00	; 0
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     62e:	81 70       	andi	r24, 0x01	; 1
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     630:	80 93 f1 1d 	sts	0x1DF1, r24
     634:	81 11       	cpse	r24, r1
     636:	b8 c3       	rjmp	.+1904   	; 0xda8 <irCommTasks+0x826>
     638:	80 e0       	ldi	r24, 0x00	; 0
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     63a:	21 fb       	bst	r18, 1
     63c:	66 24       	eor	r6, r6
     63e:	60 f8       	bld	r6, 0
     640:	71 2c       	mov	r7, r1
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     642:	60 92 f0 1d 	sts	0x1DF0, r6
					if(irCommTempValue==1) {
						irCommTxCrc++;
     646:	91 e0       	ldi	r25, 0x01	; 1
     648:	98 0f       	add	r25, r24
     64a:	6a 94       	dec	r6
     64c:	67 28       	or	r6, r7
     64e:	09 f4       	brne	.+2      	; 0x652 <irCommTasks+0xd0>
     650:	af c3       	rjmp	.+1886   	; 0xdb0 <irCommTasks+0x82e>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     652:	22 fb       	bst	r18, 2
     654:	88 24       	eor	r8, r8
     656:	80 f8       	bld	r8, 0
     658:	91 2c       	mov	r9, r1
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     65a:	80 92 ef 1d 	sts	0x1DEF, r8
					if(irCommTempValue==1) {
						irCommTxCrc++;
     65e:	91 e0       	ldi	r25, 0x01	; 1
     660:	98 0f       	add	r25, r24
     662:	8a 94       	dec	r8
     664:	89 28       	or	r8, r9
     666:	09 f4       	brne	.+2      	; 0x66a <irCommTasks+0xe8>
     668:	a1 c3       	rjmp	.+1858   	; 0xdac <irCommTasks+0x82a>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     66a:	23 fb       	bst	r18, 3
     66c:	aa 24       	eor	r10, r10
     66e:	a0 f8       	bld	r10, 0
     670:	b1 2c       	mov	r11, r1
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     672:	a0 92 ee 1d 	sts	0x1DEE, r10
					if(irCommTempValue==1) {
						irCommTxCrc++;
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	98 0f       	add	r25, r24
     67a:	aa 94       	dec	r10
     67c:	ab 28       	or	r10, r11
     67e:	09 f4       	brne	.+2      	; 0x682 <irCommTasks+0x100>
     680:	9f c3       	rjmp	.+1854   	; 0xdc0 <irCommTasks+0x83e>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     682:	24 fb       	bst	r18, 4
     684:	cc 24       	eor	r12, r12
     686:	c0 f8       	bld	r12, 0
     688:	d1 2c       	mov	r13, r1
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     68a:	c0 92 ed 1d 	sts	0x1DED, r12
					if(irCommTempValue==1) {
						irCommTxCrc++;
     68e:	91 e0       	ldi	r25, 0x01	; 1
     690:	98 0f       	add	r25, r24
     692:	ca 94       	dec	r12
     694:	cd 28       	or	r12, r13
     696:	09 f4       	brne	.+2      	; 0x69a <irCommTasks+0x118>
     698:	91 c3       	rjmp	.+1826   	; 0xdbc <irCommTasks+0x83a>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     69a:	25 fb       	bst	r18, 5
     69c:	ee 24       	eor	r14, r14
     69e:	e0 f8       	bld	r14, 0
     6a0:	f1 2c       	mov	r15, r1
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     6a2:	e0 92 ec 1d 	sts	0x1DEC, r14
					if(irCommTempValue==1) {
						irCommTxCrc++;
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	98 0f       	add	r25, r24
     6aa:	ea 94       	dec	r14
     6ac:	ef 28       	or	r14, r15
     6ae:	09 f4       	brne	.+2      	; 0x6b2 <irCommTasks+0x130>
     6b0:	83 c3       	rjmp	.+1798   	; 0xdb8 <irCommTasks+0x836>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     6b2:	26 fb       	bst	r18, 6
     6b4:	44 27       	eor	r20, r20
     6b6:	40 f9       	bld	r20, 0
     6b8:	c4 2f       	mov	r28, r20
     6ba:	90 e0       	ldi	r25, 0x00	; 0
     6bc:	d9 2f       	mov	r29, r25
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     6be:	40 93 eb 1d 	sts	0x1DEB, r20
					if(irCommTempValue==1) {
						irCommTxCrc++;
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	98 0f       	add	r25, r24
     6c6:	21 97       	sbiw	r28, 0x01	; 1
     6c8:	09 f4       	brne	.+2      	; 0x6cc <irCommTasks+0x14a>
     6ca:	74 c3       	rjmp	.+1768   	; 0xdb4 <irCommTasks+0x832>
				irCommTickCounter2 = getTime100MicroSec();
				irCommTxBitToTransmit[0] = 2;	// start bit 1
				irCommTxBitToTransmit[1] = 3;	// start bit 2 
				irCommTxCrc = 0;
				for(i=0; i<8; i++) {
					irCommTempValue = (irCommTxByte>>i)&0x01;
     6cc:	22 0f       	add	r18, r18
     6ce:	23 2f       	mov	r18, r19
     6d0:	22 1f       	adc	r18, r18
     6d2:	33 0b       	sbc	r19, r19
					irCommTxBitToTransmit[9-i] = irCommTempValue;
     6d4:	20 93 ea 1d 	sts	0x1DEA, r18
					if(irCommTempValue==1) {
						irCommTxCrc++;
     6d8:	91 e0       	ldi	r25, 0x01	; 1
     6da:	98 0f       	add	r25, r24
     6dc:	30 93 ea 17 	sts	0x17EA, r19
     6e0:	20 93 e9 17 	sts	0x17E9, r18
     6e4:	21 30       	cpi	r18, 0x01	; 1
     6e6:	31 05       	cpc	r19, r1
     6e8:	09 f4       	brne	.+2      	; 0x6ec <irCommTasks+0x16a>
     6ea:	5c c3       	rjmp	.+1720   	; 0xda4 <irCommTasks+0x822>
					}
					//irCommTxBitToTransmit[9-i] = 2;
				}
				irCommTxCrc = irCommTxCrc % 4;
     6ec:	83 70       	andi	r24, 0x03	; 3
				irCommTxCrc = 4 - irCommTxCrc;
     6ee:	94 e0       	ldi	r25, 0x04	; 4
     6f0:	98 1b       	sub	r25, r24
     6f2:	89 2f       	mov	r24, r25
     6f4:	90 93 b8 17 	sts	0x17B8, r25
				irCommTxBitToTransmit[10] = (irCommTxCrc>>1)&0x01;
     6f8:	96 95       	lsr	r25
     6fa:	91 70       	andi	r25, 0x01	; 1
     6fc:	90 93 f2 1d 	sts	0x1DF2, r25
				irCommTxBitToTransmit[11] = irCommTxCrc&0x01;	
     700:	81 70       	andi	r24, 0x01	; 1
     702:	80 93 f3 1d 	sts	0x1DF3, r24
				irCommTxBitCount = 0;							
     706:	10 92 b7 17 	sts	0x17B7, r1
				irCommTxPulseState = 0;	
     70a:	10 92 b6 17 	sts	0x17B6, r1
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
     70e:	82 e0       	ldi	r24, 0x02	; 2
     710:	80 93 eb 17 	sts	0x17EB, r24
				break;
     714:	4b cf       	rjmp	.-362    	; 0x5ac <irCommTasks+0x2a>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
     716:	c0 91 eb 17 	lds	r28, 0x17EB
     71a:	c3 30       	cpi	r28, 0x03	; 3
     71c:	09 f4       	brne	.+2      	; 0x720 <irCommTasks+0x19e>
     71e:	fc c0       	rjmp	.+504    	; 0x918 <irCommTasks+0x396>
     720:	08 f0       	brcs	.+2      	; 0x724 <irCommTasks+0x1a2>
     722:	a5 c0       	rjmp	.+330    	; 0x86e <irCommTasks+0x2ec>
     724:	c1 30       	cpi	r28, 0x01	; 1
     726:	09 f4       	brne	.+2      	; 0x72a <irCommTasks+0x1a8>
     728:	c9 c2       	rjmp	.+1426   	; 0xcbc <irCommTasks+0x73a>
     72a:	c2 30       	cpi	r28, 0x02	; 2
     72c:	09 f0       	breq	.+2      	; 0x730 <irCommTasks+0x1ae>
     72e:	3e cf       	rjmp	.-388    	; 0x5ac <irCommTasks+0x2a>
     730:	e0 91 e0 1d 	lds	r30, 0x1DE0
     734:	f0 91 e1 1d 	lds	r31, 0x1DE1
     738:	a0 91 de 1d 	lds	r26, 0x1DDE
     73c:	b0 91 df 1d 	lds	r27, 0x1DDF
     740:	80 91 c0 17 	lds	r24, 0x17C0
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     744:	20 81       	ld	r18, Z
     746:	31 81       	ldd	r19, Z+1	; 0x01
     748:	4d 91       	ld	r20, X+
     74a:	5c 91       	ld	r21, X
     74c:	11 97       	sbiw	r26, 0x01	; 1
     74e:	24 1b       	sub	r18, r20
     750:	35 0b       	sbc	r19, r21
     752:	20 35       	cpi	r18, 0x50	; 80
     754:	31 05       	cpc	r19, r1
     756:	0c f0       	brlt	.+2      	; 0x75a <irCommTasks+0x1d8>
						irCommRxNumReceivingSensors++;
     758:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     75a:	22 81       	ldd	r18, Z+2	; 0x02
     75c:	33 81       	ldd	r19, Z+3	; 0x03
     75e:	12 96       	adiw	r26, 0x02	; 2
     760:	4d 91       	ld	r20, X+
     762:	5c 91       	ld	r21, X
     764:	13 97       	sbiw	r26, 0x03	; 3
     766:	24 1b       	sub	r18, r20
     768:	35 0b       	sbc	r19, r21
     76a:	20 35       	cpi	r18, 0x50	; 80
     76c:	31 05       	cpc	r19, r1
     76e:	0c f0       	brlt	.+2      	; 0x772 <irCommTasks+0x1f0>
						irCommRxNumReceivingSensors++;
     770:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     772:	24 81       	ldd	r18, Z+4	; 0x04
     774:	35 81       	ldd	r19, Z+5	; 0x05
     776:	14 96       	adiw	r26, 0x04	; 4
     778:	4d 91       	ld	r20, X+
     77a:	5c 91       	ld	r21, X
     77c:	15 97       	sbiw	r26, 0x05	; 5
     77e:	24 1b       	sub	r18, r20
     780:	35 0b       	sbc	r19, r21
     782:	20 35       	cpi	r18, 0x50	; 80
     784:	31 05       	cpc	r19, r1
     786:	0c f0       	brlt	.+2      	; 0x78a <irCommTasks+0x208>
						irCommRxNumReceivingSensors++;
     788:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     78a:	26 81       	ldd	r18, Z+6	; 0x06
     78c:	37 81       	ldd	r19, Z+7	; 0x07
     78e:	16 96       	adiw	r26, 0x06	; 6
     790:	4d 91       	ld	r20, X+
     792:	5c 91       	ld	r21, X
     794:	17 97       	sbiw	r26, 0x07	; 7
     796:	24 1b       	sub	r18, r20
     798:	35 0b       	sbc	r19, r21
     79a:	20 35       	cpi	r18, 0x50	; 80
     79c:	31 05       	cpc	r19, r1
     79e:	0c f0       	brlt	.+2      	; 0x7a2 <irCommTasks+0x220>
						irCommRxNumReceivingSensors++;
     7a0:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     7a2:	20 85       	ldd	r18, Z+8	; 0x08
     7a4:	31 85       	ldd	r19, Z+9	; 0x09
     7a6:	18 96       	adiw	r26, 0x08	; 8
     7a8:	4d 91       	ld	r20, X+
     7aa:	5c 91       	ld	r21, X
     7ac:	19 97       	sbiw	r26, 0x09	; 9
     7ae:	24 1b       	sub	r18, r20
     7b0:	35 0b       	sbc	r19, r21
     7b2:	20 35       	cpi	r18, 0x50	; 80
     7b4:	31 05       	cpc	r19, r1
     7b6:	0c f0       	brlt	.+2      	; 0x7ba <irCommTasks+0x238>
						irCommRxNumReceivingSensors++;
     7b8:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     7ba:	22 85       	ldd	r18, Z+10	; 0x0a
     7bc:	33 85       	ldd	r19, Z+11	; 0x0b
     7be:	1a 96       	adiw	r26, 0x0a	; 10
     7c0:	4d 91       	ld	r20, X+
     7c2:	5c 91       	ld	r21, X
     7c4:	1b 97       	sbiw	r26, 0x0b	; 11
     7c6:	24 1b       	sub	r18, r20
     7c8:	35 0b       	sbc	r19, r21
     7ca:	20 35       	cpi	r18, 0x50	; 80
     7cc:	31 05       	cpc	r19, r1
     7ce:	0c f0       	brlt	.+2      	; 0x7d2 <irCommTasks+0x250>
						irCommRxNumReceivingSensors++;
     7d0:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     7d2:	24 85       	ldd	r18, Z+12	; 0x0c
     7d4:	35 85       	ldd	r19, Z+13	; 0x0d
     7d6:	1c 96       	adiw	r26, 0x0c	; 12
     7d8:	4d 91       	ld	r20, X+
     7da:	5c 91       	ld	r21, X
     7dc:	1d 97       	sbiw	r26, 0x0d	; 13
     7de:	24 1b       	sub	r18, r20
     7e0:	35 0b       	sbc	r19, r21
     7e2:	20 35       	cpi	r18, 0x50	; 80
     7e4:	31 05       	cpc	r19, r1
     7e6:	0c f0       	brlt	.+2      	; 0x7ea <irCommTasks+0x268>
						irCommRxNumReceivingSensors++;
     7e8:	8f 5f       	subi	r24, 0xFF	; 255
				break;

			case IRCOMM_RX_MAX_SENSOR_STATE:
				// check from how many sensors the robot is receiving a possible message
				for(i=0; i<8; i++) {
					if((signed int)(irCommMaxSensorValueCurr[i]-irCommMinSensorValueCurr[i]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     7ea:	26 85       	ldd	r18, Z+14	; 0x0e
     7ec:	37 85       	ldd	r19, Z+15	; 0x0f
     7ee:	1e 96       	adiw	r26, 0x0e	; 14
     7f0:	4d 91       	ld	r20, X+
     7f2:	5c 91       	ld	r21, X
     7f4:	1f 97       	sbiw	r26, 0x0f	; 15
     7f6:	24 1b       	sub	r18, r20
     7f8:	35 0b       	sbc	r19, r21
     7fa:	20 35       	cpi	r18, 0x50	; 80
     7fc:	31 05       	cpc	r19, r1
     7fe:	0c f0       	brlt	.+2      	; 0x802 <irCommTasks+0x280>
						irCommRxNumReceivingSensors++;
     800:	8f 5f       	subi	r24, 0xFF	; 255
     802:	80 93 c0 17 	sts	0x17C0, r24
					}					
				}
				if(irCommRxNumReceivingSensors==0) {
     806:	81 11       	cpse	r24, r1
     808:	e7 c2       	rjmp	.+1486   	; 0xdd8 <irCommTasks+0x856>
					irCommRxStartBitDetected = 0;
     80a:	10 92 c7 17 	sts	0x17C7, r1
					currentProx = 0;
     80e:	10 92 53 1a 	sts	0x1A53, r1
					adcSaveDataTo = SKIP_SAMPLE;
     812:	85 e0       	ldi	r24, 0x05	; 5
     814:	80 93 be 19 	sts	0x19BE, r24
					adcSamplingState = 0;
     818:	10 92 bd 19 	sts	0x19BD, r1
					irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
     81c:	10 92 ec 17 	sts	0x17EC, r1
					irCommState = IRCOMM_RX_IDLE_STATE;	
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	80 93 eb 17 	sts	0x17EB, r24
					// start listening from the next sensor the next time I check for a start bit in order to get the same chance 
					// to all sensors, instead of always listening from the sensor that has the best signal
					if(irCommRxMaxSensor < 7) {
     826:	80 91 c1 17 	lds	r24, 0x17C1
     82a:	90 91 c2 17 	lds	r25, 0x17C2
     82e:	87 30       	cpi	r24, 0x07	; 7
     830:	91 05       	cpc	r25, r1
     832:	0c f0       	brlt	.+2      	; 0x836 <irCommTasks+0x2b4>
     834:	c9 c4       	rjmp	.+2450   	; 0x11c8 <irCommTasks+0xc46>
						irCommRxMaxSensor++;
     836:	01 96       	adiw	r24, 0x01	; 1
     838:	90 93 c2 17 	sts	0x17C2, r25
     83c:	80 93 c1 17 	sts	0x17C1, r24
     840:	80 91 c3 17 	lds	r24, 0x17C3
     844:	90 91 c4 17 	lds	r25, 0x17C4
				//setGreenLed(irCommRxMaxSensor, 1);			

				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     848:	80 35       	cpi	r24, 0x50	; 80
     84a:	91 05       	cpc	r25, r1
     84c:	0c f0       	brlt	.+2      	; 0x850 <irCommTasks+0x2ce>
     84e:	0e c4       	rjmp	.+2076   	; 0x106c <irCommTasks+0xaea>
						} else {
							irCommRxMaxSensor = 0;
						}	
					}

					irCommRxStartBitDetected = 0;
     850:	10 92 c7 17 	sts	0x17C7, r1
					//updateBlueLed(0);
					//usart0Transmit(irCommRxByte,1);		
					//updateBlueLed(255);			
				}
												
				currentProx = 0;
     854:	10 92 53 1a 	sts	0x1A53, r1
				adcSaveDataTo = SKIP_SAMPLE;
     858:	85 e0       	ldi	r24, 0x05	; 5
     85a:	80 93 be 19 	sts	0x19BE, r24
				adcSamplingState = 0;
     85e:	10 92 bd 19 	sts	0x19BD, r1
				irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;				
     862:	10 92 ec 17 	sts	0x17EC, r1
								
				irCommState = IRCOMM_RX_IDLE_STATE;
     866:	81 e0       	ldi	r24, 0x01	; 1
     868:	80 93 eb 17 	sts	0x17EB, r24

				break;
     86c:	9f ce       	rjmp	.-706    	; 0x5ac <irCommTasks+0x2a>
void irCommTasks() {
	int i = 0;

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
     86e:	c6 30       	cpi	r28, 0x06	; 6
     870:	09 f4       	brne	.+2      	; 0x874 <irCommTasks+0x2f2>
     872:	89 c1       	rjmp	.+786    	; 0xb86 <irCommTasks+0x604>
     874:	c7 30       	cpi	r28, 0x07	; 7
     876:	09 f0       	breq	.+2      	; 0x87a <irCommTasks+0x2f8>
     878:	99 ce       	rjmp	.-718    	; 0x5ac <irCommTasks+0x2a>
     87a:	90 91 fd 1d 	lds	r25, 0x1DFD
     87e:	80 91 de 17 	lds	r24, 0x17DE
     882:	89 0f       	add	r24, r25
					irCommState = IRCOMM_RX_WAITING_BIT;
				}							
				break;

			case IRCOMM_RX_CHECK_CRC:
				irCommRxCrcError = (irCommRxCrc + (irCommRxBitReceived[8]<<1) + irCommRxBitReceived[9])&0x03;
     884:	90 91 fc 1d 	lds	r25, 0x1DFC
     888:	99 0f       	add	r25, r25
     88a:	89 0f       	add	r24, r25
     88c:	83 70       	andi	r24, 0x03	; 3
     88e:	80 93 ce 17 	sts	0x17CE, r24
				if(irCommRxCrcError==0) {
     892:	81 11       	cpse	r24, r1
     894:	df cf       	rjmp	.-66     	; 0x854 <irCommTasks+0x2d2>
					irCommRxLastDataReceived = irCommRxByte;
     896:	80 91 cd 17 	lds	r24, 0x17CD
     89a:	80 93 ca 17 	sts	0x17CA, r24
					irCommRxReceivingSensor = irCommRxMaxSensor;
     89e:	80 91 c1 17 	lds	r24, 0x17C1
     8a2:	80 93 1d 03 	sts	0x031D, r24
					irCommRxDataAvailable = 1;
     8a6:	10 93 c9 17 	sts	0x17C9, r17
     8aa:	d4 cf       	rjmp	.-88     	; 0x854 <irCommTasks+0x2d2>
				irCommState = IRCOMM_TX_COMPUTE_TIMINGS;				
				break;

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
     8ac:	90 91 b7 17 	lds	r25, 0x17B7
     8b0:	e9 2f       	mov	r30, r25
     8b2:	f0 e0       	ldi	r31, 0x00	; 0
     8b4:	e8 51       	subi	r30, 0x18	; 24
     8b6:	f2 4e       	sbci	r31, 0xE2	; 226
     8b8:	80 81       	ld	r24, Z
     8ba:	83 30       	cpi	r24, 0x03	; 3
     8bc:	09 f4       	brne	.+2      	; 0x8c0 <irCommTasks+0x33e>
     8be:	82 c2       	rjmp	.+1284   	; 0xdc4 <irCommTasks+0x842>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
     8c0:	82 30       	cpi	r24, 0x02	; 2
     8c2:	09 f1       	breq	.+66     	; 0x906 <irCommTasks+0x384>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
     8c4:	81 30       	cpi	r24, 0x01	; 1
     8c6:	09 f4       	brne	.+2      	; 0x8ca <irCommTasks+0x348>
     8c8:	9e c4       	rjmp	.+2364   	; 0x1206 <irCommTasks+0xc84>
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
				} else {
					irCommTxDuration = IRCOMM_BIT0_DURATION;						
     8ca:	2e e1       	ldi	r18, 0x1E	; 30
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	30 93 b5 17 	sts	0x17B5, r19
     8d2:	20 93 b4 17 	sts	0x17B4, r18
					irCommTxSwitchCount = IRCOMM_BIT0_SWITCH_COUNT;
     8d6:	88 e0       	ldi	r24, 0x08	; 8
     8d8:	80 93 b3 17 	sts	0x17B3, r24
				}
				if(irCommTxBitCount == 0) {
     8dc:	91 11       	cpse	r25, r1
     8de:	09 c0       	rjmp	.+18     	; 0x8f2 <irCommTasks+0x370>
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
     8e0:	80 91 b0 17 	lds	r24, 0x17B0
     8e4:	81 11       	cpse	r24, r1
     8e6:	3e c3       	rjmp	.+1660   	; 0xf64 <irCommTasks+0x9e2>
						PORTA = 0xAA;
     8e8:	8a ea       	ldi	r24, 0xAA	; 170
     8ea:	82 b9       	out	0x02, r24	; 2
					} else {
						PORTA = 0x55;
					}					
					irCommTxPulseState = 1;
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	80 93 b6 17 	sts	0x17B6, r24
				}
				irCommTxDurationCycle = 0;
     8f2:	10 92 b1 17 	sts	0x17B1, r1
				irCommTxSwitchCounter = 0;						
     8f6:	10 92 b2 17 	sts	0x17B2, r1
				irCommState = IRCOMM_TX_TRANSMIT_BIT;
     8fa:	83 e0       	ldi	r24, 0x03	; 3
     8fc:	80 93 eb 17 	sts	0x17EB, r24
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
     900:	80 93 bf 17 	sts	0x17BF, r24
				break;
     904:	53 ce       	rjmp	.-858    	; 0x5ac <irCommTasks+0x2a>
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
     906:	28 e7       	ldi	r18, 0x78	; 120
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	30 93 b5 17 	sts	0x17B5, r19
     90e:	20 93 b4 17 	sts	0x17B4, r18
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
     912:	80 93 b3 17 	sts	0x17B3, r24
     916:	e2 cf       	rjmp	.-60     	; 0x8dc <irCommTasks+0x35a>
												
				break;

			case IRCOMM_RX_DETECT_START_BIT_STATE:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
     918:	10 92 da 17 	sts	0x17DA, r1
     91c:	10 92 db 17 	sts	0x17DB, r1
     920:	10 92 dc 17 	sts	0x17DC, r1
     924:	10 92 dd 17 	sts	0x17DD, r1
				irCommTempMin = 1024;
     928:	80 e0       	ldi	r24, 0x00	; 0
     92a:	94 e0       	ldi	r25, 0x04	; 4
     92c:	90 93 d7 17 	sts	0x17D7, r25
     930:	80 93 d6 17 	sts	0x17D6, r24
				irCommTempMax = 0;
     934:	10 92 d9 17 	sts	0x17D9, r1
     938:	10 92 d8 17 	sts	0x17D8, r1
				irCommShiftCount = 0;
     93c:	10 92 d5 17 	sts	0x17D5, r1
				irCommComputeShift = 1;												
     940:	10 93 d4 17 	sts	0x17D4, r17
     944:	a1 2c       	mov	r10, r1
     946:	b0 90 c5 17 	lds	r11, 0x17C5
     94a:	90 90 c6 17 	lds	r9, 0x17C6
     94e:	e0 91 c1 17 	lds	r30, 0x17C1
     952:	f0 91 c2 17 	lds	r31, 0x17C2
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	80 91 83 20 	lds	r24, 0x2083
     95e:	90 91 84 20 	lds	r25, 0x2084
     962:	e8 0f       	add	r30, r24
     964:	f9 1f       	adc	r31, r25
     966:	c7 e7       	ldi	r28, 0x77	; 119
     968:	d1 e2       	ldi	r29, 0x21	; 33
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];		
     96a:	de 01       	movw	r26, r28
     96c:	77 24       	eor	r7, r7
     96e:	73 94       	inc	r7
     970:	40 e0       	ldi	r20, 0x00	; 0
     972:	50 e0       	ldi	r21, 0x00	; 0
     974:	ba 01       	movw	r22, r20
     976:	0a c0       	rjmp	.+20     	; 0x98c <irCommTasks+0x40a>
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
     978:	22 e0       	ldi	r18, 0x02	; 2
     97a:	72 16       	cp	r7, r18
     97c:	09 f4       	brne	.+2      	; 0x980 <irCommTasks+0x3fe>
     97e:	6d c0       	rjmp	.+218    	; 0xa5a <irCommTasks+0x4d8>
     980:	70 96       	adiw	r30, 0x10	; 16
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				irCommShiftCount = 0;
				irCommComputeShift = 1;												
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
     982:	21 e2       	ldi	r18, 0x21	; 33
     984:	af 39       	cpi	r26, 0x9F	; 159
     986:	b2 07       	cpc	r27, r18
     988:	09 f4       	brne	.+2      	; 0x98c <irCommTasks+0x40a>
     98a:	aa c0       	rjmp	.+340    	; 0xae0 <irCommTasks+0x55e>
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];		
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	8d 93       	st	X+, r24
     992:	9d 93       	st	X+, r25

					irCommProxSum += irCommMaxSensorSignal[i];
     994:	6c 01       	movw	r12, r24
     996:	09 2e       	mov	r0, r25
     998:	00 0c       	add	r0, r0
     99a:	ee 08       	sbc	r14, r14
     99c:	ff 08       	sbc	r15, r15
     99e:	4c 0d       	add	r20, r12
     9a0:	5d 1d       	adc	r21, r13
     9a2:	6e 1d       	adc	r22, r14
     9a4:	7f 1d       	adc	r23, r15
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
     9a6:	01 e0       	ldi	r16, 0x01	; 1
     9a8:	70 12       	cpse	r7, r16
     9aa:	e6 cf       	rjmp	.-52     	; 0x978 <irCommTasks+0x3f6>
						irCommShiftCount++;								
     9ac:	88 24       	eor	r8, r8
     9ae:	83 94       	inc	r8
     9b0:	8a 0c       	add	r8, r10
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
     9b2:	e0 90 d6 17 	lds	r14, 0x17D6
     9b6:	f0 90 d7 17 	lds	r15, 0x17D7
     9ba:	8e 15       	cp	r24, r14
     9bc:	9f 05       	cpc	r25, r15
     9be:	ac f4       	brge	.+42     	; 0x9ea <irCommTasks+0x468>
							irCommTempMin = irCommMaxSensorSignal[i];
     9c0:	90 93 d7 17 	sts	0x17D7, r25
     9c4:	80 93 d6 17 	sts	0x17D6, r24
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
     9c8:	20 91 d8 17 	lds	r18, 0x17D8
     9cc:	30 91 d9 17 	lds	r19, 0x17D9
     9d0:	28 17       	cp	r18, r24
     9d2:	39 07       	cpc	r19, r25
     9d4:	6c f5       	brge	.+90     	; 0xa30 <irCommTasks+0x4ae>
							irCommTempMax = irCommMaxSensorSignal[i];
     9d6:	90 93 d9 17 	sts	0x17D9, r25
     9da:	80 93 d8 17 	sts	0x17D8, r24
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
     9de:	10 92 ea 17 	sts	0x17EA, r1
     9e2:	10 92 e9 17 	sts	0x17E9, r1
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];		

					irCommProxSum += irCommMaxSensorSignal[i];
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
     9e6:	a8 2c       	mov	r10, r8
     9e8:	cb cf       	rjmp	.-106    	; 0x980 <irCommTasks+0x3fe>
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
							irCommTempMin = irCommMaxSensorSignal[i];
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
     9ea:	20 91 d8 17 	lds	r18, 0x17D8
     9ee:	30 91 d9 17 	lds	r19, 0x17D9
     9f2:	28 17       	cp	r18, r24
     9f4:	39 07       	cpc	r19, r25
     9f6:	ec f4       	brge	.+58     	; 0xa32 <irCommTasks+0x4b0>
							irCommTempMax = irCommMaxSensorSignal[i];
     9f8:	90 93 d9 17 	sts	0x17D9, r25
     9fc:	80 93 d8 17 	sts	0x17D8, r24
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
     a00:	9c 01       	movw	r18, r24
     a02:	2e 19       	sub	r18, r14
     a04:	3f 09       	sbc	r19, r15
     a06:	30 93 ea 17 	sts	0x17EA, r19
     a0a:	20 93 e9 17 	sts	0x17E9, r18
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {							
     a0e:	20 35       	cpi	r18, 0x50	; 80
     a10:	31 05       	cpc	r19, r1
     a12:	4c f3       	brlt	.-46     	; 0x9e6 <irCommTasks+0x464>

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
								irCommRxPeakHighToLow = 0;
     a14:	91 2c       	mov	r9, r1
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
     a16:	90 93 d7 17 	sts	0x17D7, r25
     a1a:	80 93 d6 17 	sts	0x17D6, r24
							irCommTempMax = irCommMaxSensorSignal[i];
     a1e:	90 93 d9 17 	sts	0x17D9, r25
     a22:	80 93 d8 17 	sts	0x17D8, r24
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
     a26:	b1 2c       	mov	r11, r1
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
							irCommComputeShift = 2;
     a28:	12 e0       	ldi	r17, 0x02	; 2
								irCommRxPeakHighToLow = 1;
							} else {
								//updateGreenLed(0);
							}
							irCommTempMin = irCommMaxSensorSignal[i];	// otherwise I cannot detect spike of one sample (peakDuration=1), related to sensors sampling
							irCommTempMax = irCommMaxSensorSignal[i];
     a2a:	32 e0       	ldi	r19, 0x02	; 2
     a2c:	73 2e       	mov	r7, r19
     a2e:	a8 cf       	rjmp	.-176    	; 0x980 <irCommTasks+0x3fe>
					if(irCommComputeShift == 1) {	// compute the shift between the rx sampling and tx signal
						irCommShiftCount++;								
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
							irCommTempMin = irCommMaxSensorSignal[i];
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
     a30:	7c 01       	movw	r14, r24
							irCommTempMax = irCommMaxSensorSignal[i];
						}
						irCommTempValue = (irCommTempMax - irCommTempMin);						
     a32:	69 01       	movw	r12, r18
     a34:	ce 18       	sub	r12, r14
     a36:	df 08       	sbc	r13, r15
     a38:	d0 92 ea 17 	sts	0x17EA, r13
     a3c:	c0 92 e9 17 	sts	0x17E9, r12
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {							
     a40:	00 e5       	ldi	r16, 0x50	; 80
     a42:	c0 16       	cp	r12, r16
     a44:	d1 04       	cpc	r13, r1
     a46:	7c f2       	brlt	.-98     	; 0x9e6 <irCommTasks+0x464>

							if(irCommMaxSensorSignal[i] == irCommTempMax) {
     a48:	82 17       	cp	r24, r18
     a4a:	93 07       	cpc	r25, r19
     a4c:	19 f3       	breq	.-58     	; 0xa14 <irCommTasks+0x492>
								irCommRxPeakHighToLow = 0;
							} else if(irCommMaxSensorSignal[i] == irCommTempMin) {
     a4e:	8e 15       	cp	r24, r14
     a50:	9f 05       	cpc	r25, r15
     a52:	09 f7       	brne	.-62     	; 0xa16 <irCommTasks+0x494>
								irCommRxPeakHighToLow = 1;
     a54:	99 24       	eor	r9, r9
     a56:	93 94       	inc	r9
     a58:	de cf       	rjmp	.-68     	; 0xa16 <irCommTasks+0x494>
							irCommComputeShift = 2;
							irCommShiftCount--;	// the current sample is already part of the signal start thus do not skip it
							irCommRxStartPeakDuration = 0;
						}
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
     a5a:	b3 94       	inc	r11
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
     a5c:	e0 90 d6 17 	lds	r14, 0x17D6
     a60:	f0 90 d7 17 	lds	r15, 0x17D7
     a64:	8e 15       	cp	r24, r14
     a66:	9f 05       	cpc	r25, r15
     a68:	84 f4       	brge	.+32     	; 0xa8a <irCommTasks+0x508>
							irCommTempMin = irCommMaxSensorSignal[i];
     a6a:	90 93 d7 17 	sts	0x17D7, r25
     a6e:	80 93 d6 17 	sts	0x17D6, r24
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
     a72:	20 91 d8 17 	lds	r18, 0x17D8
     a76:	30 91 d9 17 	lds	r19, 0x17D9
     a7a:	28 17       	cp	r18, r24
     a7c:	39 07       	cpc	r19, r25
     a7e:	1c f5       	brge	.+70     	; 0xac6 <irCommTasks+0x544>
							irCommTempMax = irCommMaxSensorSignal[i];
     a80:	90 93 d9 17 	sts	0x17D9, r25
     a84:	80 93 d8 17 	sts	0x17D8, r24
     a88:	7b cf       	rjmp	.-266    	; 0x980 <irCommTasks+0x3fe>
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
							irCommTempMin = irCommMaxSensorSignal[i];
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
     a8a:	20 91 d8 17 	lds	r18, 0x17D8
     a8e:	30 91 d9 17 	lds	r19, 0x17D9
     a92:	28 17       	cp	r18, r24
     a94:	39 07       	cpc	r19, r25
     a96:	c4 f4       	brge	.+48     	; 0xac8 <irCommTasks+0x546>
							irCommTempMax = irCommMaxSensorSignal[i];
     a98:	90 93 d9 17 	sts	0x17D9, r25
     a9c:	80 93 d8 17 	sts	0x17D8, r24
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     aa0:	9c 01       	movw	r18, r24
     aa2:	2e 19       	sub	r18, r14
     aa4:	3f 09       	sbc	r19, r15
     aa6:	20 35       	cpi	r18, 0x50	; 80
     aa8:	31 05       	cpc	r19, r1
     aaa:	0c f4       	brge	.+2      	; 0xaae <irCommTasks+0x52c>
     aac:	69 cf       	rjmp	.-302    	; 0x980 <irCommTasks+0x3fe>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
     aae:	01 e0       	ldi	r16, 0x01	; 1
     ab0:	90 16       	cp	r9, r16
     ab2:	31 f0       	breq	.+12     	; 0xac0 <irCommTasks+0x53e>
								irCommComputeShift = 0;
							} else if((irCommMaxSensorSignal[i]==irCommTempMin) && (irCommRxPeakHighToLow==0)) {
     ab4:	8e 15       	cp	r24, r14
     ab6:	9f 05       	cpc	r25, r15
     ab8:	09 f0       	breq	.+2      	; 0xabc <irCommTasks+0x53a>
     aba:	62 cf       	rjmp	.-316    	; 0x980 <irCommTasks+0x3fe>
     abc:	91 10       	cpse	r9, r1
     abe:	60 cf       	rjmp	.-320    	; 0x980 <irCommTasks+0x3fe>
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
								irCommComputeShift = 0;
     ac0:	10 e0       	ldi	r17, 0x00	; 0
     ac2:	71 2c       	mov	r7, r1
     ac4:	5d cf       	rjmp	.-326    	; 0x980 <irCommTasks+0x3fe>
					 } else if(irCommComputeShift == 2) {		
					 	irCommRxStartPeakDuration++;					
						if(irCommTempMin > irCommMaxSensorSignal[i]) {
							irCommTempMin = irCommMaxSensorSignal[i];
						}
						if(irCommTempMax < irCommMaxSensorSignal[i]) {
     ac6:	7c 01       	movw	r14, r24
							irCommTempMax = irCommMaxSensorSignal[i];
						}	
						if((irCommTempMax - irCommTempMin) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     ac8:	69 01       	movw	r12, r18
     aca:	ce 18       	sub	r12, r14
     acc:	df 08       	sbc	r13, r15
     ace:	00 e5       	ldi	r16, 0x50	; 80
     ad0:	c0 16       	cp	r12, r16
     ad2:	d1 04       	cpc	r13, r1
     ad4:	0c f4       	brge	.+2      	; 0xad8 <irCommTasks+0x556>
     ad6:	54 cf       	rjmp	.-344    	; 0x980 <irCommTasks+0x3fe>
							if((irCommMaxSensorSignal[i]==irCommTempMax) && (irCommRxPeakHighToLow==1)) {
     ad8:	82 17       	cp	r24, r18
     ada:	93 07       	cpc	r25, r19
     adc:	59 f7       	brne	.-42     	; 0xab4 <irCommTasks+0x532>
     ade:	e7 cf       	rjmp	.-50     	; 0xaae <irCommTasks+0x52c>
     ae0:	90 92 c6 17 	sts	0x17C6, r9
     ae4:	10 93 d4 17 	sts	0x17D4, r17
     ae8:	a0 92 d5 17 	sts	0x17D5, r10
     aec:	b0 92 c5 17 	sts	0x17C5, r11
     af0:	40 93 da 17 	sts	0x17DA, r20
     af4:	50 93 db 17 	sts	0x17DB, r21
     af8:	60 93 dc 17 	sts	0x17DC, r22
     afc:	70 93 dd 17 	sts	0x17DD, r23
				}					
				
				//if(irCommComputeShift != 0) {	// it should not be never 1 because the difference between min and max in the current signal
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
     b00:	cb 01       	movw	r24, r22
     b02:	ba 01       	movw	r22, r20
     b04:	24 e1       	ldi	r18, 0x14	; 20
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e0       	ldi	r20, 0x00	; 0
     b0a:	50 e0       	ldi	r21, 0x00	; 0
     b0c:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
     b10:	da 01       	movw	r26, r20
     b12:	c9 01       	movw	r24, r18
     b14:	a9 01       	movw	r20, r18
     b16:	90 93 d3 17 	sts	0x17D3, r25
     b1a:	80 93 d2 17 	sts	0x17D2, r24
				
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;					
     b1e:	88 81       	ld	r24, Y
     b20:	99 81       	ldd	r25, Y+1	; 0x01
     b22:	84 1b       	sub	r24, r20
     b24:	95 0b       	sbc	r25, r21
     b26:	89 93       	st	Y+, r24
     b28:	99 93       	st	Y+, r25
					//updateRedLed(0);			// is at least IRCOMM_DETECTION_AMPLITUDE_THR (checked in the previous state)
				//}
				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
				
				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
     b2a:	81 e2       	ldi	r24, 0x21	; 33
     b2c:	cf 39       	cpi	r28, 0x9F	; 159
     b2e:	d8 07       	cpc	r29, r24
     b30:	b1 f7       	brne	.-20     	; 0xb1e <irCommTasks+0x59c>
					irCommMaxSensorSignal[i] -= irCommProxMean;					
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
     b32:	80 91 77 21 	lds	r24, 0x2177
     b36:	90 91 78 21 	lds	r25, 0x2178
     b3a:	18 16       	cp	r1, r24
     b3c:	19 06       	cpc	r1, r25
     b3e:	0c f0       	brlt	.+2      	; 0xb42 <irCommTasks+0x5c0>
     b40:	83 c3       	rjmp	.+1798   	; 0x1248 <irCommTasks+0xcc6>
					irCommSignalState = 1;
     b42:	81 e0       	ldi	r24, 0x01	; 1
     b44:	80 93 d1 17 	sts	0x17D1, r24
     b48:	21 e0       	ldi	r18, 0x01	; 1
     b4a:	58 2f       	mov	r21, r24
     b4c:	e9 e7       	ldi	r30, 0x79	; 121
     b4e:	f1 e2       	ldi	r31, 0x21	; 33
				} else {
					irCommSignalState = -1;
     b50:	40 e0       	ldi	r20, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	07 c0       	rjmp	.+14     	; 0xb64 <irCommTasks+0x5e2>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
     b56:	27 fd       	sbrc	r18, 7
     b58:	11 c0       	rjmp	.+34     	; 0xb7c <irCommTasks+0x5fa>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
     b5a:	91 e2       	ldi	r25, 0x21	; 33
     b5c:	ef 39       	cpi	r30, 0x9F	; 159
     b5e:	f9 07       	cpc	r31, r25
     b60:	09 f4       	brne	.+2      	; 0xb64 <irCommTasks+0x5e2>
     b62:	d3 c0       	rjmp	.+422    	; 0xd0a <irCommTasks+0x788>
					if(irCommMaxSensorSignal[i] > 0) {
     b64:	81 91       	ld	r24, Z+
     b66:	91 91       	ld	r25, Z+
     b68:	18 16       	cp	r1, r24
     b6a:	19 06       	cpc	r1, r25
     b6c:	a4 f3       	brlt	.-24     	; 0xb56 <irCommTasks+0x5d4>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
     b6e:	21 30       	cpi	r18, 0x01	; 1
     b70:	a1 f7       	brne	.-24     	; 0xb5a <irCommTasks+0x5d8>
							irCommSignalState = -1;
							irCommSwitchCount++;
     b72:	3f 5f       	subi	r19, 0xFF	; 255
     b74:	43 2f       	mov	r20, r19
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
     b76:	5f ef       	ldi	r21, 0xFF	; 255
							irCommSwitchCount++;
     b78:	2f ef       	ldi	r18, 0xFF	; 255
     b7a:	ef cf       	rjmp	.-34     	; 0xb5a <irCommTasks+0x5d8>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
     b7c:	3f 5f       	subi	r19, 0xFF	; 255
     b7e:	43 2f       	mov	r20, r19
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
     b80:	51 e0       	ldi	r21, 0x01	; 1
							irCommSwitchCount++;
     b82:	21 e0       	ldi	r18, 0x01	; 1
     b84:	ea cf       	rjmp	.-44     	; 0xb5a <irCommTasks+0x5d8>
			case IRCOMM_RX_WAITING_BIT:
				break;

			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
     b86:	10 92 da 17 	sts	0x17DA, r1
     b8a:	10 92 db 17 	sts	0x17DB, r1
     b8e:	10 92 dc 17 	sts	0x17DC, r1
     b92:	10 92 dd 17 	sts	0x17DD, r1
				irCommTempMin = 1024;
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	94 e0       	ldi	r25, 0x04	; 4
     b9a:	90 93 d7 17 	sts	0x17D7, r25
     b9e:	80 93 d6 17 	sts	0x17D6, r24
				irCommTempMax = 0;
     ba2:	10 92 d9 17 	sts	0x17D9, r1
     ba6:	10 92 d8 17 	sts	0x17D8, r1
     baa:	e0 91 c1 17 	lds	r30, 0x17C1
     bae:	f0 91 c2 17 	lds	r31, 0x17C2
     bb2:	ee 0f       	add	r30, r30
     bb4:	ff 1f       	adc	r31, r31
     bb6:	80 91 83 20 	lds	r24, 0x2083
     bba:	90 91 84 20 	lds	r25, 0x2084
     bbe:	e8 0f       	add	r30, r24
     bc0:	f9 1f       	adc	r31, r25
     bc2:	c7 e7       	ldi	r28, 0x77	; 119
     bc4:	d1 e2       	ldi	r29, 0x21	; 33
     bc6:	de 01       	movw	r26, r28
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	00 e0       	ldi	r16, 0x00	; 0
     bce:	14 e0       	ldi	r17, 0x04	; 4
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	ba 01       	movw	r22, r20
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] = irCommProxValuesCurr[irCommRxMaxSensor+i*8];
     bd6:	80 81       	ld	r24, Z
     bd8:	91 81       	ldd	r25, Z+1	; 0x01
     bda:	8d 93       	st	X+, r24
     bdc:	9d 93       	st	X+, r25
					irCommProxSum += irCommMaxSensorSignal[i];
     bde:	6c 01       	movw	r12, r24
     be0:	09 2e       	mov	r0, r25
     be2:	00 0c       	add	r0, r0
     be4:	ee 08       	sbc	r14, r14
     be6:	ff 08       	sbc	r15, r15
     be8:	4c 0d       	add	r20, r12
     bea:	5d 1d       	adc	r21, r13
     bec:	6e 1d       	adc	r22, r14
     bee:	7f 1d       	adc	r23, r15
					if(irCommTempMin > irCommMaxSensorSignal[i]) {
     bf0:	80 17       	cp	r24, r16
     bf2:	91 07       	cpc	r25, r17
     bf4:	2c f4       	brge	.+10     	; 0xc00 <irCommTasks+0x67e>
						irCommTempMin = irCommMaxSensorSignal[i];
     bf6:	90 93 d7 17 	sts	0x17D7, r25
     bfa:	80 93 d6 17 	sts	0x17D6, r24
     bfe:	8c 01       	movw	r16, r24
					}
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
     c00:	28 17       	cp	r18, r24
     c02:	39 07       	cpc	r19, r25
     c04:	2c f4       	brge	.+10     	; 0xc10 <irCommTasks+0x68e>
						irCommTempMax = irCommMaxSensorSignal[i];
     c06:	90 93 d9 17 	sts	0x17D9, r25
     c0a:	80 93 d8 17 	sts	0x17D8, r24
     c0e:	9c 01       	movw	r18, r24
     c10:	70 96       	adiw	r30, 0x10	; 16
			case IRCOMM_RX_READ_BIT:
				// extract signal from the sensor with higher amplitude and compute the signal mean
				irCommProxSum = 0;
				irCommTempMin = 1024;
				irCommTempMax = 0;
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
     c12:	81 e2       	ldi	r24, 0x21	; 33
     c14:	af 39       	cpi	r26, 0x9F	; 159
     c16:	b8 07       	cpc	r27, r24
     c18:	f1 f6       	brne	.-68     	; 0xbd6 <irCommTasks+0x654>
     c1a:	40 93 da 17 	sts	0x17DA, r20
     c1e:	50 93 db 17 	sts	0x17DB, r21
     c22:	60 93 dc 17 	sts	0x17DC, r22
     c26:	70 93 dd 17 	sts	0x17DD, r23
					if(irCommTempMax < irCommMaxSensorSignal[i]) {
						irCommTempMax = irCommMaxSensorSignal[i];
					}
				}

				if((irCommTempMax-irCommTempMin) < IRCOMM_DETECTION_AMPLITUDE_THR) {	// error...no significant signal perceived					
     c2a:	20 1b       	sub	r18, r16
     c2c:	31 0b       	sbc	r19, r17
     c2e:	20 35       	cpi	r18, 0x50	; 80
     c30:	31 05       	cpc	r19, r1
     c32:	0c f4       	brge	.+2      	; 0xc36 <irCommTasks+0x6b4>
     c34:	0f ce       	rjmp	.-994    	; 0x854 <irCommTasks+0x2d2>
					irCommState = IRCOMM_RX_IDLE_STATE;

					break;
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);
     c36:	cb 01       	movw	r24, r22
     c38:	ba 01       	movw	r22, r20
     c3a:	24 e1       	ldi	r18, 0x14	; 20
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e0       	ldi	r20, 0x00	; 0
     c40:	50 e0       	ldi	r21, 0x00	; 0
     c42:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
     c46:	da 01       	movw	r26, r20
     c48:	c9 01       	movw	r24, r18
     c4a:	a9 01       	movw	r20, r18
     c4c:	90 93 d3 17 	sts	0x17D3, r25
     c50:	80 93 d2 17 	sts	0x17D2, r24

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
					irCommMaxSensorSignal[i] -= irCommProxMean;
     c54:	88 81       	ld	r24, Y
     c56:	99 81       	ldd	r25, Y+1	; 0x01
     c58:	84 1b       	sub	r24, r20
     c5a:	95 0b       	sbc	r25, r21
     c5c:	89 93       	st	Y+, r24
     c5e:	99 93       	st	Y+, r25
				}

				irCommProxMean = (int)(irCommProxSum / IRCOMM_SAMPLING_WINDOW);

				// substract mean from signal
				for(i=0; i<IRCOMM_SAMPLING_WINDOW; i++) {
     c60:	91 e2       	ldi	r25, 0x21	; 33
     c62:	cf 39       	cpi	r28, 0x9F	; 159
     c64:	d9 07       	cpc	r29, r25
     c66:	b1 f7       	brne	.-20     	; 0xc54 <irCommTasks+0x6d2>
					irCommMaxSensorSignal[i] -= irCommProxMean;
				}
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
     c68:	80 91 77 21 	lds	r24, 0x2177
     c6c:	90 91 78 21 	lds	r25, 0x2178
     c70:	18 16       	cp	r1, r24
     c72:	19 06       	cpc	r1, r25
     c74:	0c f0       	brlt	.+2      	; 0xc78 <irCommTasks+0x6f6>
     c76:	1b c3       	rjmp	.+1590   	; 0x12ae <irCommTasks+0xd2c>
					irCommSignalState = 1;
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	80 93 d1 17 	sts	0x17D1, r24
     c7e:	21 e0       	ldi	r18, 0x01	; 1
     c80:	58 2f       	mov	r21, r24
     c82:	e9 e7       	ldi	r30, 0x79	; 121
     c84:	f1 e2       	ldi	r31, 0x21	; 33
				} else {
					irCommSignalState = -1;
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	07 c0       	rjmp	.+14     	; 0xc9a <irCommTasks+0x718>
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
     c8c:	2f 3f       	cpi	r18, 0xFF	; 255
     c8e:	89 f0       	breq	.+34     	; 0xcb2 <irCommTasks+0x730>
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
     c90:	c1 e2       	ldi	r28, 0x21	; 33
     c92:	ef 39       	cpi	r30, 0x9F	; 159
     c94:	fc 07       	cpc	r31, r28
     c96:	09 f4       	brne	.+2      	; 0xc9a <irCommTasks+0x718>
     c98:	66 c0       	rjmp	.+204    	; 0xd66 <irCommTasks+0x7e4>
					if(irCommMaxSensorSignal[i] > 0) {
     c9a:	81 91       	ld	r24, Z+
     c9c:	91 91       	ld	r25, Z+
     c9e:	18 16       	cp	r1, r24
     ca0:	19 06       	cpc	r1, r25
     ca2:	a4 f3       	brlt	.-24     	; 0xc8c <irCommTasks+0x70a>
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
     ca4:	21 30       	cpi	r18, 0x01	; 1
     ca6:	a1 f7       	brne	.-24     	; 0xc90 <irCommTasks+0x70e>
							irCommSignalState = -1;
							irCommSwitchCount++;
     ca8:	3f 5f       	subi	r19, 0xFF	; 255
     caa:	43 2f       	mov	r20, r19
							irCommSignalState = 1;
							irCommSwitchCount++;
						}
					} else {
						if(irCommSignalState > 0) {
							irCommSignalState = -1;
     cac:	5f ef       	ldi	r21, 0xFF	; 255
							irCommSwitchCount++;
     cae:	2f ef       	ldi	r18, 0xFF	; 255
     cb0:	ef cf       	rjmp	.-34     	; 0xc90 <irCommTasks+0x70e>
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
							irCommSwitchCount++;
     cb2:	3f 5f       	subi	r19, 0xFF	; 255
     cb4:	43 2f       	mov	r20, r19
				}
				irCommSwitchCount = 0;
				for(i=1; i<IRCOMM_SAMPLING_WINDOW; i++) {
					if(irCommMaxSensorSignal[i] > 0) {
						if(irCommSignalState < 0) {
							irCommSignalState = 1;
     cb6:	51 e0       	ldi	r21, 0x01	; 1
							irCommSwitchCount++;
     cb8:	21 e0       	ldi	r18, 0x01	; 1
     cba:	ea cf       	rjmp	.-44     	; 0xc90 <irCommTasks+0x70e>

	if(irCommMode==IRCOMM_MODE_RECEIVE) {

		switch(irCommState) {
			case IRCOMM_RX_IDLE_STATE:				
				if((irCommRxStartBitDetected==0) && (irCommEnabled!=irCommEnabledNext)) {
     cbc:	80 91 c7 17 	lds	r24, 0x17C7
     cc0:	81 11       	cpse	r24, r1
     cc2:	74 cc       	rjmp	.-1816   	; 0x5ac <irCommTasks+0x2a>
     cc4:	90 91 ee 17 	lds	r25, 0x17EE
     cc8:	80 91 ed 17 	lds	r24, 0x17ED
     ccc:	98 17       	cp	r25, r24
     cce:	09 f4       	brne	.+2      	; 0xcd2 <irCommTasks+0x750>
     cd0:	6d cc       	rjmp	.-1830   	; 0x5ac <irCommTasks+0x2a>
					if((getTime100MicroSec() - irCommTxLastTransmissionTime) > PAUSE_200_MSEC) {
     cd2:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
     cd6:	00 91 b9 17 	lds	r16, 0x17B9
     cda:	10 91 ba 17 	lds	r17, 0x17BA
     cde:	20 91 bb 17 	lds	r18, 0x17BB
     ce2:	30 91 bc 17 	lds	r19, 0x17BC
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	80 1b       	sub	r24, r16
     cec:	91 0b       	sbc	r25, r17
     cee:	a2 0b       	sbc	r26, r18
     cf0:	b3 0b       	sbc	r27, r19
     cf2:	84 38       	cpi	r24, 0x84	; 132
     cf4:	97 40       	sbci	r25, 0x07	; 7
     cf6:	a1 05       	cpc	r26, r1
     cf8:	b1 05       	cpc	r27, r1
     cfa:	08 f4       	brcc	.+2      	; 0xcfe <irCommTasks+0x77c>
     cfc:	57 cc       	rjmp	.-1874   	; 0x5ac <irCommTasks+0x2a>
#include "irCommunication.h"


void irCommInitTransmitter() {
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
     cfe:	82 e0       	ldi	r24, 0x02	; 2
     d00:	80 93 ee 17 	sts	0x17EE, r24
	irCommState = IRCOMM_TX_IDLE_STATE;
     d04:	c0 93 eb 17 	sts	0x17EB, r28
     d08:	51 cc       	rjmp	.-1886   	; 0x5ac <irCommTasks+0x2a>
     d0a:	50 93 d1 17 	sts	0x17D1, r21
     d0e:	40 93 d0 17 	sts	0x17D0, r20
						}
					}
				}				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
     d12:	80 91 c6 17 	lds	r24, 0x17C6
     d16:	81 30       	cpi	r24, 0x01	; 1
     d18:	09 f4       	brne	.+2      	; 0xd1c <irCommTasks+0x79a>
     d1a:	7f c2       	rjmp	.+1278   	; 0x121a <irCommTasks+0xc98>
							irCommState = IRCOMM_RX_IDLE_STATE;				
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
     d1c:	80 91 c7 17 	lds	r24, 0x17C7
     d20:	81 30       	cpi	r24, 0x01	; 1
     d22:	09 f4       	brne	.+2      	; 0xd26 <irCommTasks+0x7a4>
     d24:	bd c2       	rjmp	.+1402   	; 0x12a0 <irCommTasks+0xd1e>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommState = IRCOMM_RX_IDLE_STATE;	
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
     d26:	32 30       	cpi	r19, 0x02	; 2
     d28:	09 f4       	brne	.+2      	; 0xd2c <irCommTasks+0x7aa>
     d2a:	c7 c2       	rjmp	.+1422   	; 0x12ba <irCommTasks+0xd38>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
     d2c:	31 30       	cpi	r19, 0x01	; 1
     d2e:	09 f0       	breq	.+2      	; 0xd32 <irCommTasks+0x7b0>
     d30:	91 cd       	rjmp	.-1246   	; 0x854 <irCommTasks+0x2d2>
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
     d32:	80 91 c5 17 	lds	r24, 0x17C5
     d36:	8b 30       	cpi	r24, 0x0B	; 11
     d38:	08 f0       	brcs	.+2      	; 0xd3c <irCommTasks+0x7ba>
     d3a:	d3 c2       	rjmp	.+1446   	; 0x12e2 <irCommTasks+0xd60>
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
								irCommState = IRCOMM_RX_IDLE_STATE;
								break;
							} else {
								irCommShiftCount = IRCOMM_SAMPLING_WINDOW;
     d3c:	84 e1       	ldi	r24, 0x14	; 20
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
								irCommState = IRCOMM_RX_IDLE_STATE;
								break;
							} else {
								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
     d3e:	80 93 d5 17 	sts	0x17D5, r24
								irCommRxPeakHighToLow = 0;
     d42:	10 92 c6 17 	sts	0x17C6, r1
								irCommRxStartBitDetected = 0;
     d46:	10 92 c7 17 	sts	0x17C7, r1
								irCommSecondBitSkipped = 0;
     d4a:	10 92 cc 17 	sts	0x17CC, r1
								irCommShiftCounter = 0;
     d4e:	10 92 cb 17 	sts	0x17CB, r1
								irCommRxBitCount = 0;	
     d52:	10 92 cf 17 	sts	0x17CF, r1
								irCommRxCrc = 0;	
     d56:	10 92 de 17 	sts	0x17DE, r1
								irCommRxByte = 0;
     d5a:	10 92 cd 17 	sts	0x17CD, r1
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
     d5e:	84 e0       	ldi	r24, 0x04	; 4
     d60:	80 93 eb 17 	sts	0x17EB, r24
     d64:	23 cc       	rjmp	.-1978   	; 0x5ac <irCommTasks+0x2a>
     d66:	50 93 d1 17 	sts	0x17D1, r21
     d6a:	40 93 d0 17 	sts	0x17D0, r20
							irCommSwitchCount++;
						}
					}
				}
				// check whether we received either a "0" or a "1"
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
     d6e:	36 30       	cpi	r19, 0x06	; 6
     d70:	08 f4       	brcc	.+2      	; 0xd74 <irCommTasks+0x7f2>
     d72:	2f c2       	rjmp	.+1118   	; 0x11d2 <irCommTasks+0xc50>
					irCommRxBitReceived[irCommRxBitCount] = 0;
     d74:	80 91 cf 17 	lds	r24, 0x17CF
     d78:	e8 2f       	mov	r30, r24
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	ec 50       	subi	r30, 0x0C	; 12
     d7e:	f2 4e       	sbci	r31, 0xE2	; 226
     d80:	10 82       	st	Z, r1
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
     d82:	88 30       	cpi	r24, 0x08	; 8
     d84:	28 f4       	brcc	.+10     	; 0xd90 <irCommTasks+0x80e>
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
     d86:	90 91 cd 17 	lds	r25, 0x17CD
     d8a:	99 0f       	add	r25, r25
     d8c:	90 93 cd 17 	sts	0x17CD, r25

				}

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
     d90:	8f 5f       	subi	r24, 0xFF	; 255
     d92:	80 93 cf 17 	sts	0x17CF, r24
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
     d96:	8a 30       	cpi	r24, 0x0A	; 10
     d98:	09 f4       	brne	.+2      	; 0xd9c <irCommTasks+0x81a>
     d9a:	93 c2       	rjmp	.+1318   	; 0x12c2 <irCommTasks+0xd40>
					irCommState = IRCOMM_RX_CHECK_CRC;
				} else {
					irCommState = IRCOMM_RX_WAITING_BIT;
     d9c:	85 e0       	ldi	r24, 0x05	; 5
     d9e:	80 93 eb 17 	sts	0x17EB, r24
     da2:	04 cc       	rjmp	.-2040   	; 0x5ac <irCommTasks+0x2a>
     da4:	89 2f       	mov	r24, r25
     da6:	a2 cc       	rjmp	.-1724   	; 0x6ec <irCommTasks+0x16a>
     da8:	81 e0       	ldi	r24, 0x01	; 1
     daa:	47 cc       	rjmp	.-1906   	; 0x63a <irCommTasks+0xb8>
     dac:	89 2f       	mov	r24, r25
     dae:	5d cc       	rjmp	.-1862   	; 0x66a <irCommTasks+0xe8>
     db0:	89 2f       	mov	r24, r25
     db2:	4f cc       	rjmp	.-1890   	; 0x652 <irCommTasks+0xd0>
     db4:	89 2f       	mov	r24, r25
     db6:	8a cc       	rjmp	.-1772   	; 0x6cc <irCommTasks+0x14a>
     db8:	89 2f       	mov	r24, r25
     dba:	7b cc       	rjmp	.-1802   	; 0x6b2 <irCommTasks+0x130>
     dbc:	89 2f       	mov	r24, r25
     dbe:	6d cc       	rjmp	.-1830   	; 0x69a <irCommTasks+0x118>
     dc0:	89 2f       	mov	r24, r25
     dc2:	5f cc       	rjmp	.-1858   	; 0x682 <irCommTasks+0x100>

			case IRCOMM_TX_COMPUTE_TIMINGS:
				//updateBlueLed(255);
				if(irCommTxBitToTransmit[irCommTxBitCount] == 3) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START2_DURATION;					
     dc4:	20 ef       	ldi	r18, 0xF0	; 240
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	30 93 b5 17 	sts	0x17B5, r19
     dcc:	20 93 b4 17 	sts	0x17B4, r18
					irCommTxSwitchCount = IRCOMM_BIT_START2_SWITCH_COUNT;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	80 93 b3 17 	sts	0x17B3, r24
     dd6:	82 cd       	rjmp	.-1276   	; 0x8dc <irCommTasks+0x35a>
						irCommRxMaxSensor++;
					} else {
						irCommRxMaxSensor = 0;
					}
				} else {
					if(irCommRxStartBitDetected==0) {
     dd8:	80 91 c7 17 	lds	r24, 0x17C7
     ddc:	81 11       	cpse	r24, r1
     dde:	3a c2       	rjmp	.+1140   	; 0x1254 <irCommTasks+0xcd2>
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
     de0:	20 91 c1 17 	lds	r18, 0x17C1
     de4:	30 91 c2 17 	lds	r19, 0x17C2
     de8:	27 30       	cpi	r18, 0x07	; 7
     dea:	31 05       	cpc	r19, r1
     dec:	0c f0       	brlt	.+2      	; 0xdf0 <irCommTasks+0x86e>
     dee:	42 c1       	rjmp	.+644    	; 0x1074 <irCommTasks+0xaf2>
							irCommRxMaxSensor++;
     df0:	2f 5f       	subi	r18, 0xFF	; 255
     df2:	3f 4f       	sbci	r19, 0xFF	; 255
     df4:	30 93 c2 17 	sts	0x17C2, r19
     df8:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     dfc:	c9 01       	movw	r24, r18
     dfe:	88 0f       	add	r24, r24
     e00:	99 1f       	adc	r25, r25
     e02:	af 01       	movw	r20, r30
     e04:	48 0f       	add	r20, r24
     e06:	59 1f       	adc	r21, r25
     e08:	bd 01       	movw	r22, r26
     e0a:	68 0f       	add	r22, r24
     e0c:	79 1f       	adc	r23, r25
     e0e:	ea 01       	movw	r28, r20
     e10:	88 81       	ld	r24, Y
     e12:	99 81       	ldd	r25, Y+1	; 0x01
     e14:	eb 01       	movw	r28, r22
     e16:	48 81       	ld	r20, Y
     e18:	59 81       	ldd	r21, Y+1	; 0x01
     e1a:	84 1b       	sub	r24, r20
     e1c:	95 0b       	sbc	r25, r21
     e1e:	80 35       	cpi	r24, 0x50	; 80
     e20:	91 05       	cpc	r25, r1
     e22:	0c f0       	brlt	.+2      	; 0xe26 <irCommTasks+0x8a4>
     e24:	1f c1       	rjmp	.+574    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
     e26:	27 30       	cpi	r18, 0x07	; 7
     e28:	31 05       	cpc	r19, r1
     e2a:	09 f0       	breq	.+2      	; 0xe2e <irCommTasks+0x8ac>
     e2c:	33 c1       	rjmp	.+614    	; 0x1094 <irCommTasks+0xb12>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
     e2e:	10 92 c2 17 	sts	0x17C2, r1
     e32:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     e36:	80 81       	ld	r24, Z
     e38:	91 81       	ldd	r25, Z+1	; 0x01
     e3a:	2d 91       	ld	r18, X+
     e3c:	3c 91       	ld	r19, X
     e3e:	11 97       	sbiw	r26, 0x01	; 1
     e40:	82 1b       	sub	r24, r18
     e42:	93 0b       	sbc	r25, r19
     e44:	80 35       	cpi	r24, 0x50	; 80
     e46:	91 05       	cpc	r25, r1
     e48:	0c f0       	brlt	.+2      	; 0xe4c <irCommTasks+0x8ca>
     e4a:	0c c1       	rjmp	.+536    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     e4c:	21 e0       	ldi	r18, 0x01	; 1
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	30 93 c2 17 	sts	0x17C2, r19
     e54:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     e58:	82 81       	ldd	r24, Z+2	; 0x02
     e5a:	93 81       	ldd	r25, Z+3	; 0x03
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	4d 91       	ld	r20, X+
     e60:	5c 91       	ld	r21, X
     e62:	13 97       	sbiw	r26, 0x03	; 3
     e64:	84 1b       	sub	r24, r20
     e66:	95 0b       	sbc	r25, r21
     e68:	80 35       	cpi	r24, 0x50	; 80
     e6a:	91 05       	cpc	r25, r1
     e6c:	0c f0       	brlt	.+2      	; 0xe70 <irCommTasks+0x8ee>
     e6e:	fa c0       	rjmp	.+500    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     e70:	2f 5f       	subi	r18, 0xFF	; 255
     e72:	3f 4f       	sbci	r19, 0xFF	; 255
     e74:	30 93 c2 17 	sts	0x17C2, r19
     e78:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     e7c:	c9 01       	movw	r24, r18
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	af 01       	movw	r20, r30
     e84:	48 0f       	add	r20, r24
     e86:	59 1f       	adc	r21, r25
     e88:	bd 01       	movw	r22, r26
     e8a:	68 0f       	add	r22, r24
     e8c:	79 1f       	adc	r23, r25
     e8e:	ea 01       	movw	r28, r20
     e90:	88 81       	ld	r24, Y
     e92:	99 81       	ldd	r25, Y+1	; 0x01
     e94:	eb 01       	movw	r28, r22
     e96:	48 81       	ld	r20, Y
     e98:	59 81       	ldd	r21, Y+1	; 0x01
     e9a:	84 1b       	sub	r24, r20
     e9c:	95 0b       	sbc	r25, r21
     e9e:	80 35       	cpi	r24, 0x50	; 80
     ea0:	91 05       	cpc	r25, r1
     ea2:	0c f0       	brlt	.+2      	; 0xea6 <irCommTasks+0x924>
     ea4:	df c0       	rjmp	.+446    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
     ea6:	27 30       	cpi	r18, 0x07	; 7
     ea8:	31 05       	cpc	r19, r1
     eaa:	09 f0       	breq	.+2      	; 0xeae <irCommTasks+0x92c>
     eac:	32 c1       	rjmp	.+612    	; 0x1112 <irCommTasks+0xb90>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
     eae:	10 92 c2 17 	sts	0x17C2, r1
     eb2:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     eb6:	80 81       	ld	r24, Z
     eb8:	91 81       	ldd	r25, Z+1	; 0x01
     eba:	2d 91       	ld	r18, X+
     ebc:	3c 91       	ld	r19, X
     ebe:	11 97       	sbiw	r26, 0x01	; 1
     ec0:	82 1b       	sub	r24, r18
     ec2:	93 0b       	sbc	r25, r19
     ec4:	80 35       	cpi	r24, 0x50	; 80
     ec6:	91 05       	cpc	r25, r1
     ec8:	0c f0       	brlt	.+2      	; 0xecc <irCommTasks+0x94a>
     eca:	cc c0       	rjmp	.+408    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     ecc:	21 e0       	ldi	r18, 0x01	; 1
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	30 93 c2 17 	sts	0x17C2, r19
     ed4:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     ed8:	82 81       	ldd	r24, Z+2	; 0x02
     eda:	93 81       	ldd	r25, Z+3	; 0x03
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	4d 91       	ld	r20, X+
     ee0:	5c 91       	ld	r21, X
     ee2:	13 97       	sbiw	r26, 0x03	; 3
     ee4:	84 1b       	sub	r24, r20
     ee6:	95 0b       	sbc	r25, r21
     ee8:	80 35       	cpi	r24, 0x50	; 80
     eea:	91 05       	cpc	r25, r1
     eec:	0c f0       	brlt	.+2      	; 0xef0 <irCommTasks+0x96e>
     eee:	ba c0       	rjmp	.+372    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     ef0:	2f 5f       	subi	r18, 0xFF	; 255
     ef2:	3f 4f       	sbci	r19, 0xFF	; 255
     ef4:	30 93 c2 17 	sts	0x17C2, r19
     ef8:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     efc:	c9 01       	movw	r24, r18
     efe:	88 0f       	add	r24, r24
     f00:	99 1f       	adc	r25, r25
     f02:	af 01       	movw	r20, r30
     f04:	48 0f       	add	r20, r24
     f06:	59 1f       	adc	r21, r25
     f08:	bd 01       	movw	r22, r26
     f0a:	68 0f       	add	r22, r24
     f0c:	79 1f       	adc	r23, r25
     f0e:	ea 01       	movw	r28, r20
     f10:	88 81       	ld	r24, Y
     f12:	99 81       	ldd	r25, Y+1	; 0x01
     f14:	eb 01       	movw	r28, r22
     f16:	48 81       	ld	r20, Y
     f18:	59 81       	ldd	r21, Y+1	; 0x01
     f1a:	84 1b       	sub	r24, r20
     f1c:	95 0b       	sbc	r25, r21
     f1e:	80 35       	cpi	r24, 0x50	; 80
     f20:	91 05       	cpc	r25, r1
     f22:	0c f0       	brlt	.+2      	; 0xf26 <irCommTasks+0x9a4>
     f24:	9f c0       	rjmp	.+318    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
     f26:	27 30       	cpi	r18, 0x07	; 7
     f28:	31 05       	cpc	r19, r1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <irCommTasks+0x9ac>
     f2c:	32 c1       	rjmp	.+612    	; 0x1192 <irCommTasks+0xc10>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
     f2e:	10 92 c2 17 	sts	0x17C2, r1
     f32:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     f36:	80 81       	ld	r24, Z
     f38:	91 81       	ldd	r25, Z+1	; 0x01
     f3a:	2d 91       	ld	r18, X+
     f3c:	3c 91       	ld	r19, X
     f3e:	82 1b       	sub	r24, r18
     f40:	93 0b       	sbc	r25, r19
     f42:	80 35       	cpi	r24, 0x50	; 80
     f44:	91 05       	cpc	r25, r1
     f46:	0c f0       	brlt	.+2      	; 0xf4a <irCommTasks+0x9c8>
     f48:	8d c0       	rjmp	.+282    	; 0x1064 <irCommTasks+0xae2>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     f4e:	2f 5f       	subi	r18, 0xFF	; 255
     f50:	3f 4f       	sbci	r19, 0xFF	; 255
     f52:	30 93 c2 17 	sts	0x17C2, r19
     f56:	20 93 c1 17 	sts	0x17C1, r18
     f5a:	80 91 c3 17 	lds	r24, 0x17C3
     f5e:	90 91 c4 17 	lds	r25, 0x17C4
     f62:	72 cc       	rjmp	.-1820   	; 0x848 <irCommTasks+0x2c6>
				if(irCommTxBitCount == 0) {
					//PORTA = irCommTxSensorMask;
					if(irCommTxSensorGroup==0) {
						PORTA = 0xAA;
					} else {
						PORTA = 0x55;
     f64:	85 e5       	ldi	r24, 0x55	; 85
     f66:	82 b9       	out	0x02, r24	; 2
     f68:	c1 cc       	rjmp	.-1662   	; 0x8ec <irCommTasks+0x36a>
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     f6a:	2f 5f       	subi	r18, 0xFF	; 255
     f6c:	3f 4f       	sbci	r19, 0xFF	; 255
     f6e:	30 93 c2 17 	sts	0x17C2, r19
     f72:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     f76:	c9 01       	movw	r24, r18
     f78:	88 0f       	add	r24, r24
     f7a:	99 1f       	adc	r25, r25
     f7c:	af 01       	movw	r20, r30
     f7e:	48 0f       	add	r20, r24
     f80:	59 1f       	adc	r21, r25
     f82:	bd 01       	movw	r22, r26
     f84:	68 0f       	add	r22, r24
     f86:	79 1f       	adc	r23, r25
     f88:	ea 01       	movw	r28, r20
     f8a:	88 81       	ld	r24, Y
     f8c:	99 81       	ldd	r25, Y+1	; 0x01
     f8e:	eb 01       	movw	r28, r22
     f90:	48 81       	ld	r20, Y
     f92:	59 81       	ldd	r21, Y+1	; 0x01
     f94:	84 1b       	sub	r24, r20
     f96:	95 0b       	sbc	r25, r21
     f98:	80 35       	cpi	r24, 0x50	; 80
     f9a:	91 05       	cpc	r25, r1
     f9c:	0c f0       	brlt	.+2      	; 0xfa0 <irCommTasks+0xa1e>
     f9e:	62 c0       	rjmp	.+196    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
     fa0:	27 30       	cpi	r18, 0x07	; 7
     fa2:	31 05       	cpc	r19, r1
     fa4:	09 f0       	breq	.+2      	; 0xfa8 <irCommTasks+0xa26>
     fa6:	64 cf       	rjmp	.-312    	; 0xe70 <irCommTasks+0x8ee>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
     fa8:	10 92 c2 17 	sts	0x17C2, r1
     fac:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	2d 91       	ld	r18, X+
     fb6:	3c 91       	ld	r19, X
     fb8:	11 97       	sbiw	r26, 0x01	; 1
     fba:	82 1b       	sub	r24, r18
     fbc:	93 0b       	sbc	r25, r19
     fbe:	80 35       	cpi	r24, 0x50	; 80
     fc0:	91 05       	cpc	r25, r1
     fc2:	0c f0       	brlt	.+2      	; 0xfc6 <irCommTasks+0xa44>
     fc4:	4f c0       	rjmp	.+158    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     fc6:	21 e0       	ldi	r18, 0x01	; 1
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	30 93 c2 17 	sts	0x17C2, r19
     fce:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     fd2:	82 81       	ldd	r24, Z+2	; 0x02
     fd4:	93 81       	ldd	r25, Z+3	; 0x03
     fd6:	12 96       	adiw	r26, 0x02	; 2
     fd8:	4d 91       	ld	r20, X+
     fda:	5c 91       	ld	r21, X
     fdc:	13 97       	sbiw	r26, 0x03	; 3
     fde:	84 1b       	sub	r24, r20
     fe0:	95 0b       	sbc	r25, r21
     fe2:	80 35       	cpi	r24, 0x50	; 80
     fe4:	91 05       	cpc	r25, r1
     fe6:	f4 f5       	brge	.+124    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
     fe8:	2f 5f       	subi	r18, 0xFF	; 255
     fea:	3f 4f       	sbci	r19, 0xFF	; 255
     fec:	30 93 c2 17 	sts	0x17C2, r19
     ff0:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
     ff4:	c9 01       	movw	r24, r18
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	af 01       	movw	r20, r30
     ffc:	48 0f       	add	r20, r24
     ffe:	59 1f       	adc	r21, r25
    1000:	bd 01       	movw	r22, r26
    1002:	68 0f       	add	r22, r24
    1004:	79 1f       	adc	r23, r25
    1006:	ea 01       	movw	r28, r20
    1008:	88 81       	ld	r24, Y
    100a:	99 81       	ldd	r25, Y+1	; 0x01
    100c:	eb 01       	movw	r28, r22
    100e:	48 81       	ld	r20, Y
    1010:	59 81       	ldd	r21, Y+1	; 0x01
    1012:	84 1b       	sub	r24, r20
    1014:	95 0b       	sbc	r25, r21
    1016:	80 35       	cpi	r24, 0x50	; 80
    1018:	91 05       	cpc	r25, r1
    101a:	24 f5       	brge	.+72     	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    101c:	27 30       	cpi	r18, 0x07	; 7
    101e:	31 05       	cpc	r19, r1
    1020:	09 f0       	breq	.+2      	; 0x1024 <irCommTasks+0xaa2>
    1022:	66 cf       	rjmp	.-308    	; 0xef0 <irCommTasks+0x96e>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    1024:	10 92 c2 17 	sts	0x17C2, r1
    1028:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    102c:	80 81       	ld	r24, Z
    102e:	91 81       	ldd	r25, Z+1	; 0x01
    1030:	2d 91       	ld	r18, X+
    1032:	3c 91       	ld	r19, X
    1034:	11 97       	sbiw	r26, 0x01	; 1
    1036:	82 1b       	sub	r24, r18
    1038:	93 0b       	sbc	r25, r19
    103a:	80 35       	cpi	r24, 0x50	; 80
    103c:	91 05       	cpc	r25, r1
    103e:	94 f4       	brge	.+36     	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	30 93 c2 17 	sts	0x17C2, r19
    1048:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    104c:	82 81       	ldd	r24, Z+2	; 0x02
    104e:	93 81       	ldd	r25, Z+3	; 0x03
    1050:	12 96       	adiw	r26, 0x02	; 2
    1052:	4d 91       	ld	r20, X+
    1054:	5c 91       	ld	r21, X
    1056:	13 97       	sbiw	r26, 0x03	; 3
    1058:	84 1b       	sub	r24, r20
    105a:	95 0b       	sbc	r25, r21
    105c:	80 35       	cpi	r24, 0x50	; 80
    105e:	91 05       	cpc	r25, r1
    1060:	0c f4       	brge	.+2      	; 0x1064 <irCommTasks+0xae2>
    1062:	75 cf       	rjmp	.-278    	; 0xf4e <irCommTasks+0x9cc>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    1064:	90 93 c4 17 	sts	0x17C4, r25
    1068:	80 93 c3 17 	sts	0x17C3, r24

				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
					irCommState = IRCOMM_RX_DETECT_START_BIT_STATE;						
    106c:	83 e0       	ldi	r24, 0x03	; 3
    106e:	80 93 eb 17 	sts	0x17EB, r24
    1072:	9c ca       	rjmp	.-2760   	; 0x5ac <irCommTasks+0x2a>
					if(irCommRxStartBitDetected==0) {
						// start listening from the next sensor
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    1074:	10 92 c2 17 	sts	0x17C2, r1
    1078:	10 92 c1 17 	sts	0x17C1, r1
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    107c:	80 81       	ld	r24, Z
    107e:	91 81       	ldd	r25, Z+1	; 0x01
    1080:	2d 91       	ld	r18, X+
    1082:	3c 91       	ld	r19, X
    1084:	11 97       	sbiw	r26, 0x01	; 1
    1086:	82 1b       	sub	r24, r18
    1088:	93 0b       	sbc	r25, r19
    108a:	80 35       	cpi	r24, 0x50	; 80
    108c:	91 05       	cpc	r25, r1
    108e:	54 f7       	brge	.-44     	; 0x1064 <irCommTasks+0xae2>
    1090:	20 e0       	ldi	r18, 0x00	; 0
    1092:	30 e0       	ldi	r19, 0x00	; 0
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    1094:	2f 5f       	subi	r18, 0xFF	; 255
    1096:	3f 4f       	sbci	r19, 0xFF	; 255
    1098:	30 93 c2 17 	sts	0x17C2, r19
    109c:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    10a0:	c9 01       	movw	r24, r18
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	af 01       	movw	r20, r30
    10a8:	48 0f       	add	r20, r24
    10aa:	59 1f       	adc	r21, r25
    10ac:	bd 01       	movw	r22, r26
    10ae:	68 0f       	add	r22, r24
    10b0:	79 1f       	adc	r23, r25
    10b2:	ea 01       	movw	r28, r20
    10b4:	88 81       	ld	r24, Y
    10b6:	99 81       	ldd	r25, Y+1	; 0x01
    10b8:	eb 01       	movw	r28, r22
    10ba:	48 81       	ld	r20, Y
    10bc:	59 81       	ldd	r21, Y+1	; 0x01
    10be:	84 1b       	sub	r24, r20
    10c0:	95 0b       	sbc	r25, r21
    10c2:	80 35       	cpi	r24, 0x50	; 80
    10c4:	91 05       	cpc	r25, r1
    10c6:	74 f6       	brge	.-100    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    10c8:	27 30       	cpi	r18, 0x07	; 7
    10ca:	31 05       	cpc	r19, r1
    10cc:	09 f0       	breq	.+2      	; 0x10d0 <irCommTasks+0xb4e>
    10ce:	4d cf       	rjmp	.-358    	; 0xf6a <irCommTasks+0x9e8>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    10d0:	10 92 c2 17 	sts	0x17C2, r1
    10d4:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    10d8:	80 81       	ld	r24, Z
    10da:	91 81       	ldd	r25, Z+1	; 0x01
    10dc:	2d 91       	ld	r18, X+
    10de:	3c 91       	ld	r19, X
    10e0:	11 97       	sbiw	r26, 0x01	; 1
    10e2:	82 1b       	sub	r24, r18
    10e4:	93 0b       	sbc	r25, r19
    10e6:	80 35       	cpi	r24, 0x50	; 80
    10e8:	91 05       	cpc	r25, r1
    10ea:	0c f0       	brlt	.+2      	; 0x10ee <irCommTasks+0xb6c>
    10ec:	bb cf       	rjmp	.-138    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    10ee:	21 e0       	ldi	r18, 0x01	; 1
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	30 93 c2 17 	sts	0x17C2, r19
    10f6:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    10fa:	82 81       	ldd	r24, Z+2	; 0x02
    10fc:	93 81       	ldd	r25, Z+3	; 0x03
    10fe:	12 96       	adiw	r26, 0x02	; 2
    1100:	4d 91       	ld	r20, X+
    1102:	5c 91       	ld	r21, X
    1104:	13 97       	sbiw	r26, 0x03	; 3
    1106:	84 1b       	sub	r24, r20
    1108:	95 0b       	sbc	r25, r21
    110a:	80 35       	cpi	r24, 0x50	; 80
    110c:	91 05       	cpc	r25, r1
    110e:	0c f0       	brlt	.+2      	; 0x1112 <irCommTasks+0xb90>
    1110:	a9 cf       	rjmp	.-174    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    1112:	2f 5f       	subi	r18, 0xFF	; 255
    1114:	3f 4f       	sbci	r19, 0xFF	; 255
    1116:	30 93 c2 17 	sts	0x17C2, r19
    111a:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    111e:	c9 01       	movw	r24, r18
    1120:	88 0f       	add	r24, r24
    1122:	99 1f       	adc	r25, r25
    1124:	af 01       	movw	r20, r30
    1126:	48 0f       	add	r20, r24
    1128:	59 1f       	adc	r21, r25
    112a:	bd 01       	movw	r22, r26
    112c:	68 0f       	add	r22, r24
    112e:	79 1f       	adc	r23, r25
    1130:	ea 01       	movw	r28, r20
    1132:	88 81       	ld	r24, Y
    1134:	99 81       	ldd	r25, Y+1	; 0x01
    1136:	eb 01       	movw	r28, r22
    1138:	48 81       	ld	r20, Y
    113a:	59 81       	ldd	r21, Y+1	; 0x01
    113c:	84 1b       	sub	r24, r20
    113e:	95 0b       	sbc	r25, r21
    1140:	80 35       	cpi	r24, 0x50	; 80
    1142:	91 05       	cpc	r25, r1
    1144:	0c f0       	brlt	.+2      	; 0x1148 <irCommTasks+0xbc6>
    1146:	8e cf       	rjmp	.-228    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    1148:	27 30       	cpi	r18, 0x07	; 7
    114a:	31 05       	cpc	r19, r1
    114c:	09 f0       	breq	.+2      	; 0x1150 <irCommTasks+0xbce>
    114e:	4c cf       	rjmp	.-360    	; 0xfe8 <irCommTasks+0xa66>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    1150:	10 92 c2 17 	sts	0x17C2, r1
    1154:	10 92 c1 17 	sts	0x17C1, r1
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    1158:	80 81       	ld	r24, Z
    115a:	91 81       	ldd	r25, Z+1	; 0x01
    115c:	2d 91       	ld	r18, X+
    115e:	3c 91       	ld	r19, X
    1160:	11 97       	sbiw	r26, 0x01	; 1
    1162:	82 1b       	sub	r24, r18
    1164:	93 0b       	sbc	r25, r19
    1166:	80 35       	cpi	r24, 0x50	; 80
    1168:	91 05       	cpc	r25, r1
    116a:	0c f0       	brlt	.+2      	; 0x116e <irCommTasks+0xbec>
    116c:	7b cf       	rjmp	.-266    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    116e:	21 e0       	ldi	r18, 0x01	; 1
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	30 93 c2 17 	sts	0x17C2, r19
    1176:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    117a:	82 81       	ldd	r24, Z+2	; 0x02
    117c:	93 81       	ldd	r25, Z+3	; 0x03
    117e:	12 96       	adiw	r26, 0x02	; 2
    1180:	4d 91       	ld	r20, X+
    1182:	5c 91       	ld	r21, X
    1184:	13 97       	sbiw	r26, 0x03	; 3
    1186:	84 1b       	sub	r24, r20
    1188:	95 0b       	sbc	r25, r21
    118a:	80 35       	cpi	r24, 0x50	; 80
    118c:	91 05       	cpc	r25, r1
    118e:	0c f0       	brlt	.+2      	; 0x1192 <irCommTasks+0xc10>
    1190:	69 cf       	rjmp	.-302    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
								irCommRxMaxSensor++;
    1192:	2f 5f       	subi	r18, 0xFF	; 255
    1194:	3f 4f       	sbci	r19, 0xFF	; 255
    1196:	30 93 c2 17 	sts	0x17C2, r19
    119a:	20 93 c1 17 	sts	0x17C1, r18
							irCommRxMaxSensor = 0;
						}
						// check which is the next sensor that has a reliable signal
						i = 0;
						while(i<8) {
							if((signed int)(irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor]) >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    119e:	c9 01       	movw	r24, r18
    11a0:	88 0f       	add	r24, r24
    11a2:	99 1f       	adc	r25, r25
    11a4:	e8 0f       	add	r30, r24
    11a6:	f9 1f       	adc	r31, r25
    11a8:	a8 0f       	add	r26, r24
    11aa:	b9 1f       	adc	r27, r25
    11ac:	80 81       	ld	r24, Z
    11ae:	91 81       	ldd	r25, Z+1	; 0x01
    11b0:	4d 91       	ld	r20, X+
    11b2:	5c 91       	ld	r21, X
    11b4:	84 1b       	sub	r24, r20
    11b6:	95 0b       	sbc	r25, r21
    11b8:	80 35       	cpi	r24, 0x50	; 80
    11ba:	91 05       	cpc	r25, r1
    11bc:	0c f0       	brlt	.+2      	; 0x11c0 <irCommTasks+0xc3e>
    11be:	52 cf       	rjmp	.-348    	; 0x1064 <irCommTasks+0xae2>
								irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
								break;
							}
							if(irCommRxMaxSensor < 7) {
    11c0:	27 30       	cpi	r18, 0x07	; 7
    11c2:	31 05       	cpc	r19, r1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <irCommTasks+0xc46>
    11c6:	c3 ce       	rjmp	.-634    	; 0xf4e <irCommTasks+0x9cc>
								irCommRxMaxSensor++;
							} else {
								irCommRxMaxSensor = 0;
    11c8:	10 92 c2 17 	sts	0x17C2, r1
    11cc:	10 92 c1 17 	sts	0x17C1, r1
    11d0:	c4 ce       	rjmp	.-632    	; 0xf5a <irCommTasks+0x9d8>
				if(irCommSwitchCount >= (IRCOMM_BIT0_SWITCH_COUNT-2)) {
					irCommRxBitReceived[irCommRxBitCount] = 0;
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
						irCommRxByte = irCommRxByte<<1;	// bit0, only shift
					}
				} else if(irCommSwitchCount >= (IRCOMM_BIT1_SWITCH_COUNT-1)) {
    11d2:	33 30       	cpi	r19, 0x03	; 3
    11d4:	08 f4       	brcc	.+2      	; 0x11d8 <irCommTasks+0xc56>
    11d6:	3e cb       	rjmp	.-2436   	; 0x854 <irCommTasks+0x2d2>
					irCommRxBitReceived[irCommRxBitCount] = 1;
    11d8:	80 91 cf 17 	lds	r24, 0x17CF
    11dc:	e8 2f       	mov	r30, r24
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	ec 50       	subi	r30, 0x0C	; 12
    11e2:	f2 4e       	sbci	r31, 0xE2	; 226
    11e4:	91 e0       	ldi	r25, 0x01	; 1
    11e6:	90 83       	st	Z, r25
					if(irCommRxBitCount<8) {	// do not consider the crc for byte interpretation
    11e8:	88 30       	cpi	r24, 0x08	; 8
    11ea:	08 f0       	brcs	.+2      	; 0x11ee <irCommTasks+0xc6c>
    11ec:	d1 cd       	rjmp	.-1118   	; 0xd90 <irCommTasks+0x80e>
						irCommRxCrc++;
    11ee:	90 91 de 17 	lds	r25, 0x17DE
    11f2:	9f 5f       	subi	r25, 0xFF	; 255
    11f4:	90 93 de 17 	sts	0x17DE, r25
						irCommRxByte = irCommRxByte<<1;	// bit1, shift and add 1
    11f8:	90 91 cd 17 	lds	r25, 0x17CD
    11fc:	99 0f       	add	r25, r25
						irCommRxByte += 1;
    11fe:	9f 5f       	subi	r25, 0xFF	; 255
    1200:	90 93 cd 17 	sts	0x17CD, r25
    1204:	c5 cd       	rjmp	.-1142   	; 0xd90 <irCommTasks+0x80e>
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 2) {
					//updateBlueLed(0);
					irCommTxDuration = IRCOMM_BIT_START1_DURATION;					
					irCommTxSwitchCount = IRCOMM_BIT_START1_SWITCH_COUNT;
				} else if(irCommTxBitToTransmit[irCommTxBitCount] == 1) {
					irCommTxDuration = IRCOMM_BIT1_DURATOIN;					
    1206:	2c e3       	ldi	r18, 0x3C	; 60
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	30 93 b5 17 	sts	0x17B5, r19
    120e:	20 93 b4 17 	sts	0x17B4, r18
					irCommTxSwitchCount = IRCOMM_BIT1_SWITCH_COUNT;
    1212:	84 e0       	ldi	r24, 0x04	; 4
    1214:	80 93 b3 17 	sts	0x17B3, r24
    1218:	61 cb       	rjmp	.-2366   	; 0x8dc <irCommTasks+0x35a>
					}
				}				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
    121a:	90 91 c7 17 	lds	r25, 0x17C7
    121e:	91 30       	cpi	r25, 0x01	; 1
    1220:	09 f4       	brne	.+2      	; 0x1224 <irCommTasks+0xca2>
    1222:	6b c0       	rjmp	.+214    	; 0x12fa <irCommTasks+0xd78>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommState = IRCOMM_RX_IDLE_STATE;	
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
    1224:	32 30       	cpi	r19, 0x02	; 2
    1226:	09 f4       	brne	.+2      	; 0x122a <irCommTasks+0xca8>
    1228:	8f c0       	rjmp	.+286    	; 0x1348 <irCommTasks+0xdc6>
								irCommRxBitCount = 0;	
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
    122a:	31 30       	cpi	r19, 0x01	; 1
    122c:	09 f4       	brne	.+2      	; 0x1230 <irCommTasks+0xcae>
    122e:	52 c0       	rjmp	.+164    	; 0x12d4 <irCommTasks+0xd52>
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
							currentProx = 0;
    1230:	10 92 53 1a 	sts	0x1A53, r1
							adcSaveDataTo = SKIP_SAMPLE;
    1234:	95 e0       	ldi	r25, 0x05	; 5
    1236:	90 93 be 19 	sts	0x19BE, r25
							adcSamplingState = 0;
    123a:	10 92 bd 19 	sts	0x19BD, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    123e:	10 92 ec 17 	sts	0x17EC, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    1242:	80 93 eb 17 	sts	0x17EB, r24
							break;
    1246:	b2 c9       	rjmp	.-3228   	; 0x5ac <irCommTasks+0x2a>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    1248:	8f ef       	ldi	r24, 0xFF	; 255
    124a:	80 93 d1 17 	sts	0x17D1, r24
    124e:	2f ef       	ldi	r18, 0xFF	; 255
    1250:	58 2f       	mov	r21, r24
    1252:	7c cc       	rjmp	.-1800   	; 0xb4c <irCommTasks+0x5ca>
								irCommRxMaxSensor = 0;
							}
							i++;
						}
					} else {	// listen from the same sensor when a start bit is detected
						irCommRxMaxDiff = irCommMaxSensorValueCurr[irCommRxMaxSensor]-irCommMinSensorValueCurr[irCommRxMaxSensor];
    1254:	40 91 c1 17 	lds	r20, 0x17C1
    1258:	50 91 c2 17 	lds	r21, 0x17C2
    125c:	9a 01       	movw	r18, r20
    125e:	22 0f       	add	r18, r18
    1260:	33 1f       	adc	r19, r19
    1262:	e2 0f       	add	r30, r18
    1264:	f3 1f       	adc	r31, r19
    1266:	a2 0f       	add	r26, r18
    1268:	b3 1f       	adc	r27, r19
    126a:	20 81       	ld	r18, Z
    126c:	31 81       	ldd	r19, Z+1	; 0x01
    126e:	6d 91       	ld	r22, X+
    1270:	7c 91       	ld	r23, X
    1272:	26 1b       	sub	r18, r22
    1274:	37 0b       	sbc	r19, r23
    1276:	30 93 c4 17 	sts	0x17C4, r19
    127a:	20 93 c3 17 	sts	0x17C3, r18
				//setGreenLed(irCommRxMaxSensor, 1);			

				//if(irCommRxMaxSensor == -1) {
				//	updateRedLed(0);
				//}
				if(irCommRxMaxDiff >= IRCOMM_DETECTION_AMPLITUDE_THR) {
    127e:	20 35       	cpi	r18, 0x50	; 80
    1280:	31 05       	cpc	r19, r1
    1282:	0c f0       	brlt	.+2      	; 0x1286 <irCommTasks+0xd04>
    1284:	f3 ce       	rjmp	.-538    	; 0x106c <irCommTasks+0xaea>
						}
					}
				} else {
					// cannot get a reliable signal from the sensor from which the start bit was detected the previous time,
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	09 f0       	breq	.+2      	; 0x128c <irCommTasks+0xd0a>
    128a:	e2 ca       	rjmp	.-2620   	; 0x850 <irCommTasks+0x2ce>
						if(irCommRxMaxSensor < 7) {
    128c:	47 30       	cpi	r20, 0x07	; 7
    128e:	51 05       	cpc	r21, r1
    1290:	e4 f4       	brge	.+56     	; 0x12ca <irCommTasks+0xd48>
							irCommRxMaxSensor++;
    1292:	4f 5f       	subi	r20, 0xFF	; 255
    1294:	5f 4f       	sbci	r21, 0xFF	; 255
    1296:	50 93 c2 17 	sts	0x17C2, r21
    129a:	40 93 c1 17 	sts	0x17C1, r20
    129e:	d8 ca       	rjmp	.-2640   	; 0x850 <irCommTasks+0x2ce>
							break;
						}
					}
				} else {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    12a0:	32 30       	cpi	r19, 0x02	; 2
    12a2:	59 f0       	breq	.+22     	; 0x12ba <irCommTasks+0xd38>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
    12a4:	31 30       	cpi	r19, 0x01	; 1
    12a6:	e1 f1       	breq	.+120    	; 0x1320 <irCommTasks+0xd9e>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else {
							irCommRxStartBitDetected = 0;
    12a8:	10 92 c7 17 	sts	0x17C7, r1
    12ac:	c1 cf       	rjmp	.-126    	; 0x1230 <irCommTasks+0xcae>
						
				// start counting number of switch around mean signal
				if(irCommMaxSensorSignal[0] > 0) {
					irCommSignalState = 1;
				} else {
					irCommSignalState = -1;
    12ae:	8f ef       	ldi	r24, 0xFF	; 255
    12b0:	80 93 d1 17 	sts	0x17D1, r24
    12b4:	2f ef       	ldi	r18, 0xFF	; 255
    12b6:	58 2f       	mov	r21, r24
    12b8:	e4 cc       	rjmp	.-1592   	; 0xc82 <irCommTasks+0x700>
							irCommState = IRCOMM_RX_IDLE_STATE;	
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							irCommShiftCount = IRCOMM_SAMPLING_WINDOW/2 + irCommShiftCount;
    12ba:	80 91 d5 17 	lds	r24, 0x17D5
    12be:	86 5f       	subi	r24, 0xF6	; 246
    12c0:	3e cd       	rjmp	.-1412   	; 0xd3e <irCommTasks+0x7bc>

				//setGreenLed(irCommRxBitCount, 1);

				irCommRxBitCount++;
				if(irCommRxBitCount == 10) {	// received 8 bit of data + 2 bit of crc
					irCommState = IRCOMM_RX_CHECK_CRC;
    12c2:	87 e0       	ldi	r24, 0x07	; 7
    12c4:	80 93 eb 17 	sts	0x17EB, r24
    12c8:	71 c9       	rjmp	.-3358   	; 0x5ac <irCommTasks+0x2a>
					// thus restart listening from the next sensor
					if(irCommRxStartBitDetected == 1) {
						if(irCommRxMaxSensor < 7) {
							irCommRxMaxSensor++;
						} else {
							irCommRxMaxSensor = 0;
    12ca:	10 92 c2 17 	sts	0x17C2, r1
    12ce:	10 92 c1 17 	sts	0x17C1, r1
    12d2:	be ca       	rjmp	.-2692   	; 0x850 <irCommTasks+0x2ce>
								irCommRxCrc = 0;	
								irCommRxByte = 0;
								irCommState = IRCOMM_RX_SYNC_SIGNAL;
							}
						} else if(irCommSwitchCount==1) {		
							irCommRxStartBitDetected = 1;					
    12d4:	30 93 c7 17 	sts	0x17C7, r19
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
    12d8:	80 91 c5 17 	lds	r24, 0x17C5
    12dc:	8b 30       	cpi	r24, 0x0B	; 11
    12de:	08 f0       	brcs	.+2      	; 0x12e2 <irCommTasks+0xd60>
    12e0:	30 cd       	rjmp	.-1440   	; 0xd42 <irCommTasks+0x7c0>
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							if(irCommRxStartPeakDuration > IRCOMM_SAMPLING_WINDOW/2) {
								currentProx = 0;
    12e2:	10 92 53 1a 	sts	0x1A53, r1
								adcSaveDataTo = SKIP_SAMPLE;
    12e6:	85 e0       	ldi	r24, 0x05	; 5
    12e8:	80 93 be 19 	sts	0x19BE, r24
								adcSamplingState = 0;
    12ec:	10 92 bd 19 	sts	0x19BD, r1
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;								
    12f0:	10 92 ec 17 	sts	0x17EC, r1
								irCommState = IRCOMM_RX_IDLE_STATE;
    12f4:	30 93 eb 17 	sts	0x17EB, r19
								break;
    12f8:	59 c9       	rjmp	.-3406   	; 0x5ac <irCommTasks+0x2a>
				}				

				//turnOffGreenLeds();
				if(irCommRxPeakHighToLow==1) {
					if(irCommRxStartBitDetected==1) {
						if(irCommSwitchCount==2) {
    12fa:	32 30       	cpi	r19, 0x02	; 2
    12fc:	89 f0       	breq	.+34     	; 0x1320 <irCommTasks+0xd9e>
							irCommShiftCounter = 0;
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_WAITING_BIT;
						} else if(irCommSwitchCount==1) {
    12fe:	31 30       	cpi	r19, 0x01	; 1
    1300:	09 f4       	brne	.+2      	; 0x1304 <irCommTasks+0xd82>
    1302:	1f cd       	rjmp	.-1474   	; 0xd42 <irCommTasks+0x7c0>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else {
							irCommRxStartBitDetected = 0;
    1304:	10 92 c7 17 	sts	0x17C7, r1
							currentProx = 0;
    1308:	10 92 53 1a 	sts	0x1A53, r1
							adcSaveDataTo = SKIP_SAMPLE;
    130c:	85 e0       	ldi	r24, 0x05	; 5
    130e:	80 93 be 19 	sts	0x19BE, r24
							adcSamplingState = 0;
    1312:	10 92 bd 19 	sts	0x19BD, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    1316:	10 92 ec 17 	sts	0x17EC, r1
							irCommState = IRCOMM_RX_IDLE_STATE;	
    131a:	90 93 eb 17 	sts	0x17EB, r25
							break;
    131e:	46 c9       	rjmp	.-3444   	; 0x5ac <irCommTasks+0x2a>
							irCommRxBitCount = 0;	
							irCommRxCrc = 0;	
							irCommRxByte = 0;
							irCommState = IRCOMM_RX_SYNC_SIGNAL;
						} else if(irCommSwitchCount==1) {
							irCommShiftCount = 0;
    1320:	10 92 d5 17 	sts	0x17D5, r1
							irCommRxPeakHighToLow = 0;
    1324:	10 92 c6 17 	sts	0x17C6, r1
							irCommRxStartBitDetected = 0;
    1328:	10 92 c7 17 	sts	0x17C7, r1
							irCommSecondBitSkipped = 0;
    132c:	10 92 cc 17 	sts	0x17CC, r1
							irCommShiftCounter = 0;
    1330:	10 92 cb 17 	sts	0x17CB, r1
							irCommRxBitCount = 0;	
    1334:	10 92 cf 17 	sts	0x17CF, r1
							irCommRxCrc = 0;	
    1338:	10 92 de 17 	sts	0x17DE, r1
							irCommRxByte = 0;
    133c:	10 92 cd 17 	sts	0x17CD, r1
							irCommState = IRCOMM_RX_WAITING_BIT;
    1340:	85 e0       	ldi	r24, 0x05	; 5
    1342:	80 93 eb 17 	sts	0x17EB, r24
    1346:	32 c9       	rjmp	.-3484   	; 0x5ac <irCommTasks+0x2a>
							irCommState = IRCOMM_RX_IDLE_STATE;	
							break;
						}
					} else {
						if(irCommSwitchCount==2) {
							if(irCommRxStartPeakDuration<=3) {	// peak due to sensors sampling detected
    1348:	90 91 c5 17 	lds	r25, 0x17C5
    134c:	94 30       	cpi	r25, 0x04	; 4
    134e:	08 f4       	brcc	.+2      	; 0x1352 <irCommTasks+0xdd0>
    1350:	6f cf       	rjmp	.-290    	; 0x1230 <irCommTasks+0xcae>
								adcSamplingState = 0;
								irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;							
								irCommState = IRCOMM_RX_IDLE_STATE;
								break;
							} else {
								irCommShiftCount = IRCOMM_SAMPLING_WINDOW + irCommShiftCount;
    1352:	80 91 d5 17 	lds	r24, 0x17D5
    1356:	8c 5e       	subi	r24, 0xEC	; 236
    1358:	f2 cc       	rjmp	.-1564   	; 0xd3e <irCommTasks+0x7bc>

0000135a <irCommSendData>:
//	irCommTxSensorMask = sensorMask;
//	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
//}

void irCommSendData(unsigned char value) {
	irCommTxByte = value;
    135a:	80 93 be 17 	sts	0x17BE, r24
	irCommTxByteEnqueued = 1;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 bd 17 	sts	0x17BD, r24
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
    1364:	82 e0       	ldi	r24, 0x02	; 2
    1366:	80 93 ed 17 	sts	0x17ED, r24
    136a:	08 95       	ret

0000136c <irCommDataSent>:
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 91 bd 17 	lds	r25, 0x17BD
    1372:	91 30       	cpi	r25, 0x01	; 1
    1374:	09 f0       	breq	.+2      	; 0x1378 <irCommDataSent+0xc>
		return 0;
	} else {
		return 1;
	}
}
    1376:	08 95       	ret
	irCommTxByteEnqueued = 1;
	irCommEnabledNext = IRCOMM_MODE_TRANSMIT;
}

unsigned char irCommDataSent() {
	if(irCommTxByteEnqueued==1) {
    1378:	80 e0       	ldi	r24, 0x00	; 0
		return 0;
	} else {
		return 1;
	}
}
    137a:	08 95       	ret

0000137c <irCommDataAvailable>:

unsigned char irCommDataAvailable() {
	return irCommRxDataAvailable;
}
    137c:	80 91 c9 17 	lds	r24, 0x17C9
    1380:	08 95       	ret

00001382 <irCommReadData>:

unsigned char irCommReadData() {
	irCommRxDataAvailable = 0;
    1382:	10 92 c9 17 	sts	0x17C9, r1
	return irCommRxLastDataReceived;
}
    1386:	80 91 ca 17 	lds	r24, 0x17CA
    138a:	08 95       	ret

0000138c <AsebaNative_veccopy>:


// standard natives functions

void AsebaNative_veccopy(AsebaVMState *vm)
{
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ec 01       	movw	r28, r24
    1392:	ec 85       	ldd	r30, Y+12	; 0x0c
    1394:	fd 85       	ldd	r31, Y+13	; 0x0d
// support functions

/*! Return an argument on the stack, including the value of template parameters */
static inline sint16 AsebaNativePopArg(AsebaVMState *vm)
{
	return vm->stack[vm->sp--];
    1396:	4a 89       	ldd	r20, Y+18	; 0x12
    1398:	5b 89       	ldd	r21, Y+19	; 0x13
    139a:	ca 01       	movw	r24, r20
    139c:	01 97       	sbiw	r24, 0x01	; 1
    139e:	9b 8b       	std	Y+19, r25	; 0x13
    13a0:	8a 8b       	std	Y+18, r24	; 0x12
    13a2:	9a 01       	movw	r18, r20
    13a4:	22 0f       	add	r18, r18
    13a6:	33 1f       	adc	r19, r19
    13a8:	e2 0f       	add	r30, r18
    13aa:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    13ac:	20 81       	ld	r18, Z
    13ae:	31 81       	ldd	r19, Z+1	; 0x01
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	9b 8b       	std	Y+19, r25	; 0x13
    13b4:	8a 8b       	std	Y+18, r24	; 0x12
    13b6:	df 01       	movw	r26, r30
    13b8:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src = AsebaNativePopArg(vm);
    13ba:	0d 90       	ld	r0, X+
    13bc:	bc 91       	ld	r27, X
    13be:	a0 2d       	mov	r26, r0
    13c0:	43 50       	subi	r20, 0x03	; 3
    13c2:	51 09       	sbc	r21, r1
    13c4:	5b 8b       	std	Y+19, r21	; 0x13
    13c6:	4a 8b       	std	Y+18, r20	; 0x12
    13c8:	34 97       	sbiw	r30, 0x04	; 4
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    13ca:	40 81       	ld	r20, Z
    13cc:	51 81       	ldd	r21, Z+1	; 0x01
	
	uint16 i;
	
	for (i = 0; i < length; i++)
    13ce:	41 15       	cp	r20, r1
    13d0:	51 05       	cpc	r21, r1
    13d2:	a1 f0       	breq	.+40     	; 0x13fc <AsebaNative_veccopy+0x70>
    13d4:	e8 85       	ldd	r30, Y+8	; 0x08
    13d6:	f9 85       	ldd	r31, Y+9	; 0x09
    13d8:	aa 0f       	add	r26, r26
    13da:	bb 1f       	adc	r27, r27
    13dc:	ae 0f       	add	r26, r30
    13de:	bf 1f       	adc	r27, r31
    13e0:	22 0f       	add	r18, r18
    13e2:	33 1f       	adc	r19, r19
    13e4:	e2 0f       	add	r30, r18
    13e6:	f3 1f       	adc	r31, r19
    13e8:	80 e0       	ldi	r24, 0x00	; 0
    13ea:	90 e0       	ldi	r25, 0x00	; 0
	{
		vm->variables[dest++] = vm->variables[src++];
    13ec:	2d 91       	ld	r18, X+
    13ee:	3d 91       	ld	r19, X+
    13f0:	21 93       	st	Z+, r18
    13f2:	31 93       	st	Z+, r19
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	
	for (i = 0; i < length; i++)
    13f4:	01 96       	adiw	r24, 0x01	; 1
    13f6:	48 17       	cp	r20, r24
    13f8:	59 07       	cpc	r21, r25
    13fa:	c1 f7       	brne	.-16     	; 0x13ec <AsebaNative_veccopy+0x60>
	{
		vm->variables[dest++] = vm->variables[src++];
	}
}
    13fc:	df 91       	pop	r29
    13fe:	cf 91       	pop	r28
    1400:	08 95       	ret

00001402 <AsebaNative_vecfill>:
	}
};


void AsebaNative_vecfill(AsebaVMState *vm)
{
    1402:	cf 93       	push	r28
    1404:	df 93       	push	r29
    1406:	ec 01       	movw	r28, r24
    1408:	ec 85       	ldd	r30, Y+12	; 0x0c
    140a:	fd 85       	ldd	r31, Y+13	; 0x0d
    140c:	4a 89       	ldd	r20, Y+18	; 0x12
    140e:	5b 89       	ldd	r21, Y+19	; 0x13
    1410:	ca 01       	movw	r24, r20
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	9b 8b       	std	Y+19, r25	; 0x13
    1416:	8a 8b       	std	Y+18, r24	; 0x12
    1418:	9a 01       	movw	r18, r20
    141a:	22 0f       	add	r18, r18
    141c:	33 1f       	adc	r19, r19
    141e:	e2 0f       	add	r30, r18
    1420:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    1422:	20 81       	ld	r18, Z
    1424:	31 81       	ldd	r19, Z+1	; 0x01
    1426:	01 97       	sbiw	r24, 0x01	; 1
    1428:	9b 8b       	std	Y+19, r25	; 0x13
    142a:	8a 8b       	std	Y+18, r24	; 0x12
    142c:	df 01       	movw	r26, r30
    142e:	12 97       	sbiw	r26, 0x02	; 2
	uint16 value = AsebaNativePopArg(vm);
    1430:	0d 90       	ld	r0, X+
    1432:	bc 91       	ld	r27, X
    1434:	a0 2d       	mov	r26, r0
    1436:	43 50       	subi	r20, 0x03	; 3
    1438:	51 09       	sbc	r21, r1
    143a:	5b 8b       	std	Y+19, r21	; 0x13
    143c:	4a 8b       	std	Y+18, r20	; 0x12
    143e:	34 97       	sbiw	r30, 0x04	; 4
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1440:	40 81       	ld	r20, Z
    1442:	51 81       	ldd	r21, Z+1	; 0x01
	
	uint16 i;
	
	for (i = 0; i < length; i++)
    1444:	41 15       	cp	r20, r1
    1446:	51 05       	cpc	r21, r1
    1448:	a9 f0       	breq	.+42     	; 0x1474 <AsebaNative_vecfill+0x72>
    144a:	e8 85       	ldd	r30, Y+8	; 0x08
    144c:	f9 85       	ldd	r31, Y+9	; 0x09
    144e:	aa 0f       	add	r26, r26
    1450:	bb 1f       	adc	r27, r27
    1452:	ae 0f       	add	r26, r30
    1454:	bf 1f       	adc	r27, r31
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	e2 0f       	add	r30, r18
    145c:	f3 1f       	adc	r31, r19
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
	{
		vm->variables[dest++] = vm->variables[value];
    1462:	2d 91       	ld	r18, X+
    1464:	3c 91       	ld	r19, X
    1466:	11 97       	sbiw	r26, 0x01	; 1
    1468:	21 93       	st	Z+, r18
    146a:	31 93       	st	Z+, r19
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	
	for (i = 0; i < length; i++)
    146c:	01 96       	adiw	r24, 0x01	; 1
    146e:	48 17       	cp	r20, r24
    1470:	59 07       	cpc	r21, r25
    1472:	b9 f7       	brne	.-18     	; 0x1462 <AsebaNative_vecfill+0x60>
	{
		vm->variables[dest++] = vm->variables[value];
	}
}
    1474:	df 91       	pop	r29
    1476:	cf 91       	pop	r28
    1478:	08 95       	ret

0000147a <AsebaNative_vecaddscalar>:
	}
};


void AsebaNative_vecaddscalar(AsebaVMState *vm)
{
    147a:	0f 93       	push	r16
    147c:	1f 93       	push	r17
    147e:	cf 93       	push	r28
    1480:	df 93       	push	r29
    1482:	ec 01       	movw	r28, r24
    1484:	ec 85       	ldd	r30, Y+12	; 0x0c
    1486:	fd 85       	ldd	r31, Y+13	; 0x0d
    1488:	4a 89       	ldd	r20, Y+18	; 0x12
    148a:	5b 89       	ldd	r21, Y+19	; 0x13
    148c:	ca 01       	movw	r24, r20
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	9b 8b       	std	Y+19, r25	; 0x13
    1492:	8a 8b       	std	Y+18, r24	; 0x12
    1494:	ca 01       	movw	r24, r20
    1496:	88 0f       	add	r24, r24
    1498:	99 1f       	adc	r25, r25
    149a:	e8 0f       	add	r30, r24
    149c:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    149e:	20 81       	ld	r18, Z
    14a0:	31 81       	ldd	r19, Z+1	; 0x01
    14a2:	ca 01       	movw	r24, r20
    14a4:	02 97       	sbiw	r24, 0x02	; 2
    14a6:	9b 8b       	std	Y+19, r25	; 0x13
    14a8:	8a 8b       	std	Y+18, r24	; 0x12
    14aa:	df 01       	movw	r26, r30
    14ac:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src = AsebaNativePopArg(vm);
    14ae:	0d 91       	ld	r16, X+
    14b0:	1c 91       	ld	r17, X
    14b2:	01 97       	sbiw	r24, 0x01	; 1
    14b4:	9b 8b       	std	Y+19, r25	; 0x13
    14b6:	8a 8b       	std	Y+18, r24	; 0x12
    14b8:	cf 01       	movw	r24, r30
    14ba:	04 97       	sbiw	r24, 0x04	; 4
	uint16 scalar = AsebaNativePopArg(vm);
    14bc:	dc 01       	movw	r26, r24
    14be:	8d 91       	ld	r24, X+
    14c0:	9c 91       	ld	r25, X
    14c2:	44 50       	subi	r20, 0x04	; 4
    14c4:	51 09       	sbc	r21, r1
    14c6:	5b 8b       	std	Y+19, r21	; 0x13
    14c8:	4a 8b       	std	Y+18, r20	; 0x12
    14ca:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    14cc:	40 81       	ld	r20, Z
    14ce:	51 81       	ldd	r21, Z+1	; 0x01
	
	const sint16 scalarValue = vm->variables[scalar];
    14d0:	e8 85       	ldd	r30, Y+8	; 0x08
    14d2:	f9 85       	ldd	r31, Y+9	; 0x09
    14d4:	ec 01       	movw	r28, r24
    14d6:	cc 0f       	add	r28, r28
    14d8:	dd 1f       	adc	r29, r29
    14da:	ce 0f       	add	r28, r30
    14dc:	df 1f       	adc	r29, r31
    14de:	68 81       	ld	r22, Y
    14e0:	79 81       	ldd	r23, Y+1	; 0x01
	uint16 i;
	for (i = 0; i < length; i++)
    14e2:	41 15       	cp	r20, r1
    14e4:	51 05       	cpc	r21, r1
    14e6:	b1 f0       	breq	.+44     	; 0x1514 <AsebaNative_vecaddscalar+0x9a>
    14e8:	d8 01       	movw	r26, r16
    14ea:	aa 0f       	add	r26, r26
    14ec:	bb 1f       	adc	r27, r27
    14ee:	ae 0f       	add	r26, r30
    14f0:	bf 1f       	adc	r27, r31
    14f2:	22 0f       	add	r18, r18
    14f4:	33 1f       	adc	r19, r19
    14f6:	e2 0f       	add	r30, r18
    14f8:	f3 1f       	adc	r31, r19
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
	{
		vm->variables[dest++] = vm->variables[src++] + scalarValue;
    14fe:	8d 91       	ld	r24, X+
    1500:	9d 91       	ld	r25, X+
    1502:	86 0f       	add	r24, r22
    1504:	97 1f       	adc	r25, r23
    1506:	81 93       	st	Z+, r24
    1508:	91 93       	st	Z+, r25
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	const sint16 scalarValue = vm->variables[scalar];
	uint16 i;
	for (i = 0; i < length; i++)
    150a:	2f 5f       	subi	r18, 0xFF	; 255
    150c:	3f 4f       	sbci	r19, 0xFF	; 255
    150e:	42 17       	cp	r20, r18
    1510:	53 07       	cpc	r21, r19
    1512:	a9 f7       	brne	.-22     	; 0x14fe <AsebaNative_vecaddscalar+0x84>
	{
		vm->variables[dest++] = vm->variables[src++] + scalarValue;
	}
}
    1514:	df 91       	pop	r29
    1516:	cf 91       	pop	r28
    1518:	1f 91       	pop	r17
    151a:	0f 91       	pop	r16
    151c:	08 95       	ret

0000151e <AsebaNative_vecadd>:
	}
};


void AsebaNative_vecadd(AsebaVMState *vm)
{
    151e:	cf 93       	push	r28
    1520:	df 93       	push	r29
    1522:	ec 01       	movw	r28, r24
    1524:	ec 85       	ldd	r30, Y+12	; 0x0c
    1526:	fd 85       	ldd	r31, Y+13	; 0x0d
    1528:	4a 89       	ldd	r20, Y+18	; 0x12
    152a:	5b 89       	ldd	r21, Y+19	; 0x13
    152c:	ca 01       	movw	r24, r20
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	9b 8b       	std	Y+19, r25	; 0x13
    1532:	8a 8b       	std	Y+18, r24	; 0x12
    1534:	ca 01       	movw	r24, r20
    1536:	88 0f       	add	r24, r24
    1538:	99 1f       	adc	r25, r25
    153a:	e8 0f       	add	r30, r24
    153c:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    153e:	20 81       	ld	r18, Z
    1540:	31 81       	ldd	r19, Z+1	; 0x01
    1542:	ca 01       	movw	r24, r20
    1544:	02 97       	sbiw	r24, 0x02	; 2
    1546:	9b 8b       	std	Y+19, r25	; 0x13
    1548:	8a 8b       	std	Y+18, r24	; 0x12
    154a:	df 01       	movw	r26, r30
    154c:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src1 = AsebaNativePopArg(vm);
    154e:	8d 91       	ld	r24, X+
    1550:	9c 91       	ld	r25, X
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	ba 01       	movw	r22, r20
    1556:	63 50       	subi	r22, 0x03	; 3
    1558:	71 09       	sbc	r23, r1
    155a:	7b 8b       	std	Y+19, r23	; 0x13
    155c:	6a 8b       	std	Y+18, r22	; 0x12
    155e:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src2 = AsebaNativePopArg(vm);
    1560:	0d 90       	ld	r0, X+
    1562:	bc 91       	ld	r27, X
    1564:	a0 2d       	mov	r26, r0
    1566:	44 50       	subi	r20, 0x04	; 4
    1568:	51 09       	sbc	r21, r1
    156a:	5b 8b       	std	Y+19, r21	; 0x13
    156c:	4a 8b       	std	Y+18, r20	; 0x12
    156e:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1570:	40 81       	ld	r20, Z
    1572:	51 81       	ldd	r21, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    1574:	41 15       	cp	r20, r1
    1576:	51 05       	cpc	r21, r1
    1578:	f1 f0       	breq	.+60     	; 0x15b6 <AsebaNative_vecadd+0x98>
    157a:	e8 85       	ldd	r30, Y+8	; 0x08
    157c:	f9 85       	ldd	r31, Y+9	; 0x09
    157e:	ec 01       	movw	r28, r24
    1580:	cc 0f       	add	r28, r28
    1582:	dd 1f       	adc	r29, r29
    1584:	ce 0f       	add	r28, r30
    1586:	df 1f       	adc	r29, r31
    1588:	aa 0f       	add	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	ae 0f       	add	r26, r30
    158e:	bf 1f       	adc	r27, r31
    1590:	22 0f       	add	r18, r18
    1592:	33 1f       	adc	r19, r19
    1594:	e2 0f       	add	r30, r18
    1596:	f3 1f       	adc	r31, r19
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
	{
		vm->variables[dest++] = vm->variables[src1++] + vm->variables[src2++];
    159c:	69 91       	ld	r22, Y+
    159e:	79 91       	ld	r23, Y+
    15a0:	8d 91       	ld	r24, X+
    15a2:	9d 91       	ld	r25, X+
    15a4:	86 0f       	add	r24, r22
    15a6:	97 1f       	adc	r25, r23
    15a8:	81 93       	st	Z+, r24
    15aa:	91 93       	st	Z+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    15ac:	2f 5f       	subi	r18, 0xFF	; 255
    15ae:	3f 4f       	sbci	r19, 0xFF	; 255
    15b0:	42 17       	cp	r20, r18
    15b2:	53 07       	cpc	r21, r19
    15b4:	99 f7       	brne	.-26     	; 0x159c <AsebaNative_vecadd+0x7e>
	{
		vm->variables[dest++] = vm->variables[src1++] + vm->variables[src2++];
	}
}
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <AsebaNative_vecsub>:
	}
};


void AsebaNative_vecsub(AsebaVMState *vm)
{
    15bc:	cf 93       	push	r28
    15be:	df 93       	push	r29
    15c0:	ec 01       	movw	r28, r24
    15c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    15c4:	fd 85       	ldd	r31, Y+13	; 0x0d
    15c6:	4a 89       	ldd	r20, Y+18	; 0x12
    15c8:	5b 89       	ldd	r21, Y+19	; 0x13
    15ca:	ca 01       	movw	r24, r20
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9b 8b       	std	Y+19, r25	; 0x13
    15d0:	8a 8b       	std	Y+18, r24	; 0x12
    15d2:	ca 01       	movw	r24, r20
    15d4:	88 0f       	add	r24, r24
    15d6:	99 1f       	adc	r25, r25
    15d8:	e8 0f       	add	r30, r24
    15da:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    15dc:	20 81       	ld	r18, Z
    15de:	31 81       	ldd	r19, Z+1	; 0x01
    15e0:	ca 01       	movw	r24, r20
    15e2:	02 97       	sbiw	r24, 0x02	; 2
    15e4:	9b 8b       	std	Y+19, r25	; 0x13
    15e6:	8a 8b       	std	Y+18, r24	; 0x12
    15e8:	df 01       	movw	r26, r30
    15ea:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src1 = AsebaNativePopArg(vm);
    15ec:	8d 91       	ld	r24, X+
    15ee:	9c 91       	ld	r25, X
    15f0:	11 97       	sbiw	r26, 0x01	; 1
    15f2:	ba 01       	movw	r22, r20
    15f4:	63 50       	subi	r22, 0x03	; 3
    15f6:	71 09       	sbc	r23, r1
    15f8:	7b 8b       	std	Y+19, r23	; 0x13
    15fa:	6a 8b       	std	Y+18, r22	; 0x12
    15fc:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src2 = AsebaNativePopArg(vm);
    15fe:	0d 90       	ld	r0, X+
    1600:	bc 91       	ld	r27, X
    1602:	a0 2d       	mov	r26, r0
    1604:	44 50       	subi	r20, 0x04	; 4
    1606:	51 09       	sbc	r21, r1
    1608:	5b 8b       	std	Y+19, r21	; 0x13
    160a:	4a 8b       	std	Y+18, r20	; 0x12
    160c:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    160e:	40 81       	ld	r20, Z
    1610:	51 81       	ldd	r21, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    1612:	41 15       	cp	r20, r1
    1614:	51 05       	cpc	r21, r1
    1616:	f1 f0       	breq	.+60     	; 0x1654 <AsebaNative_vecsub+0x98>
    1618:	e8 85       	ldd	r30, Y+8	; 0x08
    161a:	f9 85       	ldd	r31, Y+9	; 0x09
    161c:	ec 01       	movw	r28, r24
    161e:	cc 0f       	add	r28, r28
    1620:	dd 1f       	adc	r29, r29
    1622:	ce 0f       	add	r28, r30
    1624:	df 1f       	adc	r29, r31
    1626:	aa 0f       	add	r26, r26
    1628:	bb 1f       	adc	r27, r27
    162a:	ae 0f       	add	r26, r30
    162c:	bf 1f       	adc	r27, r31
    162e:	22 0f       	add	r18, r18
    1630:	33 1f       	adc	r19, r19
    1632:	e2 0f       	add	r30, r18
    1634:	f3 1f       	adc	r31, r19
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
	{
		vm->variables[dest++] = vm->variables[src1++] - vm->variables[src2++];
    163a:	89 91       	ld	r24, Y+
    163c:	99 91       	ld	r25, Y+
    163e:	6d 91       	ld	r22, X+
    1640:	7d 91       	ld	r23, X+
    1642:	86 1b       	sub	r24, r22
    1644:	97 0b       	sbc	r25, r23
    1646:	81 93       	st	Z+, r24
    1648:	91 93       	st	Z+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    164a:	2f 5f       	subi	r18, 0xFF	; 255
    164c:	3f 4f       	sbci	r19, 0xFF	; 255
    164e:	42 17       	cp	r20, r18
    1650:	53 07       	cpc	r21, r19
    1652:	99 f7       	brne	.-26     	; 0x163a <AsebaNative_vecsub+0x7e>
	{
		vm->variables[dest++] = vm->variables[src1++] - vm->variables[src2++];
	}
}
    1654:	df 91       	pop	r29
    1656:	cf 91       	pop	r28
    1658:	08 95       	ret

0000165a <AsebaNative_vecmul>:
	}
};


void AsebaNative_vecmul(AsebaVMState *vm)
{
    165a:	0f 93       	push	r16
    165c:	1f 93       	push	r17
    165e:	cf 93       	push	r28
    1660:	df 93       	push	r29
    1662:	ec 01       	movw	r28, r24
    1664:	ec 85       	ldd	r30, Y+12	; 0x0c
    1666:	fd 85       	ldd	r31, Y+13	; 0x0d
    1668:	4a 89       	ldd	r20, Y+18	; 0x12
    166a:	5b 89       	ldd	r21, Y+19	; 0x13
    166c:	ca 01       	movw	r24, r20
    166e:	01 97       	sbiw	r24, 0x01	; 1
    1670:	9b 8b       	std	Y+19, r25	; 0x13
    1672:	8a 8b       	std	Y+18, r24	; 0x12
    1674:	ca 01       	movw	r24, r20
    1676:	88 0f       	add	r24, r24
    1678:	99 1f       	adc	r25, r25
    167a:	e8 0f       	add	r30, r24
    167c:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    167e:	20 81       	ld	r18, Z
    1680:	31 81       	ldd	r19, Z+1	; 0x01
    1682:	ca 01       	movw	r24, r20
    1684:	02 97       	sbiw	r24, 0x02	; 2
    1686:	9b 8b       	std	Y+19, r25	; 0x13
    1688:	8a 8b       	std	Y+18, r24	; 0x12
    168a:	df 01       	movw	r26, r30
    168c:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src1 = AsebaNativePopArg(vm);
    168e:	8d 91       	ld	r24, X+
    1690:	9c 91       	ld	r25, X
    1692:	11 97       	sbiw	r26, 0x01	; 1
    1694:	ba 01       	movw	r22, r20
    1696:	63 50       	subi	r22, 0x03	; 3
    1698:	71 09       	sbc	r23, r1
    169a:	7b 8b       	std	Y+19, r23	; 0x13
    169c:	6a 8b       	std	Y+18, r22	; 0x12
    169e:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src2 = AsebaNativePopArg(vm);
    16a0:	0d 90       	ld	r0, X+
    16a2:	bc 91       	ld	r27, X
    16a4:	a0 2d       	mov	r26, r0
    16a6:	44 50       	subi	r20, 0x04	; 4
    16a8:	51 09       	sbc	r21, r1
    16aa:	5b 8b       	std	Y+19, r21	; 0x13
    16ac:	4a 8b       	std	Y+18, r20	; 0x12
    16ae:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    16b0:	60 81       	ld	r22, Z
    16b2:	71 81       	ldd	r23, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    16b4:	61 15       	cp	r22, r1
    16b6:	71 05       	cpc	r23, r1
    16b8:	11 f1       	breq	.+68     	; 0x16fe <AsebaNative_vecmul+0xa4>
    16ba:	e8 85       	ldd	r30, Y+8	; 0x08
    16bc:	f9 85       	ldd	r31, Y+9	; 0x09
    16be:	ec 01       	movw	r28, r24
    16c0:	cc 0f       	add	r28, r28
    16c2:	dd 1f       	adc	r29, r29
    16c4:	ce 0f       	add	r28, r30
    16c6:	df 1f       	adc	r29, r31
    16c8:	aa 0f       	add	r26, r26
    16ca:	bb 1f       	adc	r27, r27
    16cc:	ae 0f       	add	r26, r30
    16ce:	bf 1f       	adc	r27, r31
    16d0:	22 0f       	add	r18, r18
    16d2:	33 1f       	adc	r19, r19
    16d4:	e2 0f       	add	r30, r18
    16d6:	f3 1f       	adc	r31, r19
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
	{
		vm->variables[dest++] = vm->variables[src1++] * vm->variables[src2++];
    16dc:	09 91       	ld	r16, Y+
    16de:	19 91       	ld	r17, Y+
    16e0:	4d 91       	ld	r20, X+
    16e2:	5d 91       	ld	r21, X+
    16e4:	04 9f       	mul	r16, r20
    16e6:	90 01       	movw	r18, r0
    16e8:	05 9f       	mul	r16, r21
    16ea:	30 0d       	add	r19, r0
    16ec:	14 9f       	mul	r17, r20
    16ee:	30 0d       	add	r19, r0
    16f0:	11 24       	eor	r1, r1
    16f2:	21 93       	st	Z+, r18
    16f4:	31 93       	st	Z+, r19
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    16f6:	01 96       	adiw	r24, 0x01	; 1
    16f8:	68 17       	cp	r22, r24
    16fa:	79 07       	cpc	r23, r25
    16fc:	79 f7       	brne	.-34     	; 0x16dc <AsebaNative_vecmul+0x82>
	{
		vm->variables[dest++] = vm->variables[src1++] * vm->variables[src2++];
	}
}
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	08 95       	ret

00001708 <AsebaNative_vecdiv>:
	}
};


void AsebaNative_vecdiv(AsebaVMState *vm)
{
    1708:	4f 92       	push	r4
    170a:	5f 92       	push	r5
    170c:	8f 92       	push	r8
    170e:	9f 92       	push	r9
    1710:	af 92       	push	r10
    1712:	bf 92       	push	r11
    1714:	cf 92       	push	r12
    1716:	df 92       	push	r13
    1718:	ef 92       	push	r14
    171a:	ff 92       	push	r15
    171c:	0f 93       	push	r16
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	4c 01       	movw	r8, r24
    1726:	dc 01       	movw	r26, r24
    1728:	1c 96       	adiw	r26, 0x0c	; 12
    172a:	ed 91       	ld	r30, X+
    172c:	fc 91       	ld	r31, X
    172e:	1d 97       	sbiw	r26, 0x0d	; 13
    1730:	52 96       	adiw	r26, 0x12	; 18
    1732:	8d 91       	ld	r24, X+
    1734:	9c 91       	ld	r25, X
    1736:	53 97       	sbiw	r26, 0x13	; 19
    1738:	9c 01       	movw	r18, r24
    173a:	21 50       	subi	r18, 0x01	; 1
    173c:	31 09       	sbc	r19, r1
    173e:	53 96       	adiw	r26, 0x13	; 19
    1740:	3c 93       	st	X, r19
    1742:	2e 93       	st	-X, r18
    1744:	52 97       	sbiw	r26, 0x12	; 18
    1746:	9c 01       	movw	r18, r24
    1748:	22 0f       	add	r18, r18
    174a:	33 1f       	adc	r19, r19
    174c:	e2 0f       	add	r30, r18
    174e:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    1750:	e0 80       	ld	r14, Z
    1752:	f1 80       	ldd	r15, Z+1	; 0x01
    1754:	9c 01       	movw	r18, r24
    1756:	22 50       	subi	r18, 0x02	; 2
    1758:	31 09       	sbc	r19, r1
    175a:	53 96       	adiw	r26, 0x13	; 19
    175c:	3c 93       	st	X, r19
    175e:	2e 93       	st	-X, r18
    1760:	52 97       	sbiw	r26, 0x12	; 18
    1762:	df 01       	movw	r26, r30
    1764:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src1 = AsebaNativePopArg(vm);
    1766:	0d 91       	ld	r16, X+
    1768:	1c 91       	ld	r17, X
    176a:	21 50       	subi	r18, 0x01	; 1
    176c:	31 09       	sbc	r19, r1
    176e:	d4 01       	movw	r26, r8
    1770:	53 96       	adiw	r26, 0x13	; 19
    1772:	3c 93       	st	X, r19
    1774:	2e 93       	st	-X, r18
    1776:	52 97       	sbiw	r26, 0x12	; 18
    1778:	df 01       	movw	r26, r30
    177a:	14 97       	sbiw	r26, 0x04	; 4
	uint16 src2 = AsebaNativePopArg(vm);
    177c:	cd 90       	ld	r12, X+
    177e:	dc 90       	ld	r13, X
    1780:	04 97       	sbiw	r24, 0x04	; 4
    1782:	d4 01       	movw	r26, r8
    1784:	53 96       	adiw	r26, 0x13	; 19
    1786:	9c 93       	st	X, r25
    1788:	8e 93       	st	-X, r24
    178a:	52 97       	sbiw	r26, 0x12	; 18
    178c:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    178e:	a0 80       	ld	r10, Z
    1790:	b1 80       	ldd	r11, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    1792:	a1 14       	cp	r10, r1
    1794:	b1 04       	cpc	r11, r1
    1796:	09 f4       	brne	.+2      	; 0x179a <AsebaNative_vecdiv+0x92>
    1798:	4d c0       	rjmp	.+154    	; 0x1834 <AsebaNative_vecdiv+0x12c>
	{
		sint32 dividend = (sint32)vm->variables[src1++];
    179a:	f4 01       	movw	r30, r8
    179c:	a0 85       	ldd	r26, Z+8	; 0x08
    179e:	b1 85       	ldd	r27, Z+9	; 0x09
    17a0:	00 0f       	add	r16, r16
    17a2:	11 1f       	adc	r17, r17
    17a4:	fd 01       	movw	r30, r26
    17a6:	e0 0f       	add	r30, r16
    17a8:	f1 1f       	adc	r31, r17
    17aa:	40 80       	ld	r4, Z
    17ac:	51 80       	ldd	r5, Z+1	; 0x01
    17ae:	b2 01       	movw	r22, r4
    17b0:	55 0c       	add	r5, r5
    17b2:	88 0b       	sbc	r24, r24
    17b4:	99 0b       	sbc	r25, r25
		sint32 divisor = (sint32)vm->variables[src2++];
    17b6:	cc 0c       	add	r12, r12
    17b8:	dd 1c       	adc	r13, r13
    17ba:	fd 01       	movw	r30, r26
    17bc:	ec 0d       	add	r30, r12
    17be:	fd 1d       	adc	r31, r13
    17c0:	20 81       	ld	r18, Z
    17c2:	31 81       	ldd	r19, Z+1	; 0x01
    17c4:	03 2e       	mov	r0, r19
    17c6:	00 0c       	add	r0, r0
    17c8:	44 0b       	sbc	r20, r20
    17ca:	55 0b       	sbc	r21, r21
		
		if (divisor != 0)
    17cc:	21 15       	cp	r18, r1
    17ce:	31 05       	cpc	r19, r1
    17d0:	41 05       	cpc	r20, r1
    17d2:	51 05       	cpc	r21, r1
    17d4:	f1 f1       	breq	.+124    	; 0x1852 <AsebaNative_vecdiv+0x14a>
    17d6:	ee 0c       	add	r14, r14
    17d8:	ff 1c       	adc	r15, r15
    17da:	ea 0e       	add	r14, r26
    17dc:	fb 1e       	adc	r15, r27
    17de:	0e 5f       	subi	r16, 0xFE	; 254
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	0a 0f       	add	r16, r26
    17e4:	1b 1f       	adc	r17, r27
    17e6:	f2 e0       	ldi	r31, 0x02	; 2
    17e8:	cf 0e       	add	r12, r31
    17ea:	d1 1c       	adc	r13, r1
    17ec:	ca 0e       	add	r12, r26
    17ee:	db 1e       	adc	r13, r27
    17f0:	c0 e0       	ldi	r28, 0x00	; 0
    17f2:	d0 e0       	ldi	r29, 0x00	; 0
    17f4:	15 c0       	rjmp	.+42     	; 0x1820 <AsebaNative_vecdiv+0x118>
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint32 dividend = (sint32)vm->variables[src1++];
    17f6:	f8 01       	movw	r30, r16
    17f8:	41 90       	ld	r4, Z+
    17fa:	51 90       	ld	r5, Z+
    17fc:	8f 01       	movw	r16, r30
    17fe:	b2 01       	movw	r22, r4
    1800:	55 0c       	add	r5, r5
    1802:	88 0b       	sbc	r24, r24
    1804:	99 0b       	sbc	r25, r25
		sint32 divisor = (sint32)vm->variables[src2++];
    1806:	d6 01       	movw	r26, r12
    1808:	2d 91       	ld	r18, X+
    180a:	3d 91       	ld	r19, X+
    180c:	6d 01       	movw	r12, r26
    180e:	03 2e       	mov	r0, r19
    1810:	00 0c       	add	r0, r0
    1812:	44 0b       	sbc	r20, r20
    1814:	55 0b       	sbc	r21, r21
		
		if (divisor != 0)
    1816:	21 15       	cp	r18, r1
    1818:	31 05       	cpc	r19, r1
    181a:	41 05       	cpc	r20, r1
    181c:	51 05       	cpc	r21, r1
    181e:	c9 f0       	breq	.+50     	; 0x1852 <AsebaNative_vecdiv+0x14a>
		{
			vm->variables[dest++] = (sint16)(dividend / divisor);
    1820:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
    1824:	f7 01       	movw	r30, r14
    1826:	21 93       	st	Z+, r18
    1828:	31 93       	st	Z+, r19
    182a:	7f 01       	movw	r14, r30
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    182c:	21 96       	adiw	r28, 0x01	; 1
    182e:	ac 16       	cp	r10, r28
    1830:	bd 06       	cpc	r11, r29
    1832:	09 f7       	brne	.-62     	; 0x17f6 <AsebaNative_vecdiv+0xee>
			vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
			AsebaSendMessage(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &(vm->pc), sizeof(vm->pc));
			return;
		}
	}
}
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	1f 91       	pop	r17
    183a:	0f 91       	pop	r16
    183c:	ff 90       	pop	r15
    183e:	ef 90       	pop	r14
    1840:	df 90       	pop	r13
    1842:	cf 90       	pop	r12
    1844:	bf 90       	pop	r11
    1846:	af 90       	pop	r10
    1848:	9f 90       	pop	r9
    184a:	8f 90       	pop	r8
    184c:	5f 90       	pop	r5
    184e:	4f 90       	pop	r4
    1850:	08 95       	ret
		{
			vm->variables[dest++] = (sint16)(dividend / divisor);
		}
		else
		{
			vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    1852:	82 e0       	ldi	r24, 0x02	; 2
    1854:	90 e0       	ldi	r25, 0x00	; 0
    1856:	d4 01       	movw	r26, r8
    1858:	1f 96       	adiw	r26, 0x0f	; 15
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	1e 97       	sbiw	r26, 0x0e	; 14
			AsebaSendMessage(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &(vm->pc), sizeof(vm->pc));
    1860:	a4 01       	movw	r20, r8
    1862:	40 5f       	subi	r20, 0xF0	; 240
    1864:	5f 4f       	sbci	r21, 0xFF	; 255
    1866:	22 e0       	ldi	r18, 0x02	; 2
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	67 e0       	ldi	r22, 0x07	; 7
    186c:	70 e9       	ldi	r23, 0x90	; 144
    186e:	c4 01       	movw	r24, r8
			return;
		}
	}
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	1f 91       	pop	r17
    1876:	0f 91       	pop	r16
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	bf 90       	pop	r11
    1882:	af 90       	pop	r10
    1884:	9f 90       	pop	r9
    1886:	8f 90       	pop	r8
    1888:	5f 90       	pop	r5
    188a:	4f 90       	pop	r4
			vm->variables[dest++] = (sint16)(dividend / divisor);
		}
		else
		{
			vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
			AsebaSendMessage(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &(vm->pc), sizeof(vm->pc));
    188c:	0c 94 ac 46 	jmp	0x8d58	; 0x8d58 <AsebaSendMessage>

00001890 <AsebaNative_vecmin>:
	}
};


void AsebaNative_vecmin(AsebaVMState *vm)
{
    1890:	cf 93       	push	r28
    1892:	df 93       	push	r29
    1894:	ec 01       	movw	r28, r24
    1896:	ec 85       	ldd	r30, Y+12	; 0x0c
    1898:	fd 85       	ldd	r31, Y+13	; 0x0d
    189a:	4a 89       	ldd	r20, Y+18	; 0x12
    189c:	5b 89       	ldd	r21, Y+19	; 0x13
    189e:	ca 01       	movw	r24, r20
    18a0:	01 97       	sbiw	r24, 0x01	; 1
    18a2:	9b 8b       	std	Y+19, r25	; 0x13
    18a4:	8a 8b       	std	Y+18, r24	; 0x12
    18a6:	ca 01       	movw	r24, r20
    18a8:	88 0f       	add	r24, r24
    18aa:	99 1f       	adc	r25, r25
    18ac:	e8 0f       	add	r30, r24
    18ae:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    18b0:	20 81       	ld	r18, Z
    18b2:	31 81       	ldd	r19, Z+1	; 0x01
    18b4:	ca 01       	movw	r24, r20
    18b6:	02 97       	sbiw	r24, 0x02	; 2
    18b8:	9b 8b       	std	Y+19, r25	; 0x13
    18ba:	8a 8b       	std	Y+18, r24	; 0x12
    18bc:	df 01       	movw	r26, r30
    18be:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src1 = AsebaNativePopArg(vm);
    18c0:	8d 91       	ld	r24, X+
    18c2:	9c 91       	ld	r25, X
    18c4:	11 97       	sbiw	r26, 0x01	; 1
    18c6:	ba 01       	movw	r22, r20
    18c8:	63 50       	subi	r22, 0x03	; 3
    18ca:	71 09       	sbc	r23, r1
    18cc:	7b 8b       	std	Y+19, r23	; 0x13
    18ce:	6a 8b       	std	Y+18, r22	; 0x12
    18d0:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src2 = AsebaNativePopArg(vm);
    18d2:	0d 90       	ld	r0, X+
    18d4:	bc 91       	ld	r27, X
    18d6:	a0 2d       	mov	r26, r0
    18d8:	44 50       	subi	r20, 0x04	; 4
    18da:	51 09       	sbc	r21, r1
    18dc:	5b 8b       	std	Y+19, r21	; 0x13
    18de:	4a 8b       	std	Y+18, r20	; 0x12
    18e0:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    18e2:	60 81       	ld	r22, Z
    18e4:	71 81       	ldd	r23, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    18e6:	61 15       	cp	r22, r1
    18e8:	71 05       	cpc	r23, r1
    18ea:	01 f1       	breq	.+64     	; 0x192c <AsebaNative_vecmin+0x9c>
    18ec:	e8 85       	ldd	r30, Y+8	; 0x08
    18ee:	f9 85       	ldd	r31, Y+9	; 0x09
    18f0:	ec 01       	movw	r28, r24
    18f2:	cc 0f       	add	r28, r28
    18f4:	dd 1f       	adc	r29, r29
    18f6:	ce 0f       	add	r28, r30
    18f8:	df 1f       	adc	r29, r31
    18fa:	aa 0f       	add	r26, r26
    18fc:	bb 1f       	adc	r27, r27
    18fe:	ae 0f       	add	r26, r30
    1900:	bf 1f       	adc	r27, r31
    1902:	22 0f       	add	r18, r18
    1904:	33 1f       	adc	r19, r19
    1906:	e2 0f       	add	r30, r18
    1908:	f3 1f       	adc	r31, r19
    190a:	20 e0       	ldi	r18, 0x00	; 0
    190c:	30 e0       	ldi	r19, 0x00	; 0
	{
		sint16 v1 = vm->variables[src1++];
    190e:	49 91       	ld	r20, Y+
    1910:	59 91       	ld	r21, Y+
		sint16 v2 = vm->variables[src2++];
		sint16 res = v1 < v2 ? v1 : v2;
    1912:	8d 91       	ld	r24, X+
    1914:	9d 91       	ld	r25, X+
    1916:	48 17       	cp	r20, r24
    1918:	59 07       	cpc	r21, r25
    191a:	0c f4       	brge	.+2      	; 0x191e <AsebaNative_vecmin+0x8e>
    191c:	ca 01       	movw	r24, r20
		vm->variables[dest++] = res;
    191e:	81 93       	st	Z+, r24
    1920:	91 93       	st	Z+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    1922:	2f 5f       	subi	r18, 0xFF	; 255
    1924:	3f 4f       	sbci	r19, 0xFF	; 255
    1926:	62 17       	cp	r22, r18
    1928:	73 07       	cpc	r23, r19
    192a:	89 f7       	brne	.-30     	; 0x190e <AsebaNative_vecmin+0x7e>
		sint16 v1 = vm->variables[src1++];
		sint16 v2 = vm->variables[src2++];
		sint16 res = v1 < v2 ? v1 : v2;
		vm->variables[dest++] = res;
	}
}
    192c:	df 91       	pop	r29
    192e:	cf 91       	pop	r28
    1930:	08 95       	ret

00001932 <AsebaNative_vecmax>:
	}
};


void AsebaNative_vecmax(AsebaVMState *vm)
{
    1932:	cf 93       	push	r28
    1934:	df 93       	push	r29
    1936:	ec 01       	movw	r28, r24
    1938:	ec 85       	ldd	r30, Y+12	; 0x0c
    193a:	fd 85       	ldd	r31, Y+13	; 0x0d
    193c:	4a 89       	ldd	r20, Y+18	; 0x12
    193e:	5b 89       	ldd	r21, Y+19	; 0x13
    1940:	ca 01       	movw	r24, r20
    1942:	01 97       	sbiw	r24, 0x01	; 1
    1944:	9b 8b       	std	Y+19, r25	; 0x13
    1946:	8a 8b       	std	Y+18, r24	; 0x12
    1948:	ca 01       	movw	r24, r20
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	e8 0f       	add	r30, r24
    1950:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    1952:	20 81       	ld	r18, Z
    1954:	31 81       	ldd	r19, Z+1	; 0x01
    1956:	ca 01       	movw	r24, r20
    1958:	02 97       	sbiw	r24, 0x02	; 2
    195a:	9b 8b       	std	Y+19, r25	; 0x13
    195c:	8a 8b       	std	Y+18, r24	; 0x12
    195e:	df 01       	movw	r26, r30
    1960:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src1 = AsebaNativePopArg(vm);
    1962:	8d 91       	ld	r24, X+
    1964:	9c 91       	ld	r25, X
    1966:	11 97       	sbiw	r26, 0x01	; 1
    1968:	ba 01       	movw	r22, r20
    196a:	63 50       	subi	r22, 0x03	; 3
    196c:	71 09       	sbc	r23, r1
    196e:	7b 8b       	std	Y+19, r23	; 0x13
    1970:	6a 8b       	std	Y+18, r22	; 0x12
    1972:	12 97       	sbiw	r26, 0x02	; 2
	uint16 src2 = AsebaNativePopArg(vm);
    1974:	0d 90       	ld	r0, X+
    1976:	bc 91       	ld	r27, X
    1978:	a0 2d       	mov	r26, r0
    197a:	44 50       	subi	r20, 0x04	; 4
    197c:	51 09       	sbc	r21, r1
    197e:	5b 8b       	std	Y+19, r21	; 0x13
    1980:	4a 8b       	std	Y+18, r20	; 0x12
    1982:	36 97       	sbiw	r30, 0x06	; 6
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1984:	60 81       	ld	r22, Z
    1986:	71 81       	ldd	r23, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    1988:	61 15       	cp	r22, r1
    198a:	71 05       	cpc	r23, r1
    198c:	01 f1       	breq	.+64     	; 0x19ce <AsebaNative_vecmax+0x9c>
    198e:	e8 85       	ldd	r30, Y+8	; 0x08
    1990:	f9 85       	ldd	r31, Y+9	; 0x09
    1992:	ec 01       	movw	r28, r24
    1994:	cc 0f       	add	r28, r28
    1996:	dd 1f       	adc	r29, r29
    1998:	ce 0f       	add	r28, r30
    199a:	df 1f       	adc	r29, r31
    199c:	aa 0f       	add	r26, r26
    199e:	bb 1f       	adc	r27, r27
    19a0:	ae 0f       	add	r26, r30
    19a2:	bf 1f       	adc	r27, r31
    19a4:	22 0f       	add	r18, r18
    19a6:	33 1f       	adc	r19, r19
    19a8:	e2 0f       	add	r30, r18
    19aa:	f3 1f       	adc	r31, r19
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
	{
		sint16 v1 = vm->variables[src1++];
    19b0:	49 91       	ld	r20, Y+
    19b2:	59 91       	ld	r21, Y+
		sint16 v2 = vm->variables[src2++];
		sint16 res = v1 > v2 ? v1 : v2;
    19b4:	8d 91       	ld	r24, X+
    19b6:	9d 91       	ld	r25, X+
    19b8:	84 17       	cp	r24, r20
    19ba:	95 07       	cpc	r25, r21
    19bc:	0c f4       	brge	.+2      	; 0x19c0 <AsebaNative_vecmax+0x8e>
    19be:	ca 01       	movw	r24, r20
		vm->variables[dest++] = res;
    19c0:	81 93       	st	Z+, r24
    19c2:	91 93       	st	Z+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    19c4:	2f 5f       	subi	r18, 0xFF	; 255
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	62 17       	cp	r22, r18
    19ca:	73 07       	cpc	r23, r19
    19cc:	89 f7       	brne	.-30     	; 0x19b0 <AsebaNative_vecmax+0x7e>
		sint16 v1 = vm->variables[src1++];
		sint16 v2 = vm->variables[src2++];
		sint16 res = v1 > v2 ? v1 : v2;
		vm->variables[dest++] = res;
	}
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <AsebaNative_vecclamp>:
		{ 0, 0 }
	}
};

void AsebaNative_vecclamp(AsebaVMState *vm)
{
    19d4:	cf 92       	push	r12
    19d6:	df 92       	push	r13
    19d8:	ef 92       	push	r14
    19da:	ff 92       	push	r15
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	dc 01       	movw	r26, r24
    19e6:	1c 96       	adiw	r26, 0x0c	; 12
    19e8:	ed 91       	ld	r30, X+
    19ea:	fc 91       	ld	r31, X
    19ec:	1d 97       	sbiw	r26, 0x0d	; 13
    19ee:	52 96       	adiw	r26, 0x12	; 18
    19f0:	4d 91       	ld	r20, X+
    19f2:	5c 91       	ld	r21, X
    19f4:	53 97       	sbiw	r26, 0x13	; 19
    19f6:	ca 01       	movw	r24, r20
    19f8:	01 97       	sbiw	r24, 0x01	; 1
    19fa:	53 96       	adiw	r26, 0x13	; 19
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
    1a00:	52 97       	sbiw	r26, 0x12	; 18
    1a02:	ca 01       	movw	r24, r20
    1a04:	88 0f       	add	r24, r24
    1a06:	99 1f       	adc	r25, r25
    1a08:	e8 0f       	add	r30, r24
    1a0a:	f9 1f       	adc	r31, r25
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    1a0c:	20 81       	ld	r18, Z
    1a0e:	31 81       	ldd	r19, Z+1	; 0x01
    1a10:	ca 01       	movw	r24, r20
    1a12:	02 97       	sbiw	r24, 0x02	; 2
    1a14:	53 96       	adiw	r26, 0x13	; 19
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	52 97       	sbiw	r26, 0x12	; 18
    1a1c:	ef 01       	movw	r28, r30
    1a1e:	22 97       	sbiw	r28, 0x02	; 2
	uint16 src = AsebaNativePopArg(vm);
    1a20:	08 81       	ld	r16, Y
    1a22:	19 81       	ldd	r17, Y+1	; 0x01
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	53 96       	adiw	r26, 0x13	; 19
    1a28:	9c 93       	st	X, r25
    1a2a:	8e 93       	st	-X, r24
    1a2c:	52 97       	sbiw	r26, 0x12	; 18
    1a2e:	22 97       	sbiw	r28, 0x02	; 2
	uint16 low = AsebaNativePopArg(vm);
    1a30:	68 81       	ld	r22, Y
    1a32:	79 81       	ldd	r23, Y+1	; 0x01
    1a34:	01 97       	sbiw	r24, 0x01	; 1
    1a36:	53 96       	adiw	r26, 0x13	; 19
    1a38:	9c 93       	st	X, r25
    1a3a:	8e 93       	st	-X, r24
    1a3c:	52 97       	sbiw	r26, 0x12	; 18
    1a3e:	cf 01       	movw	r24, r30
    1a40:	06 97       	sbiw	r24, 0x06	; 6
	uint16 high = AsebaNativePopArg(vm);
    1a42:	ec 01       	movw	r28, r24
    1a44:	88 81       	ld	r24, Y
    1a46:	99 81       	ldd	r25, Y+1	; 0x01
    1a48:	45 50       	subi	r20, 0x05	; 5
    1a4a:	51 09       	sbc	r21, r1
    1a4c:	53 96       	adiw	r26, 0x13	; 19
    1a4e:	5c 93       	st	X, r21
    1a50:	4e 93       	st	-X, r20
    1a52:	52 97       	sbiw	r26, 0x12	; 18
    1a54:	38 97       	sbiw	r30, 0x08	; 8
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1a56:	e0 80       	ld	r14, Z
    1a58:	f1 80       	ldd	r15, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    1a5a:	e1 14       	cp	r14, r1
    1a5c:	f1 04       	cpc	r15, r1
    1a5e:	91 f1       	breq	.+100    	; 0x1ac4 <AsebaNative_vecclamp+0xf0>
    1a60:	18 96       	adiw	r26, 0x08	; 8
    1a62:	ed 91       	ld	r30, X+
    1a64:	fc 91       	ld	r31, X
    1a66:	19 97       	sbiw	r26, 0x09	; 9
    1a68:	00 0f       	add	r16, r16
    1a6a:	11 1f       	adc	r17, r17
    1a6c:	0e 0f       	add	r16, r30
    1a6e:	1f 1f       	adc	r17, r31
    1a70:	eb 01       	movw	r28, r22
    1a72:	cc 0f       	add	r28, r28
    1a74:	dd 1f       	adc	r29, r29
    1a76:	ce 0f       	add	r28, r30
    1a78:	df 1f       	adc	r29, r31
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	aa 0f       	add	r26, r26
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	ae 0f       	add	r26, r30
    1a82:	bf 1f       	adc	r27, r31
    1a84:	22 0f       	add	r18, r18
    1a86:	33 1f       	adc	r19, r19
    1a88:	6f 01       	movw	r12, r30
    1a8a:	c2 0e       	add	r12, r18
    1a8c:	d3 1e       	adc	r13, r19
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	50 e0       	ldi	r21, 0x00	; 0
	{
		sint16 v = vm->variables[src++];
    1a92:	f8 01       	movw	r30, r16
    1a94:	21 91       	ld	r18, Z+
    1a96:	31 91       	ld	r19, Z+
    1a98:	8f 01       	movw	r16, r30
		sint16 l = vm->variables[low++];
		sint16 h = vm->variables[high++];
    1a9a:	8d 91       	ld	r24, X+
    1a9c:	9d 91       	ld	r25, X+
		sint16 res = v > h ? h : (v < l ? l : v);
    1a9e:	69 91       	ld	r22, Y+
    1aa0:	79 91       	ld	r23, Y+
    1aa2:	62 17       	cp	r22, r18
    1aa4:	73 07       	cpc	r23, r19
    1aa6:	0c f4       	brge	.+2      	; 0x1aaa <AsebaNative_vecclamp+0xd6>
    1aa8:	b9 01       	movw	r22, r18
    1aaa:	82 17       	cp	r24, r18
    1aac:	93 07       	cpc	r25, r19
    1aae:	0c f0       	brlt	.+2      	; 0x1ab2 <AsebaNative_vecclamp+0xde>
    1ab0:	cb 01       	movw	r24, r22
		vm->variables[dest++] = res;
    1ab2:	f6 01       	movw	r30, r12
    1ab4:	81 93       	st	Z+, r24
    1ab6:	91 93       	st	Z+, r25
    1ab8:	6f 01       	movw	r12, r30
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    1aba:	4f 5f       	subi	r20, 0xFF	; 255
    1abc:	5f 4f       	sbci	r21, 0xFF	; 255
    1abe:	e4 16       	cp	r14, r20
    1ac0:	f5 06       	cpc	r15, r21
    1ac2:	39 f7       	brne	.-50     	; 0x1a92 <AsebaNative_vecclamp+0xbe>
		sint16 l = vm->variables[low++];
		sint16 h = vm->variables[high++];
		sint16 res = v > h ? h : (v < l ? l : v);
		vm->variables[dest++] = res;
	}
}
    1ac4:	df 91       	pop	r29
    1ac6:	cf 91       	pop	r28
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	08 95       	ret

00001ad6 <AsebaNative_vecdot>:
		{ 0, 0 }
	}
};

void AsebaNative_vecdot(AsebaVMState *vm)
{
    1ad6:	6f 92       	push	r6
    1ad8:	7f 92       	push	r7
    1ada:	8f 92       	push	r8
    1adc:	9f 92       	push	r9
    1ade:	af 92       	push	r10
    1ae0:	bf 92       	push	r11
    1ae2:	cf 92       	push	r12
    1ae4:	df 92       	push	r13
    1ae6:	ef 92       	push	r14
    1ae8:	ff 92       	push	r15
    1aea:	0f 93       	push	r16
    1aec:	1f 93       	push	r17
    1aee:	cf 93       	push	r28
    1af0:	df 93       	push	r29
    1af2:	ec 01       	movw	r28, r24
    1af4:	ac 85       	ldd	r26, Y+12	; 0x0c
    1af6:	bd 85       	ldd	r27, Y+13	; 0x0d
    1af8:	2a 89       	ldd	r18, Y+18	; 0x12
    1afa:	3b 89       	ldd	r19, Y+19	; 0x13
    1afc:	a9 01       	movw	r20, r18
    1afe:	41 50       	subi	r20, 0x01	; 1
    1b00:	51 09       	sbc	r21, r1
    1b02:	5b 8b       	std	Y+19, r21	; 0x13
    1b04:	4a 8b       	std	Y+18, r20	; 0x12
    1b06:	a9 01       	movw	r20, r18
    1b08:	44 0f       	add	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	a4 0f       	add	r26, r20
    1b0e:	b5 1f       	adc	r27, r21
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
    1b10:	6d 90       	ld	r6, X+
    1b12:	7c 90       	ld	r7, X
    1b14:	11 97       	sbiw	r26, 0x01	; 1
    1b16:	a9 01       	movw	r20, r18
    1b18:	42 50       	subi	r20, 0x02	; 2
    1b1a:	51 09       	sbc	r21, r1
    1b1c:	5b 8b       	std	Y+19, r21	; 0x13
    1b1e:	4a 8b       	std	Y+18, r20	; 0x12
    1b20:	fd 01       	movw	r30, r26
    1b22:	32 97       	sbiw	r30, 0x02	; 2
    1b24:	80 81       	ld	r24, Z
    1b26:	91 81       	ldd	r25, Z+1	; 0x01
    1b28:	41 50       	subi	r20, 0x01	; 1
    1b2a:	51 09       	sbc	r21, r1
    1b2c:	5b 8b       	std	Y+19, r21	; 0x13
    1b2e:	4a 8b       	std	Y+18, r20	; 0x12
    1b30:	32 97       	sbiw	r30, 0x02	; 2
    1b32:	60 81       	ld	r22, Z
    1b34:	71 81       	ldd	r23, Z+1	; 0x01
	uint16 src1 = AsebaNativePopArg(vm);
	uint16 src2 = AsebaNativePopArg(vm);
	sint16 shift = vm->variables[AsebaNativePopArg(vm)];
    1b36:	a8 84       	ldd	r10, Y+8	; 0x08
    1b38:	b9 84       	ldd	r11, Y+9	; 0x09
    1b3a:	41 50       	subi	r20, 0x01	; 1
    1b3c:	51 09       	sbc	r21, r1
    1b3e:	5b 8b       	std	Y+19, r21	; 0x13
    1b40:	4a 8b       	std	Y+18, r20	; 0x12
    1b42:	ad 01       	movw	r20, r26
    1b44:	46 50       	subi	r20, 0x06	; 6
    1b46:	51 09       	sbc	r21, r1
    1b48:	fa 01       	movw	r30, r20
    1b4a:	40 81       	ld	r20, Z
    1b4c:	51 81       	ldd	r21, Z+1	; 0x01
    1b4e:	44 0f       	add	r20, r20
    1b50:	55 1f       	adc	r21, r21
    1b52:	4a 0d       	add	r20, r10
    1b54:	5b 1d       	adc	r21, r11
    1b56:	fa 01       	movw	r30, r20
    1b58:	80 80       	ld	r8, Z
    1b5a:	91 80       	ldd	r9, Z+1	; 0x01
    1b5c:	25 50       	subi	r18, 0x05	; 5
    1b5e:	31 09       	sbc	r19, r1
    1b60:	3b 8b       	std	Y+19, r19	; 0x13
    1b62:	2a 8b       	std	Y+18, r18	; 0x12
    1b64:	18 97       	sbiw	r26, 0x08	; 8
    1b66:	0d 91       	ld	r16, X+
    1b68:	1c 91       	ld	r17, X
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	sint32 res = 0;
	uint16 i;
	
	if(shift > 32) {
    1b6a:	f1 e2       	ldi	r31, 0x21	; 33
    1b6c:	8f 16       	cp	r8, r31
    1b6e:	91 04       	cpc	r9, r1
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <AsebaNative_vecdot+0x9e>
    1b72:	3f c0       	rjmp	.+126    	; 0x1bf2 <AsebaNative_vecdot+0x11c>
	for (i= 0; i < length; i++)
		res += __builtin_mulss(vm->variables[src1++], vm->variables[src2++]);
	res >>= shift;
	vm->variables[dest] = (sint16) res;
#else
	for (i = 0; i < length; i++)
    1b74:	01 15       	cp	r16, r1
    1b76:	11 05       	cpc	r17, r1
    1b78:	09 f4       	brne	.+2      	; 0x1b7c <AsebaNative_vecdot+0xa6>
    1b7a:	43 c0       	rjmp	.+134    	; 0x1c02 <AsebaNative_vecdot+0x12c>
    1b7c:	ec 01       	movw	r28, r24
    1b7e:	cc 0f       	add	r28, r28
    1b80:	dd 1f       	adc	r29, r29
    1b82:	ca 0d       	add	r28, r10
    1b84:	db 1d       	adc	r29, r11
    1b86:	fb 01       	movw	r30, r22
    1b88:	ee 0f       	add	r30, r30
    1b8a:	ff 1f       	adc	r31, r31
    1b8c:	ea 0d       	add	r30, r10
    1b8e:	fb 1d       	adc	r31, r11
void AsebaNative_vecdot(AsebaVMState *vm)
{
	// variable pos
	uint16 dest = AsebaNativePopArg(vm);
	uint16 src1 = AsebaNativePopArg(vm);
	uint16 src2 = AsebaNativePopArg(vm);
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	50 e0       	ldi	r21, 0x00	; 0
    1b94:	c1 2c       	mov	r12, r1
    1b96:	d1 2c       	mov	r13, r1
    1b98:	76 01       	movw	r14, r12
	res >>= shift;
	vm->variables[dest] = (sint16) res;
#else
	for (i = 0; i < length; i++)
	{
		res += (sint32)vm->variables[src1++] * (sint32)vm->variables[src2++];
    1b9a:	29 91       	ld	r18, Y+
    1b9c:	39 91       	ld	r19, Y+
    1b9e:	a1 91       	ld	r26, Z+
    1ba0:	b1 91       	ld	r27, Z+
    1ba2:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    1ba6:	c6 0e       	add	r12, r22
    1ba8:	d7 1e       	adc	r13, r23
    1baa:	e8 1e       	adc	r14, r24
    1bac:	f9 1e       	adc	r15, r25
	for (i= 0; i < length; i++)
		res += __builtin_mulss(vm->variables[src1++], vm->variables[src2++]);
	res >>= shift;
	vm->variables[dest] = (sint16) res;
#else
	for (i = 0; i < length; i++)
    1bae:	4f 5f       	subi	r20, 0xFF	; 255
    1bb0:	5f 4f       	sbci	r21, 0xFF	; 255
    1bb2:	04 17       	cp	r16, r20
    1bb4:	15 07       	cpc	r17, r21
    1bb6:	89 f7       	brne	.-30     	; 0x1b9a <AsebaNative_vecdot+0xc4>
    1bb8:	04 c0       	rjmp	.+8      	; 0x1bc2 <AsebaNative_vecdot+0xec>
    1bba:	f5 94       	asr	r15
    1bbc:	e7 94       	ror	r14
    1bbe:	d7 94       	ror	r13
    1bc0:	c7 94       	ror	r12
    1bc2:	8a 94       	dec	r8
    1bc4:	d2 f7       	brpl	.-12     	; 0x1bba <AsebaNative_vecdot+0xe4>
	{
		res += (sint32)vm->variables[src1++] * (sint32)vm->variables[src2++];
	}
	res >>= shift;
	vm->variables[dest] = (sint16)res;
    1bc6:	66 0c       	add	r6, r6
    1bc8:	77 1c       	adc	r7, r7
    1bca:	f5 01       	movw	r30, r10
    1bcc:	e6 0d       	add	r30, r6
    1bce:	f7 1d       	adc	r31, r7
    1bd0:	d1 82       	std	Z+1, r13	; 0x01
    1bd2:	c0 82       	st	Z, r12
#endif
}
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	df 90       	pop	r13
    1be2:	cf 90       	pop	r12
    1be4:	bf 90       	pop	r11
    1be6:	af 90       	pop	r10
    1be8:	9f 90       	pop	r9
    1bea:	8f 90       	pop	r8
    1bec:	7f 90       	pop	r7
    1bee:	6f 90       	pop	r6
    1bf0:	08 95       	ret
	uint16 length = AsebaNativePopArg(vm);
	sint32 res = 0;
	uint16 i;
	
	if(shift > 32) {
		vm->variables[dest] = 0;
    1bf2:	66 0c       	add	r6, r6
    1bf4:	77 1c       	adc	r7, r7
    1bf6:	f5 01       	movw	r30, r10
    1bf8:	e6 0d       	add	r30, r6
    1bfa:	f7 1d       	adc	r31, r7
    1bfc:	11 82       	std	Z+1, r1	; 0x01
    1bfe:	10 82       	st	Z, r1
		return;
    1c00:	e9 cf       	rjmp	.-46     	; 0x1bd4 <AsebaNative_vecdot+0xfe>
	for (i= 0; i < length; i++)
		res += __builtin_mulss(vm->variables[src1++], vm->variables[src2++]);
	res >>= shift;
	vm->variables[dest] = (sint16) res;
#else
	for (i = 0; i < length; i++)
    1c02:	c1 2c       	mov	r12, r1
    1c04:	d1 2c       	mov	r13, r1
    1c06:	df cf       	rjmp	.-66     	; 0x1bc6 <AsebaNative_vecdot+0xf0>

00001c08 <AsebaNative_vecstat>:
	}
};


void AsebaNative_vecstat(AsebaVMState *vm)
{
    1c08:	4f 92       	push	r4
    1c0a:	5f 92       	push	r5
    1c0c:	6f 92       	push	r6
    1c0e:	7f 92       	push	r7
    1c10:	8f 92       	push	r8
    1c12:	9f 92       	push	r9
    1c14:	af 92       	push	r10
    1c16:	bf 92       	push	r11
    1c18:	cf 92       	push	r12
    1c1a:	df 92       	push	r13
    1c1c:	ef 92       	push	r14
    1c1e:	ff 92       	push	r15
    1c20:	0f 93       	push	r16
    1c22:	1f 93       	push	r17
    1c24:	cf 93       	push	r28
    1c26:	df 93       	push	r29
    1c28:	dc 01       	movw	r26, r24
    1c2a:	1c 96       	adiw	r26, 0x0c	; 12
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	1d 97       	sbiw	r26, 0x0d	; 13
    1c32:	52 96       	adiw	r26, 0x12	; 18
    1c34:	2d 91       	ld	r18, X+
    1c36:	3c 91       	ld	r19, X
    1c38:	53 97       	sbiw	r26, 0x13	; 19
    1c3a:	a9 01       	movw	r20, r18
    1c3c:	41 50       	subi	r20, 0x01	; 1
    1c3e:	51 09       	sbc	r21, r1
    1c40:	53 96       	adiw	r26, 0x13	; 19
    1c42:	5c 93       	st	X, r21
    1c44:	4e 93       	st	-X, r20
    1c46:	52 97       	sbiw	r26, 0x12	; 18
    1c48:	a9 01       	movw	r20, r18
    1c4a:	44 0f       	add	r20, r20
    1c4c:	55 1f       	adc	r21, r21
    1c4e:	e4 0f       	add	r30, r20
    1c50:	f5 1f       	adc	r31, r21
    1c52:	40 81       	ld	r20, Z
    1c54:	51 81       	ldd	r21, Z+1	; 0x01
    1c56:	b9 01       	movw	r22, r18
    1c58:	62 50       	subi	r22, 0x02	; 2
    1c5a:	71 09       	sbc	r23, r1
    1c5c:	53 96       	adiw	r26, 0x13	; 19
    1c5e:	7c 93       	st	X, r23
    1c60:	6e 93       	st	-X, r22
    1c62:	52 97       	sbiw	r26, 0x12	; 18
    1c64:	df 01       	movw	r26, r30
    1c66:	12 97       	sbiw	r26, 0x02	; 2
    1c68:	0d 91       	ld	r16, X+
    1c6a:	1c 91       	ld	r17, X
    1c6c:	61 50       	subi	r22, 0x01	; 1
    1c6e:	71 09       	sbc	r23, r1
    1c70:	ec 01       	movw	r28, r24
    1c72:	7b 8b       	std	Y+19, r23	; 0x13
    1c74:	6a 8b       	std	Y+18, r22	; 0x12
    1c76:	ef 01       	movw	r28, r30
    1c78:	24 97       	sbiw	r28, 0x04	; 4
    1c7a:	09 90       	ld	r0, Y+
    1c7c:	d8 81       	ld	r29, Y
    1c7e:	c0 2d       	mov	r28, r0
    1c80:	61 50       	subi	r22, 0x01	; 1
    1c82:	71 09       	sbc	r23, r1
    1c84:	dc 01       	movw	r26, r24
    1c86:	53 96       	adiw	r26, 0x13	; 19
    1c88:	7c 93       	st	X, r23
    1c8a:	6e 93       	st	-X, r22
    1c8c:	52 97       	sbiw	r26, 0x12	; 18
    1c8e:	bf 01       	movw	r22, r30
    1c90:	66 50       	subi	r22, 0x06	; 6
    1c92:	71 09       	sbc	r23, r1
    1c94:	db 01       	movw	r26, r22
    1c96:	ed 90       	ld	r14, X+
    1c98:	fc 90       	ld	r15, X
    1c9a:	25 50       	subi	r18, 0x05	; 5
    1c9c:	31 09       	sbc	r19, r1
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	53 96       	adiw	r26, 0x13	; 19
    1ca2:	3c 93       	st	X, r19
    1ca4:	2e 93       	st	-X, r18
    1ca6:	52 97       	sbiw	r26, 0x12	; 18
    1ca8:	38 97       	sbiw	r30, 0x08	; 8
	uint16 min = AsebaNativePopArg(vm);
	uint16 max = AsebaNativePopArg(vm);
	uint16 mean = AsebaNativePopArg(vm);
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1caa:	20 81       	ld	r18, Z
    1cac:	31 81       	ldd	r19, Z+1	; 0x01
	sint16 val;
	sint32 acc;
	uint16 i;
	
	if (length)
    1cae:	21 15       	cp	r18, r1
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <AsebaNative_vecstat+0xae>
    1cb4:	54 c0       	rjmp	.+168    	; 0x1d5e <AsebaNative_vecstat+0x156>
	{
		val = vm->variables[src++];
    1cb6:	18 96       	adiw	r26, 0x08	; 8
    1cb8:	cd 90       	ld	r12, X+
    1cba:	dc 90       	ld	r13, X
    1cbc:	19 97       	sbiw	r26, 0x09	; 9
    1cbe:	fa 01       	movw	r30, r20
    1cc0:	ee 0f       	add	r30, r30
    1cc2:	ff 1f       	adc	r31, r31
    1cc4:	c6 01       	movw	r24, r12
    1cc6:	8e 0f       	add	r24, r30
    1cc8:	9f 1f       	adc	r25, r31
    1cca:	dc 01       	movw	r26, r24
    1ccc:	8d 91       	ld	r24, X+
    1cce:	9c 91       	ld	r25, X
		acc = val;
    1cd0:	4c 01       	movw	r8, r24
    1cd2:	09 2e       	mov	r0, r25
    1cd4:	00 0c       	add	r0, r0
    1cd6:	aa 08       	sbc	r10, r10
    1cd8:	bb 08       	sbc	r11, r11
		vm->variables[min] = val;
    1cda:	d8 01       	movw	r26, r16
    1cdc:	aa 0f       	add	r26, r26
    1cde:	bb 1f       	adc	r27, r27
    1ce0:	ac 0d       	add	r26, r12
    1ce2:	bd 1d       	adc	r27, r13
    1ce4:	11 96       	adiw	r26, 0x01	; 1
    1ce6:	9c 93       	st	X, r25
    1ce8:	8e 93       	st	-X, r24
		vm->variables[max] = val;
    1cea:	cc 0f       	add	r28, r28
    1cec:	dd 1f       	adc	r29, r29
    1cee:	cc 0d       	add	r28, r12
    1cf0:	dd 1d       	adc	r29, r13
    1cf2:	99 83       	std	Y+1, r25	; 0x01
    1cf4:	88 83       	st	Y, r24
		
		for (i = 1; i < length; i++)
    1cf6:	21 30       	cpi	r18, 0x01	; 1
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	21 f1       	breq	.+72     	; 0x1d44 <AsebaNative_vecstat+0x13c>
    1cfc:	32 96       	adiw	r30, 0x02	; 2
    1cfe:	ec 0d       	add	r30, r12
    1d00:	fd 1d       	adc	r31, r13
    1d02:	41 e0       	ldi	r20, 0x01	; 1
    1d04:	50 e0       	ldi	r21, 0x00	; 0
		{
			val = vm->variables[src++];
    1d06:	81 91       	ld	r24, Z+
    1d08:	91 91       	ld	r25, Z+
			if (val < vm->variables[min])
    1d0a:	0d 91       	ld	r16, X+
    1d0c:	1c 91       	ld	r17, X
    1d0e:	11 97       	sbiw	r26, 0x01	; 1
    1d10:	80 17       	cp	r24, r16
    1d12:	91 07       	cpc	r25, r17
    1d14:	1c f4       	brge	.+6      	; 0x1d1c <AsebaNative_vecstat+0x114>
				vm->variables[min] = val;
    1d16:	11 96       	adiw	r26, 0x01	; 1
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
			if (val > vm->variables[max])
    1d1c:	08 81       	ld	r16, Y
    1d1e:	19 81       	ldd	r17, Y+1	; 0x01
    1d20:	08 17       	cp	r16, r24
    1d22:	19 07       	cpc	r17, r25
    1d24:	14 f4       	brge	.+4      	; 0x1d2a <AsebaNative_vecstat+0x122>
				vm->variables[max] = val;
    1d26:	99 83       	std	Y+1, r25	; 0x01
    1d28:	88 83       	st	Y, r24
			acc += (sint32)val;
    1d2a:	2c 01       	movw	r4, r24
    1d2c:	99 0f       	add	r25, r25
    1d2e:	66 08       	sbc	r6, r6
    1d30:	77 08       	sbc	r7, r7
    1d32:	84 0c       	add	r8, r4
    1d34:	95 1c       	adc	r9, r5
    1d36:	a6 1c       	adc	r10, r6
    1d38:	b7 1c       	adc	r11, r7
		val = vm->variables[src++];
		acc = val;
		vm->variables[min] = val;
		vm->variables[max] = val;
		
		for (i = 1; i < length; i++)
    1d3a:	4f 5f       	subi	r20, 0xFF	; 255
    1d3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1d3e:	24 17       	cp	r18, r20
    1d40:	35 07       	cpc	r19, r21
    1d42:	09 f7       	brne	.-62     	; 0x1d06 <AsebaNative_vecstat+0xfe>
			if (val > vm->variables[max])
				vm->variables[max] = val;
			acc += (sint32)val;
		}
		
		vm->variables[mean] = (sint16)(acc / (sint32)length);
    1d44:	ee 0c       	add	r14, r14
    1d46:	ff 1c       	adc	r15, r15
    1d48:	e6 01       	movw	r28, r12
    1d4a:	ce 0d       	add	r28, r14
    1d4c:	df 1d       	adc	r29, r15
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	c5 01       	movw	r24, r10
    1d54:	b4 01       	movw	r22, r8
    1d56:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
    1d5a:	39 83       	std	Y+1, r19	; 0x01
    1d5c:	28 83       	st	Y, r18
	}
}
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	8f 90       	pop	r8
    1d76:	7f 90       	pop	r7
    1d78:	6f 90       	pop	r6
    1d7a:	5f 90       	pop	r5
    1d7c:	4f 90       	pop	r4
    1d7e:	08 95       	ret

00001d80 <AsebaNative_vecargbounds>:
	}
};


void AsebaNative_vecargbounds(AsebaVMState *vm)
{
    1d80:	ef 92       	push	r14
    1d82:	ff 92       	push	r15
    1d84:	0f 93       	push	r16
    1d86:	1f 93       	push	r17
    1d88:	cf 93       	push	r28
    1d8a:	df 93       	push	r29
    1d8c:	ec 01       	movw	r28, r24
    1d8e:	ec 85       	ldd	r30, Y+12	; 0x0c
    1d90:	fd 85       	ldd	r31, Y+13	; 0x0d
    1d92:	4a 89       	ldd	r20, Y+18	; 0x12
    1d94:	5b 89       	ldd	r21, Y+19	; 0x13
    1d96:	ca 01       	movw	r24, r20
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	9b 8b       	std	Y+19, r25	; 0x13
    1d9c:	8a 8b       	std	Y+18, r24	; 0x12
    1d9e:	ca 01       	movw	r24, r20
    1da0:	88 0f       	add	r24, r24
    1da2:	99 1f       	adc	r25, r25
    1da4:	e8 0f       	add	r30, r24
    1da6:	f9 1f       	adc	r31, r25
    1da8:	20 81       	ld	r18, Z
    1daa:	31 81       	ldd	r19, Z+1	; 0x01
    1dac:	ca 01       	movw	r24, r20
    1dae:	02 97       	sbiw	r24, 0x02	; 2
    1db0:	9b 8b       	std	Y+19, r25	; 0x13
    1db2:	8a 8b       	std	Y+18, r24	; 0x12
    1db4:	df 01       	movw	r26, r30
    1db6:	12 97       	sbiw	r26, 0x02	; 2
    1db8:	0d 91       	ld	r16, X+
    1dba:	1c 91       	ld	r17, X
    1dbc:	11 97       	sbiw	r26, 0x01	; 1
    1dbe:	01 97       	sbiw	r24, 0x01	; 1
    1dc0:	9b 8b       	std	Y+19, r25	; 0x13
    1dc2:	8a 8b       	std	Y+18, r24	; 0x12
    1dc4:	12 97       	sbiw	r26, 0x02	; 2
    1dc6:	8d 91       	ld	r24, X+
    1dc8:	9c 91       	ld	r25, X
    1dca:	44 50       	subi	r20, 0x04	; 4
    1dcc:	51 09       	sbc	r21, r1
    1dce:	5b 8b       	std	Y+19, r21	; 0x13
    1dd0:	4a 8b       	std	Y+18, r20	; 0x12
    1dd2:	36 97       	sbiw	r30, 0x06	; 6
	uint16 src = AsebaNativePopArg(vm);
	uint16 argmin = AsebaNativePopArg(vm);
	uint16 argmax = AsebaNativePopArg(vm);
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1dd4:	a0 81       	ld	r26, Z
    1dd6:	b1 81       	ldd	r27, Z+1	; 0x01
	sint16 min = 32767;
	sint16 max = -32768;
	sint16 val;
	uint16 i;
	
	if (length)
    1dd8:	10 97       	sbiw	r26, 0x00	; 0
    1dda:	51 f1       	breq	.+84     	; 0x1e30 <AsebaNative_vecargbounds+0xb0>
    1ddc:	e8 85       	ldd	r30, Y+8	; 0x08
    1dde:	f9 85       	ldd	r31, Y+9	; 0x09
		{
			val = vm->variables[src++];
			if (val < min)
			{
				min = val;
				vm->variables[argmin] = i;
    1de0:	00 0f       	add	r16, r16
    1de2:	11 1f       	adc	r17, r17
    1de4:	0e 0f       	add	r16, r30
    1de6:	1f 1f       	adc	r17, r31
			}
			if (val > max)
			{
				max = val;
				vm->variables[argmax] = i;
    1de8:	ec 01       	movw	r28, r24
    1dea:	cc 0f       	add	r28, r28
    1dec:	dd 1f       	adc	r29, r29
    1dee:	7e 01       	movw	r14, r28
    1df0:	ee 0e       	add	r14, r30
    1df2:	ff 1e       	adc	r15, r31
    1df4:	22 0f       	add	r18, r18
    1df6:	33 1f       	adc	r19, r19
    1df8:	e2 0f       	add	r30, r18
    1dfa:	f3 1f       	adc	r31, r19
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	60 e0       	ldi	r22, 0x00	; 0
    1e02:	70 e8       	ldi	r23, 0x80	; 128
    1e04:	4f ef       	ldi	r20, 0xFF	; 255
    1e06:	5f e7       	ldi	r21, 0x7F	; 127
	
	if (length)
	{
		for (i = 0; i < length; i++)
		{
			val = vm->variables[src++];
    1e08:	21 91       	ld	r18, Z+
    1e0a:	31 91       	ld	r19, Z+
			if (val < min)
    1e0c:	24 17       	cp	r18, r20
    1e0e:	35 07       	cpc	r19, r21
    1e10:	24 f4       	brge	.+8      	; 0x1e1a <AsebaNative_vecargbounds+0x9a>
			{
				min = val;
				vm->variables[argmin] = i;
    1e12:	e8 01       	movw	r28, r16
    1e14:	99 83       	std	Y+1, r25	; 0x01
    1e16:	88 83       	st	Y, r24
    1e18:	a9 01       	movw	r20, r18
			}
			if (val > max)
    1e1a:	62 17       	cp	r22, r18
    1e1c:	73 07       	cpc	r23, r19
    1e1e:	24 f4       	brge	.+8      	; 0x1e28 <AsebaNative_vecargbounds+0xa8>
			{
				max = val;
				vm->variables[argmax] = i;
    1e20:	e7 01       	movw	r28, r14
    1e22:	99 83       	std	Y+1, r25	; 0x01
    1e24:	88 83       	st	Y, r24
    1e26:	b9 01       	movw	r22, r18
	sint16 val;
	uint16 i;
	
	if (length)
	{
		for (i = 0; i < length; i++)
    1e28:	01 96       	adiw	r24, 0x01	; 1
    1e2a:	a8 17       	cp	r26, r24
    1e2c:	b9 07       	cpc	r27, r25
    1e2e:	61 f7       	brne	.-40     	; 0x1e08 <AsebaNative_vecargbounds+0x88>
				max = val;
				vm->variables[argmax] = i;
			}
		}
	}
}
    1e30:	df 91       	pop	r29
    1e32:	cf 91       	pop	r28
    1e34:	1f 91       	pop	r17
    1e36:	0f 91       	pop	r16
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	08 95       	ret

00001e3e <AsebaNative_vecsort>:
	}
};


void AsebaNative_vecsort(AsebaVMState *vm)
{
    1e3e:	6f 92       	push	r6
    1e40:	7f 92       	push	r7
    1e42:	8f 92       	push	r8
    1e44:	9f 92       	push	r9
    1e46:	af 92       	push	r10
    1e48:	bf 92       	push	r11
    1e4a:	cf 92       	push	r12
    1e4c:	df 92       	push	r13
    1e4e:	ef 92       	push	r14
    1e50:	ff 92       	push	r15
    1e52:	0f 93       	push	r16
    1e54:	1f 93       	push	r17
    1e56:	cf 93       	push	r28
    1e58:	df 93       	push	r29
    1e5a:	dc 01       	movw	r26, r24
    1e5c:	1c 96       	adiw	r26, 0x0c	; 12
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	1d 97       	sbiw	r26, 0x0d	; 13
    1e64:	52 96       	adiw	r26, 0x12	; 18
    1e66:	8d 91       	ld	r24, X+
    1e68:	9c 91       	ld	r25, X
    1e6a:	53 97       	sbiw	r26, 0x13	; 19
    1e6c:	9c 01       	movw	r18, r24
    1e6e:	21 50       	subi	r18, 0x01	; 1
    1e70:	31 09       	sbc	r19, r1
    1e72:	53 96       	adiw	r26, 0x13	; 19
    1e74:	3c 93       	st	X, r19
    1e76:	2e 93       	st	-X, r18
    1e78:	52 97       	sbiw	r26, 0x12	; 18
    1e7a:	9c 01       	movw	r18, r24
    1e7c:	22 0f       	add	r18, r18
    1e7e:	33 1f       	adc	r19, r19
    1e80:	e2 0f       	add	r30, r18
    1e82:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 src = AsebaNativePopArg(vm);
    1e84:	a0 80       	ld	r10, Z
    1e86:	b1 80       	ldd	r11, Z+1	; 0x01
    1e88:	02 97       	sbiw	r24, 0x02	; 2
    1e8a:	53 96       	adiw	r26, 0x13	; 19
    1e8c:	9c 93       	st	X, r25
    1e8e:	8e 93       	st	-X, r24
    1e90:	52 97       	sbiw	r26, 0x12	; 18
    1e92:	32 97       	sbiw	r30, 0x02	; 2
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    1e94:	80 80       	ld	r8, Z
    1e96:	91 80       	ldd	r9, Z+1	; 0x01
	
	aseba_comb_sort(&vm->variables[src], length);
    1e98:	c5 01       	movw	r24, r10
    1e9a:	88 0f       	add	r24, r24
    1e9c:	99 1f       	adc	r25, r25
    1e9e:	18 96       	adiw	r26, 0x08	; 8
    1ea0:	ad 90       	ld	r10, X+
    1ea2:	bc 90       	ld	r11, X
    1ea4:	19 97       	sbiw	r26, 0x09	; 9
    1ea6:	a8 0e       	add	r10, r24
    1ea8:	b9 1e       	adc	r11, r25
    1eaa:	e4 01       	movw	r28, r8
    1eac:	cc 0f       	add	r28, r28
    1eae:	dd 1f       	adc	r29, r29
    1eb0:	3e 01       	movw	r6, r28
    1eb2:	6a 0c       	add	r6, r10
    1eb4:	7b 1c       	adc	r7, r11
}

// comb sort ( from Wikipedia )
void aseba_comb_sort(sint16* input, uint16 size)
{
	uint16 gap = size;
    1eb6:	84 01       	movw	r16, r8
	uint16 swapped = 0;
    1eb8:	20 e0       	ldi	r18, 0x00	; 0
    1eba:	30 e0       	ldi	r19, 0x00	; 0
		if (gap > 1)
		{
#ifdef __C30__
			gap = __builtin_divud(__builtin_muluu(gap,4),5);
#else
			gap = (uint16)(((uint32)gap * 4) / 5);
    1ebc:	75 e0       	ldi	r23, 0x05	; 5
    1ebe:	c7 2e       	mov	r12, r23
    1ec0:	d1 2c       	mov	r13, r1
    1ec2:	e1 2c       	mov	r14, r1
    1ec4:	f1 2c       	mov	r15, r1
{
	uint16 gap = size;
	uint16 swapped = 0;
	uint16 i;

	while ((gap > 1) || swapped)
    1ec6:	02 30       	cpi	r16, 0x02	; 2
    1ec8:	11 05       	cpc	r17, r1
    1eca:	c0 f1       	brcs	.+112    	; 0x1f3c <AsebaNative_vecsort+0xfe>
		if (gap > 1)
		{
#ifdef __C30__
			gap = __builtin_divud(__builtin_muluu(gap,4),5);
#else
			gap = (uint16)(((uint32)gap * 4) / 5);
    1ecc:	c8 01       	movw	r24, r16
    1ece:	a0 e0       	ldi	r26, 0x00	; 0
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	cd 01       	movw	r24, r26
    1ed6:	66 0f       	add	r22, r22
    1ed8:	77 1f       	adc	r23, r23
    1eda:	88 1f       	adc	r24, r24
    1edc:	99 1f       	adc	r25, r25
    1ede:	66 0f       	add	r22, r22
    1ee0:	77 1f       	adc	r23, r23
    1ee2:	88 1f       	adc	r24, r24
    1ee4:	99 1f       	adc	r25, r25
    1ee6:	a7 01       	movw	r20, r14
    1ee8:	96 01       	movw	r18, r12
    1eea:	0e 94 dd 55 	call	0xabba	; 0xabba <__udivmodsi4>
    1eee:	89 01       	movw	r16, r18
#endif
		}

		swapped = 0;

		for (i = 0; gap + i < size; i++)
    1ef0:	08 15       	cp	r16, r8
    1ef2:	19 05       	cpc	r17, r9
    1ef4:	a0 f5       	brcc	.+104    	; 0x1f5e <AsebaNative_vecsort+0x120>
    1ef6:	d5 01       	movw	r26, r10
    1ef8:	f8 01       	movw	r30, r16
    1efa:	ee 0f       	add	r30, r30
    1efc:	ff 1f       	adc	r31, r31
    1efe:	ea 0d       	add	r30, r10
    1f00:	fb 1d       	adc	r31, r11
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	30 e0       	ldi	r19, 0x00	; 0
		{
			if (input[i] - input[i + gap] > 0)
    1f06:	8d 91       	ld	r24, X+
    1f08:	9d 91       	ld	r25, X+
    1f0a:	40 81       	ld	r20, Z
    1f0c:	51 81       	ldd	r21, Z+1	; 0x01
    1f0e:	bc 01       	movw	r22, r24
    1f10:	64 1b       	sub	r22, r20
    1f12:	75 0b       	sbc	r23, r21
    1f14:	16 16       	cp	r1, r22
    1f16:	17 06       	cpc	r1, r23
    1f18:	54 f4       	brge	.+20     	; 0x1f2e <AsebaNative_vecsort+0xf0>
    1f1a:	9d 01       	movw	r18, r26
    1f1c:	22 50       	subi	r18, 0x02	; 2
    1f1e:	31 09       	sbc	r19, r1
			{
				sint16 swap = input[i];
				input[i] = input[i + gap];
    1f20:	e9 01       	movw	r28, r18
    1f22:	59 83       	std	Y+1, r21	; 0x01
    1f24:	48 83       	st	Y, r20
				input[i + gap] = swap;
    1f26:	91 83       	std	Z+1, r25	; 0x01
    1f28:	80 83       	st	Z, r24
				swapped = 1;
    1f2a:	21 e0       	ldi	r18, 0x01	; 1
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	32 96       	adiw	r30, 0x02	; 2
#endif
		}

		swapped = 0;

		for (i = 0; gap + i < size; i++)
    1f30:	e6 15       	cp	r30, r6
    1f32:	f7 05       	cpc	r31, r7
    1f34:	41 f7       	brne	.-48     	; 0x1f06 <AsebaNative_vecsort+0xc8>
{
	uint16 gap = size;
	uint16 swapped = 0;
	uint16 i;

	while ((gap > 1) || swapped)
    1f36:	02 30       	cpi	r16, 0x02	; 2
    1f38:	11 05       	cpc	r17, r1
    1f3a:	40 f6       	brcc	.-112    	; 0x1ecc <AsebaNative_vecsort+0x8e>
    1f3c:	23 2b       	or	r18, r19
    1f3e:	c1 f6       	brne	.-80     	; 0x1ef0 <AsebaNative_vecsort+0xb2>
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	aseba_comb_sort(&vm->variables[src], length);
}
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	bf 90       	pop	r11
    1f52:	af 90       	pop	r10
    1f54:	9f 90       	pop	r9
    1f56:	8f 90       	pop	r8
    1f58:	7f 90       	pop	r7
    1f5a:	6f 90       	pop	r6
    1f5c:	08 95       	ret
#else
			gap = (uint16)(((uint32)gap * 4) / 5);
#endif
		}

		swapped = 0;
    1f5e:	20 e0       	ldi	r18, 0x00	; 0
    1f60:	30 e0       	ldi	r19, 0x00	; 0
    1f62:	b1 cf       	rjmp	.-158    	; 0x1ec6 <AsebaNative_vecsort+0x88>

00001f64 <AsebaNative_mathmuldiv>:
	}
};


void AsebaNative_mathmuldiv(AsebaVMState *vm)
{
    1f64:	2f 92       	push	r2
    1f66:	3f 92       	push	r3
    1f68:	4f 92       	push	r4
    1f6a:	5f 92       	push	r5
    1f6c:	6f 92       	push	r6
    1f6e:	7f 92       	push	r7
    1f70:	8f 92       	push	r8
    1f72:	9f 92       	push	r9
    1f74:	af 92       	push	r10
    1f76:	bf 92       	push	r11
    1f78:	cf 92       	push	r12
    1f7a:	df 92       	push	r13
    1f7c:	ef 92       	push	r14
    1f7e:	ff 92       	push	r15
    1f80:	0f 93       	push	r16
    1f82:	1f 93       	push	r17
    1f84:	cf 93       	push	r28
    1f86:	df 93       	push	r29
    1f88:	00 d0       	rcall	.+0      	; 0x1f8a <AsebaNative_mathmuldiv+0x26>
    1f8a:	1f 92       	push	r1
    1f8c:	cd b7       	in	r28, 0x3d	; 61
    1f8e:	de b7       	in	r29, 0x3e	; 62
    1f90:	3c 01       	movw	r6, r24
    1f92:	dc 01       	movw	r26, r24
    1f94:	1c 96       	adiw	r26, 0x0c	; 12
    1f96:	ed 91       	ld	r30, X+
    1f98:	fc 91       	ld	r31, X
    1f9a:	1d 97       	sbiw	r26, 0x0d	; 13
    1f9c:	52 96       	adiw	r26, 0x12	; 18
    1f9e:	8d 91       	ld	r24, X+
    1fa0:	9c 91       	ld	r25, X
    1fa2:	53 97       	sbiw	r26, 0x13	; 19
    1fa4:	9c 01       	movw	r18, r24
    1fa6:	21 50       	subi	r18, 0x01	; 1
    1fa8:	31 09       	sbc	r19, r1
    1faa:	53 96       	adiw	r26, 0x13	; 19
    1fac:	3c 93       	st	X, r19
    1fae:	2e 93       	st	-X, r18
    1fb0:	52 97       	sbiw	r26, 0x12	; 18
    1fb2:	9c 01       	movw	r18, r24
    1fb4:	22 0f       	add	r18, r18
    1fb6:	33 1f       	adc	r19, r19
    1fb8:	e2 0f       	add	r30, r18
    1fba:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 destIndex = AsebaNativePopArg(vm);
    1fbc:	00 81       	ld	r16, Z
    1fbe:	11 81       	ldd	r17, Z+1	; 0x01
    1fc0:	9c 01       	movw	r18, r24
    1fc2:	22 50       	subi	r18, 0x02	; 2
    1fc4:	31 09       	sbc	r19, r1
    1fc6:	53 96       	adiw	r26, 0x13	; 19
    1fc8:	3c 93       	st	X, r19
    1fca:	2e 93       	st	-X, r18
    1fcc:	52 97       	sbiw	r26, 0x12	; 18
    1fce:	df 01       	movw	r26, r30
    1fd0:	12 97       	sbiw	r26, 0x02	; 2
	uint16 aIndex = AsebaNativePopArg(vm);
    1fd2:	ed 90       	ld	r14, X+
    1fd4:	fc 90       	ld	r15, X
    1fd6:	21 50       	subi	r18, 0x01	; 1
    1fd8:	31 09       	sbc	r19, r1
    1fda:	d3 01       	movw	r26, r6
    1fdc:	53 96       	adiw	r26, 0x13	; 19
    1fde:	3c 93       	st	X, r19
    1fe0:	2e 93       	st	-X, r18
    1fe2:	52 97       	sbiw	r26, 0x12	; 18
    1fe4:	df 01       	movw	r26, r30
    1fe6:	14 97       	sbiw	r26, 0x04	; 4
	uint16 bIndex = AsebaNativePopArg(vm);
    1fe8:	cd 90       	ld	r12, X+
    1fea:	dc 90       	ld	r13, X
    1fec:	21 50       	subi	r18, 0x01	; 1
    1fee:	31 09       	sbc	r19, r1
    1ff0:	d3 01       	movw	r26, r6
    1ff2:	53 96       	adiw	r26, 0x13	; 19
    1ff4:	3c 93       	st	X, r19
    1ff6:	2e 93       	st	-X, r18
    1ff8:	52 97       	sbiw	r26, 0x12	; 18
    1ffa:	df 01       	movw	r26, r30
    1ffc:	16 97       	sbiw	r26, 0x06	; 6
	uint16 cIndex = AsebaNativePopArg(vm);
    1ffe:	ad 90       	ld	r10, X+
    2000:	bc 90       	ld	r11, X
    2002:	05 97       	sbiw	r24, 0x05	; 5
    2004:	d3 01       	movw	r26, r6
    2006:	53 96       	adiw	r26, 0x13	; 19
    2008:	9c 93       	st	X, r25
    200a:	8e 93       	st	-X, r24
    200c:	52 97       	sbiw	r26, 0x12	; 18
    200e:	38 97       	sbiw	r30, 0x08	; 8
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    2010:	20 81       	ld	r18, Z
    2012:	31 81       	ldd	r19, Z+1	; 0x01
    2014:	3a 83       	std	Y+2, r19	; 0x02
    2016:	29 83       	std	Y+1, r18	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    2018:	23 2b       	or	r18, r19
    201a:	09 f4       	brne	.+2      	; 0x201e <AsebaNative_mathmuldiv+0xba>
    201c:	72 c0       	rjmp	.+228    	; 0x2102 <AsebaNative_mathmuldiv+0x19e>
	{
		sint32 a = (sint32)vm->variables[aIndex++];
    201e:	f3 01       	movw	r30, r6
    2020:	20 84       	ldd	r2, Z+8	; 0x08
    2022:	31 84       	ldd	r3, Z+9	; 0x09
    2024:	ee 0c       	add	r14, r14
    2026:	ff 1c       	adc	r15, r15
    2028:	f1 01       	movw	r30, r2
    202a:	ee 0d       	add	r30, r14
    202c:	ff 1d       	adc	r31, r15
    202e:	40 80       	ld	r4, Z
    2030:	51 80       	ldd	r5, Z+1	; 0x01
    2032:	92 01       	movw	r18, r4
    2034:	55 0c       	add	r5, r5
    2036:	44 0b       	sbc	r20, r20
    2038:	55 0b       	sbc	r21, r21
		sint32 b = (sint32)vm->variables[bIndex++];
    203a:	cc 0c       	add	r12, r12
    203c:	dd 1c       	adc	r13, r13
    203e:	f1 01       	movw	r30, r2
    2040:	ec 0d       	add	r30, r12
    2042:	fd 1d       	adc	r31, r13
    2044:	60 81       	ld	r22, Z
    2046:	71 81       	ldd	r23, Z+1	; 0x01
    2048:	07 2e       	mov	r0, r23
    204a:	00 0c       	add	r0, r0
    204c:	88 0b       	sbc	r24, r24
    204e:	99 0b       	sbc	r25, r25
		sint32 c = (sint32)vm->variables[cIndex++];
    2050:	d5 01       	movw	r26, r10
    2052:	aa 0f       	add	r26, r26
    2054:	bb 1f       	adc	r27, r27
    2056:	f1 01       	movw	r30, r2
    2058:	ea 0f       	add	r30, r26
    205a:	fb 1f       	adc	r31, r27
    205c:	80 80       	ld	r8, Z
    205e:	91 80       	ldd	r9, Z+1	; 0x01
    2060:	09 2c       	mov	r0, r9
    2062:	00 0c       	add	r0, r0
    2064:	aa 08       	sbc	r10, r10
    2066:	bb 08       	sbc	r11, r11
		if (c != 0)
    2068:	81 14       	cp	r8, r1
    206a:	91 04       	cpc	r9, r1
    206c:	a1 04       	cpc	r10, r1
    206e:	b1 04       	cpc	r11, r1
    2070:	09 f4       	brne	.+2      	; 0x2074 <AsebaNative_mathmuldiv+0x110>
    2072:	5e c0       	rjmp	.+188    	; 0x2130 <AsebaNative_mathmuldiv+0x1cc>
    2074:	00 0f       	add	r16, r16
    2076:	11 1f       	adc	r17, r17
    2078:	02 0d       	add	r16, r2
    207a:	13 1d       	adc	r17, r3
    207c:	f2 e0       	ldi	r31, 0x02	; 2
    207e:	ef 0e       	add	r14, r31
    2080:	f1 1c       	adc	r15, r1
    2082:	e2 0c       	add	r14, r2
    2084:	f3 1c       	adc	r15, r3
    2086:	e2 e0       	ldi	r30, 0x02	; 2
    2088:	ce 0e       	add	r12, r30
    208a:	d1 1c       	adc	r13, r1
    208c:	c2 0c       	add	r12, r2
    208e:	d3 1c       	adc	r13, r3
    2090:	fd 01       	movw	r30, r26
    2092:	32 96       	adiw	r30, 0x02	; 2
    2094:	2e 0e       	add	r2, r30
    2096:	3f 1e       	adc	r3, r31
    2098:	1c 82       	std	Y+4, r1	; 0x04
    209a:	1b 82       	std	Y+3, r1	; 0x03
    209c:	1d c0       	rjmp	.+58     	; 0x20d8 <AsebaNative_mathmuldiv+0x174>
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint32 a = (sint32)vm->variables[aIndex++];
    209e:	d7 01       	movw	r26, r14
    20a0:	4d 90       	ld	r4, X+
    20a2:	5d 90       	ld	r5, X+
    20a4:	7d 01       	movw	r14, r26
    20a6:	92 01       	movw	r18, r4
    20a8:	55 0c       	add	r5, r5
    20aa:	44 0b       	sbc	r20, r20
    20ac:	55 0b       	sbc	r21, r21
		sint32 b = (sint32)vm->variables[bIndex++];
    20ae:	f6 01       	movw	r30, r12
    20b0:	61 91       	ld	r22, Z+
    20b2:	71 91       	ld	r23, Z+
    20b4:	6f 01       	movw	r12, r30
    20b6:	07 2e       	mov	r0, r23
    20b8:	00 0c       	add	r0, r0
    20ba:	88 0b       	sbc	r24, r24
    20bc:	99 0b       	sbc	r25, r25
		sint32 c = (sint32)vm->variables[cIndex++];
    20be:	d1 01       	movw	r26, r2
    20c0:	8d 90       	ld	r8, X+
    20c2:	9d 90       	ld	r9, X+
    20c4:	1d 01       	movw	r2, r26
    20c6:	09 2c       	mov	r0, r9
    20c8:	00 0c       	add	r0, r0
    20ca:	aa 08       	sbc	r10, r10
    20cc:	bb 08       	sbc	r11, r11
		if (c != 0)
    20ce:	81 14       	cp	r8, r1
    20d0:	91 04       	cpc	r9, r1
    20d2:	a1 04       	cpc	r10, r1
    20d4:	b1 04       	cpc	r11, r1
    20d6:	61 f1       	breq	.+88     	; 0x2130 <AsebaNative_mathmuldiv+0x1cc>
		{
			vm->variables[destIndex++] = (sint16)((a * b) / c);
    20d8:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    20dc:	a5 01       	movw	r20, r10
    20de:	94 01       	movw	r18, r8
    20e0:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
    20e4:	f8 01       	movw	r30, r16
    20e6:	21 93       	st	Z+, r18
    20e8:	31 93       	st	Z+, r19
    20ea:	8f 01       	movw	r16, r30
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    20ec:	2b 81       	ldd	r18, Y+3	; 0x03
    20ee:	3c 81       	ldd	r19, Y+4	; 0x04
    20f0:	2f 5f       	subi	r18, 0xFF	; 255
    20f2:	3f 4f       	sbci	r19, 0xFF	; 255
    20f4:	3c 83       	std	Y+4, r19	; 0x04
    20f6:	2b 83       	std	Y+3, r18	; 0x03
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	9a 81       	ldd	r25, Y+2	; 0x02
    20fc:	82 17       	cp	r24, r18
    20fe:	93 07       	cpc	r25, r19
    2100:	71 f6       	brne	.-100    	; 0x209e <AsebaNative_mathmuldiv+0x13a>
			vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
			AsebaSendMessage(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &(vm->pc), sizeof(vm->pc));
			return;
		}
	}
}
    2102:	0f 90       	pop	r0
    2104:	0f 90       	pop	r0
    2106:	0f 90       	pop	r0
    2108:	0f 90       	pop	r0
    210a:	df 91       	pop	r29
    210c:	cf 91       	pop	r28
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	ff 90       	pop	r15
    2114:	ef 90       	pop	r14
    2116:	df 90       	pop	r13
    2118:	cf 90       	pop	r12
    211a:	bf 90       	pop	r11
    211c:	af 90       	pop	r10
    211e:	9f 90       	pop	r9
    2120:	8f 90       	pop	r8
    2122:	7f 90       	pop	r7
    2124:	6f 90       	pop	r6
    2126:	5f 90       	pop	r5
    2128:	4f 90       	pop	r4
    212a:	3f 90       	pop	r3
    212c:	2f 90       	pop	r2
    212e:	08 95       	ret
		{
			vm->variables[destIndex++] = (sint16)((a * b) / c);
		}
		else
		{
			vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    2130:	82 e0       	ldi	r24, 0x02	; 2
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	d3 01       	movw	r26, r6
    2136:	1f 96       	adiw	r26, 0x0f	; 15
    2138:	9c 93       	st	X, r25
    213a:	8e 93       	st	-X, r24
    213c:	1e 97       	sbiw	r26, 0x0e	; 14
			AsebaSendMessage(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &(vm->pc), sizeof(vm->pc));
    213e:	a3 01       	movw	r20, r6
    2140:	40 5f       	subi	r20, 0xF0	; 240
    2142:	5f 4f       	sbci	r21, 0xFF	; 255
    2144:	22 e0       	ldi	r18, 0x02	; 2
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	67 e0       	ldi	r22, 0x07	; 7
    214a:	70 e9       	ldi	r23, 0x90	; 144
    214c:	c3 01       	movw	r24, r6
			return;
		}
	}
}
    214e:	0f 90       	pop	r0
    2150:	0f 90       	pop	r0
    2152:	0f 90       	pop	r0
    2154:	0f 90       	pop	r0
    2156:	df 91       	pop	r29
    2158:	cf 91       	pop	r28
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	bf 90       	pop	r11
    2168:	af 90       	pop	r10
    216a:	9f 90       	pop	r9
    216c:	8f 90       	pop	r8
    216e:	7f 90       	pop	r7
    2170:	6f 90       	pop	r6
    2172:	5f 90       	pop	r5
    2174:	4f 90       	pop	r4
    2176:	3f 90       	pop	r3
    2178:	2f 90       	pop	r2
			vm->variables[destIndex++] = (sint16)((a * b) / c);
		}
		else
		{
			vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
			AsebaSendMessage(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &(vm->pc), sizeof(vm->pc));
    217a:	0c 94 ac 46 	jmp	0x8d58	; 0x8d58 <AsebaSendMessage>

0000217e <AsebaNative_mathatan2>:
		{ 0, 0 }
	}
};

void AsebaNative_mathatan2(AsebaVMState *vm)
{
    217e:	2f 92       	push	r2
    2180:	3f 92       	push	r3
    2182:	4f 92       	push	r4
    2184:	5f 92       	push	r5
    2186:	6f 92       	push	r6
    2188:	7f 92       	push	r7
    218a:	8f 92       	push	r8
    218c:	9f 92       	push	r9
    218e:	af 92       	push	r10
    2190:	bf 92       	push	r11
    2192:	cf 92       	push	r12
    2194:	df 92       	push	r13
    2196:	ef 92       	push	r14
    2198:	ff 92       	push	r15
    219a:	0f 93       	push	r16
    219c:	1f 93       	push	r17
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <AsebaNative_mathatan2+0x26>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <AsebaNative_mathatan2+0x28>
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	dc 01       	movw	r26, r24
    21ac:	1c 96       	adiw	r26, 0x0c	; 12
    21ae:	ed 91       	ld	r30, X+
    21b0:	fc 91       	ld	r31, X
    21b2:	1d 97       	sbiw	r26, 0x0d	; 13
    21b4:	52 96       	adiw	r26, 0x12	; 18
    21b6:	2d 91       	ld	r18, X+
    21b8:	3c 91       	ld	r19, X
    21ba:	53 97       	sbiw	r26, 0x13	; 19
    21bc:	c9 01       	movw	r24, r18
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	53 96       	adiw	r26, 0x13	; 19
    21c2:	9c 93       	st	X, r25
    21c4:	8e 93       	st	-X, r24
    21c6:	52 97       	sbiw	r26, 0x12	; 18
    21c8:	c9 01       	movw	r24, r18
    21ca:	88 0f       	add	r24, r24
    21cc:	99 1f       	adc	r25, r25
    21ce:	bf 01       	movw	r22, r30
    21d0:	68 0f       	add	r22, r24
    21d2:	79 1f       	adc	r23, r25
	// variable pos
	uint16 destIndex = AsebaNativePopArg(vm);
    21d4:	fb 01       	movw	r30, r22
    21d6:	80 81       	ld	r24, Z
    21d8:	91 81       	ldd	r25, Z+1	; 0x01
    21da:	a9 01       	movw	r20, r18
    21dc:	42 50       	subi	r20, 0x02	; 2
    21de:	51 09       	sbc	r21, r1
    21e0:	53 96       	adiw	r26, 0x13	; 19
    21e2:	5c 93       	st	X, r21
    21e4:	4e 93       	st	-X, r20
    21e6:	52 97       	sbiw	r26, 0x12	; 18
    21e8:	ab 01       	movw	r20, r22
    21ea:	42 50       	subi	r20, 0x02	; 2
    21ec:	51 09       	sbc	r21, r1
    21ee:	fa 01       	movw	r30, r20
    21f0:	a0 80       	ld	r10, Z
    21f2:	b1 80       	ldd	r11, Z+1	; 0x01
    21f4:	a9 01       	movw	r20, r18
    21f6:	43 50       	subi	r20, 0x03	; 3
    21f8:	51 09       	sbc	r21, r1
    21fa:	53 96       	adiw	r26, 0x13	; 19
    21fc:	5c 93       	st	X, r21
    21fe:	4e 93       	st	-X, r20
    2200:	52 97       	sbiw	r26, 0x12	; 18
    2202:	ab 01       	movw	r20, r22
    2204:	44 50       	subi	r20, 0x04	; 4
    2206:	51 09       	sbc	r21, r1
    2208:	fa 01       	movw	r30, r20
    220a:	c0 80       	ld	r12, Z
    220c:	d1 80       	ldd	r13, Z+1	; 0x01
    220e:	24 50       	subi	r18, 0x04	; 4
    2210:	31 09       	sbc	r19, r1
    2212:	53 96       	adiw	r26, 0x13	; 19
    2214:	3c 93       	st	X, r19
    2216:	2e 93       	st	-X, r18
    2218:	52 97       	sbiw	r26, 0x12	; 18
    221a:	32 97       	sbiw	r30, 0x02	; 2
	sint16 yIndex = AsebaNativePopArg(vm);
	sint16 xIndex = AsebaNativePopArg(vm);
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    221c:	20 80       	ld	r2, Z
    221e:	31 80       	ldd	r3, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    2220:	21 14       	cp	r2, r1
    2222:	31 04       	cpc	r3, r1
    2224:	09 f4       	brne	.+2      	; 0x2228 <__stack+0x29>
    2226:	e4 c0       	rjmp	.+456    	; 0x23f0 <__stack+0x1f1>
    2228:	18 96       	adiw	r26, 0x08	; 8
    222a:	8d 90       	ld	r8, X+
    222c:	9c 90       	ld	r9, X
    222e:	19 97       	sbiw	r26, 0x09	; 9
    2230:	aa 0c       	add	r10, r10
    2232:	bb 1c       	adc	r11, r11
    2234:	a8 0c       	add	r10, r8
    2236:	b9 1c       	adc	r11, r9
    2238:	cc 0c       	add	r12, r12
    223a:	dd 1c       	adc	r13, r13
    223c:	c8 0c       	add	r12, r8
    223e:	d9 1c       	adc	r13, r9
    2240:	88 0f       	add	r24, r24
    2242:	99 1f       	adc	r25, r25
    2244:	88 0e       	add	r8, r24
    2246:	99 1e       	adc	r9, r25
    2248:	00 e0       	ldi	r16, 0x00	; 0
    224a:	10 e0       	ldi	r17, 0x00	; 0
    224c:	0e c0       	rjmp	.+28     	; 0x226a <__stack+0x6b>
// atan2, do y/x and return an "aseba" angle that spans the whole 16 bits range
sint16 aseba_atan2(sint16 y, sint16 x)
{
	if (y == 0)
	{
		if (x >= 0)	// we return 0 on division by zero
    224e:	f7 fc       	sbrc	r15, 7
    2250:	cc c0       	rjmp	.+408    	; 0x23ea <__stack+0x1eb>
			return 0;
    2252:	80 e0       	ldi	r24, 0x00	; 0
    2254:	90 e0       	ldi	r25, 0x00	; 0
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint16 y = vm->variables[yIndex++];
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_atan2(y, x);
    2256:	f4 01       	movw	r30, r8
    2258:	81 93       	st	Z+, r24
    225a:	91 93       	st	Z+, r25
    225c:	4f 01       	movw	r8, r30
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    225e:	0f 5f       	subi	r16, 0xFF	; 255
    2260:	1f 4f       	sbci	r17, 0xFF	; 255
    2262:	20 16       	cp	r2, r16
    2264:	31 06       	cpc	r3, r17
    2266:	09 f4       	brne	.+2      	; 0x226a <__stack+0x6b>
    2268:	c3 c0       	rjmp	.+390    	; 0x23f0 <__stack+0x1f1>
	{
		sint16 y = vm->variables[yIndex++];
    226a:	f5 01       	movw	r30, r10
    226c:	41 91       	ld	r20, Z+
    226e:	51 91       	ld	r21, Z+
    2270:	5f 01       	movw	r10, r30
    2272:	5e 83       	std	Y+6, r21	; 0x06
    2274:	4d 83       	std	Y+5, r20	; 0x05
		sint16 x = vm->variables[xIndex++];
    2276:	f6 01       	movw	r30, r12
    2278:	e1 90       	ld	r14, Z+
    227a:	f1 90       	ld	r15, Z+
    227c:	6f 01       	movw	r12, r30


// atan2, do y/x and return an "aseba" angle that spans the whole 16 bits range
sint16 aseba_atan2(sint16 y, sint16 x)
{
	if (y == 0)
    227e:	45 2b       	or	r20, r21
    2280:	31 f3       	breq	.-52     	; 0x224e <__stack+0x4f>
	
	{
		sint16 res;
		sint16 ax = abs(x);
		sint16 ay = abs(y);
		if (x == 0)
    2282:	e1 14       	cp	r14, r1
    2284:	f1 04       	cpc	r15, r1
    2286:	a9 f4       	brne	.+42     	; 0x22b2 <__stack+0xb3>
		{
			res = 16384;
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e4       	ldi	r19, 0x40	; 64
    228c:	81 e0       	ldi	r24, 0x01	; 1
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	ed 81       	ldd	r30, Y+5	; 0x05
    2292:	fe 81       	ldd	r31, Y+6	; 0x06
    2294:	1e 16       	cp	r1, r30
    2296:	1f 06       	cpc	r1, r31
    2298:	14 f4       	brge	.+4      	; 0x229e <__stack+0x9f>
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	66 27       	eor	r22, r22
    22a0:	77 27       	eor	r23, r23
    22a2:	68 1b       	sub	r22, r24
    22a4:	79 0b       	sbc	r23, r25
    22a6:	29 01       	movw	r4, r18
    22a8:	46 26       	eor	r4, r22
    22aa:	57 26       	eor	r5, r23
    22ac:	84 0d       	add	r24, r4
    22ae:	95 1d       	adc	r25, r5
    22b0:	d2 cf       	rjmp	.-92     	; 0x2256 <__stack+0x57>
	}
	
	{
		sint16 res;
		sint16 ax = abs(x);
		sint16 ay = abs(y);
    22b2:	6d 81       	ldd	r22, Y+5	; 0x05
    22b4:	7e 81       	ldd	r23, Y+6	; 0x06
    22b6:	77 fd       	sbrc	r23, 7
    22b8:	ca c0       	rjmp	.+404    	; 0x244e <__stack+0x24f>
					sint16 delta = subprecision_index & 0x1f;
					res = __builtin_divsd(__builtin_mulss(aseba_atan_table[index*8 + bin], 32 - delta) + __builtin_mulss(aseba_atan_table[index*8 + bin + 1], delta),32);
				}
				
#else		
			sint32 value = (((sint32)ay << 16)/(sint32)(ax));
    22ba:	cb 01       	movw	r24, r22
    22bc:	77 0f       	add	r23, r23
    22be:	aa 0b       	sbc	r26, r26
    22c0:	bb 0b       	sbc	r27, r27
    22c2:	77 27       	eor	r23, r23
    22c4:	66 27       	eor	r22, r22
			return -32768;
	}
	
	{
		sint16 res;
		sint16 ax = abs(x);
    22c6:	97 01       	movw	r18, r14
    22c8:	f7 fc       	sbrc	r15, 7
    22ca:	bc c0       	rjmp	.+376    	; 0x2444 <__stack+0x245>
					sint16 delta = subprecision_index & 0x1f;
					res = __builtin_divsd(__builtin_mulss(aseba_atan_table[index*8 + bin], 32 - delta) + __builtin_mulss(aseba_atan_table[index*8 + bin + 1], delta),32);
				}
				
#else		
			sint32 value = (((sint32)ay << 16)/(sint32)(ax));
    22cc:	03 2e       	mov	r0, r19
    22ce:	00 0c       	add	r0, r0
    22d0:	44 0b       	sbc	r20, r20
    22d2:	55 0b       	sbc	r21, r21
    22d4:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
    22d8:	29 01       	movw	r4, r18
    22da:	3a 01       	movw	r6, r20
			sint16 fb1 = 0;
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	80 e0       	ldi	r24, 0x00	; 0
			
			sint16 fb1_counter;
			for (fb1_counter = 0; fb1_counter < 32; fb1_counter++)
    22e0:	a0 e0       	ldi	r26, 0x00	; 0
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	2d 81       	ldd	r18, Y+5	; 0x05
    22e6:	3e 81       	ldd	r19, Y+6	; 0x06
    22e8:	07 c0       	rjmp	.+14     	; 0x22f8 <__stack+0xf9>
    22ea:	ad 01       	movw	r20, r26
    22ec:	94 2f       	mov	r25, r20
    22ee:	85 2f       	mov	r24, r21
    22f0:	11 96       	adiw	r26, 0x01	; 1
    22f2:	a0 32       	cpi	r26, 0x20	; 32
    22f4:	b1 05       	cpc	r27, r1
    22f6:	b1 f0       	breq	.+44     	; 0x2324 <__stack+0x125>
				if ((value >> (sint32)fb1_counter) != 0)
    22f8:	b3 01       	movw	r22, r6
    22fa:	a2 01       	movw	r20, r4
    22fc:	0a 2e       	mov	r0, r26
    22fe:	04 c0       	rjmp	.+8      	; 0x2308 <__stack+0x109>
    2300:	75 95       	asr	r23
    2302:	67 95       	ror	r22
    2304:	57 95       	ror	r21
    2306:	47 95       	ror	r20
    2308:	0a 94       	dec	r0
    230a:	d2 f7       	brpl	.-12     	; 0x2300 <__stack+0x101>
    230c:	45 2b       	or	r20, r21
    230e:	46 2b       	or	r20, r22
    2310:	47 2b       	or	r20, r23
    2312:	59 f7       	brne	.-42     	; 0x22ea <__stack+0xeb>
    2314:	49 2f       	mov	r20, r25
    2316:	58 2f       	mov	r21, r24
    2318:	94 2f       	mov	r25, r20
    231a:	85 2f       	mov	r24, r21
    231c:	11 96       	adiw	r26, 0x01	; 1
#else		
			sint32 value = (((sint32)ay << 16)/(sint32)(ax));
			sint16 fb1 = 0;
			
			sint16 fb1_counter;
			for (fb1_counter = 0; fb1_counter < 32; fb1_counter++)
    231e:	a0 32       	cpi	r26, 0x20	; 32
    2320:	b1 05       	cpc	r27, r1
    2322:	51 f7       	brne	.-44     	; 0x22f8 <__stack+0xf9>
    2324:	3e 83       	std	Y+6, r19	; 0x06
    2326:	2d 83       	std	Y+5, r18	; 0x05
				if ((value >> (sint32)fb1_counter) != 0)
					fb1 = fb1_counter;
						
			{
				// we only keep 4 bits of precision below comma as atan(x) is like x near 0
				sint16 index = fb1 - 12;
    2328:	9a 01       	movw	r18, r20
    232a:	2c 50       	subi	r18, 0x0C	; 12
    232c:	31 09       	sbc	r19, r1
				if (index < 0)
    232e:	37 fd       	sbrc	r19, 7
    2330:	78 c0       	rjmp	.+240    	; 0x2422 <__stack+0x223>
					// value is smaller than 2e-4
					res = (sint16)(((sint32)aseba_atan_table[0] * value) >> 12);
				}
				else
				{
					sint32 subprecision_rest = value - (((sint32) 1) << fb1);
    2332:	61 e0       	ldi	r22, 0x01	; 1
    2334:	70 e0       	ldi	r23, 0x00	; 0
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	04 2e       	mov	r0, r20
    233c:	04 c0       	rjmp	.+8      	; 0x2346 <__stack+0x147>
    233e:	66 0f       	add	r22, r22
    2340:	77 1f       	adc	r23, r23
    2342:	88 1f       	adc	r24, r24
    2344:	99 1f       	adc	r25, r25
    2346:	0a 94       	dec	r0
    2348:	d2 f7       	brpl	.-12     	; 0x233e <__stack+0x13f>
    234a:	46 1a       	sub	r4, r22
    234c:	57 0a       	sbc	r5, r23
    234e:	68 0a       	sbc	r6, r24
    2350:	79 0a       	sbc	r7, r25
					sint16 to_shift = fb1 - 8; // fb1 >= 12 otherwise index would have been < 0
    2352:	48 50       	subi	r20, 0x08	; 8
    2354:	51 09       	sbc	r21, r1
					sint16 subprecision_index = (sint16)(subprecision_rest >> to_shift);
    2356:	04 c0       	rjmp	.+8      	; 0x2360 <__stack+0x161>
    2358:	75 94       	asr	r7
    235a:	67 94       	ror	r6
    235c:	57 94       	ror	r5
    235e:	47 94       	ror	r4
    2360:	4a 95       	dec	r20
    2362:	d2 f7       	brpl	.-12     	; 0x2358 <__stack+0x159>
					sint16 bin = subprecision_index >> 5;
					sint16 delta = subprecision_index & 0x1f;
    2364:	a2 01       	movw	r20, r4
    2366:	4f 71       	andi	r20, 0x1F	; 31
    2368:	55 27       	eor	r21, r21
				else
				{
					sint32 subprecision_rest = value - (((sint32) 1) << fb1);
					sint16 to_shift = fb1 - 8; // fb1 >= 12 otherwise index would have been < 0
					sint16 subprecision_index = (sint16)(subprecision_rest >> to_shift);
					sint16 bin = subprecision_index >> 5;
    236a:	55 94       	asr	r5
    236c:	47 94       	ror	r4
    236e:	55 94       	asr	r5
    2370:	47 94       	ror	r4
    2372:	55 94       	asr	r5
    2374:	47 94       	ror	r4
    2376:	55 94       	asr	r5
    2378:	47 94       	ror	r4
    237a:	55 94       	asr	r5
    237c:	47 94       	ror	r4
					sint16 delta = subprecision_index & 0x1f;
					res = (sint16)(((sint32)aseba_atan_table[index*8 + bin] * (sint32)(32 - delta) + (sint32)aseba_atan_table[index*8 + bin + 1] * (sint32)delta) >> 5);
    237e:	c9 01       	movw	r24, r18
    2380:	88 0f       	add	r24, r24
    2382:	99 1f       	adc	r25, r25
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	84 0d       	add	r24, r4
    238e:	95 1d       	adc	r25, r5
    2390:	fc 01       	movw	r30, r24
    2392:	ee 0f       	add	r30, r30
    2394:	ff 1f       	adc	r31, r31
    2396:	ef 51       	subi	r30, 0x1F	; 31
    2398:	f4 4f       	sbci	r31, 0xF4	; 244
    239a:	20 81       	ld	r18, Z
    239c:	31 81       	ldd	r19, Z+1	; 0x01
    239e:	a4 1b       	sub	r26, r20
    23a0:	b5 0b       	sbc	r27, r21
    23a2:	88 0f       	add	r24, r24
    23a4:	99 1f       	adc	r25, r25
    23a6:	fc 01       	movw	r30, r24
    23a8:	ed 51       	subi	r30, 0x1D	; 29
    23aa:	f4 4f       	sbci	r31, 0xF4	; 244
    23ac:	01 90       	ld	r0, Z+
    23ae:	f0 81       	ld	r31, Z
    23b0:	e0 2d       	mov	r30, r0
    23b2:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    23b6:	2b 01       	movw	r4, r22
    23b8:	3c 01       	movw	r6, r24
    23ba:	9f 01       	movw	r18, r30
    23bc:	da 01       	movw	r26, r20
    23be:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    23c2:	46 0e       	add	r4, r22
    23c4:	57 1e       	adc	r5, r23
    23c6:	68 1e       	adc	r6, r24
    23c8:	79 1e       	adc	r7, r25
    23ca:	75 e0       	ldi	r23, 0x05	; 5
    23cc:	75 94       	asr	r7
    23ce:	67 94       	ror	r6
    23d0:	57 94       	ror	r5
    23d2:	47 94       	ror	r4
    23d4:	7a 95       	dec	r23
    23d6:	d1 f7       	brne	.-12     	; 0x23cc <__stack+0x1cd>
    23d8:	92 01       	movw	r18, r4
				}
#endif
				// do pi - value if x negative
				if (x < 0)
    23da:	f7 fe       	sbrs	r15, 7
    23dc:	57 cf       	rjmp	.-338    	; 0x228c <__stack+0x8d>
					res = 32768 - res;
    23de:	80 e0       	ldi	r24, 0x00	; 0
    23e0:	90 e8       	ldi	r25, 0x80	; 128
    23e2:	82 1b       	sub	r24, r18
    23e4:	93 0b       	sbc	r25, r19
    23e6:	9c 01       	movw	r18, r24
    23e8:	51 cf       	rjmp	.-350    	; 0x228c <__stack+0x8d>
	if (y == 0)
	{
		if (x >= 0)	// we return 0 on division by zero
			return 0;
		else if (x < 0)
			return -32768;
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e8       	ldi	r25, 0x80	; 128
    23ee:	33 cf       	rjmp	.-410    	; 0x2256 <__stack+0x57>
	{
		sint16 y = vm->variables[yIndex++];
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_atan2(y, x);
	}
}
    23f0:	26 96       	adiw	r28, 0x06	; 6
    23f2:	0f b6       	in	r0, 0x3f	; 63
    23f4:	f8 94       	cli
    23f6:	de bf       	out	0x3e, r29	; 62
    23f8:	0f be       	out	0x3f, r0	; 63
    23fa:	cd bf       	out	0x3d, r28	; 61
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	1f 91       	pop	r17
    2402:	0f 91       	pop	r16
    2404:	ff 90       	pop	r15
    2406:	ef 90       	pop	r14
    2408:	df 90       	pop	r13
    240a:	cf 90       	pop	r12
    240c:	bf 90       	pop	r11
    240e:	af 90       	pop	r10
    2410:	9f 90       	pop	r9
    2412:	8f 90       	pop	r8
    2414:	7f 90       	pop	r7
    2416:	6f 90       	pop	r6
    2418:	5f 90       	pop	r5
    241a:	4f 90       	pop	r4
    241c:	3f 90       	pop	r3
    241e:	2f 90       	pop	r2
    2420:	08 95       	ret
				// we only keep 4 bits of precision below comma as atan(x) is like x near 0
				sint16 index = fb1 - 12;
				if (index < 0)
				{
					// value is smaller than 2e-4
					res = (sint16)(((sint32)aseba_atan_table[0] * value) >> 12);
    2422:	ac e8       	ldi	r26, 0x8C	; 140
    2424:	b2 e0       	ldi	r27, 0x02	; 2
    2426:	a3 01       	movw	r20, r6
    2428:	92 01       	movw	r18, r4
    242a:	0e 94 44 56 	call	0xac88	; 0xac88 <__muluhisi3>
    242e:	dc 01       	movw	r26, r24
    2430:	cb 01       	movw	r24, r22
    2432:	ec e0       	ldi	r30, 0x0C	; 12
    2434:	b5 95       	asr	r27
    2436:	a7 95       	ror	r26
    2438:	97 95       	ror	r25
    243a:	87 95       	ror	r24
    243c:	ea 95       	dec	r30
    243e:	d1 f7       	brne	.-12     	; 0x2434 <__stack+0x235>
    2440:	9c 01       	movw	r18, r24
    2442:	cb cf       	rjmp	.-106    	; 0x23da <__stack+0x1db>
			return -32768;
	}
	
	{
		sint16 res;
		sint16 ax = abs(x);
    2444:	22 27       	eor	r18, r18
    2446:	33 27       	eor	r19, r19
    2448:	2e 19       	sub	r18, r14
    244a:	3f 09       	sbc	r19, r15
    244c:	3f cf       	rjmp	.-386    	; 0x22cc <__stack+0xcd>
		sint16 ay = abs(y);
    244e:	71 95       	neg	r23
    2450:	61 95       	neg	r22
    2452:	71 09       	sbc	r23, r1
    2454:	32 cf       	rjmp	.-412    	; 0x22ba <__stack+0xbb>

00002456 <AsebaNative_mathsin>:
		{ 0, 0 }
	}
};

void AsebaNative_mathsin(AsebaVMState *vm)
{
    2456:	2f 92       	push	r2
    2458:	3f 92       	push	r3
    245a:	4f 92       	push	r4
    245c:	5f 92       	push	r5
    245e:	6f 92       	push	r6
    2460:	7f 92       	push	r7
    2462:	8f 92       	push	r8
    2464:	9f 92       	push	r9
    2466:	af 92       	push	r10
    2468:	bf 92       	push	r11
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	dc 01       	movw	r26, r24
    247c:	1c 96       	adiw	r26, 0x0c	; 12
    247e:	ed 91       	ld	r30, X+
    2480:	fc 91       	ld	r31, X
    2482:	1d 97       	sbiw	r26, 0x0d	; 13
    2484:	52 96       	adiw	r26, 0x12	; 18
    2486:	4d 91       	ld	r20, X+
    2488:	5c 91       	ld	r21, X
    248a:	53 97       	sbiw	r26, 0x13	; 19
    248c:	ca 01       	movw	r24, r20
    248e:	01 97       	sbiw	r24, 0x01	; 1
    2490:	53 96       	adiw	r26, 0x13	; 19
    2492:	9c 93       	st	X, r25
    2494:	8e 93       	st	-X, r24
    2496:	52 97       	sbiw	r26, 0x12	; 18
    2498:	9a 01       	movw	r18, r20
    249a:	22 0f       	add	r18, r18
    249c:	33 1f       	adc	r19, r19
    249e:	e2 0f       	add	r30, r18
    24a0:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 destIndex = AsebaNativePopArg(vm);
    24a2:	80 81       	ld	r24, Z
    24a4:	91 81       	ldd	r25, Z+1	; 0x01
    24a6:	9a 01       	movw	r18, r20
    24a8:	22 50       	subi	r18, 0x02	; 2
    24aa:	31 09       	sbc	r19, r1
    24ac:	53 96       	adiw	r26, 0x13	; 19
    24ae:	3c 93       	st	X, r19
    24b0:	2e 93       	st	-X, r18
    24b2:	52 97       	sbiw	r26, 0x12	; 18
    24b4:	ef 01       	movw	r28, r30
    24b6:	22 97       	sbiw	r28, 0x02	; 2
    24b8:	08 81       	ld	r16, Y
    24ba:	19 81       	ldd	r17, Y+1	; 0x01
    24bc:	43 50       	subi	r20, 0x03	; 3
    24be:	51 09       	sbc	r21, r1
    24c0:	53 96       	adiw	r26, 0x13	; 19
    24c2:	5c 93       	st	X, r21
    24c4:	4e 93       	st	-X, r20
    24c6:	52 97       	sbiw	r26, 0x12	; 18
    24c8:	34 97       	sbiw	r30, 0x04	; 4
	sint16 xIndex = AsebaNativePopArg(vm);
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    24ca:	20 80       	ld	r2, Z
    24cc:	31 80       	ldd	r3, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    24ce:	21 14       	cp	r2, r1
    24d0:	31 04       	cpc	r3, r1
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <AsebaNative_mathsin+0x80>
    24d4:	6b c0       	rjmp	.+214    	; 0x25ac <AsebaNative_mathsin+0x156>
    24d6:	18 96       	adiw	r26, 0x08	; 8
    24d8:	cd 91       	ld	r28, X+
    24da:	dc 91       	ld	r29, X
    24dc:	19 97       	sbiw	r26, 0x09	; 9
    24de:	00 0f       	add	r16, r16
    24e0:	11 1f       	adc	r17, r17
    24e2:	0c 0f       	add	r16, r28
    24e4:	1d 1f       	adc	r17, r29
    24e6:	88 0f       	add	r24, r24
    24e8:	99 1f       	adc	r25, r25
    24ea:	c8 0f       	add	r28, r24
    24ec:	d9 1f       	adc	r29, r25
    24ee:	e0 e0       	ldi	r30, 0x00	; 0
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
	
	index = lookupAngle >> 7;
	subIndex = lookupAngle & 0x7f;
	
	{
		sint16 result = (sint16)(((sint32)aseba_sin_table[index] * (sint32)(128-subIndex) + (sint32)aseba_sin_table[index+1] * (sint32)(subIndex)) >> 7);
    24f2:	60 e8       	ldi	r22, 0x80	; 128
    24f4:	a6 2e       	mov	r10, r22
    24f6:	b1 2c       	mov	r11, r1
    24f8:	42 c0       	rjmp	.+132    	; 0x257e <AsebaNative_mathsin+0x128>
		invert = 1;
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
    24fa:	af ef       	ldi	r26, 0xFF	; 255
    24fc:	bf e7       	ldi	r27, 0x7F	; 127
    24fe:	a4 1b       	sub	r26, r20
    2500:	b5 0b       	sbc	r27, r21
    2502:	ad 01       	movw	r20, r26
    2504:	4f 5f       	subi	r20, 0xFF	; 255
    2506:	5f 4f       	sbci	r21, 0xFF	; 255
    2508:	81 2c       	mov	r8, r1
    250a:	91 2c       	mov	r9, r1
    250c:	c1 2c       	mov	r12, r1
    250e:	d1 2c       	mov	r13, r1
		else
			return 32767;
		invert = 0;
	}
	
	index = lookupAngle >> 7;
    2510:	ca 01       	movw	r24, r20
    2512:	88 0f       	add	r24, r24
    2514:	89 2f       	mov	r24, r25
    2516:	88 1f       	adc	r24, r24
    2518:	99 0b       	sbc	r25, r25
	subIndex = lookupAngle & 0x7f;
    251a:	4f 77       	andi	r20, 0x7F	; 127
    251c:	55 27       	eor	r21, r21
	
	{
		sint16 result = (sint16)(((sint32)aseba_sin_table[index] * (sint32)(128-subIndex) + (sint32)aseba_sin_table[index+1] * (sint32)(subIndex)) >> 7);
    251e:	dc 01       	movw	r26, r24
    2520:	aa 0f       	add	r26, r26
    2522:	bb 1f       	adc	r27, r27
    2524:	a1 52       	subi	r26, 0x21	; 33
    2526:	b5 4f       	sbci	r27, 0xF5	; 245
    2528:	2d 91       	ld	r18, X+
    252a:	3c 91       	ld	r19, X
    252c:	b5 01       	movw	r22, r10
    252e:	64 1b       	sub	r22, r20
    2530:	75 0b       	sbc	r23, r21
    2532:	88 0f       	add	r24, r24
    2534:	99 1f       	adc	r25, r25
    2536:	8f 51       	subi	r24, 0x1F	; 31
    2538:	95 4f       	sbci	r25, 0xF5	; 245
    253a:	dc 01       	movw	r26, r24
    253c:	ed 90       	ld	r14, X+
    253e:	fc 90       	ld	r15, X
    2540:	db 01       	movw	r26, r22
    2542:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    2546:	2b 01       	movw	r4, r22
    2548:	3c 01       	movw	r6, r24
    254a:	97 01       	movw	r18, r14
    254c:	da 01       	movw	r26, r20
    254e:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    2552:	46 0e       	add	r4, r22
    2554:	57 1e       	adc	r5, r23
    2556:	68 1e       	adc	r6, r24
    2558:	79 1e       	adc	r7, r25
    255a:	b7 e0       	ldi	r27, 0x07	; 7
    255c:	75 94       	asr	r7
    255e:	67 94       	ror	r6
    2560:	57 94       	ror	r5
    2562:	47 94       	ror	r4
    2564:	ba 95       	dec	r27
    2566:	d1 f7       	brne	.-12     	; 0x255c <AsebaNative_mathsin+0x106>
    2568:	4c 24       	eor	r4, r12
    256a:	5d 24       	eor	r5, r13
    256c:	c2 01       	movw	r24, r4
    256e:	88 0d       	add	r24, r8
    2570:	99 1d       	adc	r25, r9
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_sin(x);
    2572:	89 93       	st	Y+, r24
    2574:	99 93       	st	Y+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    2576:	31 96       	adiw	r30, 0x01	; 1
    2578:	2e 16       	cp	r2, r30
    257a:	3f 06       	cpc	r3, r31
    257c:	b9 f0       	breq	.+46     	; 0x25ac <AsebaNative_mathsin+0x156>
	{
		sint16 x = vm->variables[xIndex++];
    257e:	d8 01       	movw	r26, r16
    2580:	4d 91       	ld	r20, X+
    2582:	5d 91       	ld	r21, X+
    2584:	8d 01       	movw	r16, r26
{
	sint16 index;
	sint16 subIndex;
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
    2586:	57 fd       	sbrc	r21, 7
    2588:	24 c0       	rjmp	.+72     	; 0x25d2 <AsebaNative_mathsin+0x17c>
			return -32767;
		invert = 1;
	}
	else
	{
		if (angle > 16384)
    258a:	41 30       	cpi	r20, 0x01	; 1
    258c:	90 e4       	ldi	r25, 0x40	; 64
    258e:	59 07       	cpc	r21, r25
    2590:	0c f0       	brlt	.+2      	; 0x2594 <AsebaNative_mathsin+0x13e>
    2592:	b3 cf       	rjmp	.-154    	; 0x24fa <AsebaNative_mathsin+0xa4>
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    2594:	41 15       	cp	r20, r1
    2596:	b0 e4       	ldi	r27, 0x40	; 64
    2598:	5b 07       	cpc	r21, r27
    259a:	a9 f5       	brne	.+106    	; 0x2606 <AsebaNative_mathsin+0x1b0>
			lookupAngle = angle;
		else
			return 32767;
    259c:	8f ef       	ldi	r24, 0xFF	; 255
    259e:	9f e7       	ldi	r25, 0x7F	; 127
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_sin(x);
    25a0:	89 93       	st	Y+, r24
    25a2:	99 93       	st	Y+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    25a4:	31 96       	adiw	r30, 0x01	; 1
    25a6:	2e 16       	cp	r2, r30
    25a8:	3f 06       	cpc	r3, r31
    25aa:	49 f7       	brne	.-46     	; 0x257e <AsebaNative_mathsin+0x128>
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_sin(x);
	}
}
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	bf 90       	pop	r11
    25be:	af 90       	pop	r10
    25c0:	9f 90       	pop	r9
    25c2:	8f 90       	pop	r8
    25c4:	7f 90       	pop	r7
    25c6:	6f 90       	pop	r6
    25c8:	5f 90       	pop	r5
    25ca:	4f 90       	pop	r4
    25cc:	3f 90       	pop	r3
    25ce:	2f 90       	pop	r2
    25d0:	08 95       	ret
	sint16 subIndex;
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
	{
		if (angle < -16384)
    25d2:	41 15       	cp	r20, r1
    25d4:	b0 ec       	ldi	r27, 0xC0	; 192
    25d6:	5b 07       	cpc	r21, r27
    25d8:	44 f4       	brge	.+16     	; 0x25ea <AsebaNative_mathsin+0x194>
			lookupAngle = 32768 + angle;
    25da:	50 58       	subi	r21, 0x80	; 128
    25dc:	88 24       	eor	r8, r8
    25de:	83 94       	inc	r8
    25e0:	91 2c       	mov	r9, r1
    25e2:	cc 24       	eor	r12, r12
    25e4:	ca 94       	dec	r12
    25e6:	dc 2c       	mov	r13, r12
    25e8:	93 cf       	rjmp	.-218    	; 0x2510 <AsebaNative_mathsin+0xba>
		else if (angle > -16384)
    25ea:	41 15       	cp	r20, r1
    25ec:	80 ec       	ldi	r24, 0xC0	; 192
    25ee:	58 07       	cpc	r21, r24
    25f0:	79 f0       	breq	.+30     	; 0x2610 <AsebaNative_mathsin+0x1ba>
			lookupAngle = -angle;
    25f2:	51 95       	neg	r21
    25f4:	41 95       	neg	r20
    25f6:	51 09       	sbc	r21, r1
    25f8:	88 24       	eor	r8, r8
    25fa:	83 94       	inc	r8
    25fc:	91 2c       	mov	r9, r1
    25fe:	cc 24       	eor	r12, r12
    2600:	ca 94       	dec	r12
    2602:	dc 2c       	mov	r13, r12
    2604:	85 cf       	rjmp	.-246    	; 0x2510 <AsebaNative_mathsin+0xba>
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    2606:	81 2c       	mov	r8, r1
    2608:	91 2c       	mov	r9, r1
    260a:	c1 2c       	mov	r12, r1
    260c:	d1 2c       	mov	r13, r1
    260e:	80 cf       	rjmp	.-256    	; 0x2510 <AsebaNative_mathsin+0xba>
		if (angle < -16384)
			lookupAngle = 32768 + angle;
		else if (angle > -16384)
			lookupAngle = -angle;
		else
			return -32767;
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	90 e8       	ldi	r25, 0x80	; 128
    2614:	ae cf       	rjmp	.-164    	; 0x2572 <AsebaNative_mathsin+0x11c>

00002616 <AsebaNative_mathcos>:
		{ 0, 0 }
	}
};

void AsebaNative_mathcos(AsebaVMState *vm)
{
    2616:	2f 92       	push	r2
    2618:	3f 92       	push	r3
    261a:	4f 92       	push	r4
    261c:	5f 92       	push	r5
    261e:	6f 92       	push	r6
    2620:	7f 92       	push	r7
    2622:	8f 92       	push	r8
    2624:	9f 92       	push	r9
    2626:	af 92       	push	r10
    2628:	bf 92       	push	r11
    262a:	cf 92       	push	r12
    262c:	df 92       	push	r13
    262e:	ef 92       	push	r14
    2630:	ff 92       	push	r15
    2632:	0f 93       	push	r16
    2634:	1f 93       	push	r17
    2636:	cf 93       	push	r28
    2638:	df 93       	push	r29
    263a:	dc 01       	movw	r26, r24
    263c:	1c 96       	adiw	r26, 0x0c	; 12
    263e:	ed 91       	ld	r30, X+
    2640:	fc 91       	ld	r31, X
    2642:	1d 97       	sbiw	r26, 0x0d	; 13
    2644:	52 96       	adiw	r26, 0x12	; 18
    2646:	4d 91       	ld	r20, X+
    2648:	5c 91       	ld	r21, X
    264a:	53 97       	sbiw	r26, 0x13	; 19
    264c:	ca 01       	movw	r24, r20
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	53 96       	adiw	r26, 0x13	; 19
    2652:	9c 93       	st	X, r25
    2654:	8e 93       	st	-X, r24
    2656:	52 97       	sbiw	r26, 0x12	; 18
    2658:	9a 01       	movw	r18, r20
    265a:	22 0f       	add	r18, r18
    265c:	33 1f       	adc	r19, r19
    265e:	e2 0f       	add	r30, r18
    2660:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 destIndex = AsebaNativePopArg(vm);
    2662:	80 81       	ld	r24, Z
    2664:	91 81       	ldd	r25, Z+1	; 0x01
    2666:	9a 01       	movw	r18, r20
    2668:	22 50       	subi	r18, 0x02	; 2
    266a:	31 09       	sbc	r19, r1
    266c:	53 96       	adiw	r26, 0x13	; 19
    266e:	3c 93       	st	X, r19
    2670:	2e 93       	st	-X, r18
    2672:	52 97       	sbiw	r26, 0x12	; 18
    2674:	ef 01       	movw	r28, r30
    2676:	22 97       	sbiw	r28, 0x02	; 2
    2678:	08 81       	ld	r16, Y
    267a:	19 81       	ldd	r17, Y+1	; 0x01
    267c:	43 50       	subi	r20, 0x03	; 3
    267e:	51 09       	sbc	r21, r1
    2680:	53 96       	adiw	r26, 0x13	; 19
    2682:	5c 93       	st	X, r21
    2684:	4e 93       	st	-X, r20
    2686:	52 97       	sbiw	r26, 0x12	; 18
    2688:	34 97       	sbiw	r30, 0x04	; 4
	sint16 xIndex = AsebaNativePopArg(vm);
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    268a:	20 80       	ld	r2, Z
    268c:	31 80       	ldd	r3, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    268e:	21 14       	cp	r2, r1
    2690:	31 04       	cpc	r3, r1
    2692:	09 f4       	brne	.+2      	; 0x2696 <AsebaNative_mathcos+0x80>
    2694:	6a c0       	rjmp	.+212    	; 0x276a <AsebaNative_mathcos+0x154>
    2696:	18 96       	adiw	r26, 0x08	; 8
    2698:	cd 91       	ld	r28, X+
    269a:	dc 91       	ld	r29, X
    269c:	19 97       	sbiw	r26, 0x09	; 9
    269e:	00 0f       	add	r16, r16
    26a0:	11 1f       	adc	r17, r17
    26a2:	0c 0f       	add	r16, r28
    26a4:	1d 1f       	adc	r17, r29
    26a6:	88 0f       	add	r24, r24
    26a8:	99 1f       	adc	r25, r25
    26aa:	c8 0f       	add	r28, r24
    26ac:	d9 1f       	adc	r29, r25
    26ae:	e0 e0       	ldi	r30, 0x00	; 0
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
	
	index = lookupAngle >> 7;
	subIndex = lookupAngle & 0x7f;
	
	{
		sint16 result = (sint16)(((sint32)aseba_sin_table[index] * (sint32)(128-subIndex) + (sint32)aseba_sin_table[index+1] * (sint32)(subIndex)) >> 7);
    26b2:	40 e8       	ldi	r20, 0x80	; 128
    26b4:	a4 2e       	mov	r10, r20
    26b6:	b1 2c       	mov	r11, r1
    26b8:	3f c0       	rjmp	.+126    	; 0x2738 <AsebaNative_mathcos+0x122>
		invert = 1;
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	50 e4       	ldi	r21, 0x40	; 64
    26be:	48 1b       	sub	r20, r24
    26c0:	59 0b       	sbc	r21, r25
    26c2:	81 2c       	mov	r8, r1
    26c4:	91 2c       	mov	r9, r1
    26c6:	c1 2c       	mov	r12, r1
    26c8:	d1 2c       	mov	r13, r1
		else
			return 32767;
		invert = 0;
	}
	
	index = lookupAngle >> 7;
    26ca:	ca 01       	movw	r24, r20
    26cc:	88 0f       	add	r24, r24
    26ce:	89 2f       	mov	r24, r25
    26d0:	88 1f       	adc	r24, r24
    26d2:	99 0b       	sbc	r25, r25
	subIndex = lookupAngle & 0x7f;
    26d4:	4f 77       	andi	r20, 0x7F	; 127
    26d6:	55 27       	eor	r21, r21
	
	{
		sint16 result = (sint16)(((sint32)aseba_sin_table[index] * (sint32)(128-subIndex) + (sint32)aseba_sin_table[index+1] * (sint32)(subIndex)) >> 7);
    26d8:	dc 01       	movw	r26, r24
    26da:	aa 0f       	add	r26, r26
    26dc:	bb 1f       	adc	r27, r27
    26de:	a1 52       	subi	r26, 0x21	; 33
    26e0:	b5 4f       	sbci	r27, 0xF5	; 245
    26e2:	2d 91       	ld	r18, X+
    26e4:	3c 91       	ld	r19, X
    26e6:	b5 01       	movw	r22, r10
    26e8:	64 1b       	sub	r22, r20
    26ea:	75 0b       	sbc	r23, r21
    26ec:	88 0f       	add	r24, r24
    26ee:	99 1f       	adc	r25, r25
    26f0:	8f 51       	subi	r24, 0x1F	; 31
    26f2:	95 4f       	sbci	r25, 0xF5	; 245
    26f4:	dc 01       	movw	r26, r24
    26f6:	ed 90       	ld	r14, X+
    26f8:	fc 90       	ld	r15, X
    26fa:	db 01       	movw	r26, r22
    26fc:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    2700:	2b 01       	movw	r4, r22
    2702:	3c 01       	movw	r6, r24
    2704:	97 01       	movw	r18, r14
    2706:	da 01       	movw	r26, r20
    2708:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    270c:	46 0e       	add	r4, r22
    270e:	57 1e       	adc	r5, r23
    2710:	68 1e       	adc	r6, r24
    2712:	79 1e       	adc	r7, r25
    2714:	b7 e0       	ldi	r27, 0x07	; 7
    2716:	75 94       	asr	r7
    2718:	67 94       	ror	r6
    271a:	57 94       	ror	r5
    271c:	47 94       	ror	r4
    271e:	ba 95       	dec	r27
    2720:	d1 f7       	brne	.-12     	; 0x2716 <AsebaNative_mathcos+0x100>
    2722:	4c 24       	eor	r4, r12
    2724:	5d 24       	eor	r5, r13
    2726:	c2 01       	movw	r24, r4
    2728:	88 0d       	add	r24, r8
    272a:	99 1d       	adc	r25, r9
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_cos(x);
    272c:	89 93       	st	Y+, r24
    272e:	99 93       	st	Y+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    2730:	31 96       	adiw	r30, 0x01	; 1
    2732:	2e 16       	cp	r2, r30
    2734:	3f 06       	cpc	r3, r31
    2736:	c9 f0       	breq	.+50     	; 0x276a <AsebaNative_mathcos+0x154>
	{
		sint16 x = vm->variables[xIndex++];
    2738:	d8 01       	movw	r26, r16
    273a:	8d 91       	ld	r24, X+
    273c:	9d 91       	ld	r25, X+
    273e:	8d 01       	movw	r16, r26
}

// do the cos of an "aseba" angle that spans the whole 16 bits range, and return a 1.15 fixed point value
sint16 aseba_cos(sint16 angle)
{
	return aseba_sin(16384 + angle);
    2740:	ac 01       	movw	r20, r24
    2742:	50 5c       	subi	r21, 0xC0	; 192
{
	sint16 index;
	sint16 subIndex;
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
    2744:	57 fd       	sbrc	r21, 7
    2746:	24 c0       	rjmp	.+72     	; 0x2790 <AsebaNative_mathcos+0x17a>
			return -32767;
		invert = 1;
	}
	else
	{
		if (angle > 16384)
    2748:	41 30       	cpi	r20, 0x01	; 1
    274a:	20 e4       	ldi	r18, 0x40	; 64
    274c:	52 07       	cpc	r21, r18
    274e:	0c f0       	brlt	.+2      	; 0x2752 <AsebaNative_mathcos+0x13c>
    2750:	b4 cf       	rjmp	.-152    	; 0x26ba <AsebaNative_mathcos+0xa4>
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    2752:	41 15       	cp	r20, r1
    2754:	80 e4       	ldi	r24, 0x40	; 64
    2756:	58 07       	cpc	r21, r24
    2758:	49 f5       	brne	.+82     	; 0x27ac <AsebaNative_mathcos+0x196>
			lookupAngle = angle;
		else
			return 32767;
    275a:	8f ef       	ldi	r24, 0xFF	; 255
    275c:	9f e7       	ldi	r25, 0x7F	; 127
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_cos(x);
    275e:	89 93       	st	Y+, r24
    2760:	99 93       	st	Y+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    2762:	31 96       	adiw	r30, 0x01	; 1
    2764:	2e 16       	cp	r2, r30
    2766:	3f 06       	cpc	r3, r31
    2768:	39 f7       	brne	.-50     	; 0x2738 <AsebaNative_mathcos+0x122>
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_cos(x);
	}
}
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	1f 91       	pop	r17
    2770:	0f 91       	pop	r16
    2772:	ff 90       	pop	r15
    2774:	ef 90       	pop	r14
    2776:	df 90       	pop	r13
    2778:	cf 90       	pop	r12
    277a:	bf 90       	pop	r11
    277c:	af 90       	pop	r10
    277e:	9f 90       	pop	r9
    2780:	8f 90       	pop	r8
    2782:	7f 90       	pop	r7
    2784:	6f 90       	pop	r6
    2786:	5f 90       	pop	r5
    2788:	4f 90       	pop	r4
    278a:	3f 90       	pop	r3
    278c:	2f 90       	pop	r2
    278e:	08 95       	ret
	sint16 lookupAngle;
	if (angle < 0)
	{
		if (angle < -16384)
			lookupAngle = 32768 + angle;
		else if (angle > -16384)
    2790:	41 30       	cpi	r20, 0x01	; 1
    2792:	b0 ec       	ldi	r27, 0xC0	; 192
    2794:	5b 07       	cpc	r21, r27
    2796:	7c f0       	brlt	.+30     	; 0x27b6 <AsebaNative_mathcos+0x1a0>
			lookupAngle = -angle;
    2798:	51 95       	neg	r21
    279a:	41 95       	neg	r20
    279c:	51 09       	sbc	r21, r1
    279e:	88 24       	eor	r8, r8
    27a0:	83 94       	inc	r8
    27a2:	91 2c       	mov	r9, r1
    27a4:	cc 24       	eor	r12, r12
    27a6:	ca 94       	dec	r12
    27a8:	dc 2c       	mov	r13, r12
    27aa:	8f cf       	rjmp	.-226    	; 0x26ca <AsebaNative_mathcos+0xb4>
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    27ac:	81 2c       	mov	r8, r1
    27ae:	91 2c       	mov	r9, r1
    27b0:	c1 2c       	mov	r12, r1
    27b2:	d1 2c       	mov	r13, r1
    27b4:	8a cf       	rjmp	.-236    	; 0x26ca <AsebaNative_mathcos+0xb4>
		if (angle < -16384)
			lookupAngle = 32768 + angle;
		else if (angle > -16384)
			lookupAngle = -angle;
		else
			return -32767;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e8       	ldi	r25, 0x80	; 128
    27ba:	b8 cf       	rjmp	.-144    	; 0x272c <AsebaNative_mathcos+0x116>

000027bc <AsebaNative_mathrot2>:
		{ 0, 0 }
	}
};

void AsebaNative_mathrot2(AsebaVMState *vm)
{
    27bc:	2f 92       	push	r2
    27be:	3f 92       	push	r3
    27c0:	4f 92       	push	r4
    27c2:	5f 92       	push	r5
    27c4:	6f 92       	push	r6
    27c6:	7f 92       	push	r7
    27c8:	8f 92       	push	r8
    27ca:	9f 92       	push	r9
    27cc:	af 92       	push	r10
    27ce:	bf 92       	push	r11
    27d0:	cf 92       	push	r12
    27d2:	df 92       	push	r13
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	2a 97       	sbiw	r28, 0x0a	; 10
    27e6:	0f b6       	in	r0, 0x3f	; 63
    27e8:	f8 94       	cli
    27ea:	de bf       	out	0x3e, r29	; 62
    27ec:	0f be       	out	0x3f, r0	; 63
    27ee:	cd bf       	out	0x3d, r28	; 61
    27f0:	ac 01       	movw	r20, r24
    27f2:	fc 01       	movw	r30, r24
    27f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    27f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    27f8:	82 89       	ldd	r24, Z+18	; 0x12
    27fa:	93 89       	ldd	r25, Z+19	; 0x13
    27fc:	9c 01       	movw	r18, r24
    27fe:	21 50       	subi	r18, 0x01	; 1
    2800:	31 09       	sbc	r19, r1
    2802:	33 8b       	std	Z+19, r19	; 0x13
    2804:	22 8b       	std	Z+18, r18	; 0x12
    2806:	9c 01       	movw	r18, r24
    2808:	22 0f       	add	r18, r18
    280a:	33 1f       	adc	r19, r19
    280c:	a2 0f       	add	r26, r18
    280e:	b3 1f       	adc	r27, r19
	// variable pos
	uint16 vectOutIndex = AsebaNativePopArg(vm);
    2810:	0d 91       	ld	r16, X+
    2812:	1c 91       	ld	r17, X
    2814:	11 97       	sbiw	r26, 0x01	; 1
    2816:	9c 01       	movw	r18, r24
    2818:	22 50       	subi	r18, 0x02	; 2
    281a:	31 09       	sbc	r19, r1
    281c:	33 8b       	std	Z+19, r19	; 0x13
    281e:	22 8b       	std	Z+18, r18	; 0x12
    2820:	fd 01       	movw	r30, r26
    2822:	32 97       	sbiw	r30, 0x02	; 2
	uint16 vecInIndex = AsebaNativePopArg(vm);
    2824:	20 81       	ld	r18, Z
    2826:	31 81       	ldd	r19, Z+1	; 0x01
    2828:	03 97       	sbiw	r24, 0x03	; 3
    282a:	fa 01       	movw	r30, r20
    282c:	93 8b       	std	Z+19, r25	; 0x13
    282e:	82 8b       	std	Z+18, r24	; 0x12
	uint16 angleIndex = AsebaNativePopArg(vm);
	
	// variables
	sint16 x = vm->variables[vecInIndex];
    2830:	40 85       	ldd	r20, Z+8	; 0x08
    2832:	51 85       	ldd	r21, Z+9	; 0x09
    2834:	f9 01       	movw	r30, r18
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	e4 0f       	add	r30, r20
    283c:	f5 1f       	adc	r31, r21
    283e:	40 80       	ld	r4, Z
    2840:	51 80       	ldd	r5, Z+1	; 0x01
	sint16 y = vm->variables[vecInIndex+1];
    2842:	22 81       	ldd	r18, Z+2	; 0x02
    2844:	33 81       	ldd	r19, Z+3	; 0x03
    2846:	3a 87       	std	Y+10, r19	; 0x0a
    2848:	29 87       	std	Y+9, r18	; 0x09
    284a:	14 97       	sbiw	r26, 0x04	; 4
	sint16 a = vm->variables[angleIndex];
    284c:	0d 90       	ld	r0, X+
    284e:	bc 91       	ld	r27, X
    2850:	a0 2d       	mov	r26, r0
    2852:	aa 0f       	add	r26, r26
    2854:	bb 1f       	adc	r27, r27
    2856:	a4 0f       	add	r26, r20
    2858:	b5 1f       	adc	r27, r21
    285a:	ed 90       	ld	r14, X+
    285c:	fc 90       	ld	r15, X
}

// do the cos of an "aseba" angle that spans the whole 16 bits range, and return a 1.15 fixed point value
sint16 aseba_cos(sint16 angle)
{
	return aseba_sin(16384 + angle);
    285e:	97 01       	movw	r18, r14
    2860:	30 5c       	subi	r19, 0xC0	; 192
{
	sint16 index;
	sint16 subIndex;
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
    2862:	37 fd       	sbrc	r19, 7
    2864:	34 c1       	rjmp	.+616    	; 0x2ace <AsebaNative_mathrot2+0x312>
			return -32767;
		invert = 1;
	}
	else
	{
		if (angle > 16384)
    2866:	21 30       	cpi	r18, 0x01	; 1
    2868:	70 e4       	ldi	r23, 0x40	; 64
    286a:	37 07       	cpc	r19, r23
    286c:	0c f0       	brlt	.+2      	; 0x2870 <AsebaNative_mathrot2+0xb4>
    286e:	c1 c0       	rjmp	.+386    	; 0x29f2 <AsebaNative_mathrot2+0x236>
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    2870:	21 15       	cp	r18, r1
    2872:	80 e4       	ldi	r24, 0x40	; 64
    2874:	38 07       	cpc	r19, r24
    2876:	09 f0       	breq	.+2      	; 0x287a <AsebaNative_mathrot2+0xbe>
    2878:	3d c1       	rjmp	.+634    	; 0x2af4 <AsebaNative_mathrot2+0x338>
    287a:	6f ef       	ldi	r22, 0xFF	; 255
    287c:	7f e7       	ldi	r23, 0x7F	; 127
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	69 83       	std	Y+1, r22	; 0x01
    2884:	7a 83       	std	Y+2, r23	; 0x02
    2886:	8b 83       	std	Y+3, r24	; 0x03
    2888:	9c 83       	std	Y+4, r25	; 0x04
{
	sint16 index;
	sint16 subIndex;
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
    288a:	f7 fc       	sbrc	r15, 7
    288c:	f8 c0       	rjmp	.+496    	; 0x2a7e <AsebaNative_mathrot2+0x2c2>
			return -32767;
		invert = 1;
	}
	else
	{
		if (angle > 16384)
    288e:	a1 e0       	ldi	r26, 0x01	; 1
    2890:	ea 16       	cp	r14, r26
    2892:	a0 e4       	ldi	r26, 0x40	; 64
    2894:	fa 06       	cpc	r15, r26
    2896:	0c f4       	brge	.+2      	; 0x289a <AsebaNative_mathrot2+0xde>
    2898:	04 c1       	rjmp	.+520    	; 0x2aa2 <AsebaNative_mathrot2+0x2e6>
			lookupAngle = 32767 - angle + 1;
    289a:	80 e0       	ldi	r24, 0x00	; 0
    289c:	90 e8       	ldi	r25, 0x80	; 128
    289e:	fc 01       	movw	r30, r24
    28a0:	ee 19       	sub	r30, r14
    28a2:	ff 09       	sbc	r31, r15
    28a4:	7f 01       	movw	r14, r30
    28a6:	21 2c       	mov	r2, r1
    28a8:	31 2c       	mov	r3, r1
    28aa:	61 2c       	mov	r6, r1
    28ac:	71 2c       	mov	r7, r1
		else
			return 32767;
		invert = 0;
	}
	
	index = lookupAngle >> 7;
    28ae:	c7 01       	movw	r24, r14
    28b0:	88 0f       	add	r24, r24
    28b2:	89 2f       	mov	r24, r25
    28b4:	88 1f       	adc	r24, r24
    28b6:	99 0b       	sbc	r25, r25
	subIndex = lookupAngle & 0x7f;
    28b8:	e8 94       	clt
    28ba:	e7 f8       	bld	r14, 7
    28bc:	ff 24       	eor	r15, r15
	
	{
		sint16 result = (sint16)(((sint32)aseba_sin_table[index] * (sint32)(128-subIndex) + (sint32)aseba_sin_table[index+1] * (sint32)(subIndex)) >> 7);
    28be:	dc 01       	movw	r26, r24
    28c0:	aa 0f       	add	r26, r26
    28c2:	bb 1f       	adc	r27, r27
    28c4:	a1 52       	subi	r26, 0x21	; 33
    28c6:	b5 4f       	sbci	r27, 0xF5	; 245
    28c8:	2d 91       	ld	r18, X+
    28ca:	3c 91       	ld	r19, X
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	b0 e0       	ldi	r27, 0x00	; 0
    28d0:	ae 19       	sub	r26, r14
    28d2:	bf 09       	sbc	r27, r15
    28d4:	88 0f       	add	r24, r24
    28d6:	99 1f       	adc	r25, r25
    28d8:	8f 51       	subi	r24, 0x1F	; 31
    28da:	95 4f       	sbci	r25, 0xF5	; 245
    28dc:	fc 01       	movw	r30, r24
    28de:	c0 80       	ld	r12, Z
    28e0:	d1 80       	ldd	r13, Z+1	; 0x01
    28e2:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    28e6:	4b 01       	movw	r8, r22
    28e8:	5c 01       	movw	r10, r24
    28ea:	96 01       	movw	r18, r12
    28ec:	d7 01       	movw	r26, r14
    28ee:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	88 0d       	add	r24, r8
    28f8:	99 1d       	adc	r25, r9
    28fa:	aa 1d       	adc	r26, r10
    28fc:	bb 1d       	adc	r27, r11
    28fe:	e7 e0       	ldi	r30, 0x07	; 7
    2900:	b5 95       	asr	r27
    2902:	a7 95       	ror	r26
    2904:	97 95       	ror	r25
    2906:	87 95       	ror	r24
    2908:	ea 95       	dec	r30
    290a:	d1 f7       	brne	.-12     	; 0x2900 <AsebaNative_mathrot2+0x144>
    290c:	b3 01       	movw	r22, r6
    290e:	68 27       	eor	r22, r24
    2910:	79 27       	eor	r23, r25
    2912:	62 0d       	add	r22, r2
    2914:	73 1d       	adc	r23, r3
    2916:	cb 01       	movw	r24, r22
    2918:	77 0f       	add	r23, r23
    291a:	aa 0b       	sbc	r26, r26
    291c:	bb 0b       	sbc	r27, r27
    291e:	8d 83       	std	Y+5, r24	; 0x05
    2920:	9e 83       	std	Y+6, r25	; 0x06
    2922:	af 83       	std	Y+7, r26	; 0x07
    2924:	b8 87       	std	Y+8, r27	; 0x08
	sint16 a = vm->variables[angleIndex];
	
	sint16 cos_a = aseba_cos(a);
	sint16 sin_a = aseba_sin(a);
	
	sint16 xp = (sint16)(((sint32)cos_a * (sint32)x - (sint32)sin_a * (sint32)y) >> (sint32)15);
    2926:	05 2c       	mov	r0, r5
    2928:	00 0c       	add	r0, r0
    292a:	66 08       	sbc	r6, r6
    292c:	77 08       	sbc	r7, r7
    292e:	e9 85       	ldd	r30, Y+9	; 0x09
    2930:	fa 85       	ldd	r31, Y+10	; 0x0a
    2932:	4f 01       	movw	r8, r30
    2934:	ff 0f       	add	r31, r31
    2936:	aa 08       	sbc	r10, r10
    2938:	bb 08       	sbc	r11, r11
	sint16 yp = (sint16)(((sint32)cos_a * (sint32)y + (sint32)sin_a * (sint32)x) >> (sint32)15);
	
	vm->variables[vectOutIndex] = xp;
    293a:	00 0f       	add	r16, r16
    293c:	11 1f       	adc	r17, r17
    293e:	fa 01       	movw	r30, r20
    2940:	e0 0f       	add	r30, r16
    2942:	f1 1f       	adc	r31, r17
	sint16 a = vm->variables[angleIndex];
	
	sint16 cos_a = aseba_cos(a);
	sint16 sin_a = aseba_sin(a);
	
	sint16 xp = (sint16)(((sint32)cos_a * (sint32)x - (sint32)sin_a * (sint32)y) >> (sint32)15);
    2944:	a3 01       	movw	r20, r6
    2946:	92 01       	movw	r18, r4
    2948:	69 81       	ldd	r22, Y+1	; 0x01
    294a:	7a 81       	ldd	r23, Y+2	; 0x02
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	9c 81       	ldd	r25, Y+4	; 0x04
    2950:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    2954:	6b 01       	movw	r12, r22
    2956:	7c 01       	movw	r14, r24
    2958:	a5 01       	movw	r20, r10
    295a:	94 01       	movw	r18, r8
    295c:	6d 81       	ldd	r22, Y+5	; 0x05
    295e:	7e 81       	ldd	r23, Y+6	; 0x06
    2960:	8f 81       	ldd	r24, Y+7	; 0x07
    2962:	98 85       	ldd	r25, Y+8	; 0x08
    2964:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    2968:	c6 1a       	sub	r12, r22
    296a:	d7 0a       	sbc	r13, r23
    296c:	e8 0a       	sbc	r14, r24
    296e:	f9 0a       	sbc	r15, r25
    2970:	9f e0       	ldi	r25, 0x0F	; 15
    2972:	f5 94       	asr	r15
    2974:	e7 94       	ror	r14
    2976:	d7 94       	ror	r13
    2978:	c7 94       	ror	r12
    297a:	9a 95       	dec	r25
    297c:	d1 f7       	brne	.-12     	; 0x2972 <AsebaNative_mathrot2+0x1b6>
    297e:	d1 82       	std	Z+1, r13	; 0x01
    2980:	c0 82       	st	Z, r12
	sint16 yp = (sint16)(((sint32)cos_a * (sint32)y + (sint32)sin_a * (sint32)x) >> (sint32)15);
    2982:	69 81       	ldd	r22, Y+1	; 0x01
    2984:	7a 81       	ldd	r23, Y+2	; 0x02
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	9c 81       	ldd	r25, Y+4	; 0x04
    298a:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    298e:	6b 01       	movw	r12, r22
    2990:	7c 01       	movw	r14, r24
    2992:	a3 01       	movw	r20, r6
    2994:	92 01       	movw	r18, r4
    2996:	6d 81       	ldd	r22, Y+5	; 0x05
    2998:	7e 81       	ldd	r23, Y+6	; 0x06
    299a:	8f 81       	ldd	r24, Y+7	; 0x07
    299c:	98 85       	ldd	r25, Y+8	; 0x08
    299e:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    29a2:	dc 01       	movw	r26, r24
    29a4:	cb 01       	movw	r24, r22
    29a6:	8c 0d       	add	r24, r12
    29a8:	9d 1d       	adc	r25, r13
    29aa:	ae 1d       	adc	r26, r14
    29ac:	bf 1d       	adc	r27, r15
    29ae:	2f e0       	ldi	r18, 0x0F	; 15
    29b0:	b5 95       	asr	r27
    29b2:	a7 95       	ror	r26
    29b4:	97 95       	ror	r25
    29b6:	87 95       	ror	r24
    29b8:	2a 95       	dec	r18
    29ba:	d1 f7       	brne	.-12     	; 0x29b0 <AsebaNative_mathrot2+0x1f4>
    29bc:	93 83       	std	Z+3, r25	; 0x03
    29be:	82 83       	std	Z+2, r24	; 0x02
	
	vm->variables[vectOutIndex] = xp;
	vm->variables[vectOutIndex+1] = yp;
}
    29c0:	2a 96       	adiw	r28, 0x0a	; 10
    29c2:	0f b6       	in	r0, 0x3f	; 63
    29c4:	f8 94       	cli
    29c6:	de bf       	out	0x3e, r29	; 62
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	cd bf       	out	0x3d, r28	; 61
    29cc:	df 91       	pop	r29
    29ce:	cf 91       	pop	r28
    29d0:	1f 91       	pop	r17
    29d2:	0f 91       	pop	r16
    29d4:	ff 90       	pop	r15
    29d6:	ef 90       	pop	r14
    29d8:	df 90       	pop	r13
    29da:	cf 90       	pop	r12
    29dc:	bf 90       	pop	r11
    29de:	af 90       	pop	r10
    29e0:	9f 90       	pop	r9
    29e2:	8f 90       	pop	r8
    29e4:	7f 90       	pop	r7
    29e6:	6f 90       	pop	r6
    29e8:	5f 90       	pop	r5
    29ea:	4f 90       	pop	r4
    29ec:	3f 90       	pop	r3
    29ee:	2f 90       	pop	r2
    29f0:	08 95       	ret
		invert = 1;
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
    29f2:	20 e0       	ldi	r18, 0x00	; 0
    29f4:	30 e4       	ldi	r19, 0x40	; 64
    29f6:	2e 19       	sub	r18, r14
    29f8:	3f 09       	sbc	r19, r15
    29fa:	21 2c       	mov	r2, r1
    29fc:	31 2c       	mov	r3, r1
    29fe:	61 2c       	mov	r6, r1
    2a00:	71 2c       	mov	r7, r1
		else
			return 32767;
		invert = 0;
	}
	
	index = lookupAngle >> 7;
    2a02:	c9 01       	movw	r24, r18
    2a04:	88 0f       	add	r24, r24
    2a06:	89 2f       	mov	r24, r25
    2a08:	88 1f       	adc	r24, r24
    2a0a:	99 0b       	sbc	r25, r25
	subIndex = lookupAngle & 0x7f;
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	ef 77       	andi	r30, 0x7F	; 127
    2a10:	ff 27       	eor	r31, r31
    2a12:	fa 83       	std	Y+2, r31	; 0x02
    2a14:	e9 83       	std	Y+1, r30	; 0x01
	
	{
		sint16 result = (sint16)(((sint32)aseba_sin_table[index] * (sint32)(128-subIndex) + (sint32)aseba_sin_table[index+1] * (sint32)(subIndex)) >> 7);
    2a16:	dc 01       	movw	r26, r24
    2a18:	aa 0f       	add	r26, r26
    2a1a:	bb 1f       	adc	r27, r27
    2a1c:	a1 52       	subi	r26, 0x21	; 33
    2a1e:	b5 4f       	sbci	r27, 0xF5	; 245
    2a20:	2d 91       	ld	r18, X+
    2a22:	3c 91       	ld	r19, X
    2a24:	a0 e8       	ldi	r26, 0x80	; 128
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	ae 1b       	sub	r26, r30
    2a2a:	bf 0b       	sbc	r27, r31
    2a2c:	88 0f       	add	r24, r24
    2a2e:	99 1f       	adc	r25, r25
    2a30:	8f 51       	subi	r24, 0x1F	; 31
    2a32:	95 4f       	sbci	r25, 0xF5	; 245
    2a34:	fc 01       	movw	r30, r24
    2a36:	c0 80       	ld	r12, Z
    2a38:	d1 80       	ldd	r13, Z+1	; 0x01
    2a3a:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    2a3e:	4b 01       	movw	r8, r22
    2a40:	5c 01       	movw	r10, r24
    2a42:	96 01       	movw	r18, r12
    2a44:	a9 81       	ldd	r26, Y+1	; 0x01
    2a46:	ba 81       	ldd	r27, Y+2	; 0x02
    2a48:	0e 94 26 56 	call	0xac4c	; 0xac4c <__mulhisi3>
    2a4c:	86 0e       	add	r8, r22
    2a4e:	97 1e       	adc	r9, r23
    2a50:	a8 1e       	adc	r10, r24
    2a52:	b9 1e       	adc	r11, r25
    2a54:	f7 e0       	ldi	r31, 0x07	; 7
    2a56:	b5 94       	asr	r11
    2a58:	a7 94       	ror	r10
    2a5a:	97 94       	ror	r9
    2a5c:	87 94       	ror	r8
    2a5e:	fa 95       	dec	r31
    2a60:	d1 f7       	brne	.-12     	; 0x2a56 <AsebaNative_mathrot2+0x29a>
    2a62:	86 24       	eor	r8, r6
    2a64:	97 24       	eor	r9, r7
    2a66:	82 0c       	add	r8, r2
    2a68:	93 1c       	adc	r9, r3
    2a6a:	b4 01       	movw	r22, r8
    2a6c:	99 0c       	add	r9, r9
    2a6e:	88 0b       	sbc	r24, r24
    2a70:	99 0b       	sbc	r25, r25
    2a72:	69 83       	std	Y+1, r22	; 0x01
    2a74:	7a 83       	std	Y+2, r23	; 0x02
    2a76:	8b 83       	std	Y+3, r24	; 0x03
    2a78:	9c 83       	std	Y+4, r25	; 0x04
{
	sint16 index;
	sint16 subIndex;
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
    2a7a:	f7 fe       	sbrs	r15, 7
    2a7c:	08 cf       	rjmp	.-496    	; 0x288e <AsebaNative_mathrot2+0xd2>
	{
		if (angle < -16384)
    2a7e:	e1 14       	cp	r14, r1
    2a80:	70 ec       	ldi	r23, 0xC0	; 192
    2a82:	f7 06       	cpc	r15, r23
    2a84:	dc f0       	brlt	.+54     	; 0x2abc <AsebaNative_mathrot2+0x300>
			lookupAngle = 32768 + angle;
		else if (angle > -16384)
    2a86:	e1 14       	cp	r14, r1
    2a88:	90 ec       	ldi	r25, 0xC0	; 192
    2a8a:	f9 06       	cpc	r15, r25
    2a8c:	c1 f1       	breq	.+112    	; 0x2afe <AsebaNative_mathrot2+0x342>
			lookupAngle = -angle;
    2a8e:	f1 94       	neg	r15
    2a90:	e1 94       	neg	r14
    2a92:	f1 08       	sbc	r15, r1
    2a94:	22 24       	eor	r2, r2
    2a96:	23 94       	inc	r2
    2a98:	31 2c       	mov	r3, r1
    2a9a:	66 24       	eor	r6, r6
    2a9c:	6a 94       	dec	r6
    2a9e:	76 2c       	mov	r7, r6
    2aa0:	06 cf       	rjmp	.-500    	; 0x28ae <AsebaNative_mathrot2+0xf2>
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    2aa2:	e1 14       	cp	r14, r1
    2aa4:	f0 e4       	ldi	r31, 0x40	; 64
    2aa6:	ff 06       	cpc	r15, r31
    2aa8:	01 f5       	brne	.+64     	; 0x2aea <AsebaNative_mathrot2+0x32e>
    2aaa:	8f ef       	ldi	r24, 0xFF	; 255
    2aac:	9f e7       	ldi	r25, 0x7F	; 127
    2aae:	a0 e0       	ldi	r26, 0x00	; 0
    2ab0:	b0 e0       	ldi	r27, 0x00	; 0
    2ab2:	8d 83       	std	Y+5, r24	; 0x05
    2ab4:	9e 83       	std	Y+6, r25	; 0x06
    2ab6:	af 83       	std	Y+7, r26	; 0x07
    2ab8:	b8 87       	std	Y+8, r27	; 0x08
    2aba:	35 cf       	rjmp	.-406    	; 0x2926 <AsebaNative_mathrot2+0x16a>
	sint16 invert;
	sint16 lookupAngle;
	if (angle < 0)
	{
		if (angle < -16384)
			lookupAngle = 32768 + angle;
    2abc:	80 e8       	ldi	r24, 0x80	; 128
    2abe:	f8 1a       	sub	r15, r24
    2ac0:	22 24       	eor	r2, r2
    2ac2:	23 94       	inc	r2
    2ac4:	31 2c       	mov	r3, r1
    2ac6:	66 24       	eor	r6, r6
    2ac8:	6a 94       	dec	r6
    2aca:	76 2c       	mov	r7, r6
    2acc:	f0 ce       	rjmp	.-544    	; 0x28ae <AsebaNative_mathrot2+0xf2>
		else if (angle > -16384)
    2ace:	21 30       	cpi	r18, 0x01	; 1
    2ad0:	60 ec       	ldi	r22, 0xC0	; 192
    2ad2:	36 07       	cpc	r19, r22
    2ad4:	ec f0       	brlt	.+58     	; 0x2b10 <AsebaNative_mathrot2+0x354>
			lookupAngle = -angle;
    2ad6:	31 95       	neg	r19
    2ad8:	21 95       	neg	r18
    2ada:	31 09       	sbc	r19, r1
    2adc:	22 24       	eor	r2, r2
    2ade:	23 94       	inc	r2
    2ae0:	31 2c       	mov	r3, r1
    2ae2:	66 24       	eor	r6, r6
    2ae4:	6a 94       	dec	r6
    2ae6:	76 2c       	mov	r7, r6
    2ae8:	8c cf       	rjmp	.-232    	; 0x2a02 <AsebaNative_mathrot2+0x246>
	}
	else
	{
		if (angle > 16384)
			lookupAngle = 32767 - angle + 1;
		else if (angle < 16384)
    2aea:	21 2c       	mov	r2, r1
    2aec:	31 2c       	mov	r3, r1
    2aee:	61 2c       	mov	r6, r1
    2af0:	71 2c       	mov	r7, r1
    2af2:	dd ce       	rjmp	.-582    	; 0x28ae <AsebaNative_mathrot2+0xf2>
    2af4:	21 2c       	mov	r2, r1
    2af6:	31 2c       	mov	r3, r1
    2af8:	61 2c       	mov	r6, r1
    2afa:	71 2c       	mov	r7, r1
    2afc:	82 cf       	rjmp	.-252    	; 0x2a02 <AsebaNative_mathrot2+0x246>
	sint16 lookupAngle;
	if (angle < 0)
	{
		if (angle < -16384)
			lookupAngle = 32768 + angle;
		else if (angle > -16384)
    2afe:	61 e0       	ldi	r22, 0x01	; 1
    2b00:	70 e8       	ldi	r23, 0x80	; 128
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	9f ef       	ldi	r25, 0xFF	; 255
    2b06:	6d 83       	std	Y+5, r22	; 0x05
    2b08:	7e 83       	std	Y+6, r23	; 0x06
    2b0a:	8f 83       	std	Y+7, r24	; 0x07
    2b0c:	98 87       	std	Y+8, r25	; 0x08
    2b0e:	0b cf       	rjmp	.-490    	; 0x2926 <AsebaNative_mathrot2+0x16a>
    2b10:	81 e0       	ldi	r24, 0x01	; 1
    2b12:	90 e8       	ldi	r25, 0x80	; 128
    2b14:	af ef       	ldi	r26, 0xFF	; 255
    2b16:	bf ef       	ldi	r27, 0xFF	; 255
    2b18:	89 83       	std	Y+1, r24	; 0x01
    2b1a:	9a 83       	std	Y+2, r25	; 0x02
    2b1c:	ab 83       	std	Y+3, r26	; 0x03
    2b1e:	bc 83       	std	Y+4, r27	; 0x04
    2b20:	b4 ce       	rjmp	.-664    	; 0x288a <AsebaNative_mathrot2+0xce>

00002b22 <AsebaNative_mathsqrt>:
		{ 0, 0 }
	}
};

void AsebaNative_mathsqrt(AsebaVMState *vm)
{
    2b22:	bf 92       	push	r11
    2b24:	cf 92       	push	r12
    2b26:	df 92       	push	r13
    2b28:	ef 92       	push	r14
    2b2a:	ff 92       	push	r15
    2b2c:	0f 93       	push	r16
    2b2e:	1f 93       	push	r17
    2b30:	cf 93       	push	r28
    2b32:	df 93       	push	r29
    2b34:	dc 01       	movw	r26, r24
    2b36:	1c 96       	adiw	r26, 0x0c	; 12
    2b38:	ed 91       	ld	r30, X+
    2b3a:	fc 91       	ld	r31, X
    2b3c:	1d 97       	sbiw	r26, 0x0d	; 13
    2b3e:	52 96       	adiw	r26, 0x12	; 18
    2b40:	8d 91       	ld	r24, X+
    2b42:	9c 91       	ld	r25, X
    2b44:	53 97       	sbiw	r26, 0x13	; 19
    2b46:	9c 01       	movw	r18, r24
    2b48:	21 50       	subi	r18, 0x01	; 1
    2b4a:	31 09       	sbc	r19, r1
    2b4c:	53 96       	adiw	r26, 0x13	; 19
    2b4e:	3c 93       	st	X, r19
    2b50:	2e 93       	st	-X, r18
    2b52:	52 97       	sbiw	r26, 0x12	; 18
    2b54:	9c 01       	movw	r18, r24
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	e2 0f       	add	r30, r18
    2b5c:	f3 1f       	adc	r31, r19
	// variable pos
	uint16 destIndex = AsebaNativePopArg(vm);
    2b5e:	40 81       	ld	r20, Z
    2b60:	51 81       	ldd	r21, Z+1	; 0x01
    2b62:	9c 01       	movw	r18, r24
    2b64:	22 50       	subi	r18, 0x02	; 2
    2b66:	31 09       	sbc	r19, r1
    2b68:	53 96       	adiw	r26, 0x13	; 19
    2b6a:	3c 93       	st	X, r19
    2b6c:	2e 93       	st	-X, r18
    2b6e:	52 97       	sbiw	r26, 0x12	; 18
    2b70:	9f 01       	movw	r18, r30
    2b72:	22 50       	subi	r18, 0x02	; 2
    2b74:	31 09       	sbc	r19, r1
    2b76:	e9 01       	movw	r28, r18
    2b78:	08 81       	ld	r16, Y
    2b7a:	19 81       	ldd	r17, Y+1	; 0x01
    2b7c:	03 97       	sbiw	r24, 0x03	; 3
    2b7e:	53 96       	adiw	r26, 0x13	; 19
    2b80:	9c 93       	st	X, r25
    2b82:	8e 93       	st	-X, r24
    2b84:	52 97       	sbiw	r26, 0x12	; 18
    2b86:	34 97       	sbiw	r30, 0x04	; 4
	sint16 xIndex = AsebaNativePopArg(vm);
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    2b88:	e0 80       	ld	r14, Z
    2b8a:	f1 80       	ldd	r15, Z+1	; 0x01
	
	uint16 i;
	for (i = 0; i < length; i++)
    2b8c:	e1 14       	cp	r14, r1
    2b8e:	f1 04       	cpc	r15, r1
    2b90:	09 f4       	brne	.+2      	; 0x2b94 <AsebaNative_mathsqrt+0x72>
    2b92:	58 c0       	rjmp	.+176    	; 0x2c44 <AsebaNative_mathsqrt+0x122>
    2b94:	18 96       	adiw	r26, 0x08	; 8
    2b96:	2d 91       	ld	r18, X+
    2b98:	3c 91       	ld	r19, X
    2b9a:	19 97       	sbiw	r26, 0x09	; 9
    2b9c:	00 0f       	add	r16, r16
    2b9e:	11 1f       	adc	r17, r17
    2ba0:	02 0f       	add	r16, r18
    2ba2:	13 1f       	adc	r17, r19
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	88 0f       	add	r24, r24
    2ba8:	99 1f       	adc	r25, r25
    2baa:	e9 01       	movw	r28, r18
    2bac:	c8 0f       	add	r28, r24
    2bae:	d9 1f       	adc	r29, r25
    2bb0:	a0 e0       	ldi	r26, 0x00	; 0
    2bb2:	b0 e0       	ldi	r27, 0x00	; 0
	{
		sint16 x = vm->variables[xIndex++];
    2bb4:	f8 01       	movw	r30, r16
    2bb6:	81 91       	ld	r24, Z+
    2bb8:	91 91       	ld	r25, Z+
    2bba:	8f 01       	movw	r16, r30
{
	sint16 op = num;
	sint16 res = 0;
	sint16 one = 1 << 14;
	
	while(one > op)
    2bbc:	40 e0       	ldi	r20, 0x00	; 0
    2bbe:	50 e4       	ldi	r21, 0x40	; 64
    2bc0:	81 15       	cp	r24, r1
    2bc2:	f0 e4       	ldi	r31, 0x40	; 64
    2bc4:	9f 07       	cpc	r25, r31
    2bc6:	54 f4       	brge	.+20     	; 0x2bdc <AsebaNative_mathsqrt+0xba>
		one >>= 2;
    2bc8:	55 95       	asr	r21
    2bca:	47 95       	ror	r20
    2bcc:	55 95       	asr	r21
    2bce:	47 95       	ror	r20
{
	sint16 op = num;
	sint16 res = 0;
	sint16 one = 1 << 14;
	
	while(one > op)
    2bd0:	84 17       	cp	r24, r20
    2bd2:	95 07       	cpc	r25, r21
    2bd4:	cc f3       	brlt	.-14     	; 0x2bc8 <AsebaNative_mathsqrt+0xa6>
		one >>= 2;
		
	while(one != 0) 
    2bd6:	41 15       	cp	r20, r1
    2bd8:	51 05       	cpc	r21, r1
    2bda:	59 f1       	breq	.+86     	; 0x2c32 <AsebaNative_mathsqrt+0x110>
// Do integer square root ( from Wikipedia )
sint16 aseba_sqrt(sint16 num)
{
	sint16 op = num;
	sint16 res = 0;
	sint16 one = 1 << 14;
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	12 c0       	rjmp	.+36     	; 0x2c06 <AsebaNative_mathsqrt+0xe4>
    2be2:	be 2e       	mov	r11, r30
    2be4:	ef 2f       	mov	r30, r31
    2be6:	86 17       	cp	r24, r22
    2be8:	97 07       	cpc	r25, r23
    2bea:	04 f5       	brge	.+64     	; 0x2c2c <AsebaNative_mathsqrt+0x10a>
    2bec:	92 2f       	mov	r25, r18
    2bee:	83 2f       	mov	r24, r19
    2bf0:	29 2f       	mov	r18, r25
    2bf2:	38 2f       	mov	r19, r24
		}
		else
		{
			res >>= 1;
		}
		one >>= 2;
    2bf4:	55 95       	asr	r21
    2bf6:	47 95       	ror	r20
    2bf8:	55 95       	asr	r21
    2bfa:	47 95       	ror	r20
    2bfc:	8b 2d       	mov	r24, r11
    2bfe:	9e 2f       	mov	r25, r30
	sint16 one = 1 << 14;
	
	while(one > op)
		one >>= 2;
		
	while(one != 0) 
    2c00:	41 15       	cp	r20, r1
    2c02:	51 05       	cpc	r21, r1
    2c04:	c1 f0       	breq	.+48     	; 0x2c36 <AsebaNative_mathsqrt+0x114>
	{
		if (op >= res + one) 
    2c06:	b9 01       	movw	r22, r18
    2c08:	64 0f       	add	r22, r20
    2c0a:	75 1f       	adc	r23, r21
		{
			op -= res + one;
    2c0c:	fc 01       	movw	r30, r24
    2c0e:	e6 1b       	sub	r30, r22
    2c10:	f7 0b       	sbc	r31, r23
			res = (res >> 1) + one;
    2c12:	35 95       	asr	r19
    2c14:	27 95       	ror	r18
    2c16:	6a 01       	movw	r12, r20
    2c18:	c2 0e       	add	r12, r18
    2c1a:	d3 1e       	adc	r13, r19
    2c1c:	86 17       	cp	r24, r22
    2c1e:	97 07       	cpc	r25, r23
    2c20:	04 f7       	brge	.-64     	; 0x2be2 <AsebaNative_mathsqrt+0xc0>
    2c22:	b8 2e       	mov	r11, r24
    2c24:	e9 2f       	mov	r30, r25
    2c26:	86 17       	cp	r24, r22
    2c28:	97 07       	cpc	r25, r23
    2c2a:	04 f3       	brlt	.-64     	; 0x2bec <AsebaNative_mathsqrt+0xca>
    2c2c:	9c 2d       	mov	r25, r12
    2c2e:	8d 2d       	mov	r24, r13
    2c30:	df cf       	rjmp	.-66     	; 0x2bf0 <AsebaNative_mathsqrt+0xce>
	sint16 one = 1 << 14;
	
	while(one > op)
		one >>= 2;
		
	while(one != 0) 
    2c32:	20 e0       	ldi	r18, 0x00	; 0
    2c34:	30 e0       	ldi	r19, 0x00	; 0
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_sqrt(x);
    2c36:	29 93       	st	Y+, r18
    2c38:	39 93       	st	Y+, r19
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    2c3a:	11 96       	adiw	r26, 0x01	; 1
    2c3c:	ea 16       	cp	r14, r26
    2c3e:	fb 06       	cpc	r15, r27
    2c40:	09 f0       	breq	.+2      	; 0x2c44 <AsebaNative_mathsqrt+0x122>
    2c42:	b8 cf       	rjmp	.-144    	; 0x2bb4 <AsebaNative_mathsqrt+0x92>
	{
		sint16 x = vm->variables[xIndex++];
		vm->variables[destIndex++] = aseba_sqrt(x);
	}
}
    2c44:	df 91       	pop	r29
    2c46:	cf 91       	pop	r28
    2c48:	1f 91       	pop	r17
    2c4a:	0f 91       	pop	r16
    2c4c:	ff 90       	pop	r15
    2c4e:	ef 90       	pop	r14
    2c50:	df 90       	pop	r13
    2c52:	cf 90       	pop	r12
    2c54:	bf 90       	pop	r11
    2c56:	08 95       	ret

00002c58 <AsebaNative_rand>:
	rnd_state = 25173 * rnd_state + 13849;
	return rnd_state;
}

void AsebaNative_rand(AsebaVMState *vm)
{
    2c58:	cf 93       	push	r28
    2c5a:	df 93       	push	r29
    2c5c:	ec 01       	movw	r28, r24
    2c5e:	ac 85       	ldd	r26, Y+12	; 0x0c
    2c60:	bd 85       	ldd	r27, Y+13	; 0x0d
    2c62:	4a 89       	ldd	r20, Y+18	; 0x12
    2c64:	5b 89       	ldd	r21, Y+19	; 0x13
    2c66:	ca 01       	movw	r24, r20
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9b 8b       	std	Y+19, r25	; 0x13
    2c6c:	8a 8b       	std	Y+18, r24	; 0x12
    2c6e:	9a 01       	movw	r18, r20
    2c70:	22 0f       	add	r18, r18
    2c72:	33 1f       	adc	r19, r19
    2c74:	a2 0f       	add	r26, r18
    2c76:	b3 1f       	adc	r27, r19
	// variable pos
	uint16 destIndex = AsebaNativePopArg(vm);
    2c78:	ed 91       	ld	r30, X+
    2c7a:	fc 91       	ld	r31, X
    2c7c:	11 97       	sbiw	r26, 0x01	; 1
    2c7e:	42 50       	subi	r20, 0x02	; 2
    2c80:	51 09       	sbc	r21, r1
    2c82:	5b 8b       	std	Y+19, r21	; 0x13
    2c84:	4a 8b       	std	Y+18, r20	; 0x12
    2c86:	12 97       	sbiw	r26, 0x02	; 2
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
    2c88:	6d 91       	ld	r22, X+
    2c8a:	7c 91       	ld	r23, X
	
	uint16 i;
	for (i = 0; i < length; i++)
    2c8c:	61 15       	cp	r22, r1
    2c8e:	71 05       	cpc	r23, r1
    2c90:	19 f1       	breq	.+70     	; 0x2cd8 <AsebaNative_rand+0x80>
    2c92:	80 91 60 0f 	lds	r24, 0x0F60
    2c96:	90 91 61 0f 	lds	r25, 0x0F61
    2c9a:	ee 0f       	add	r30, r30
    2c9c:	ff 1f       	adc	r31, r31
    2c9e:	28 85       	ldd	r18, Y+8	; 0x08
    2ca0:	39 85       	ldd	r19, Y+9	; 0x09
    2ca2:	e2 0f       	add	r30, r18
    2ca4:	f3 1f       	adc	r31, r19
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	30 e0       	ldi	r19, 0x00	; 0
	rnd_state = seed;
}

uint16 AsebaGetRandom()
{
	rnd_state = 25173 * rnd_state + 13849;
    2caa:	a5 e5       	ldi	r26, 0x55	; 85
    2cac:	b2 e6       	ldi	r27, 0x62	; 98
    2cae:	8a 9f       	mul	r24, r26
    2cb0:	a0 01       	movw	r20, r0
    2cb2:	8b 9f       	mul	r24, r27
    2cb4:	50 0d       	add	r21, r0
    2cb6:	9a 9f       	mul	r25, r26
    2cb8:	50 0d       	add	r21, r0
    2cba:	11 24       	eor	r1, r1
    2cbc:	ca 01       	movw	r24, r20
    2cbe:	87 5e       	subi	r24, 0xE7	; 231
    2cc0:	99 4c       	sbci	r25, 0xC9	; 201
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
	{
		vm->variables[destIndex++] = (sint16)AsebaGetRandom();
    2cc2:	81 93       	st	Z+, r24
    2cc4:	91 93       	st	Z+, r25
	
	// variable size
	uint16 length = AsebaNativePopArg(vm);
	
	uint16 i;
	for (i = 0; i < length; i++)
    2cc6:	2f 5f       	subi	r18, 0xFF	; 255
    2cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2cca:	62 17       	cp	r22, r18
    2ccc:	73 07       	cpc	r23, r19
    2cce:	79 f7       	brne	.-34     	; 0x2cae <AsebaNative_rand+0x56>
    2cd0:	90 93 61 0f 	sts	0x0F61, r25
    2cd4:	80 93 60 0f 	sts	0x0F60, r24
	{
		vm->variables[destIndex++] = (sint16)AsebaGetRandom();
	}
}
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret

00002cde <AsebaGetVMDescription>:
};

const AsebaVMDescription* AsebaGetVMDescription(AsebaVMState *vm)
{
	return &vmDescription;
}	
    2cde:	8e e9       	ldi	r24, 0x9E	; 158
    2ce0:	92 e0       	ldi	r25, 0x02	; 2
    2ce2:	08 95       	ret

00002ce4 <AsebaGetLocalEventsDescriptions>:
};

const AsebaLocalEventDescription * AsebaGetLocalEventsDescriptions(AsebaVMState *vm)
{
	return localEvents;
}
    2ce4:	80 e4       	ldi	r24, 0x40	; 64
    2ce6:	9f e0       	ldi	r25, 0x0F	; 15
    2ce8:	08 95       	ret

00002cea <AsebaPutVmToSleep>:
	ASEBA_NATIVES_STD_FUNCTIONS,
	ELISA_NATIVES_FUNCTIONS
};

void AsebaPutVmToSleep(AsebaVMState *vm)
{
    2cea:	08 95       	ret

00002cec <AsebaNativeFunction>:
}

void AsebaNativeFunction(AsebaVMState *vm, uint16 id)
{
	nativeFunctions[id](vm);
    2cec:	fb 01       	movw	r30, r22
    2cee:	ee 0f       	add	r30, r30
    2cf0:	ff 1f       	adc	r31, r31
    2cf2:	ed 5d       	subi	r30, 0xDD	; 221
    2cf4:	f2 4f       	sbci	r31, 0xF2	; 242
    2cf6:	01 90       	ld	r0, Z+
    2cf8:	f0 81       	ld	r31, Z
    2cfa:	e0 2d       	mov	r30, r0
    2cfc:	19 94       	eijmp

00002cfe <AsebaGetNativeFunctionsDescriptions>:
}

const AsebaNativeFunctionDescription * const * AsebaGetNativeFunctionsDescriptions(AsebaVMState *vm)
{
	return nativeFunctionsDescription;
}	
    2cfe:	84 e3       	ldi	r24, 0x34	; 52
    2d00:	92 e0       	ldi	r25, 0x02	; 2
    2d02:	08 95       	ret

00002d04 <AsebaSendBuffer>:
	usart0Transmit(value&0xFF, 0);
	usart0Transmit((value>>8)&0xFF, 0);
}

void AsebaSendBuffer(AsebaVMState *vm, const uint8* data, uint16 length)
{
    2d04:	cf 92       	push	r12
    2d06:	df 92       	push	r13
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	00 d0       	rcall	.+0      	; 0x2d14 <AsebaSendBuffer+0x10>
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	f6 2e       	mov	r15, r22
    2d1a:	8a 01       	movw	r16, r20
	uartSendUInt16(length - 2);
    2d1c:	ca 01       	movw	r24, r20
    2d1e:	02 97       	sbiw	r24, 0x02	; 2
	usart0Transmit(value, 0);
}

void uartSendUInt16(uint16 value)
{
	usart0Transmit(value&0xFF, 0);
    2d20:	60 e0       	ldi	r22, 0x00	; 0
    2d22:	7b 83       	std	Y+3, r23	; 0x03
    2d24:	89 83       	std	Y+1, r24	; 0x01
    2d26:	9a 83       	std	Y+2, r25	; 0x02
    2d28:	0e 94 85 31 	call	0x630a	; 0x630a <usart0Transmit>
	usart0Transmit((value>>8)&0xFF, 0);
    2d2c:	60 e0       	ldi	r22, 0x00	; 0
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	89 2f       	mov	r24, r25
    2d32:	0e 94 85 31 	call	0x630a	; 0x630a <usart0Transmit>
}

void AsebaSendBuffer(AsebaVMState *vm, const uint8* data, uint16 length)
{
	uartSendUInt16(length - 2);
	uartSendUInt16(vmState.nodeId);
    2d36:	d0 90 69 02 	lds	r13, 0x0269
	usart0Transmit(value, 0);
}

void uartSendUInt16(uint16 value)
{
	usart0Transmit(value&0xFF, 0);
    2d3a:	60 e0       	ldi	r22, 0x00	; 0
    2d3c:	80 91 68 02 	lds	r24, 0x0268
    2d40:	0e 94 85 31 	call	0x630a	; 0x630a <usart0Transmit>
	usart0Transmit((value>>8)&0xFF, 0);
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	8d 2d       	mov	r24, r13
    2d48:	0e 94 85 31 	call	0x630a	; 0x630a <usart0Transmit>
void AsebaSendBuffer(AsebaVMState *vm, const uint8* data, uint16 length)
{
	uartSendUInt16(length - 2);
	uartSendUInt16(vmState.nodeId);
	uint16 i;
	for (i = 0; i < length; i++)
    2d4c:	7b 81       	ldd	r23, Y+3	; 0x03
    2d4e:	01 15       	cp	r16, r1
    2d50:	11 05       	cpc	r17, r1
    2d52:	69 f0       	breq	.+26     	; 0x2d6e <AsebaSendBuffer+0x6a>
    2d54:	cf 2c       	mov	r12, r15
    2d56:	d7 2e       	mov	r13, r23
    2d58:	0c 0d       	add	r16, r12
    2d5a:	1d 1d       	adc	r17, r13
	return nativeFunctionsDescription;
}	

void uartSendUInt8(uint8 value)
{
	usart0Transmit(value, 0);
    2d5c:	60 e0       	ldi	r22, 0x00	; 0
    2d5e:	f6 01       	movw	r30, r12
    2d60:	81 91       	ld	r24, Z+
    2d62:	6f 01       	movw	r12, r30
    2d64:	0e 94 85 31 	call	0x630a	; 0x630a <usart0Transmit>
void AsebaSendBuffer(AsebaVMState *vm, const uint8* data, uint16 length)
{
	uartSendUInt16(length - 2);
	uartSendUInt16(vmState.nodeId);
	uint16 i;
	for (i = 0; i < length; i++)
    2d68:	c0 16       	cp	r12, r16
    2d6a:	d1 06       	cpc	r13, r17
    2d6c:	b9 f7       	brne	.-18     	; 0x2d5c <AsebaSendBuffer+0x58>
		uartSendUInt8(*data++);
}	
    2d6e:	0f 90       	pop	r0
    2d70:	0f 90       	pop	r0
    2d72:	0f 90       	pop	r0
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	df 90       	pop	r13
    2d80:	cf 90       	pop	r12
    2d82:	08 95       	ret

00002d84 <AsebaGetBuffer>:
	}
	return value;
}

uint16 AsebaGetBuffer(AsebaVMState *vm, uint8* data, uint16 maxLength, uint16* source)
{
    2d84:	1f 93       	push	r17
    2d86:	cf 93       	push	r28
    2d88:	df 93       	push	r29
    2d8a:	f9 01       	movw	r30, r18
    2d8c:	85 e6       	ldi	r24, 0x65	; 101
    2d8e:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char c=1;
	unsigned int i=0;

	while(c) {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	// handle concurrent byteCount access
    2d90:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2d92:	f8 94       	cli
			if(byteCount > 0) {				// (accessed here and within ISR rx interrupt)
    2d94:	40 91 68 19 	lds	r20, 0x1968
    2d98:	50 91 69 19 	lds	r21, 0x1969
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2d9c:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    2d9e:	01 97       	sbiw	r24, 0x01	; 1
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
    2da0:	e9 f0       	breq	.+58     	; 0x2ddc <AsebaGetBuffer+0x58>
uint8 uartGetUInt8()
{
	unsigned char c=1;
	unsigned int i=0;

	while(c) {
    2da2:	45 2b       	or	r20, r21
    2da4:	a9 f3       	breq	.-22     	; 0x2d90 <AsebaGetBuffer+0xc>
			commError=1;
			return 0;
		}
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {		// handle concurent uartBuff and byteCount access
    2da6:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2da8:	f8 94       	cli
		c = uartBuff[currByteIndex];
    2daa:	a0 91 66 18 	lds	r26, 0x1866
    2dae:	b0 e0       	ldi	r27, 0x00	; 0
    2db0:	a8 59       	subi	r26, 0x98	; 152
    2db2:	b7 4e       	sbci	r27, 0xE7	; 231
    2db4:	ac 91       	ld	r26, X
		byteCount--;
    2db6:	80 91 68 19 	lds	r24, 0x1968
    2dba:	90 91 69 19 	lds	r25, 0x1969
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	90 93 69 19 	sts	0x1969, r25
    2dc4:	80 93 68 19 	sts	0x1968, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dc8:	2f bf       	out	0x3f, r18	; 63
	}
	currByteIndex++;
    2dca:	80 91 66 18 	lds	r24, 0x1866
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	80 93 66 18 	sts	0x1866, r24
uint16 uartGetUInt16()
{
	uint16 value;
	// little endian
	value = uartGetUInt8();
	if(commError) {
    2dd4:	80 91 6a 19 	lds	r24, 0x196A
    2dd8:	88 23       	and	r24, r24
    2dda:	41 f0       	breq	.+16     	; 0x2dec <AsebaGetBuffer+0x68>
	uint16 ret = 0;

	uint16 len = uartGetUInt16() + 2;	// msg type + data

	if(commError) {
		commError = 0;
    2ddc:	10 92 6a 19 	sts	0x196A, r1
		return 0;
    2de0:	80 e0       	ldi	r24, 0x00	; 0
    2de2:	90 e0       	ldi	r25, 0x00	; 0
	
	ret = len;

	return ret;

}	
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	08 95       	ret
uint16 uartGetUInt16()
{
	uint16 value;
	// little endian
	value = uartGetUInt8();
	if(commError) {
    2dec:	85 e6       	ldi	r24, 0x65	; 101
    2dee:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char c=1;
	unsigned int i=0;

	while(c) {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	// handle concurrent byteCount access
    2df0:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2df2:	f8 94       	cli
			if(byteCount > 0) {				// (accessed here and within ISR rx interrupt)
    2df4:	40 91 68 19 	lds	r20, 0x1968
    2df8:	50 91 69 19 	lds	r21, 0x1969
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2dfc:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    2dfe:	01 97       	sbiw	r24, 0x01	; 1
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
    2e00:	69 f3       	breq	.-38     	; 0x2ddc <AsebaGetBuffer+0x58>
uint8 uartGetUInt8()
{
	unsigned char c=1;
	unsigned int i=0;

	while(c) {
    2e02:	45 2b       	or	r20, r21
    2e04:	a9 f3       	breq	.-22     	; 0x2df0 <AsebaGetBuffer+0x6c>
			commError=1;
			return 0;
		}
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {		// handle concurent uartBuff and byteCount access
    2e06:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e08:	f8 94       	cli
		c = uartBuff[currByteIndex];
    2e0a:	c0 91 66 18 	lds	r28, 0x1866
    2e0e:	d0 e0       	ldi	r29, 0x00	; 0
    2e10:	c8 59       	subi	r28, 0x98	; 152
    2e12:	d7 4e       	sbci	r29, 0xE7	; 231
    2e14:	28 81       	ld	r18, Y
		byteCount--;
    2e16:	80 91 68 19 	lds	r24, 0x1968
    2e1a:	90 91 69 19 	lds	r25, 0x1969
    2e1e:	01 97       	sbiw	r24, 0x01	; 1
    2e20:	90 93 69 19 	sts	0x1969, r25
    2e24:	80 93 68 19 	sts	0x1968, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e28:	3f bf       	out	0x3f, r19	; 63
	}
	currByteIndex++;
    2e2a:	80 91 66 18 	lds	r24, 0x1866
    2e2e:	8f 5f       	subi	r24, 0xFF	; 255
    2e30:	80 93 66 18 	sts	0x1866, r24
	// little endian
	value = uartGetUInt8();
	if(commError) {
		return 0;
	}
	value |= (uartGetUInt8() << 8);
    2e34:	b0 e0       	ldi	r27, 0x00	; 0
    2e36:	b2 2b       	or	r27, r18
	if(commError) {
    2e38:	80 91 6a 19 	lds	r24, 0x196A
    2e3c:	81 11       	cpse	r24, r1
    2e3e:	ce cf       	rjmp	.-100    	; 0x2ddc <AsebaGetBuffer+0x58>
uint16 AsebaGetBuffer(AsebaVMState *vm, uint8* data, uint16 maxLength, uint16* source)
{

	uint16 ret = 0;

	uint16 len = uartGetUInt16() + 2;	// msg type + data
    2e40:	12 96       	adiw	r26, 0x02	; 2

	if(commError) {
		commError = 0;
		return 0;
	}
	if(len <= 2) {
    2e42:	a3 30       	cpi	r26, 0x03	; 3
    2e44:	b1 05       	cpc	r27, r1
    2e46:	30 f4       	brcc	.+12     	; 0x2e54 <AsebaGetBuffer+0xd0>
		return 0;
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
	
	ret = len;

	return ret;

}	
    2e4c:	df 91       	pop	r29
    2e4e:	cf 91       	pop	r28
    2e50:	1f 91       	pop	r17
    2e52:	08 95       	ret
    2e54:	85 e6       	ldi	r24, 0x65	; 101
    2e56:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char c=1;
	unsigned int i=0;

	while(c) {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	// handle concurrent byteCount access
    2e58:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e5a:	f8 94       	cli
			if(byteCount > 0) {				// (accessed here and within ISR rx interrupt)
    2e5c:	40 91 68 19 	lds	r20, 0x1968
    2e60:	50 91 69 19 	lds	r21, 0x1969
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e64:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    2e66:	01 97       	sbiw	r24, 0x01	; 1
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
    2e68:	09 f4       	brne	.+2      	; 0x2e6c <AsebaGetBuffer+0xe8>
    2e6a:	81 c0       	rjmp	.+258    	; 0x2f6e <AsebaGetBuffer+0x1ea>
uint8 uartGetUInt8()
{
	unsigned char c=1;
	unsigned int i=0;

	while(c) {
    2e6c:	45 2b       	or	r20, r21
    2e6e:	a1 f3       	breq	.-24     	; 0x2e58 <AsebaGetBuffer+0xd4>
			commError=1;
			return 0;
		}
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {		// handle concurent uartBuff and byteCount access
    2e70:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2e72:	f8 94       	cli
		c = uartBuff[currByteIndex];
    2e74:	c0 91 66 18 	lds	r28, 0x1866
    2e78:	d0 e0       	ldi	r29, 0x00	; 0
    2e7a:	c8 59       	subi	r28, 0x98	; 152
    2e7c:	d7 4e       	sbci	r29, 0xE7	; 231
    2e7e:	28 81       	ld	r18, Y
		byteCount--;
    2e80:	80 91 68 19 	lds	r24, 0x1968
    2e84:	90 91 69 19 	lds	r25, 0x1969
    2e88:	01 97       	sbiw	r24, 0x01	; 1
    2e8a:	90 93 69 19 	sts	0x1969, r25
    2e8e:	80 93 68 19 	sts	0x1968, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2e92:	3f bf       	out	0x3f, r19	; 63
	}
	currByteIndex++;
    2e94:	80 91 66 18 	lds	r24, 0x1866
    2e98:	8f 5f       	subi	r24, 0xFF	; 255
    2e9a:	80 93 66 18 	sts	0x1866, r24
uint16 uartGetUInt16()
{
	uint16 value;
	// little endian
	value = uartGetUInt8();
	if(commError) {
    2e9e:	80 91 6a 19 	lds	r24, 0x196A
    2ea2:	81 11       	cpse	r24, r1
    2ea4:	64 c0       	rjmp	.+200    	; 0x2f6e <AsebaGetBuffer+0x1ea>
    2ea6:	85 e6       	ldi	r24, 0x65	; 101
    2ea8:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char c=1;
	unsigned int i=0;

	while(c) {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	// handle concurrent byteCount access
    2eaa:	3f b7       	in	r19, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2eac:	f8 94       	cli
			if(byteCount > 0) {				// (accessed here and within ISR rx interrupt)
    2eae:	40 91 68 19 	lds	r20, 0x1968
    2eb2:	50 91 69 19 	lds	r21, 0x1969
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2eb6:	3f bf       	out	0x3f, r19	; 63
    __asm__ volatile ("" ::: "memory");
    2eb8:	01 97       	sbiw	r24, 0x01	; 1
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
    2eba:	09 f4       	brne	.+2      	; 0x2ebe <AsebaGetBuffer+0x13a>
    2ebc:	58 c0       	rjmp	.+176    	; 0x2f6e <AsebaGetBuffer+0x1ea>
uint8 uartGetUInt8()
{
	unsigned char c=1;
	unsigned int i=0;

	while(c) {
    2ebe:	45 2b       	or	r20, r21
    2ec0:	a1 f3       	breq	.-24     	; 0x2eaa <AsebaGetBuffer+0x126>
			commError=1;
			return 0;
		}
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {		// handle concurent uartBuff and byteCount access
    2ec2:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2ec4:	f8 94       	cli
		c = uartBuff[currByteIndex];
    2ec6:	c0 91 66 18 	lds	r28, 0x1866
    2eca:	d0 e0       	ldi	r29, 0x00	; 0
    2ecc:	c8 59       	subi	r28, 0x98	; 152
    2ece:	d7 4e       	sbci	r29, 0xE7	; 231
    2ed0:	38 81       	ld	r19, Y
		byteCount--;
    2ed2:	80 91 68 19 	lds	r24, 0x1968
    2ed6:	90 91 69 19 	lds	r25, 0x1969
    2eda:	01 97       	sbiw	r24, 0x01	; 1
    2edc:	90 93 69 19 	sts	0x1969, r25
    2ee0:	80 93 68 19 	sts	0x1968, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2ee4:	4f bf       	out	0x3f, r20	; 63
	}
	currByteIndex++;
    2ee6:	80 91 66 18 	lds	r24, 0x1866
    2eea:	8f 5f       	subi	r24, 0xFF	; 255
    2eec:	80 93 66 18 	sts	0x1866, r24
	// little endian
	value = uartGetUInt8();
	if(commError) {
		return 0;
	}
	value |= (uartGetUInt8() << 8);
    2ef0:	82 2f       	mov	r24, r18
    2ef2:	90 e0       	ldi	r25, 0x00	; 0
    2ef4:	93 2b       	or	r25, r19
	if(commError) {
    2ef6:	20 91 6a 19 	lds	r18, 0x196A
    2efa:	21 11       	cpse	r18, r1
    2efc:	38 c0       	rjmp	.+112    	; 0x2f6e <AsebaGetBuffer+0x1ea>
	}
	if(len <= 2) {
		return 0;
	}

	*source = uartGetUInt16();
    2efe:	91 83       	std	Z+1, r25	; 0x01
    2f00:	80 83       	st	Z, r24
    2f02:	eb 01       	movw	r28, r22
    2f04:	6a 0f       	add	r22, r26
    2f06:	7b 1f       	adc	r23, r27
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
			commError=1;
    2f08:	11 e0       	ldi	r17, 0x01	; 1
uint16 uartGetUInt16()
{
	uint16 value;
	// little endian
	value = uartGetUInt8();
	if(commError) {
    2f0a:	85 e6       	ldi	r24, 0x65	; 101
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
	unsigned char c=1;
	unsigned int i=0;

	while(c) {

		ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {	// handle concurrent byteCount access
    2f0e:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f10:	f8 94       	cli
			if(byteCount > 0) {				// (accessed here and within ISR rx interrupt)
    2f12:	40 91 68 19 	lds	r20, 0x1968
    2f16:	50 91 69 19 	lds	r21, 0x1969
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f1a:	2f bf       	out	0x3f, r18	; 63
    __asm__ volatile ("" ::: "memory");
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
    2f1e:	51 f1       	breq	.+84     	; 0x2f74 <AsebaGetBuffer+0x1f0>
uint8 uartGetUInt8()
{
	unsigned char c=1;
	unsigned int i=0;

	while(c) {
    2f20:	45 2b       	or	r20, r21
    2f22:	a9 f3       	breq	.-22     	; 0x2f0e <AsebaGetBuffer+0x18a>
			commError=1;
			return 0;
		}
	}

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {		// handle concurent uartBuff and byteCount access
    2f24:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
    2f26:	f8 94       	cli
		c = uartBuff[currByteIndex];
    2f28:	e0 91 66 18 	lds	r30, 0x1866
    2f2c:	f0 e0       	ldi	r31, 0x00	; 0
    2f2e:	e8 59       	subi	r30, 0x98	; 152
    2f30:	f7 4e       	sbci	r31, 0xE7	; 231
    2f32:	80 81       	ld	r24, Z
		byteCount--;
    2f34:	20 91 68 19 	lds	r18, 0x1968
    2f38:	30 91 69 19 	lds	r19, 0x1969
    2f3c:	21 50       	subi	r18, 0x01	; 1
    2f3e:	31 09       	sbc	r19, r1
    2f40:	30 93 69 19 	sts	0x1969, r19
    2f44:	20 93 68 19 	sts	0x1968, r18
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
    2f48:	9f bf       	out	0x3f, r25	; 63
	}
	currByteIndex++;
    2f4a:	90 91 66 18 	lds	r25, 0x1866
    2f4e:	9f 5f       	subi	r25, 0xFF	; 255
    2f50:	90 93 66 18 	sts	0x1866, r25
		return 0;
	}	
	
	uint16 i;
	for (i = 0; i < len; i++) {
		data[i] = uartGetUInt8();
    2f54:	89 93       	st	Y+, r24
		if(commError) {
    2f56:	80 91 6a 19 	lds	r24, 0x196A
    2f5a:	81 11       	cpse	r24, r1
    2f5c:	3f cf       	rjmp	.-386    	; 0x2ddc <AsebaGetBuffer+0x58>
		commError = 0;
		return 0;
	}	
	
	uint16 i;
	for (i = 0; i < len; i++) {
    2f5e:	c6 17       	cp	r28, r22
    2f60:	d7 07       	cpc	r29, r23
    2f62:	99 f6       	brne	.-90     	; 0x2f0a <AsebaGetBuffer+0x186>
    2f64:	cd 01       	movw	r24, r26
	
	ret = len;

	return ret;

}	
    2f66:	df 91       	pop	r29
    2f68:	cf 91       	pop	r28
    2f6a:	1f 91       	pop	r17
    2f6c:	08 95       	ret
	}
	if(len <= 2) {
		return 0;
	}

	*source = uartGetUInt16();
    2f6e:	11 82       	std	Z+1, r1	; 0x01
    2f70:	10 82       	st	Z, r1
    2f72:	34 cf       	rjmp	.-408    	; 0x2ddc <AsebaGetBuffer+0x58>
				c=0;
			}
		}
		i++;
		if(i>100) {							// timeout
			commError=1;
    2f74:	10 93 6a 19 	sts	0x196A, r17
			return 0;
    2f78:	80 e0       	ldi	r24, 0x00	; 0
    2f7a:	ec cf       	rjmp	.-40     	; 0x2f54 <AsebaGetBuffer+0x1d0>

00002f7c <updateRobotVariables>:

	return ret;

}	

void updateRobotVariables() {
    2f7c:	8f 92       	push	r8
    2f7e:	9f 92       	push	r9
    2f80:	af 92       	push	r10
    2f82:	bf 92       	push	r11
    2f84:	cf 92       	push	r12
    2f86:	df 92       	push	r13
    2f88:	ef 92       	push	r14
    2f8a:	ff 92       	push	r15
    2f8c:	0f 93       	push	r16
    2f8e:	1f 93       	push	r17
    2f90:	cf 93       	push	r28
	static uint32_t timerTick = 0;

	// motor
	static int leftSpeed = 0, rightSpeed = 0;

	if (elisa3Variables.targetSpeed[LEFT] != leftSpeed) {
    2f92:	80 91 a8 1c 	lds	r24, 0x1CA8
    2f96:	90 91 a9 1c 	lds	r25, 0x1CA9
    2f9a:	20 91 6c 0f 	lds	r18, 0x0F6C
    2f9e:	30 91 6d 0f 	lds	r19, 0x0F6D
    2fa2:	82 17       	cp	r24, r18
    2fa4:	93 07       	cpc	r25, r19
    2fa6:	79 f0       	breq	.+30     	; 0x2fc6 <updateRobotVariables+0x4a>
		leftSpeed = CLAMP(elisa3Variables.targetSpeed[LEFT], -127, 127);
    2fa8:	80 38       	cpi	r24, 0x80	; 128
    2faa:	91 05       	cpc	r25, r1
    2fac:	0c f0       	brlt	.+2      	; 0x2fb0 <updateRobotVariables+0x34>
    2fae:	1d c2       	rjmp	.+1082   	; 0x33ea <updateRobotVariables+0x46e>
    2fb0:	81 38       	cpi	r24, 0x81	; 129
    2fb2:	2f ef       	ldi	r18, 0xFF	; 255
    2fb4:	92 07       	cpc	r25, r18
    2fb6:	0c f4       	brge	.+2      	; 0x2fba <updateRobotVariables+0x3e>
    2fb8:	15 c2       	rjmp	.+1066   	; 0x33e4 <updateRobotVariables+0x468>
    2fba:	90 93 6d 0f 	sts	0x0F6D, r25
    2fbe:	80 93 6c 0f 	sts	0x0F6C, r24
		setLeftSpeed(leftSpeed);
    2fc2:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <setLeftSpeed>
	}
	if (elisa3Variables.targetSpeed[RIGHT] != rightSpeed) {
    2fc6:	80 91 aa 1c 	lds	r24, 0x1CAA
    2fca:	90 91 ab 1c 	lds	r25, 0x1CAB
    2fce:	20 91 6a 0f 	lds	r18, 0x0F6A
    2fd2:	30 91 6b 0f 	lds	r19, 0x0F6B
    2fd6:	82 17       	cp	r24, r18
    2fd8:	93 07       	cpc	r25, r19
    2fda:	79 f0       	breq	.+30     	; 0x2ffa <updateRobotVariables+0x7e>
		rightSpeed = CLAMP(elisa3Variables.targetSpeed[RIGHT], -127, 127);
    2fdc:	80 38       	cpi	r24, 0x80	; 128
    2fde:	91 05       	cpc	r25, r1
    2fe0:	0c f0       	brlt	.+2      	; 0x2fe4 <updateRobotVariables+0x68>
    2fe2:	f8 c1       	rjmp	.+1008   	; 0x33d4 <updateRobotVariables+0x458>
    2fe4:	81 38       	cpi	r24, 0x81	; 129
    2fe6:	ef ef       	ldi	r30, 0xFF	; 255
    2fe8:	9e 07       	cpc	r25, r30
    2fea:	0c f4       	brge	.+2      	; 0x2fee <updateRobotVariables+0x72>
    2fec:	f0 c1       	rjmp	.+992    	; 0x33ce <updateRobotVariables+0x452>
    2fee:	90 93 6b 0f 	sts	0x0F6B, r25
    2ff2:	80 93 6a 0f 	sts	0x0F6A, r24
		setRightSpeed(rightSpeed);
    2ff6:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <setRightSpeed>
	}
	elisa3Variables.measSpeed[LEFT] = speedLeftFromEnc/5;	// Divide by 5 to get the same scale as target speed (1 unit = 5 mm/s).
    2ffa:	80 91 f9 17 	lds	r24, 0x17F9
    2ffe:	90 91 fa 17 	lds	r25, 0x17FA
    3002:	25 e0       	ldi	r18, 0x05	; 5
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	b9 01       	movw	r22, r18
    3008:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    300c:	70 93 ad 1c 	sts	0x1CAD, r23
    3010:	60 93 ac 1c 	sts	0x1CAC, r22
	elisa3Variables.measSpeed[RIGHT] = speedRightFromEnc/5;
    3014:	80 91 f7 17 	lds	r24, 0x17F7
    3018:	90 91 f8 17 	lds	r25, 0x17F8
    301c:	b9 01       	movw	r22, r18
    301e:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    3022:	70 93 af 1c 	sts	0x1CAF, r23
    3026:	60 93 ae 1c 	sts	0x1CAE, r22
	handleMotorsWithSpeedController();
    302a:	0e 94 cc 2a 	call	0x5598	; 0x5598 <handleMotorsWithSpeedController>

	if(proxUpdated) {
    302e:	80 91 b7 19 	lds	r24, 0x19B7
    3032:	88 23       	and	r24, r24
    3034:	09 f4       	brne	.+2      	; 0x3038 <updateRobotVariables+0xbc>
    3036:	7b c0       	rjmp	.+246    	; 0x312e <updateRobotVariables+0x1b2>
		proxUpdated = 0;
    3038:	10 92 b7 19 	sts	0x19B7, r1
    303c:	90 eb       	ldi	r25, 0xB0	; 176
    303e:	a9 2e       	mov	r10, r25
    3040:	9c e1       	ldi	r25, 0x1C	; 28
    3042:	b9 2e       	mov	r11, r25
    3044:	2c ed       	ldi	r18, 0xDC	; 220
    3046:	e2 2e       	mov	r14, r18
    3048:	2c e1       	ldi	r18, 0x1C	; 28
    304a:	f2 2e       	mov	r15, r18
    304c:	07 ea       	ldi	r16, 0xA7	; 167
    304e:	19 e1       	ldi	r17, 0x19	; 25
    3050:	c0 e0       	ldi	r28, 0x00	; 0
    3052:	81 2c       	mov	r8, r1
    3054:	91 2c       	mov	r9, r1
		// leds and prox
		for (i = 0; i < 8; i++) {
			setGreenLed(i, elisa3Variables.greenLeds[i] ? 1 : 0);
    3056:	f5 01       	movw	r30, r10
    3058:	81 91       	ld	r24, Z+
    305a:	91 91       	ld	r25, Z+
    305c:	5f 01       	movw	r10, r30
    305e:	61 e0       	ldi	r22, 0x01	; 1
    3060:	89 2b       	or	r24, r25
    3062:	09 f4       	brne	.+2      	; 0x3066 <updateRobotVariables+0xea>
    3064:	60 e0       	ldi	r22, 0x00	; 0
    3066:	8c 2f       	mov	r24, r28
    3068:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <setGreenLed>
			elisa3Variables.proxAmbient[i] = proximityValue[i*2];
    306c:	f4 01       	movw	r30, r8
    306e:	ee 0f       	add	r30, r30
    3070:	ff 1f       	adc	r31, r31
    3072:	e1 5e       	subi	r30, 0xE1	; 225
    3074:	f5 4e       	sbci	r31, 0xE5	; 229
    3076:	80 81       	ld	r24, Z
    3078:	91 81       	ldd	r25, Z+1	; 0x01
    307a:	f7 01       	movw	r30, r14
    307c:	81 93       	st	Z+, r24
    307e:	91 93       	st	Z+, r25
    3080:	7f 01       	movw	r14, r30
			elisa3Variables.prox[i] =  proximityResultLinear[i];
    3082:	f8 01       	movw	r30, r16
    3084:	81 91       	ld	r24, Z+
    3086:	91 91       	ld	r25, Z+
    3088:	8f 01       	movw	r16, r30
    308a:	f5 01       	movw	r30, r10
    308c:	93 8f       	std	Z+27, r25	; 0x1b
    308e:	82 8f       	std	Z+26, r24	; 0x1a
    3090:	f2 e0       	ldi	r31, 0x02	; 2
    3092:	8f 0e       	add	r8, r31
    3094:	91 1c       	adc	r9, r1
    3096:	cf 5f       	subi	r28, 0xFF	; 255
	handleMotorsWithSpeedController();

	if(proxUpdated) {
		proxUpdated = 0;
		// leds and prox
		for (i = 0; i < 8; i++) {
    3098:	c8 30       	cpi	r28, 0x08	; 8
    309a:	e9 f6       	brne	.-70     	; 0x3056 <updateRobotVariables+0xda>
			setGreenLed(i, elisa3Variables.greenLeds[i] ? 1 : 0);
			elisa3Variables.proxAmbient[i] = proximityValue[i*2];
			elisa3Variables.prox[i] =  proximityResultLinear[i];
		}
		for(i=0; i<4; i++) {
			elisa3Variables.groundAmbient[i] = proximityValue[(i+8)*2];
    309c:	80 91 3f 1a 	lds	r24, 0x1A3F
    30a0:	90 91 40 1a 	lds	r25, 0x1A40
    30a4:	90 93 f5 1c 	sts	0x1CF5, r25
    30a8:	80 93 f4 1c 	sts	0x1CF4, r24
			elisa3Variables.ground[i] = proximityResult[i+8];
    30ac:	80 91 17 1a 	lds	r24, 0x1A17
    30b0:	90 91 18 1a 	lds	r25, 0x1A18
    30b4:	90 93 ed 1c 	sts	0x1CED, r25
    30b8:	80 93 ec 1c 	sts	0x1CEC, r24
			setGreenLed(i, elisa3Variables.greenLeds[i] ? 1 : 0);
			elisa3Variables.proxAmbient[i] = proximityValue[i*2];
			elisa3Variables.prox[i] =  proximityResultLinear[i];
		}
		for(i=0; i<4; i++) {
			elisa3Variables.groundAmbient[i] = proximityValue[(i+8)*2];
    30bc:	80 91 43 1a 	lds	r24, 0x1A43
    30c0:	90 91 44 1a 	lds	r25, 0x1A44
    30c4:	90 93 f7 1c 	sts	0x1CF7, r25
    30c8:	80 93 f6 1c 	sts	0x1CF6, r24
			elisa3Variables.ground[i] = proximityResult[i+8];
    30cc:	80 91 19 1a 	lds	r24, 0x1A19
    30d0:	90 91 1a 1a 	lds	r25, 0x1A1A
    30d4:	90 93 ef 1c 	sts	0x1CEF, r25
    30d8:	80 93 ee 1c 	sts	0x1CEE, r24
			setGreenLed(i, elisa3Variables.greenLeds[i] ? 1 : 0);
			elisa3Variables.proxAmbient[i] = proximityValue[i*2];
			elisa3Variables.prox[i] =  proximityResultLinear[i];
		}
		for(i=0; i<4; i++) {
			elisa3Variables.groundAmbient[i] = proximityValue[(i+8)*2];
    30dc:	80 91 47 1a 	lds	r24, 0x1A47
    30e0:	90 91 48 1a 	lds	r25, 0x1A48
    30e4:	90 93 f9 1c 	sts	0x1CF9, r25
    30e8:	80 93 f8 1c 	sts	0x1CF8, r24
			elisa3Variables.ground[i] = proximityResult[i+8];
    30ec:	80 91 1b 1a 	lds	r24, 0x1A1B
    30f0:	90 91 1c 1a 	lds	r25, 0x1A1C
    30f4:	90 93 f1 1c 	sts	0x1CF1, r25
    30f8:	80 93 f0 1c 	sts	0x1CF0, r24
			setGreenLed(i, elisa3Variables.greenLeds[i] ? 1 : 0);
			elisa3Variables.proxAmbient[i] = proximityValue[i*2];
			elisa3Variables.prox[i] =  proximityResultLinear[i];
		}
		for(i=0; i<4; i++) {
			elisa3Variables.groundAmbient[i] = proximityValue[(i+8)*2];
    30fc:	80 91 4b 1a 	lds	r24, 0x1A4B
    3100:	90 91 4c 1a 	lds	r25, 0x1A4C
    3104:	90 93 fb 1c 	sts	0x1CFB, r25
    3108:	80 93 fa 1c 	sts	0x1CFA, r24
			elisa3Variables.ground[i] = proximityResult[i+8];
    310c:	80 91 1d 1a 	lds	r24, 0x1A1D
    3110:	90 91 1e 1a 	lds	r25, 0x1A1E
    3114:	90 93 f3 1c 	sts	0x1CF3, r25
    3118:	80 93 f2 1c 	sts	0x1CF2, r24
		}
		SET_EVENT(EVENT_IR_SENSORS);
    311c:	80 91 6e 0f 	lds	r24, 0x0F6E
    3120:	90 91 6f 0f 	lds	r25, 0x0F6F
    3124:	81 60       	ori	r24, 0x01	; 1
    3126:	90 93 6f 0f 	sts	0x0F6F, r25
    312a:	80 93 6e 0f 	sts	0x0F6E, r24
	}
	
	// read acc
	// I2C communication isn't time constrained, thus split the data reception in two in
	// order to avoid big delays
	if(accState) {
    312e:	80 91 32 02 	lds	r24, 0x0232
    3132:	90 91 33 02 	lds	r25, 0x0233
    3136:	89 2b       	or	r24, r25
    3138:	09 f4       	brne	.+2      	; 0x313c <updateRobotVariables+0x1c0>
    313a:	ea c0       	rjmp	.+468    	; 0x3310 <updateRobotVariables+0x394>
		readAccelXYZ_1();
    313c:	0e 94 c7 41 	call	0x838e	; 0x838e <readAccelXYZ_1>
		computeAngle();
		elisa3Variables.thetaDeg = (signed int)(theta*RAD_2_DEG);
		elisa3Variables.xPosMm = (signed int)xPos;
		elisa3Variables.yPosMm = (signed int)yPos;
	}
	accState = 1 - accState;
    3140:	20 91 32 02 	lds	r18, 0x0232
    3144:	30 91 33 02 	lds	r19, 0x0233
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	82 1b       	sub	r24, r18
    314e:	93 0b       	sbc	r25, r19
    3150:	90 93 33 02 	sts	0x0233, r25
    3154:	80 93 32 02 	sts	0x0232, r24

	// rgb leds
	updateRedLed(255-CLAMP(elisa3Variables.rgbLeds[0], 0, 255));
    3158:	80 91 c0 1c 	lds	r24, 0x1CC0
    315c:	90 91 c1 1c 	lds	r25, 0x1CC1
    3160:	97 fd       	sbrc	r25, 7
    3162:	9d c1       	rjmp	.+826    	; 0x349e <updateRobotVariables+0x522>
    3164:	8f 3f       	cpi	r24, 0xFF	; 255
    3166:	91 05       	cpc	r25, r1
    3168:	11 f0       	breq	.+4      	; 0x316e <updateRobotVariables+0x1f2>
    316a:	0c f0       	brlt	.+2      	; 0x316e <updateRobotVariables+0x1f2>
    316c:	2d c1       	rjmp	.+602    	; 0x33c8 <updateRobotVariables+0x44c>
    316e:	80 95       	com	r24
    3170:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
	updateGreenLed(255-CLAMP(elisa3Variables.rgbLeds[1], 0, 255));
    3174:	80 91 c2 1c 	lds	r24, 0x1CC2
    3178:	90 91 c3 1c 	lds	r25, 0x1CC3
    317c:	97 fd       	sbrc	r25, 7
    317e:	98 c1       	rjmp	.+816    	; 0x34b0 <updateRobotVariables+0x534>
    3180:	8f 3f       	cpi	r24, 0xFF	; 255
    3182:	91 05       	cpc	r25, r1
    3184:	11 f0       	breq	.+4      	; 0x318a <updateRobotVariables+0x20e>
    3186:	0c f0       	brlt	.+2      	; 0x318a <updateRobotVariables+0x20e>
    3188:	1c c1       	rjmp	.+568    	; 0x33c2 <updateRobotVariables+0x446>
    318a:	80 95       	com	r24
    318c:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
	updateBlueLed(255-CLAMP(elisa3Variables.rgbLeds[2], 0, 255));
    3190:	80 91 c4 1c 	lds	r24, 0x1CC4
    3194:	90 91 c5 1c 	lds	r25, 0x1CC5
    3198:	97 fd       	sbrc	r25, 7
    319a:	93 c1       	rjmp	.+806    	; 0x34c2 <updateRobotVariables+0x546>
    319c:	8f 3f       	cpi	r24, 0xFF	; 255
    319e:	91 05       	cpc	r25, r1
    31a0:	11 f0       	breq	.+4      	; 0x31a6 <updateRobotVariables+0x22a>
    31a2:	0c f0       	brlt	.+2      	; 0x31a6 <updateRobotVariables+0x22a>
    31a4:	0b c1       	rjmp	.+534    	; 0x33bc <updateRobotVariables+0x440>
    31a6:	80 95       	com	r24
    31a8:	0e 94 c4 1b 	call	0x3788	; 0x3788 <updateBlueLed>

	// selector
	elisa3Variables.selector = getSelector();
    31ac:	0e 94 c2 43 	call	0x8784	; 0x8784 <getSelector>
    31b0:	48 2f       	mov	r20, r24
    31b2:	50 e0       	ldi	r21, 0x00	; 0
    31b4:	50 93 03 1d 	sts	0x1D03, r21
    31b8:	40 93 02 1d 	sts	0x1D02, r20
	if(selectorState != elisa3Variables.selector) {
    31bc:	20 91 31 02 	lds	r18, 0x0231
    31c0:	30 e0       	ldi	r19, 0x00	; 0
    31c2:	42 17       	cp	r20, r18
    31c4:	53 07       	cpc	r21, r19
    31c6:	49 f0       	breq	.+18     	; 0x31da <updateRobotVariables+0x25e>
		SET_EVENT(EVENT_SELECTOR);
    31c8:	20 91 6e 0f 	lds	r18, 0x0F6E
    31cc:	30 91 6f 0f 	lds	r19, 0x0F6F
    31d0:	20 62       	ori	r18, 0x20	; 32
    31d2:	30 93 6f 0f 	sts	0x0F6F, r19
    31d6:	20 93 6e 0f 	sts	0x0F6E, r18
	}
	selectorState = elisa3Variables.selector;
    31da:	80 93 31 02 	sts	0x0231, r24

	// ir transmitters
	if(elisa3Variables.irTxFront) {
    31de:	80 91 c6 1c 	lds	r24, 0x1CC6
    31e2:	90 91 c7 1c 	lds	r25, 0x1CC7
    31e6:	89 2b       	or	r24, r25
    31e8:	09 f4       	brne	.+2      	; 0x31ec <updateRobotVariables+0x270>
    31ea:	90 c0       	rjmp	.+288    	; 0x330c <updateRobotVariables+0x390>
		LED_IR2_LOW;
    31ec:	45 98       	cbi	0x08, 5	; 8
	} else {
		LED_IR2_HIGH;
	}
	if(elisa3Variables.irTxBack) {
    31ee:	80 91 c8 1c 	lds	r24, 0x1CC8
    31f2:	90 91 c9 1c 	lds	r25, 0x1CC9
    31f6:	89 2b       	or	r24, r25
    31f8:	09 f4       	brne	.+2      	; 0x31fc <updateRobotVariables+0x280>
    31fa:	6f c0       	rjmp	.+222    	; 0x32da <updateRobotVariables+0x35e>
		LED_IR1_LOW;
    31fc:	44 98       	cbi	0x08, 4	; 8
	} else {
		LED_IR1_HIGH;
	}

	if(command_received) {
    31fe:	80 91 65 18 	lds	r24, 0x1865
    3202:	81 11       	cpse	r24, r1
    3204:	70 c0       	rjmp	.+224    	; 0x32e6 <updateRobotVariables+0x36a>
		elisa3Variables.tvRemote = ir_remote_get_data();
		command_received = 0;
		SET_EVENT(EVENT_RC5);
	}
	
	elisa3Variables.button = BUTTON0;
    3206:	80 91 03 01 	lds	r24, 0x0103
    320a:	85 fb       	bst	r24, 5
    320c:	cc 24       	eor	r12, r12
    320e:	c0 f8       	bld	r12, 0
    3210:	d1 2c       	mov	r13, r1
    3212:	d0 92 cb 1c 	sts	0x1CCB, r13
    3216:	c0 92 ca 1c 	sts	0x1CCA, r12
	if(btnState != elisa3Variables.button) {
    321a:	80 91 30 02 	lds	r24, 0x0230
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	c8 16       	cp	r12, r24
    3222:	d9 06       	cpc	r13, r25
    3224:	49 f0       	breq	.+18     	; 0x3238 <updateRobotVariables+0x2bc>
		SET_EVENT(EVENT_BUTTON);
    3226:	80 91 6e 0f 	lds	r24, 0x0F6E
    322a:	90 91 6f 0f 	lds	r25, 0x0F6F
    322e:	84 60       	ori	r24, 0x04	; 4
    3230:	90 93 6f 0f 	sts	0x0F6F, r25
    3234:	80 93 6e 0f 	sts	0x0F6E, r24
	}
	btnState = elisa3Variables.button;
    3238:	c0 92 30 02 	sts	0x0230, r12
	
	if((getTime100MicroSec()-batteryTick) >= (PAUSE_2_SEC)) {
    323c:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    3240:	00 91 66 0f 	lds	r16, 0x0F66
    3244:	10 91 67 0f 	lds	r17, 0x0F67
    3248:	20 91 68 0f 	lds	r18, 0x0F68
    324c:	30 91 69 0f 	lds	r19, 0x0F69
    3250:	dc 01       	movw	r26, r24
    3252:	cb 01       	movw	r24, r22
    3254:	80 1b       	sub	r24, r16
    3256:	91 0b       	sbc	r25, r17
    3258:	a2 0b       	sbc	r26, r18
    325a:	b3 0b       	sbc	r27, r19
    325c:	8e 31       	cpi	r24, 0x1E	; 30
    325e:	9b 44       	sbci	r25, 0x4B	; 75
    3260:	a1 05       	cpc	r26, r1
    3262:	b1 05       	cpc	r27, r1
    3264:	08 f0       	brcs	.+2      	; 0x3268 <updateRobotVariables+0x2ec>
    3266:	fa c0       	rjmp	.+500    	; 0x345c <updateRobotVariables+0x4e0>
			elisa3Variables.batteryPercent = (unsigned int)(((sint32)batteryLevel-(sint32)780.0)*(sint32)100/(sint32)154);
		}
		batteryTick = getTime100MicroSec();
	}
	
	if(irCommEnabled != IRCOMM_MODE_SENSORS_SAMPLING) {
    3268:	80 91 ee 17 	lds	r24, 0x17EE
    326c:	81 11       	cpse	r24, r1
    326e:	d9 c0       	rjmp	.+434    	; 0x3422 <updateRobotVariables+0x4a6>
			elisa3Variables.irRxData = irCommReadData();
			SET_EVENT(EVENT_DATA);
		}
	}

	if(elisa3Variables.timer > 0) {
    3270:	80 91 14 1d 	lds	r24, 0x1D14
    3274:	90 91 15 1d 	lds	r25, 0x1D15
    3278:	18 16       	cp	r1, r24
    327a:	19 06       	cpc	r1, r25
    327c:	14 f5       	brge	.+68     	; 0x32c2 <updateRobotVariables+0x346>
		if(((getTime100MicroSec()-timerTick)/10) >= elisa3Variables.timer) {	// This is divided by 10 to get about 1 ms.
    327e:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    3282:	00 91 62 0f 	lds	r16, 0x0F62
    3286:	10 91 63 0f 	lds	r17, 0x0F63
    328a:	20 91 64 0f 	lds	r18, 0x0F64
    328e:	30 91 65 0f 	lds	r19, 0x0F65
    3292:	60 1b       	sub	r22, r16
    3294:	71 0b       	sbc	r23, r17
    3296:	82 0b       	sbc	r24, r18
    3298:	93 0b       	sbc	r25, r19
    329a:	2a e0       	ldi	r18, 0x0A	; 10
    329c:	30 e0       	ldi	r19, 0x00	; 0
    329e:	40 e0       	ldi	r20, 0x00	; 0
    32a0:	50 e0       	ldi	r21, 0x00	; 0
    32a2:	0e 94 dd 55 	call	0xabba	; 0xabba <__udivmodsi4>
    32a6:	80 91 14 1d 	lds	r24, 0x1D14
    32aa:	90 91 15 1d 	lds	r25, 0x1D15
    32ae:	09 2e       	mov	r0, r25
    32b0:	00 0c       	add	r0, r0
    32b2:	aa 0b       	sbc	r26, r26
    32b4:	bb 0b       	sbc	r27, r27
    32b6:	28 17       	cp	r18, r24
    32b8:	39 07       	cpc	r19, r25
    32ba:	4a 07       	cpc	r20, r26
    32bc:	5b 07       	cpc	r21, r27
    32be:	08 f0       	brcs	.+2      	; 0x32c2 <updateRobotVariables+0x346>
    32c0:	9c c0       	rjmp	.+312    	; 0x33fa <updateRobotVariables+0x47e>
// 	elisa3Variables.chargeState = CHARGE_ON;
// 	if(chargeState != elisa3Variables.chargeState) {
// 		SET_EVENT(EVENT_CHARGE);
// 	}

}
    32c2:	cf 91       	pop	r28
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	ff 90       	pop	r15
    32ca:	ef 90       	pop	r14
    32cc:	df 90       	pop	r13
    32ce:	cf 90       	pop	r12
    32d0:	bf 90       	pop	r11
    32d2:	af 90       	pop	r10
    32d4:	9f 90       	pop	r9
    32d6:	8f 90       	pop	r8
    32d8:	08 95       	ret
		LED_IR2_HIGH;
	}
	if(elisa3Variables.irTxBack) {
		LED_IR1_LOW;
	} else {
		LED_IR1_HIGH;
    32da:	44 9a       	sbi	0x08, 4	; 8
	}

	if(command_received) {
    32dc:	80 91 65 18 	lds	r24, 0x1865
    32e0:	88 23       	and	r24, r24
    32e2:	09 f4       	brne	.+2      	; 0x32e6 <updateRobotVariables+0x36a>
    32e4:	90 cf       	rjmp	.-224    	; 0x3206 <updateRobotVariables+0x28a>
		elisa3Variables.tvRemote = ir_remote_get_data();
    32e6:	0e 94 e4 45 	call	0x8bc8	; 0x8bc8 <ir_remote_get_data>
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	90 93 05 1d 	sts	0x1D05, r25
    32f0:	80 93 04 1d 	sts	0x1D04, r24
		command_received = 0;
    32f4:	10 92 65 18 	sts	0x1865, r1
		SET_EVENT(EVENT_RC5);
    32f8:	80 91 6e 0f 	lds	r24, 0x0F6E
    32fc:	90 91 6f 0f 	lds	r25, 0x0F6F
    3300:	80 61       	ori	r24, 0x10	; 16
    3302:	90 93 6f 0f 	sts	0x0F6F, r25
    3306:	80 93 6e 0f 	sts	0x0F6E, r24
    330a:	7d cf       	rjmp	.-262    	; 0x3206 <updateRobotVariables+0x28a>

	// ir transmitters
	if(elisa3Variables.irTxFront) {
		LED_IR2_LOW;
	} else {
		LED_IR2_HIGH;
    330c:	45 9a       	sbi	0x08, 5	; 8
    330e:	6f cf       	rjmp	.-290    	; 0x31ee <updateRobotVariables+0x272>
	// I2C communication isn't time constrained, thus split the data reception in two in
	// order to avoid big delays
	if(accState) {
		readAccelXYZ_1();
	} else {
		readAccelXYZ_2();
    3310:	0e 94 08 42 	call	0x8410	; 0x8410 <readAccelXYZ_2>
		elisa3Variables.acc[0] = accX;
    3314:	80 91 62 18 	lds	r24, 0x1862
    3318:	90 91 63 18 	lds	r25, 0x1863
    331c:	90 93 fd 1c 	sts	0x1CFD, r25
    3320:	80 93 fc 1c 	sts	0x1CFC, r24
		elisa3Variables.acc[1] = accY;
    3324:	80 91 60 18 	lds	r24, 0x1860
    3328:	90 91 61 18 	lds	r25, 0x1861
    332c:	90 93 ff 1c 	sts	0x1CFF, r25
    3330:	80 93 fe 1c 	sts	0x1CFE, r24
		elisa3Variables.acc[2] = accZ;
    3334:	80 91 5e 18 	lds	r24, 0x185E
    3338:	90 91 5f 18 	lds	r25, 0x185F
    333c:	90 93 01 1d 	sts	0x1D01, r25
    3340:	80 93 00 1d 	sts	0x1D00, r24
		SET_EVENT(EVENT_ACC);
    3344:	80 91 6e 0f 	lds	r24, 0x0F6E
    3348:	90 91 6f 0f 	lds	r25, 0x0F6F
    334c:	82 60       	ori	r24, 0x02	; 2
    334e:	90 93 6f 0f 	sts	0x0F6F, r25
    3352:	80 93 6e 0f 	sts	0x0F6E, r24
		computeAngle();
    3356:	0e 94 cd 42 	call	0x859a	; 0x859a <computeAngle>
		elisa3Variables.thetaDeg = (signed int)(theta*RAD_2_DEG);
    335a:	21 ee       	ldi	r18, 0xE1	; 225
    335c:	3e e2       	ldi	r19, 0x2E	; 46
    335e:	45 e6       	ldi	r20, 0x65	; 101
    3360:	52 e4       	ldi	r21, 0x42	; 66
    3362:	60 91 28 18 	lds	r22, 0x1828
    3366:	70 91 29 18 	lds	r23, 0x1829
    336a:	80 91 2a 18 	lds	r24, 0x182A
    336e:	90 91 2b 18 	lds	r25, 0x182B
    3372:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    3376:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    337a:	70 93 0f 1d 	sts	0x1D0F, r23
    337e:	60 93 0e 1d 	sts	0x1D0E, r22
		elisa3Variables.xPosMm = (signed int)xPos;
    3382:	60 91 24 18 	lds	r22, 0x1824
    3386:	70 91 25 18 	lds	r23, 0x1825
    338a:	80 91 26 18 	lds	r24, 0x1826
    338e:	90 91 27 18 	lds	r25, 0x1827
    3392:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    3396:	70 93 11 1d 	sts	0x1D11, r23
    339a:	60 93 10 1d 	sts	0x1D10, r22
		elisa3Variables.yPosMm = (signed int)yPos;
    339e:	60 91 20 18 	lds	r22, 0x1820
    33a2:	70 91 21 18 	lds	r23, 0x1821
    33a6:	80 91 22 18 	lds	r24, 0x1822
    33aa:	90 91 23 18 	lds	r25, 0x1823
    33ae:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    33b2:	70 93 13 1d 	sts	0x1D13, r23
    33b6:	60 93 12 1d 	sts	0x1D12, r22
    33ba:	c2 ce       	rjmp	.-636    	; 0x3140 <updateRobotVariables+0x1c4>
	accState = 1 - accState;

	// rgb leds
	updateRedLed(255-CLAMP(elisa3Variables.rgbLeds[0], 0, 255));
	updateGreenLed(255-CLAMP(elisa3Variables.rgbLeds[1], 0, 255));
	updateBlueLed(255-CLAMP(elisa3Variables.rgbLeds[2], 0, 255));
    33bc:	8f ef       	ldi	r24, 0xFF	; 255
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	f2 ce       	rjmp	.-540    	; 0x31a6 <updateRobotVariables+0x22a>
	}
	accState = 1 - accState;

	// rgb leds
	updateRedLed(255-CLAMP(elisa3Variables.rgbLeds[0], 0, 255));
	updateGreenLed(255-CLAMP(elisa3Variables.rgbLeds[1], 0, 255));
    33c2:	8f ef       	ldi	r24, 0xFF	; 255
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	e1 ce       	rjmp	.-574    	; 0x318a <updateRobotVariables+0x20e>
		elisa3Variables.yPosMm = (signed int)yPos;
	}
	accState = 1 - accState;

	// rgb leds
	updateRedLed(255-CLAMP(elisa3Variables.rgbLeds[0], 0, 255));
    33c8:	8f ef       	ldi	r24, 0xFF	; 255
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	d0 ce       	rjmp	.-608    	; 0x316e <updateRobotVariables+0x1f2>
    33ce:	81 e8       	ldi	r24, 0x81	; 129
    33d0:	9f ef       	ldi	r25, 0xFF	; 255
    33d2:	0d ce       	rjmp	.-998    	; 0x2fee <updateRobotVariables+0x72>
	if (elisa3Variables.targetSpeed[LEFT] != leftSpeed) {
		leftSpeed = CLAMP(elisa3Variables.targetSpeed[LEFT], -127, 127);
		setLeftSpeed(leftSpeed);
	}
	if (elisa3Variables.targetSpeed[RIGHT] != rightSpeed) {
		rightSpeed = CLAMP(elisa3Variables.targetSpeed[RIGHT], -127, 127);
    33d4:	8f e7       	ldi	r24, 0x7F	; 127
    33d6:	90 e0       	ldi	r25, 0x00	; 0
    33d8:	81 38       	cpi	r24, 0x81	; 129
    33da:	ef ef       	ldi	r30, 0xFF	; 255
    33dc:	9e 07       	cpc	r25, r30
    33de:	0c f0       	brlt	.+2      	; 0x33e2 <updateRobotVariables+0x466>
    33e0:	06 ce       	rjmp	.-1012   	; 0x2fee <updateRobotVariables+0x72>
    33e2:	f5 cf       	rjmp	.-22     	; 0x33ce <updateRobotVariables+0x452>
    33e4:	81 e8       	ldi	r24, 0x81	; 129
    33e6:	9f ef       	ldi	r25, 0xFF	; 255
    33e8:	e8 cd       	rjmp	.-1072   	; 0x2fba <updateRobotVariables+0x3e>

	// motor
	static int leftSpeed = 0, rightSpeed = 0;

	if (elisa3Variables.targetSpeed[LEFT] != leftSpeed) {
		leftSpeed = CLAMP(elisa3Variables.targetSpeed[LEFT], -127, 127);
    33ea:	8f e7       	ldi	r24, 0x7F	; 127
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	81 38       	cpi	r24, 0x81	; 129
    33f0:	2f ef       	ldi	r18, 0xFF	; 255
    33f2:	92 07       	cpc	r25, r18
    33f4:	0c f0       	brlt	.+2      	; 0x33f8 <updateRobotVariables+0x47c>
    33f6:	e1 cd       	rjmp	.-1086   	; 0x2fba <updateRobotVariables+0x3e>
    33f8:	f5 cf       	rjmp	.-22     	; 0x33e4 <updateRobotVariables+0x468>
		}
	}

	if(elisa3Variables.timer > 0) {
		if(((getTime100MicroSec()-timerTick)/10) >= elisa3Variables.timer) {	// This is divided by 10 to get about 1 ms.
			SET_EVENT(EVENT_TIMER);
    33fa:	80 91 6e 0f 	lds	r24, 0x0F6E
    33fe:	90 91 6f 0f 	lds	r25, 0x0F6F
    3402:	80 64       	ori	r24, 0x40	; 64
    3404:	90 93 6f 0f 	sts	0x0F6F, r25
    3408:	80 93 6e 0f 	sts	0x0F6E, r24
			timerTick = getTime100MicroSec();
    340c:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    3410:	60 93 62 0f 	sts	0x0F62, r22
    3414:	70 93 63 0f 	sts	0x0F63, r23
    3418:	80 93 64 0f 	sts	0x0F64, r24
    341c:	90 93 65 0f 	sts	0x0F65, r25
    3420:	50 cf       	rjmp	.-352    	; 0x32c2 <updateRobotVariables+0x346>
		}
		batteryTick = getTime100MicroSec();
	}
	
	if(irCommEnabled != IRCOMM_MODE_SENSORS_SAMPLING) {
		irCommTasks();
    3422:	0e 94 c1 02 	call	0x582	; 0x582 <irCommTasks>
		if(irCommDataSent()==1) {
    3426:	0e 94 b6 09 	call	0x136c	; 0x136c <irCommDataSent>
    342a:	81 30       	cpi	r24, 0x01	; 1
    342c:	09 f4       	brne	.+2      	; 0x3430 <updateRobotVariables+0x4b4>
    342e:	6a c0       	rjmp	.+212    	; 0x3504 <updateRobotVariables+0x588>
			irCommSendData((unsigned char)elisa3Variables.irTxData);
		}
		if(irCommDataAvailable()==1) {
    3430:	0e 94 be 09 	call	0x137c	; 0x137c <irCommDataAvailable>
    3434:	81 30       	cpi	r24, 0x01	; 1
    3436:	09 f0       	breq	.+2      	; 0x343a <updateRobotVariables+0x4be>
    3438:	1b cf       	rjmp	.-458    	; 0x3270 <updateRobotVariables+0x2f4>
			elisa3Variables.irRxData = irCommReadData();
    343a:	0e 94 c1 09 	call	0x1382	; 0x1382 <irCommReadData>
    343e:	90 e0       	ldi	r25, 0x00	; 0
    3440:	90 93 0b 1d 	sts	0x1D0B, r25
    3444:	80 93 0a 1d 	sts	0x1D0A, r24
			SET_EVENT(EVENT_DATA);
    3448:	80 91 6e 0f 	lds	r24, 0x0F6E
    344c:	90 91 6f 0f 	lds	r25, 0x0F6F
    3450:	88 60       	ori	r24, 0x08	; 8
    3452:	90 93 6f 0f 	sts	0x0F6F, r25
    3456:	80 93 6e 0f 	sts	0x0F6E, r24
    345a:	0a cf       	rjmp	.-492    	; 0x3270 <updateRobotVariables+0x2f4>
		SET_EVENT(EVENT_BUTTON);
	}
	btnState = elisa3Variables.button;
	
	if((getTime100MicroSec()-batteryTick) >= (PAUSE_2_SEC)) {
		readBatteryLevel();				// The battery level is updated every two seconds.
    345c:	0e 94 49 44 	call	0x8892	; 0x8892 <readBatteryLevel>
		elisa3Variables.batteryAdc = batteryLevel;
    3460:	20 91 b9 19 	lds	r18, 0x19B9
    3464:	30 91 ba 19 	lds	r19, 0x19BA
    3468:	30 93 07 1d 	sts	0x1D07, r19
    346c:	20 93 06 1d 	sts	0x1D06, r18
		if(batteryLevel >= 934) {           // 934 is the measured adc value when the battery is charged.
    3470:	26 3a       	cpi	r18, 0xA6	; 166
    3472:	83 e0       	ldi	r24, 0x03	; 3
    3474:	38 07       	cpc	r19, r24
    3476:	38 f5       	brcc	.+78     	; 0x34c6 <updateRobotVariables+0x54a>
			elisa3Variables.batteryPercent = 100;
		} else if(batteryLevel <= 780) {    // 780 is the measrued adc value when the battery is discharged.
    3478:	2d 30       	cpi	r18, 0x0D	; 13
    347a:	e3 e0       	ldi	r30, 0x03	; 3
    347c:	3e 07       	cpc	r19, r30
    347e:	50 f5       	brcc	.+84     	; 0x34d4 <updateRobotVariables+0x558>
			elisa3Variables.batteryPercent = 0;
    3480:	10 92 09 1d 	sts	0x1D09, r1
    3484:	10 92 08 1d 	sts	0x1D08, r1
		} else {
			elisa3Variables.batteryPercent = (unsigned int)(((sint32)batteryLevel-(sint32)780.0)*(sint32)100/(sint32)154);
		}
		batteryTick = getTime100MicroSec();
    3488:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    348c:	60 93 66 0f 	sts	0x0F66, r22
    3490:	70 93 67 0f 	sts	0x0F67, r23
    3494:	80 93 68 0f 	sts	0x0F68, r24
    3498:	90 93 69 0f 	sts	0x0F69, r25
    349c:	e5 ce       	rjmp	.-566    	; 0x3268 <updateRobotVariables+0x2ec>
		elisa3Variables.yPosMm = (signed int)yPos;
	}
	accState = 1 - accState;

	// rgb leds
	updateRedLed(255-CLAMP(elisa3Variables.rgbLeds[0], 0, 255));
    349e:	8f ef       	ldi	r24, 0xFF	; 255
    34a0:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
	updateGreenLed(255-CLAMP(elisa3Variables.rgbLeds[1], 0, 255));
    34a4:	80 91 c2 1c 	lds	r24, 0x1CC2
    34a8:	90 91 c3 1c 	lds	r25, 0x1CC3
    34ac:	97 ff       	sbrs	r25, 7
    34ae:	68 ce       	rjmp	.-816    	; 0x3180 <updateRobotVariables+0x204>
    34b0:	8f ef       	ldi	r24, 0xFF	; 255
    34b2:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
	updateBlueLed(255-CLAMP(elisa3Variables.rgbLeds[2], 0, 255));
    34b6:	80 91 c4 1c 	lds	r24, 0x1CC4
    34ba:	90 91 c5 1c 	lds	r25, 0x1CC5
    34be:	97 ff       	sbrs	r25, 7
    34c0:	6d ce       	rjmp	.-806    	; 0x319c <updateRobotVariables+0x220>
    34c2:	8f ef       	ldi	r24, 0xFF	; 255
    34c4:	71 ce       	rjmp	.-798    	; 0x31a8 <updateRobotVariables+0x22c>
	
	if((getTime100MicroSec()-batteryTick) >= (PAUSE_2_SEC)) {
		readBatteryLevel();				// The battery level is updated every two seconds.
		elisa3Variables.batteryAdc = batteryLevel;
		if(batteryLevel >= 934) {           // 934 is the measured adc value when the battery is charged.
			elisa3Variables.batteryPercent = 100;
    34c6:	84 e6       	ldi	r24, 0x64	; 100
    34c8:	90 e0       	ldi	r25, 0x00	; 0
    34ca:	90 93 09 1d 	sts	0x1D09, r25
    34ce:	80 93 08 1d 	sts	0x1D08, r24
    34d2:	da cf       	rjmp	.-76     	; 0x3488 <updateRobotVariables+0x50c>
		} else if(batteryLevel <= 780) {    // 780 is the measrued adc value when the battery is discharged.
			elisa3Variables.batteryPercent = 0;
		} else {
			elisa3Variables.batteryPercent = (unsigned int)(((sint32)batteryLevel-(sint32)780.0)*(sint32)100/(sint32)154);
    34d4:	c9 01       	movw	r24, r18
    34d6:	a0 e0       	ldi	r26, 0x00	; 0
    34d8:	b0 e0       	ldi	r27, 0x00	; 0
    34da:	9c 01       	movw	r18, r24
    34dc:	ad 01       	movw	r20, r26
    34de:	2c 50       	subi	r18, 0x0C	; 12
    34e0:	33 40       	sbci	r19, 0x03	; 3
    34e2:	41 09       	sbc	r20, r1
    34e4:	51 09       	sbc	r21, r1
    34e6:	a4 e6       	ldi	r26, 0x64	; 100
    34e8:	b0 e0       	ldi	r27, 0x00	; 0
    34ea:	0e 94 44 56 	call	0xac88	; 0xac88 <__muluhisi3>
    34ee:	2a e9       	ldi	r18, 0x9A	; 154
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	40 e0       	ldi	r20, 0x00	; 0
    34f4:	50 e0       	ldi	r21, 0x00	; 0
    34f6:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
    34fa:	30 93 09 1d 	sts	0x1D09, r19
    34fe:	20 93 08 1d 	sts	0x1D08, r18
    3502:	c2 cf       	rjmp	.-124    	; 0x3488 <updateRobotVariables+0x50c>
	}
	
	if(irCommEnabled != IRCOMM_MODE_SENSORS_SAMPLING) {
		irCommTasks();
		if(irCommDataSent()==1) {
			irCommSendData((unsigned char)elisa3Variables.irTxData);
    3504:	80 91 0c 1d 	lds	r24, 0x1D0C
    3508:	0e 94 ad 09 	call	0x135a	; 0x135a <irCommSendData>
    350c:	91 cf       	rjmp	.-222    	; 0x3430 <updateRobotVariables+0x4b4>

0000350e <AsebaWriteBytecode>:
void initRobot() {
	initPeripherals();
}


void AsebaWriteBytecode(AsebaVMState *vm) {
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	8c 01       	movw	r16, r24

	turnOnGreenLeds();
    3518:	0e 94 56 1c 	call	0x38ac	; 0x38ac <turnOnGreenLeds>
	int i=0;
	uint16_t* EE_addr = (uint16_t*)&bytecode_version;

	i = ASEBA_PROTOCOL_VERSION;

	eeprom_write_word(EE_addr,i);
    351c:	65 e0       	ldi	r22, 0x05	; 5
    351e:	70 e0       	ldi	r23, 0x00	; 0
    3520:	80 e0       	ldi	r24, 0x00	; 0
    3522:	98 e0       	ldi	r25, 0x08	; 8
    3524:	0e 94 4b 5a 	call	0xb496	; 0xb496 <eeprom_write_word>

	EE_addr = (uint16_t*)eeprom_bytecode;

	for(i = 0; i < 2048; i+=2) {
    3528:	c0 e0       	ldi	r28, 0x00	; 0
    352a:	d0 e0       	ldi	r29, 0x00	; 0
		
		eeprom_write_word(EE_addr, vm->bytecode[i/2]);
    352c:	9e 01       	movw	r18, r28
    352e:	2e 7f       	andi	r18, 0xFE	; 254
    3530:	d8 01       	movw	r26, r16
    3532:	14 96       	adiw	r26, 0x04	; 4
    3534:	ed 91       	ld	r30, X+
    3536:	fc 91       	ld	r31, X
    3538:	15 97       	sbiw	r26, 0x05	; 5
    353a:	e2 0f       	add	r30, r18
    353c:	f3 1f       	adc	r31, r19
    353e:	60 81       	ld	r22, Z
    3540:	71 81       	ldd	r23, Z+1	; 0x01
    3542:	ce 01       	movw	r24, r28
    3544:	80 50       	subi	r24, 0x00	; 0
    3546:	90 40       	sbci	r25, 0x00	; 0
    3548:	0e 94 4b 5a 	call	0xb496	; 0xb496 <eeprom_write_word>

	eeprom_write_word(EE_addr,i);

	EE_addr = (uint16_t*)eeprom_bytecode;

	for(i = 0; i < 2048; i+=2) {
    354c:	22 96       	adiw	r28, 0x02	; 2
    354e:	c1 15       	cp	r28, r1
    3550:	b8 e0       	ldi	r27, 0x08	; 8
    3552:	db 07       	cpc	r29, r27
    3554:	59 f7       	brne	.-42     	; 0x352c <AsebaWriteBytecode+0x1e>
		EE_addr ++;
	}

	turnOffGreenLeds();

}
    3556:	df 91       	pop	r29
    3558:	cf 91       	pop	r28
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
		
		eeprom_write_word(EE_addr, vm->bytecode[i/2]);
		EE_addr ++;
	}

	turnOffGreenLeds();
    355e:	0c 94 3d 1c 	jmp	0x387a	; 0x387a <turnOffGreenLeds>

00003562 <AsebaResetIntoBootloader>:

}
void AsebaResetIntoBootloader(AsebaVMState *vm) {
	asm("jmp 0x0"); // no reset instruction
    3562:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    3566:	08 95       	ret

00003568 <initAseba>:
}

void initAseba() {
    3568:	0f 93       	push	r16
    356a:	1f 93       	push	r17
    356c:	cf 93       	push	r28
	// VM
	int selector = getSelector();
    356e:	0e 94 c2 43 	call	0x8784	; 0x8784 <getSelector>
    3572:	c8 2f       	mov	r28, r24
    3574:	08 2f       	mov	r16, r24
    3576:	10 e0       	ldi	r17, 0x00	; 0
	vmState.nodeId = selector + 1;
    3578:	0f 5f       	subi	r16, 0xFF	; 255
    357a:	1f 4f       	sbci	r17, 0xFF	; 255
    357c:	10 93 69 02 	sts	0x0269, r17
    3580:	00 93 68 02 	sts	0x0268, r16
	AsebaVMInit(&vmState);
    3584:	88 e6       	ldi	r24, 0x68	; 104
    3586:	92 e0       	ldi	r25, 0x02	; 2
    3588:	0e 94 cb 4a 	call	0x9596	; 0x9596 <AsebaVMInit>
	elisa3Variables.id = selector + 1;
    358c:	10 93 63 1c 	sts	0x1C63, r17
    3590:	00 93 62 1c 	sts	0x1C62, r16
	elisa3Variables.rgbLeds[0] = 0;
    3594:	10 92 c1 1c 	sts	0x1CC1, r1
    3598:	10 92 c0 1c 	sts	0x1CC0, r1
	elisa3Variables.rgbLeds[1] = 0;
    359c:	10 92 c3 1c 	sts	0x1CC3, r1
    35a0:	10 92 c2 1c 	sts	0x1CC2, r1
	elisa3Variables.rgbLeds[2] = 0;
    35a4:	10 92 c5 1c 	sts	0x1CC5, r1
    35a8:	10 92 c4 1c 	sts	0x1CC4, r1
	name[7] = '0' + selector;
    35ac:	c0 5d       	subi	r28, 0xD0	; 208
    35ae:	c0 93 1b 03 	sts	0x031B, r28
	turnOffGreenLeds();
    35b2:	0e 94 3d 1c 	call	0x387a	; 0x387a <turnOffGreenLeds>
	elisa3Variables.fwversion = FW_VERSION;
    35b6:	10 92 a7 1c 	sts	0x1CA7, r1
    35ba:	10 92 a6 1c 	sts	0x1CA6, r1
}
    35be:	cf 91       	pop	r28
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    35c4:	08 95       	ret

000035c6 <main>:
	updateBlueLed(255);
	while (1);
}

void initRobot() {
	initPeripherals();
    35c6:	0e 94 d6 43 	call	0x87ac	; 0x87ac <initPeripherals>
{	
	int i=0;
	
	initRobot();

	initAseba();
    35ca:	0e 94 b4 1a 	call	0x3568	; 0x3568 <initAseba>

	calibrateSensors();
    35ce:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <calibrateSensors>
	

	uint16_t* EE_addr = (uint16_t*)&bytecode_version;
	i = eeprom_read_word(EE_addr);
    35d2:	80 e0       	ldi	r24, 0x00	; 0
    35d4:	98 e0       	ldi	r25, 0x08	; 8
    35d6:	0e 94 0f 5a 	call	0xb41e	; 0xb41e <eeprom_read_word>

	// ...only load bytecode if version is the same as current one
	if(i == ASEBA_PROTOCOL_VERSION)
    35da:	05 97       	sbiw	r24, 0x05	; 5
    35dc:	09 f4       	brne	.+2      	; 0x35e0 <main+0x1a>
    35de:	6b c0       	rjmp	.+214    	; 0x36b6 <main+0xf0>
		// Init the vm
		AsebaVMSetupEvent(&vmState, ASEBA_EVENT_INIT);	
	}
	

	if(MCUSR & (1 << 0)) {	// if power on reset does nothing...wait for the serial connection to be opened
    35e0:	04 b6       	in	r0, 0x34	; 52
    35e2:	00 fe       	sbrs	r0, 0
    35e4:	03 c0       	rjmp	.+6      	; 0x35ec <main+0x26>
		MCUSR &= ~(1<<0);	// clear flag
    35e6:	84 b7       	in	r24, 0x34	; 52
    35e8:	8e 7f       	andi	r24, 0xFE	; 254
    35ea:	84 bf       	out	0x34, r24	; 52
	}

	if(MCUSR & (1 << 1)) {	// external reset event (caused by the serial connection opened) => send description to aseba
    35ec:	04 b6       	in	r0, 0x34	; 52
    35ee:	01 fe       	sbrs	r0, 1
    35f0:	07 c0       	rjmp	.+14     	; 0x3600 <main+0x3a>
		MCUSR &= ~(1<<1);
    35f2:	84 b7       	in	r24, 0x34	; 52
    35f4:	8d 7f       	andi	r24, 0xFD	; 253
    35f6:	84 bf       	out	0x34, r24	; 52
		AsebaSendDescription(&vmState);
    35f8:	88 e6       	ldi	r24, 0x68	; 104
    35fa:	92 e0       	ldi	r25, 0x02	; 2
    35fc:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <AsebaSendDescription>
	}

	while (1) {

		AsebaProcessIncomingEvents(&vmState);
    3600:	88 e6       	ldi	r24, 0x68	; 104
    3602:	92 e0       	ldi	r25, 0x02	; 2
    3604:	0e 94 b5 49 	call	0x936a	; 0x936a <AsebaProcessIncomingEvents>
		updateRobotVariables();
    3608:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <updateRobotVariables>
		AsebaVMRun(&vmState, 100);
    360c:	64 e6       	ldi	r22, 0x64	; 100
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	88 e6       	ldi	r24, 0x68	; 104
    3612:	92 e0       	ldi	r25, 0x02	; 2
    3614:	0e 94 14 4e 	call	0x9c28	; 0x9c28 <AsebaVMRun>
    3618:	80 91 76 02 	lds	r24, 0x0276
    361c:	90 91 77 02 	lds	r25, 0x0277
    3620:	83 70       	andi	r24, 0x03	; 3
    3622:	99 27       	eor	r25, r25

		if (AsebaMaskIsClear(vmState.flags, ASEBA_VM_STEP_BY_STEP_MASK) || AsebaMaskIsClear(vmState.flags, ASEBA_VM_EVENT_ACTIVE_MASK))
    3624:	03 97       	sbiw	r24, 0x03	; 3
    3626:	61 f3       	breq	.-40     	; 0x3600 <main+0x3a>
		{
			unsigned i=0, k=0;

			// Find first bit from right (LSB) 
			for(k=0; k<EVENTS_COUNT; k++) {
				if(IS_EVENT(k)) {
    3628:	80 91 6e 0f 	lds	r24, 0x0F6E
    362c:	90 91 6f 0f 	lds	r25, 0x0F6F
    3630:	80 fd       	sbrc	r24, 0
    3632:	23 c0       	rjmp	.+70     	; 0x367a <main+0xb4>
    3634:	81 fd       	sbrc	r24, 1
    3636:	26 c0       	rjmp	.+76     	; 0x3684 <main+0xbe>
    3638:	82 fd       	sbrc	r24, 2
    363a:	29 c0       	rjmp	.+82     	; 0x368e <main+0xc8>
    363c:	83 fd       	sbrc	r24, 3
    363e:	2c c0       	rjmp	.+88     	; 0x3698 <main+0xd2>
    3640:	84 fd       	sbrc	r24, 4
    3642:	2f c0       	rjmp	.+94     	; 0x36a2 <main+0xdc>
    3644:	85 fd       	sbrc	r24, 5
    3646:	32 c0       	rjmp	.+100    	; 0x36ac <main+0xe6>
    3648:	86 ff       	sbrs	r24, 6
    364a:	da cf       	rjmp	.-76     	; 0x3600 <main+0x3a>
    364c:	68 ef       	ldi	r22, 0xF8	; 248
    364e:	7f ef       	ldi	r23, 0xFF	; 255
    3650:	2f eb       	ldi	r18, 0xBF	; 191
    3652:	3f ef       	ldi	r19, 0xFF	; 255
			}

			if(i)
			{
				i--;
				CLEAR_EVENT(i);
    3654:	82 23       	and	r24, r18
    3656:	93 23       	and	r25, r19
    3658:	90 93 6f 0f 	sts	0x0F6F, r25
    365c:	80 93 6e 0f 	sts	0x0F6E, r24
				elisa3Variables.source = vmState.nodeId;
    3660:	80 91 68 02 	lds	r24, 0x0268
    3664:	90 91 69 02 	lds	r25, 0x0269
    3668:	90 93 65 1c 	sts	0x1C65, r25
    366c:	80 93 64 1c 	sts	0x1C64, r24
				AsebaVMSetupEvent(&vmState, ASEBA_EVENT_LOCAL_EVENTS_START - i);
    3670:	88 e6       	ldi	r24, 0x68	; 104
    3672:	92 e0       	ldi	r25, 0x02	; 2
    3674:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <AsebaVMSetupEvent>
    3678:	c3 cf       	rjmp	.-122    	; 0x3600 <main+0x3a>
		{
			unsigned i=0, k=0;

			// Find first bit from right (LSB) 
			for(k=0; k<EVENTS_COUNT; k++) {
				if(IS_EVENT(k)) {
    367a:	6e ef       	ldi	r22, 0xFE	; 254
    367c:	7f ef       	ldi	r23, 0xFF	; 255
    367e:	2e ef       	ldi	r18, 0xFE	; 254
    3680:	3f ef       	ldi	r19, 0xFF	; 255
    3682:	e8 cf       	rjmp	.-48     	; 0x3654 <main+0x8e>
    3684:	6d ef       	ldi	r22, 0xFD	; 253
    3686:	7f ef       	ldi	r23, 0xFF	; 255
    3688:	2d ef       	ldi	r18, 0xFD	; 253
    368a:	3f ef       	ldi	r19, 0xFF	; 255
    368c:	e3 cf       	rjmp	.-58     	; 0x3654 <main+0x8e>
    368e:	6c ef       	ldi	r22, 0xFC	; 252
    3690:	7f ef       	ldi	r23, 0xFF	; 255
    3692:	2b ef       	ldi	r18, 0xFB	; 251
    3694:	3f ef       	ldi	r19, 0xFF	; 255
    3696:	de cf       	rjmp	.-68     	; 0x3654 <main+0x8e>
    3698:	6b ef       	ldi	r22, 0xFB	; 251
    369a:	7f ef       	ldi	r23, 0xFF	; 255
    369c:	27 ef       	ldi	r18, 0xF7	; 247
    369e:	3f ef       	ldi	r19, 0xFF	; 255
    36a0:	d9 cf       	rjmp	.-78     	; 0x3654 <main+0x8e>
    36a2:	6a ef       	ldi	r22, 0xFA	; 250
    36a4:	7f ef       	ldi	r23, 0xFF	; 255
    36a6:	2f ee       	ldi	r18, 0xEF	; 239
    36a8:	3f ef       	ldi	r19, 0xFF	; 255
    36aa:	d4 cf       	rjmp	.-88     	; 0x3654 <main+0x8e>
    36ac:	69 ef       	ldi	r22, 0xF9	; 249
    36ae:	7f ef       	ldi	r23, 0xFF	; 255
    36b0:	2f ed       	ldi	r18, 0xDF	; 223
    36b2:	3f ef       	ldi	r19, 0xFF	; 255
    36b4:	cf cf       	rjmp	.-98     	; 0x3654 <main+0x8e>
    36b6:	00 91 6c 02 	lds	r16, 0x026C
    36ba:	10 91 6d 02 	lds	r17, 0x026D

	uint16_t* EE_addr = (uint16_t*)&bytecode_version;
	i = eeprom_read_word(EE_addr);

	// ...only load bytecode if version is the same as current one
	if(i == ASEBA_PROTOCOL_VERSION)
    36be:	c0 e0       	ldi	r28, 0x00	; 0
    36c0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		EE_addr = (uint16_t*)eeprom_bytecode;
			
		for( i = 0; i< 2048; i += 2) {
			vmState.bytecode[i/2] = eeprom_read_word(EE_addr);
    36c2:	ce 01       	movw	r24, r28
    36c4:	8e 7f       	andi	r24, 0xFE	; 254
    36c6:	78 01       	movw	r14, r16
    36c8:	e8 0e       	add	r14, r24
    36ca:	f9 1e       	adc	r15, r25
    36cc:	ce 01       	movw	r24, r28
    36ce:	80 50       	subi	r24, 0x00	; 0
    36d0:	90 40       	sbci	r25, 0x00	; 0
    36d2:	0e 94 0f 5a 	call	0xb41e	; 0xb41e <eeprom_read_word>
    36d6:	f7 01       	movw	r30, r14
    36d8:	91 83       	std	Z+1, r25	; 0x01
    36da:	80 83       	st	Z, r24
	// ...only load bytecode if version is the same as current one
	if(i == ASEBA_PROTOCOL_VERSION)
	{
		EE_addr = (uint16_t*)eeprom_bytecode;
			
		for( i = 0; i< 2048; i += 2) {
    36dc:	22 96       	adiw	r28, 0x02	; 2
    36de:	c1 15       	cp	r28, r1
    36e0:	f8 e0       	ldi	r31, 0x08	; 8
    36e2:	df 07       	cpc	r29, r31
    36e4:	71 f7       	brne	.-36     	; 0x36c2 <main+0xfc>
			vmState.bytecode[i/2] = eeprom_read_word(EE_addr);
			EE_addr++;
		}
		
		// Init the vm
		AsebaVMSetupEvent(&vmState, ASEBA_EVENT_INIT);	
    36e6:	6f ef       	ldi	r22, 0xFF	; 255
    36e8:	7f ef       	ldi	r23, 0xFF	; 255
    36ea:	88 e6       	ldi	r24, 0x68	; 104
    36ec:	92 e0       	ldi	r25, 0x02	; 2
    36ee:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <AsebaVMSetupEvent>
    36f2:	76 cf       	rjmp	.-276    	; 0x35e0 <main+0x1a>

000036f4 <initRGBleds>:
	// Period freq = Fosc/TOP (max timer value) => TOP = Fosc/period freq
	// We need a frequency of about 30 KHz => 8000000/30000 = 266
	// The waveform generation mode let us chose the TOP value to be 256
	// thus we get period freq = 8000000/256 = 31250 Hz

	TCCR1A = 0;
    36f4:	a0 e8       	ldi	r26, 0x80	; 128
    36f6:	b0 e0       	ldi	r27, 0x00	; 0
    36f8:	1c 92       	st	X, r1
	TCCR1B = 0;
    36fa:	e1 e8       	ldi	r30, 0x81	; 129
    36fc:	f0 e0       	ldi	r31, 0x00	; 0
    36fe:	10 82       	st	Z, r1

	// enable OCA, OCB, OCC; clear on match, set at bottom
	TCCR1A |= (1 << COM1A1) | (1 << COM1B1) | (1 << COM1C1) | (1 << WGM10); 	
    3700:	8c 91       	ld	r24, X
    3702:	89 6a       	ori	r24, 0xA9	; 169
    3704:	8c 93       	st	X, r24
	// mode 5 => fast-pwm 8 bit; no prescaler
	TCCR1B |= (1 << WGM12) | (1 << CS10);										
    3706:	80 81       	ld	r24, Z
    3708:	89 60       	ori	r24, 0x09	; 9
    370a:	80 83       	st	Z, r24
	// the values for the leds pwm goes from 0 (max power on) to 255 (off)
	OCR1A = pwm_red;
    370c:	80 91 26 03 	lds	r24, 0x0326
    3710:	90 e0       	ldi	r25, 0x00	; 0
    3712:	90 93 89 00 	sts	0x0089, r25
    3716:	80 93 88 00 	sts	0x0088, r24
	OCR1B = pwm_green;
    371a:	80 91 25 03 	lds	r24, 0x0325
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	90 93 8b 00 	sts	0x008B, r25
    3724:	80 93 8a 00 	sts	0x008A, r24
	OCR1C = pwm_blue;
    3728:	80 91 24 03 	lds	r24, 0x0324
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	90 93 8d 00 	sts	0x008D, r25
    3732:	80 93 8c 00 	sts	0x008C, r24
    3736:	08 95       	ret

00003738 <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    3738:	88 23       	and	r24, r24
    373a:	59 f0       	breq	.+22     	; 0x3752 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    373c:	90 91 80 00 	lds	r25, 0x0080
    3740:	90 68       	ori	r25, 0x80	; 128
    3742:	90 93 80 00 	sts	0x0080, r25
		OCR1A = value;
    3746:	90 e0       	ldi	r25, 0x00	; 0
    3748:	90 93 89 00 	sts	0x0089, r25
    374c:	80 93 88 00 	sts	0x0088, r24
    3750:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    3752:	80 91 80 00 	lds	r24, 0x0080
    3756:	8f 77       	andi	r24, 0x7F	; 127
    3758:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    375c:	2d 98       	cbi	0x05, 5	; 5
    375e:	08 95       	ret

00003760 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    3760:	88 23       	and	r24, r24
    3762:	59 f0       	breq	.+22     	; 0x377a <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    3764:	90 91 80 00 	lds	r25, 0x0080
    3768:	90 62       	ori	r25, 0x20	; 32
    376a:	90 93 80 00 	sts	0x0080, r25
		OCR1B = value;
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	90 93 8b 00 	sts	0x008B, r25
    3774:	80 93 8a 00 	sts	0x008A, r24
    3778:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    377a:	80 91 80 00 	lds	r24, 0x0080
    377e:	8f 7d       	andi	r24, 0xDF	; 223
    3780:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    3784:	2e 98       	cbi	0x05, 6	; 5
    3786:	08 95       	ret

00003788 <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    3788:	88 23       	and	r24, r24
    378a:	59 f0       	breq	.+22     	; 0x37a2 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    378c:	90 91 80 00 	lds	r25, 0x0080
    3790:	98 60       	ori	r25, 0x08	; 8
    3792:	90 93 80 00 	sts	0x0080, r25
		OCR1C = value;
    3796:	90 e0       	ldi	r25, 0x00	; 0
    3798:	90 93 8d 00 	sts	0x008D, r25
    379c:	80 93 8c 00 	sts	0x008C, r24
    37a0:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    37a2:	80 91 80 00 	lds	r24, 0x0080
    37a6:	87 7f       	andi	r24, 0xF7	; 247
    37a8:	80 93 80 00 	sts	0x0080, r24
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    37ac:	2f 98       	cbi	0x05, 7	; 5
    37ae:	08 95       	ret

000037b0 <setGreenLed>:

}

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	88 30       	cpi	r24, 0x08	; 8
    37b4:	91 05       	cpc	r25, r1
    37b6:	70 f4       	brcc	.+28     	; 0x37d4 <setGreenLed+0x24>
    37b8:	fc 01       	movw	r30, r24
    37ba:	88 27       	eor	r24, r24
    37bc:	ee 58       	subi	r30, 0x8E	; 142
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	8f 4f       	sbci	r24, 0xFF	; 255
    37c2:	0c 94 1e 56 	jmp	0xac3c	; 0xac3c <__tablejump2__>
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    37c6:	80 91 0b 01 	lds	r24, 0x010B
    37ca:	61 11       	cpse	r22, r1
    37cc:	52 c0       	rjmp	.+164    	; 0x3872 <setGreenLed+0xc2>
    37ce:	80 68       	ori	r24, 0x80	; 128
    37d0:	80 93 0b 01 	sts	0x010B, r24
    37d4:	08 95       	ret
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    37d6:	80 91 0b 01 	lds	r24, 0x010B
    37da:	66 23       	and	r22, r22
    37dc:	81 f1       	breq	.+96     	; 0x383e <setGreenLed+0x8e>
    37de:	8f 7b       	andi	r24, 0xBF	; 191
    37e0:	80 93 0b 01 	sts	0x010B, r24
    37e4:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    37e6:	80 91 0b 01 	lds	r24, 0x010B
    37ea:	66 23       	and	r22, r22
    37ec:	61 f1       	breq	.+88     	; 0x3846 <setGreenLed+0x96>
    37ee:	8e 7f       	andi	r24, 0xFE	; 254
    37f0:	80 93 0b 01 	sts	0x010B, r24
    37f4:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    37f6:	80 91 0b 01 	lds	r24, 0x010B
    37fa:	66 23       	and	r22, r22
    37fc:	61 f1       	breq	.+88     	; 0x3856 <setGreenLed+0xa6>
    37fe:	8d 7f       	andi	r24, 0xFD	; 253
    3800:	80 93 0b 01 	sts	0x010B, r24
    3804:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3806:	80 91 0b 01 	lds	r24, 0x010B
    380a:	66 23       	and	r22, r22
    380c:	61 f1       	breq	.+88     	; 0x3866 <setGreenLed+0xb6>
    380e:	8b 7f       	andi	r24, 0xFB	; 251
    3810:	80 93 0b 01 	sts	0x010B, r24
    3814:	08 95       	ret
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    3816:	80 91 0b 01 	lds	r24, 0x010B
    381a:	66 23       	and	r22, r22
    381c:	01 f1       	breq	.+64     	; 0x385e <setGreenLed+0xae>
    381e:	8f 7e       	andi	r24, 0xEF	; 239
    3820:	80 93 0b 01 	sts	0x010B, r24
    3824:	08 95       	ret
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    3826:	66 23       	and	r22, r22
    3828:	11 f1       	breq	.+68     	; 0x386e <setGreenLed+0xbe>
    382a:	a3 98       	cbi	0x14, 3	; 20
    382c:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    382e:	80 91 0b 01 	lds	r24, 0x010B
    3832:	66 23       	and	r22, r22
    3834:	61 f0       	breq	.+24     	; 0x384e <setGreenLed+0x9e>
    3836:	8f 7d       	andi	r24, 0xDF	; 223
    3838:	80 93 0b 01 	sts	0x010B, r24
    383c:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
    383e:	80 64       	ori	r24, 0x40	; 64
    3840:	80 93 0b 01 	sts	0x010B, r24
    3844:	08 95       	ret

void setGreenLed(unsigned char ledNum, unsigned char isOn) {

	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
    3846:	81 60       	ori	r24, 0x01	; 1
    3848:	80 93 0b 01 	sts	0x010B, r24
    384c:	08 95       	ret
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
				break;

		case 5:	isOn?GREEN_LED5_ON:GREEN_LED5_OFF;
    384e:	80 62       	ori	r24, 0x20	; 32
    3850:	80 93 0b 01 	sts	0x010B, r24
    3854:	08 95       	ret
	switch(ledNum) {

		case 0:	isOn?GREEN_LED0_ON:GREEN_LED0_OFF;
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
    3856:	82 60       	ori	r24, 0x02	; 2
    3858:	80 93 0b 01 	sts	0x010B, r24
    385c:	08 95       	ret
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
				break;

		case 4:	isOn?GREEN_LED4_ON:GREEN_LED4_OFF;
    385e:	80 61       	ori	r24, 0x10	; 16
    3860:	80 93 0b 01 	sts	0x010B, r24
    3864:	08 95       	ret
				break;

		case 1:	isOn?GREEN_LED1_ON:GREEN_LED1_OFF;
				break;

		case 2:	isOn?GREEN_LED2_ON:GREEN_LED2_OFF;
    3866:	84 60       	ori	r24, 0x04	; 4
    3868:	80 93 0b 01 	sts	0x010B, r24
    386c:	08 95       	ret
				break;

		case 3:	isOn?GREEN_LED3_ON:GREEN_LED3_OFF;
    386e:	a3 9a       	sbi	0x14, 3	; 20
    3870:	08 95       	ret
				break;

		case 6:	isOn?GREEN_LED6_ON:GREEN_LED6_OFF;
				break;

		case 7:	isOn?GREEN_LED7_ON:GREEN_LED7_OFF;
    3872:	8f 77       	andi	r24, 0x7F	; 127
    3874:	80 93 0b 01 	sts	0x010B, r24
    3878:	08 95       	ret

0000387a <turnOffGreenLeds>:

}

void turnOffGreenLeds() {

	GREEN_LED0_OFF;
    387a:	eb e0       	ldi	r30, 0x0B	; 11
    387c:	f1 e0       	ldi	r31, 0x01	; 1
    387e:	80 81       	ld	r24, Z
    3880:	81 60       	ori	r24, 0x01	; 1
    3882:	80 83       	st	Z, r24
	GREEN_LED1_OFF;
    3884:	80 81       	ld	r24, Z
    3886:	82 60       	ori	r24, 0x02	; 2
    3888:	80 83       	st	Z, r24
	GREEN_LED2_OFF;
    388a:	80 81       	ld	r24, Z
    388c:	84 60       	ori	r24, 0x04	; 4
    388e:	80 83       	st	Z, r24
	GREEN_LED3_OFF;
    3890:	a3 9a       	sbi	0x14, 3	; 20
	GREEN_LED4_OFF;
    3892:	80 81       	ld	r24, Z
    3894:	80 61       	ori	r24, 0x10	; 16
    3896:	80 83       	st	Z, r24
	GREEN_LED5_OFF;
    3898:	80 81       	ld	r24, Z
    389a:	80 62       	ori	r24, 0x20	; 32
    389c:	80 83       	st	Z, r24
	GREEN_LED6_OFF;
    389e:	80 81       	ld	r24, Z
    38a0:	80 64       	ori	r24, 0x40	; 64
    38a2:	80 83       	st	Z, r24
	GREEN_LED7_OFF;
    38a4:	80 81       	ld	r24, Z
    38a6:	80 68       	ori	r24, 0x80	; 128
    38a8:	80 83       	st	Z, r24
    38aa:	08 95       	ret

000038ac <turnOnGreenLeds>:
}


void turnOnGreenLeds() {

	GREEN_LED0_ON;
    38ac:	eb e0       	ldi	r30, 0x0B	; 11
    38ae:	f1 e0       	ldi	r31, 0x01	; 1
    38b0:	80 81       	ld	r24, Z
    38b2:	8e 7f       	andi	r24, 0xFE	; 254
    38b4:	80 83       	st	Z, r24
	GREEN_LED1_ON;
    38b6:	80 81       	ld	r24, Z
    38b8:	8d 7f       	andi	r24, 0xFD	; 253
    38ba:	80 83       	st	Z, r24
	GREEN_LED2_ON;
    38bc:	80 81       	ld	r24, Z
    38be:	8b 7f       	andi	r24, 0xFB	; 251
    38c0:	80 83       	st	Z, r24
	GREEN_LED3_ON;
    38c2:	a3 98       	cbi	0x14, 3	; 20
	GREEN_LED4_ON;
    38c4:	80 81       	ld	r24, Z
    38c6:	8f 7e       	andi	r24, 0xEF	; 239
    38c8:	80 83       	st	Z, r24
	GREEN_LED5_ON;
    38ca:	80 81       	ld	r24, Z
    38cc:	8f 7d       	andi	r24, 0xDF	; 223
    38ce:	80 83       	st	Z, r24
	GREEN_LED6_ON;
    38d0:	80 81       	ld	r24, Z
    38d2:	8f 7b       	andi	r24, 0xBF	; 191
    38d4:	80 83       	st	Z, r24
	GREEN_LED7_ON;
    38d6:	80 81       	ld	r24, Z
    38d8:	8f 77       	andi	r24, 0x7F	; 127
    38da:	80 83       	st	Z, r24
    38dc:	08 95       	ret

000038de <initMotors>:

#include "motors.h"

void initMotors() {
    38de:	0f 93       	push	r16
    38e0:	1f 93       	push	r17
    38e2:	cf 93       	push	r28
    38e4:	df 93       	push	r29
	// Using 10-bit resolution (waveform generation mode 7) we have a period of: 8000000/1024 = 7812.5 Hz
	// We need to apply a prescaler to the timer in such a way to get the desired period:
	// 7812.5/100 = 78.125 => ideal prescaler, the nearest one is 1/64 and we get a period of:
	// 8000000/64/1024 = 122 Hz

	TCCR3A = 0;
    38e6:	e0 e9       	ldi	r30, 0x90	; 144
    38e8:	f0 e0       	ldi	r31, 0x00	; 0
    38ea:	10 82       	st	Z, r1
	TCCR3B = 0;
    38ec:	41 e9       	ldi	r20, 0x91	; 145
    38ee:	50 e0       	ldi	r21, 0x00	; 0
    38f0:	da 01       	movw	r26, r20
    38f2:	1c 92       	st	X, r1
	TIMSK3 = 0;
    38f4:	21 e7       	ldi	r18, 0x71	; 113
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	e9 01       	movw	r28, r18
    38fa:	18 82       	st	Y, r1
	TCCR4A = 0;
    38fc:	a0 ea       	ldi	r26, 0xA0	; 160
    38fe:	b0 e0       	ldi	r27, 0x00	; 0
    3900:	1c 92       	st	X, r1
	TCCR4B = 0;
    3902:	81 ea       	ldi	r24, 0xA1	; 161
    3904:	90 e0       	ldi	r25, 0x00	; 0
    3906:	ec 01       	movw	r28, r24
    3908:	18 82       	st	Y, r1
	TIMSK4 = 0;
    390a:	02 e7       	ldi	r16, 0x72	; 114
    390c:	10 e0       	ldi	r17, 0x00	; 0
    390e:	e8 01       	movw	r28, r16
    3910:	18 82       	st	Y, r1

	TCCR3A |= (1 << COM3A1) | (1 << WGM31) | (1 << WGM30); 	// enable OCA; clear on match, set at bottom
    3912:	60 81       	ld	r22, Z
    3914:	63 68       	ori	r22, 0x83	; 131
    3916:	60 83       	st	Z, r22
	TCCR3A |= (1 << WGM31) | (1 << WGM30);
    3918:	60 81       	ld	r22, Z
    391a:	63 60       	ori	r22, 0x03	; 3
    391c:	60 83       	st	Z, r22
	TCCR3B |= (1 << WGM32) | (1 << CS31) | (1 << CS30);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    391e:	ea 01       	movw	r28, r20
    3920:	68 81       	ld	r22, Y
    3922:	6b 60       	ori	r22, 0x0B	; 11
    3924:	68 83       	st	Y, r22
	// the values for motors goes from 0 (stopped) to 1023 (max power)
	OCR3A = pwm_right;
    3926:	40 91 8d 19 	lds	r20, 0x198D
    392a:	50 91 8e 19 	lds	r21, 0x198E
    392e:	50 93 99 00 	sts	0x0099, r21
    3932:	40 93 98 00 	sts	0x0098, r20
	OCR3B = 0;
    3936:	10 92 9b 00 	sts	0x009B, r1
    393a:	10 92 9a 00 	sts	0x009A, r1
	TIMSK3 |= (1 << TOIE3);		// Enable timer overflow interrupt
    393e:	e9 01       	movw	r28, r18
    3940:	48 81       	ld	r20, Y
    3942:	41 60       	ori	r20, 0x01	; 1
    3944:	48 83       	st	Y, r20

	// stop right motor
	TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    3946:	20 81       	ld	r18, Z
    3948:	2f 75       	andi	r18, 0x5F	; 95
    394a:	20 83       	st	Z, r18
	PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    394c:	2e b1       	in	r18, 0x0e	; 14
    394e:	27 7e       	andi	r18, 0xE7	; 231
    3950:	2e b9       	out	0x0e, r18	; 14

	// Motor left timer4/pwm
	// same configuration as timer3
	TCCR4A |= (1 << COM4A1) | (1 << WGM41) | (1 << WGM40); 	// enable OCA; clear on match, set at bottom
    3952:	2c 91       	ld	r18, X
    3954:	23 68       	ori	r18, 0x83	; 131
    3956:	2c 93       	st	X, r18
	TCCR4B |= (1 << WGM42) | (1 << CS41) | (1 << CS40);		// mode 7 => fast-pwm 10 bit; clock prescaler 1/64
    3958:	fc 01       	movw	r30, r24
    395a:	20 81       	ld	r18, Z
    395c:	2b 60       	ori	r18, 0x0B	; 11
    395e:	20 83       	st	Z, r18
	// the values for motors goes from 0 (stopped) to 1024 (max power)
	OCR4A = pwm_left;
    3960:	80 91 8b 19 	lds	r24, 0x198B
    3964:	90 91 8c 19 	lds	r25, 0x198C
    3968:	90 93 a9 00 	sts	0x00A9, r25
    396c:	80 93 a8 00 	sts	0x00A8, r24
	OCR4B = 0;
    3970:	10 92 ab 00 	sts	0x00AB, r1
    3974:	10 92 aa 00 	sts	0x00AA, r1
	TIMSK4 |= (1 << TOIE4);		// Enable timer overflow interrupt
    3978:	e8 01       	movw	r28, r16
    397a:	88 81       	ld	r24, Y
    397c:	81 60       	ori	r24, 0x01	; 1
    397e:	88 83       	st	Y, r24
	// stop left motor
	TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    3980:	8c 91       	ld	r24, X
    3982:	8f 75       	andi	r24, 0x5F	; 95
    3984:	8c 93       	st	X, r24
	PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    3986:	e2 e0       	ldi	r30, 0x02	; 2
    3988:	f1 e0       	ldi	r31, 0x01	; 1
    398a:	80 81       	ld	r24, Z
    398c:	87 7e       	andi	r24, 0xE7	; 231
    398e:	80 83       	st	Z, r24


}
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	1f 91       	pop	r17
    3996:	0f 91       	pop	r16
    3998:	08 95       	ret

0000399a <handleMotorsWithNoController>:
        vel = -(MAX_MOTORS_PWM/2);
    }
    return vel;
}

void handleMotorsWithNoController() {
    399a:	af 92       	push	r10
    399c:	bf 92       	push	r11
    399e:	cf 92       	push	r12
    39a0:	df 92       	push	r13
    39a2:	ef 92       	push	r14
    39a4:	ff 92       	push	r15
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
    39ae:	80 91 fe 1d 	lds	r24, 0x1DFE
    39b2:	88 23       	and	r24, r24
    39b4:	09 f4       	brne	.+2      	; 0x39b8 <handleMotorsWithNoController+0x1e>
    39b6:	c1 c0       	rjmp	.+386    	; 0x3b3a <handleMotorsWithNoController+0x1a0>
    39b8:	c0 91 85 19 	lds	r28, 0x1985
    39bc:	d0 91 86 19 	lds	r29, 0x1986
    39c0:	80 91 83 19 	lds	r24, 0x1983
    39c4:	90 91 84 19 	lds	r25, 0x1984
    39c8:	8c 01       	movw	r16, r24
    39ca:	00 0f       	add	r16, r16
    39cc:	11 1f       	adc	r17, r17
    39ce:	00 0f       	add	r16, r16
    39d0:	11 1f       	adc	r17, r17
    39d2:	08 0f       	add	r16, r24
    39d4:	19 1f       	adc	r17, r25
void handleMotorsWithNoController() {

	handleSoftAcceleration();

	// compute velocities even if they aren't used
	if(compute_left_vel) {
    39d6:	80 91 2a 03 	lds	r24, 0x032A
    39da:	88 23       	and	r24, r24
    39dc:	c1 f1       	breq	.+112    	; 0x3a4e <handleMotorsWithNoController+0xb4>
		last_left_vel = left_vel_sum>>2;
    39de:	60 91 95 19 	lds	r22, 0x1995
    39e2:	70 91 96 19 	lds	r23, 0x1996
    39e6:	76 95       	lsr	r23
    39e8:	67 95       	ror	r22
    39ea:	76 95       	lsr	r23
    39ec:	67 95       	ror	r22
    39ee:	70 93 92 19 	sts	0x1992, r23
    39f2:	60 93 91 19 	sts	0x1991, r22
		compute_left_vel = 0;
    39f6:	10 92 2a 03 	sts	0x032A, r1
		left_vel_sum = 0;
    39fa:	10 92 96 19 	sts	0x1996, r1
    39fe:	10 92 95 19 	sts	0x1995, r1

		if(pwm_left_desired >= 0) {
    3a02:	80 91 87 19 	lds	r24, 0x1987
    3a06:	90 91 88 19 	lds	r25, 0x1988
			leftMotSteps += (last_left_vel>>3);
    3a0a:	75 95       	asr	r23
    3a0c:	67 95       	ror	r22
    3a0e:	75 95       	asr	r23
    3a10:	67 95       	ror	r22
    3a12:	75 95       	asr	r23
    3a14:	67 95       	ror	r22
	if(compute_left_vel) {
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
    3a16:	97 fd       	sbrc	r25, 7
    3a18:	50 c1       	rjmp	.+672    	; 0x3cba <handleMotorsWithNoController+0x320>
			leftMotSteps += (last_left_vel>>3);
    3a1a:	07 2e       	mov	r0, r23
    3a1c:	00 0c       	add	r0, r0
    3a1e:	88 0b       	sbc	r24, r24
    3a20:	99 0b       	sbc	r25, r25
    3a22:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3a26:	9b 01       	movw	r18, r22
    3a28:	ac 01       	movw	r20, r24
    3a2a:	60 91 9f 19 	lds	r22, 0x199F
    3a2e:	70 91 a0 19 	lds	r23, 0x19A0
    3a32:	80 91 a1 19 	lds	r24, 0x19A1
    3a36:	90 91 a2 19 	lds	r25, 0x19A2
    3a3a:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    3a3e:	60 93 9f 19 	sts	0x199F, r22
    3a42:	70 93 a0 19 	sts	0x19A0, r23
    3a46:	80 93 a1 19 	sts	0x19A1, r24
    3a4a:	90 93 a2 19 	sts	0x19A2, r25
		} else {
			leftMotSteps -= (last_left_vel>>3);
		}
	}

	if(compute_right_vel) {
    3a4e:	80 91 29 03 	lds	r24, 0x0329
    3a52:	88 23       	and	r24, r24
    3a54:	c1 f1       	breq	.+112    	; 0x3ac6 <handleMotorsWithNoController+0x12c>
		last_right_vel = right_vel_sum>>2;
    3a56:	60 91 93 19 	lds	r22, 0x1993
    3a5a:	70 91 94 19 	lds	r23, 0x1994
    3a5e:	76 95       	lsr	r23
    3a60:	67 95       	ror	r22
    3a62:	76 95       	lsr	r23
    3a64:	67 95       	ror	r22
    3a66:	70 93 90 19 	sts	0x1990, r23
    3a6a:	60 93 8f 19 	sts	0x198F, r22
		compute_right_vel = 0;
    3a6e:	10 92 29 03 	sts	0x0329, r1
		right_vel_sum = 0;
    3a72:	10 92 94 19 	sts	0x1994, r1
    3a76:	10 92 93 19 	sts	0x1993, r1

		if(pwm_right_desired >= 0) {
    3a7a:	80 91 89 19 	lds	r24, 0x1989
    3a7e:	90 91 8a 19 	lds	r25, 0x198A
			rightMotSteps += (last_right_vel>>3);
    3a82:	75 95       	asr	r23
    3a84:	67 95       	ror	r22
    3a86:	75 95       	asr	r23
    3a88:	67 95       	ror	r22
    3a8a:	75 95       	asr	r23
    3a8c:	67 95       	ror	r22
	if(compute_right_vel) {
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
    3a8e:	97 fd       	sbrc	r25, 7
    3a90:	f9 c0       	rjmp	.+498    	; 0x3c84 <handleMotorsWithNoController+0x2ea>
			rightMotSteps += (last_right_vel>>3);
    3a92:	07 2e       	mov	r0, r23
    3a94:	00 0c       	add	r0, r0
    3a96:	88 0b       	sbc	r24, r24
    3a98:	99 0b       	sbc	r25, r25
    3a9a:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3a9e:	9b 01       	movw	r18, r22
    3aa0:	ac 01       	movw	r20, r24
    3aa2:	60 91 a3 19 	lds	r22, 0x19A3
    3aa6:	70 91 a4 19 	lds	r23, 0x19A4
    3aaa:	80 91 a5 19 	lds	r24, 0x19A5
    3aae:	90 91 a6 19 	lds	r25, 0x19A6
    3ab2:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    3ab6:	60 93 a3 19 	sts	0x19A3, r22
    3aba:	70 93 a4 19 	sts	0x19A4, r23
    3abe:	80 93 a5 19 	sts	0x19A5, r24
    3ac2:	90 93 a6 19 	sts	0x19A6, r25
		} else {
			rightMotSteps -= (last_right_vel>>3);
		}
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
    3ac6:	ce 01       	movw	r24, r28
    3ac8:	88 0f       	add	r24, r24
    3aca:	99 1f       	adc	r25, r25
    3acc:	88 0f       	add	r24, r24
    3ace:	99 1f       	adc	r25, r25
    3ad0:	8c 0f       	add	r24, r28
    3ad2:	9d 1f       	adc	r25, r29
    3ad4:	90 93 76 19 	sts	0x1976, r25
    3ad8:	80 93 75 19 	sts	0x1975, r24
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
    3adc:	10 93 74 19 	sts	0x1974, r17
    3ae0:	00 93 73 19 	sts	0x1973, r16
	if(obstacleAvoidanceEnabled) {
    3ae4:	20 91 2e 18 	lds	r18, 0x182E
    3ae8:	21 11       	cpse	r18, r1
    3aea:	b1 c0       	rjmp	.+354    	; 0x3c4e <handleMotorsWithNoController+0x2b4>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	}
	//pwm_left_desired_to_control = cast_speed(pwm_left_working);		// pwm in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
	//pwm_right_desired_to_control = cast_speed(pwm_right_working);

	pwm_left = pwm_left_working;
    3aec:	10 93 8c 19 	sts	0x198C, r17
    3af0:	00 93 8b 19 	sts	0x198B, r16
	pwm_right = pwm_right_working;
    3af4:	90 93 8e 19 	sts	0x198E, r25
    3af8:	80 93 8d 19 	sts	0x198D, r24

	if(pwm_right > 0) {
    3afc:	18 16       	cp	r1, r24
    3afe:	19 06       	cpc	r1, r25
    3b00:	0c f0       	brlt	.+2      	; 0x3b04 <handleMotorsWithNoController+0x16a>
    3b02:	b4 c0       	rjmp	.+360    	; 0x3c6c <handleMotorsWithNoController+0x2d2>
		OCR3A = (unsigned int)pwm_right;
    3b04:	90 93 99 00 	sts	0x0099, r25
    3b08:	80 93 98 00 	sts	0x0098, r24
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
    3b0c:	80 91 8b 19 	lds	r24, 0x198B
    3b10:	90 91 8c 19 	lds	r25, 0x198C
    3b14:	18 16       	cp	r1, r24
    3b16:	19 06       	cpc	r1, r25
    3b18:	0c f0       	brlt	.+2      	; 0x3b1c <handleMotorsWithNoController+0x182>
    3b1a:	8d c0       	rjmp	.+282    	; 0x3c36 <handleMotorsWithNoController+0x29c>
		OCR4A = (unsigned int)pwm_left;
    3b1c:	90 93 a9 00 	sts	0x00A9, r25
    3b20:	80 93 a8 00 	sts	0x00A8, r24
	} else {
		OCR4A = 0;
		OCR4B = 0;
	}

}
    3b24:	df 91       	pop	r29
    3b26:	cf 91       	pop	r28
    3b28:	1f 91       	pop	r17
    3b2a:	0f 91       	pop	r16
    3b2c:	ff 90       	pop	r15
    3b2e:	ef 90       	pop	r14
    3b30:	df 90       	pop	r13
    3b32:	cf 90       	pop	r12
    3b34:	bf 90       	pop	r11
    3b36:	af 90       	pop	r10
    3b38:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    3b3a:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    3b3e:	dc 01       	movw	r26, r24
    3b40:	cb 01       	movw	r24, r22
    3b42:	9c 01       	movw	r18, r24
    3b44:	ad 01       	movw	r20, r26
    3b46:	60 e0       	ldi	r22, 0x00	; 0
    3b48:	70 e0       	ldi	r23, 0x00	; 0
    3b4a:	80 e0       	ldi	r24, 0x00	; 0
    3b4c:	90 e0       	ldi	r25, 0x00	; 0
    3b4e:	a0 90 34 18 	lds	r10, 0x1834
    3b52:	b0 90 35 18 	lds	r11, 0x1835
    3b56:	c0 90 36 18 	lds	r12, 0x1836
    3b5a:	d0 90 37 18 	lds	r13, 0x1837
    3b5e:	e0 90 38 18 	lds	r14, 0x1838
    3b62:	f0 90 39 18 	lds	r15, 0x1839
    3b66:	00 91 3a 18 	lds	r16, 0x183A
    3b6a:	10 91 3b 18 	lds	r17, 0x183B
    3b6e:	0e 94 4f 56 	call	0xac9e	; 0xac9e <__subdi3>
    3b72:	2f 38       	cpi	r18, 0x8F	; 143
    3b74:	31 40       	sbci	r19, 0x01	; 1
    3b76:	41 05       	cpc	r20, r1
    3b78:	51 05       	cpc	r21, r1
    3b7a:	61 05       	cpc	r22, r1
    3b7c:	71 05       	cpc	r23, r1
    3b7e:	81 05       	cpc	r24, r1
    3b80:	91 05       	cpc	r25, r1
    3b82:	09 f0       	breq	.+2      	; 0x3b86 <handleMotorsWithNoController+0x1ec>
    3b84:	08 f4       	brcc	.+2      	; 0x3b88 <handleMotorsWithNoController+0x1ee>
    3b86:	18 cf       	rjmp	.-464    	; 0x39b8 <handleMotorsWithNoController+0x1e>
			speedStepCounter = getTime100MicroSec();
    3b88:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	cb 01       	movw	r24, r22
    3b90:	80 93 34 18 	sts	0x1834, r24
    3b94:	90 93 35 18 	sts	0x1835, r25
    3b98:	a0 93 36 18 	sts	0x1836, r26
    3b9c:	b0 93 37 18 	sts	0x1837, r27
    3ba0:	10 92 38 18 	sts	0x1838, r1
    3ba4:	10 92 39 18 	sts	0x1839, r1
    3ba8:	10 92 3a 18 	sts	0x183A, r1
    3bac:	10 92 3b 18 	sts	0x183B, r1

			if(softAccEnabled) {
    3bb0:	80 91 33 18 	lds	r24, 0x1833
    3bb4:	88 23       	and	r24, r24
    3bb6:	09 f4       	brne	.+2      	; 0x3bba <handleMotorsWithNoController+0x220>
    3bb8:	a3 c0       	rjmp	.+326    	; 0x3d00 <handleMotorsWithNoController+0x366>
				if(pwm_right_desired == 0) {
    3bba:	80 91 89 19 	lds	r24, 0x1989
    3bbe:	90 91 8a 19 	lds	r25, 0x198A
    3bc2:	00 97       	sbiw	r24, 0x00	; 0
    3bc4:	09 f0       	breq	.+2      	; 0x3bc8 <handleMotorsWithNoController+0x22e>
    3bc6:	bc c0       	rjmp	.+376    	; 0x3d40 <handleMotorsWithNoController+0x3a6>
					pwm_intermediate_right_desired = 0;
    3bc8:	10 92 86 19 	sts	0x1986, r1
    3bcc:	10 92 85 19 	sts	0x1985, r1
    3bd0:	c0 e0       	ldi	r28, 0x00	; 0
    3bd2:	d0 e0       	ldi	r29, 0x00	; 0
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    3bd4:	00 91 87 19 	lds	r16, 0x1987
    3bd8:	10 91 88 19 	lds	r17, 0x1988
    3bdc:	01 15       	cp	r16, r1
    3bde:	11 05       	cpc	r17, r1
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <handleMotorsWithNoController+0x24a>
    3be2:	cb c0       	rjmp	.+406    	; 0x3d7a <handleMotorsWithNoController+0x3e0>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    3be4:	80 91 83 19 	lds	r24, 0x1983
    3be8:	90 91 84 19 	lds	r25, 0x1984
    3bec:	08 9f       	mul	r16, r24
    3bee:	90 01       	movw	r18, r0
    3bf0:	09 9f       	mul	r16, r25
    3bf2:	30 0d       	add	r19, r0
    3bf4:	18 9f       	mul	r17, r24
    3bf6:	30 0d       	add	r19, r0
    3bf8:	11 24       	eor	r1, r1
    3bfa:	37 fd       	sbrc	r19, 7
    3bfc:	fa c0       	rjmp	.+500    	; 0x3df2 <handleMotorsWithNoController+0x458>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    3bfe:	80 17       	cp	r24, r16
    3c00:	91 07       	cpc	r25, r17
    3c02:	0c f0       	brlt	.+2      	; 0x3c06 <handleMotorsWithNoController+0x26c>
    3c04:	bf c0       	rjmp	.+382    	; 0x3d84 <handleMotorsWithNoController+0x3ea>
					pwm_intermediate_left_desired += speedStep;
    3c06:	20 91 1e 03 	lds	r18, 0x031E
    3c0a:	82 0f       	add	r24, r18
    3c0c:	91 1d       	adc	r25, r1
    3c0e:	90 93 84 19 	sts	0x1984, r25
    3c12:	80 93 83 19 	sts	0x1983, r24
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    3c16:	08 17       	cp	r16, r24
    3c18:	19 07       	cpc	r17, r25
    3c1a:	0c f4       	brge	.+2      	; 0x3c1e <handleMotorsWithNoController+0x284>
    3c1c:	da c0       	rjmp	.+436    	; 0x3dd2 <handleMotorsWithNoController+0x438>
    3c1e:	c0 91 85 19 	lds	r28, 0x1985
    3c22:	d0 91 86 19 	lds	r29, 0x1986
    3c26:	8c 01       	movw	r16, r24
    3c28:	00 0f       	add	r16, r16
    3c2a:	11 1f       	adc	r17, r17
    3c2c:	00 0f       	add	r16, r16
    3c2e:	11 1f       	adc	r17, r17
    3c30:	08 0f       	add	r16, r24
    3c32:	19 1f       	adc	r17, r25
    3c34:	d0 ce       	rjmp	.-608    	; 0x39d6 <handleMotorsWithNoController+0x3c>
		OCR3A = 0;
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	09 f0       	breq	.+2      	; 0x3c3c <handleMotorsWithNoController+0x2a2>
    3c3a:	7a c0       	rjmp	.+244    	; 0x3d30 <handleMotorsWithNoController+0x396>
		OCR4B =(unsigned int)( -pwm_left);
	} else {
		OCR4A = 0;
    3c3c:	10 92 a9 00 	sts	0x00A9, r1
    3c40:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    3c44:	10 92 ab 00 	sts	0x00AB, r1
    3c48:	10 92 aa 00 	sts	0x00AA, r1
    3c4c:	6b cf       	rjmp	.-298    	; 0x3b24 <handleMotorsWithNoController+0x18a>
	}

	pwm_right_working = pwm_intermediate_right_desired*BYTE_TO_MM_S;	// pwm in the range -635..635 (127*BYTE_TO_MM_S)
	pwm_left_working = pwm_intermediate_left_desired*BYTE_TO_MM_S;	
	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);		// out is in the range -MAX_MOTORS_PWM/2..MAX_MOTORS_PWM/2
    3c4e:	65 e7       	ldi	r22, 0x75	; 117
    3c50:	79 e1       	ldi	r23, 0x19	; 25
    3c52:	83 e7       	ldi	r24, 0x73	; 115
    3c54:	99 e1       	ldi	r25, 0x19	; 25
    3c56:	0e 94 c2 31 	call	0x6384	; 0x6384 <obstacleAvoidance>
    3c5a:	00 91 73 19 	lds	r16, 0x1973
    3c5e:	10 91 74 19 	lds	r17, 0x1974
    3c62:	80 91 75 19 	lds	r24, 0x1975
    3c66:	90 91 76 19 	lds	r25, 0x1976
    3c6a:	40 cf       	rjmp	.-384    	; 0x3aec <handleMotorsWithNoController+0x152>
	pwm_left = pwm_left_working;
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
    3c6c:	00 97       	sbiw	r24, 0x00	; 0
    3c6e:	09 f0       	breq	.+2      	; 0x3c72 <handleMotorsWithNoController+0x2d8>
    3c70:	3f c0       	rjmp	.+126    	; 0x3cf0 <handleMotorsWithNoController+0x356>
		OCR3B = (unsigned int)(-pwm_right);
	} else {
		OCR3A = 0;
    3c72:	10 92 99 00 	sts	0x0099, r1
    3c76:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    3c7a:	10 92 9b 00 	sts	0x009B, r1
    3c7e:	10 92 9a 00 	sts	0x009A, r1
    3c82:	44 cf       	rjmp	.-376    	; 0x3b0c <handleMotorsWithNoController+0x172>
		right_vel_sum = 0;

		if(pwm_right_desired >= 0) {
			rightMotSteps += (last_right_vel>>3);
		} else {
			rightMotSteps -= (last_right_vel>>3);
    3c84:	07 2e       	mov	r0, r23
    3c86:	00 0c       	add	r0, r0
    3c88:	88 0b       	sbc	r24, r24
    3c8a:	99 0b       	sbc	r25, r25
    3c8c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3c90:	9b 01       	movw	r18, r22
    3c92:	ac 01       	movw	r20, r24
    3c94:	60 91 a3 19 	lds	r22, 0x19A3
    3c98:	70 91 a4 19 	lds	r23, 0x19A4
    3c9c:	80 91 a5 19 	lds	r24, 0x19A5
    3ca0:	90 91 a6 19 	lds	r25, 0x19A6
    3ca4:	0e 94 58 56 	call	0xacb0	; 0xacb0 <__subsf3>
    3ca8:	60 93 a3 19 	sts	0x19A3, r22
    3cac:	70 93 a4 19 	sts	0x19A4, r23
    3cb0:	80 93 a5 19 	sts	0x19A5, r24
    3cb4:	90 93 a6 19 	sts	0x19A6, r25
    3cb8:	06 cf       	rjmp	.-500    	; 0x3ac6 <handleMotorsWithNoController+0x12c>
		left_vel_sum = 0;

		if(pwm_left_desired >= 0) {
			leftMotSteps += (last_left_vel>>3);
		} else {
			leftMotSteps -= (last_left_vel>>3);
    3cba:	07 2e       	mov	r0, r23
    3cbc:	00 0c       	add	r0, r0
    3cbe:	88 0b       	sbc	r24, r24
    3cc0:	99 0b       	sbc	r25, r25
    3cc2:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3cc6:	9b 01       	movw	r18, r22
    3cc8:	ac 01       	movw	r20, r24
    3cca:	60 91 9f 19 	lds	r22, 0x199F
    3cce:	70 91 a0 19 	lds	r23, 0x19A0
    3cd2:	80 91 a1 19 	lds	r24, 0x19A1
    3cd6:	90 91 a2 19 	lds	r25, 0x19A2
    3cda:	0e 94 58 56 	call	0xacb0	; 0xacb0 <__subsf3>
    3cde:	60 93 9f 19 	sts	0x199F, r22
    3ce2:	70 93 a0 19 	sts	0x19A0, r23
    3ce6:	80 93 a1 19 	sts	0x19A1, r24
    3cea:	90 93 a2 19 	sts	0x19A2, r25
    3cee:	af ce       	rjmp	.-674    	; 0x3a4e <handleMotorsWithNoController+0xb4>
	pwm_right = pwm_right_working;

	if(pwm_right > 0) {
		OCR3A = (unsigned int)pwm_right;
	} else if(pwm_right < 0) {
		OCR3B = (unsigned int)(-pwm_right);
    3cf0:	91 95       	neg	r25
    3cf2:	81 95       	neg	r24
    3cf4:	91 09       	sbc	r25, r1
    3cf6:	90 93 9b 00 	sts	0x009B, r25
    3cfa:	80 93 9a 00 	sts	0x009A, r24
    3cfe:	06 cf       	rjmp	.-500    	; 0x3b0c <handleMotorsWithNoController+0x172>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    3d00:	c0 91 89 19 	lds	r28, 0x1989
    3d04:	d0 91 8a 19 	lds	r29, 0x198A
    3d08:	d0 93 86 19 	sts	0x1986, r29
    3d0c:	c0 93 85 19 	sts	0x1985, r28
				pwm_intermediate_left_desired = pwm_left_desired;
    3d10:	80 91 87 19 	lds	r24, 0x1987
    3d14:	90 91 88 19 	lds	r25, 0x1988
    3d18:	90 93 84 19 	sts	0x1984, r25
    3d1c:	80 93 83 19 	sts	0x1983, r24
    3d20:	8c 01       	movw	r16, r24
    3d22:	00 0f       	add	r16, r16
    3d24:	11 1f       	adc	r17, r17
    3d26:	00 0f       	add	r16, r16
    3d28:	11 1f       	adc	r17, r17
    3d2a:	08 0f       	add	r16, r24
    3d2c:	19 1f       	adc	r17, r25
    3d2e:	53 ce       	rjmp	.-858    	; 0x39d6 <handleMotorsWithNoController+0x3c>
		OCR3B = 0;
	}
	if(pwm_left > 0) {
		OCR4A = (unsigned int)pwm_left;
	} else if(pwm_left < 0) {
		OCR4B =(unsigned int)( -pwm_left);
    3d30:	91 95       	neg	r25
    3d32:	81 95       	neg	r24
    3d34:	91 09       	sbc	r25, r1
    3d36:	90 93 ab 00 	sts	0x00AB, r25
    3d3a:	80 93 aa 00 	sts	0x00AA, r24
    3d3e:	f2 ce       	rjmp	.-540    	; 0x3b24 <handleMotorsWithNoController+0x18a>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    3d40:	c0 91 85 19 	lds	r28, 0x1985
    3d44:	d0 91 86 19 	lds	r29, 0x1986
    3d48:	8c 9f       	mul	r24, r28
    3d4a:	90 01       	movw	r18, r0
    3d4c:	8d 9f       	mul	r24, r29
    3d4e:	30 0d       	add	r19, r0
    3d50:	9c 9f       	mul	r25, r28
    3d52:	30 0d       	add	r19, r0
    3d54:	11 24       	eor	r1, r1
    3d56:	37 fd       	sbrc	r19, 7
    3d58:	37 cf       	rjmp	.-402    	; 0x3bc8 <handleMotorsWithNoController+0x22e>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    3d5a:	c8 17       	cp	r28, r24
    3d5c:	d9 07       	cpc	r29, r25
    3d5e:	4c f5       	brge	.+82     	; 0x3db2 <handleMotorsWithNoController+0x418>
					pwm_intermediate_right_desired += speedStep;
    3d60:	20 91 1e 03 	lds	r18, 0x031E
    3d64:	c2 0f       	add	r28, r18
    3d66:	d1 1d       	adc	r29, r1
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    3d68:	8c 17       	cp	r24, r28
    3d6a:	9d 07       	cpc	r25, r29
    3d6c:	6c f5       	brge	.+90     	; 0x3dc8 <handleMotorsWithNoController+0x42e>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    3d6e:	90 93 86 19 	sts	0x1986, r25
    3d72:	80 93 85 19 	sts	0x1985, r24
    3d76:	ec 01       	movw	r28, r24
    3d78:	2d cf       	rjmp	.-422    	; 0x3bd4 <handleMotorsWithNoController+0x23a>
					}					
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
    3d7a:	10 92 84 19 	sts	0x1984, r1
    3d7e:	10 92 83 19 	sts	0x1983, r1
    3d82:	29 ce       	rjmp	.-942    	; 0x39d6 <handleMotorsWithNoController+0x3c>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    3d84:	08 17       	cp	r16, r24
    3d86:	19 07       	cpc	r17, r25
    3d88:	5c f6       	brge	.-106    	; 0x3d20 <handleMotorsWithNoController+0x386>
					pwm_intermediate_left_desired -= speedStep;
    3d8a:	20 91 1e 03 	lds	r18, 0x031E
    3d8e:	82 1b       	sub	r24, r18
    3d90:	91 09       	sbc	r25, r1
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    3d92:	80 17       	cp	r24, r16
    3d94:	91 07       	cpc	r25, r17
    3d96:	0c f0       	brlt	.+2      	; 0x3d9a <handleMotorsWithNoController+0x400>
    3d98:	bf cf       	rjmp	.-130    	; 0x3d18 <handleMotorsWithNoController+0x37e>
						pwm_intermediate_left_desired = pwm_left_desired;
    3d9a:	10 93 84 19 	sts	0x1984, r17
    3d9e:	00 93 83 19 	sts	0x1983, r16
    3da2:	c8 01       	movw	r24, r16
    3da4:	88 0f       	add	r24, r24
    3da6:	99 1f       	adc	r25, r25
    3da8:	88 0f       	add	r24, r24
    3daa:	99 1f       	adc	r25, r25
    3dac:	08 0f       	add	r16, r24
    3dae:	19 1f       	adc	r17, r25
    3db0:	12 ce       	rjmp	.-988    	; 0x39d6 <handleMotorsWithNoController+0x3c>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    3db2:	8c 17       	cp	r24, r28
    3db4:	9d 07       	cpc	r25, r29
    3db6:	0c f0       	brlt	.+2      	; 0x3dba <handleMotorsWithNoController+0x420>
    3db8:	0d cf       	rjmp	.-486    	; 0x3bd4 <handleMotorsWithNoController+0x23a>
					pwm_intermediate_right_desired -= speedStep;
    3dba:	20 91 1e 03 	lds	r18, 0x031E
    3dbe:	c2 1b       	sub	r28, r18
    3dc0:	d1 09       	sbc	r29, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    3dc2:	c8 17       	cp	r28, r24
    3dc4:	d9 07       	cpc	r29, r25
    3dc6:	9c f2       	brlt	.-90     	; 0x3d6e <handleMotorsWithNoController+0x3d4>
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
    3dc8:	d0 93 86 19 	sts	0x1986, r29
    3dcc:	c0 93 85 19 	sts	0x1985, r28
    3dd0:	01 cf       	rjmp	.-510    	; 0x3bd4 <handleMotorsWithNoController+0x23a>
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
    3dd2:	10 93 84 19 	sts	0x1984, r17
    3dd6:	00 93 83 19 	sts	0x1983, r16
    3dda:	c0 91 85 19 	lds	r28, 0x1985
    3dde:	d0 91 86 19 	lds	r29, 0x1986
    3de2:	c8 01       	movw	r24, r16
    3de4:	88 0f       	add	r24, r24
    3de6:	99 1f       	adc	r25, r25
    3de8:	88 0f       	add	r24, r24
    3dea:	99 1f       	adc	r25, r25
    3dec:	08 0f       	add	r16, r24
    3dee:	19 1f       	adc	r17, r25
    3df0:	f2 cd       	rjmp	.-1052   	; 0x39d6 <handleMotorsWithNoController+0x3c>
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
					pwm_intermediate_left_desired = 0;
    3df2:	10 92 84 19 	sts	0x1984, r1
    3df6:	10 92 83 19 	sts	0x1983, r1
    3dfa:	00 e0       	ldi	r16, 0x00	; 0
    3dfc:	10 e0       	ldi	r17, 0x00	; 0
    3dfe:	eb cd       	rjmp	.-1066   	; 0x39d6 <handleMotorsWithNoController+0x3c>

00003e00 <setLeftSpeed>:
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3e00:	28 2f       	mov	r18, r24
    3e02:	08 2e       	mov	r0, r24
    3e04:	00 0c       	add	r0, r0
    3e06:	33 0b       	sbc	r19, r19
    3e08:	37 fd       	sbrc	r19, 7
    3e0a:	13 c0       	rjmp	.+38     	; 0x3e32 <setLeftSpeed+0x32>
    3e0c:	30 93 72 19 	sts	0x1972, r19
    3e10:	20 93 71 19 	sts	0x1971, r18

    if(vel >= 0) {
    3e14:	87 fd       	sbrc	r24, 7
    3e16:	05 c0       	rjmp	.+10     	; 0x3e22 <setLeftSpeed+0x22>
        pwm_left_desired = speedl;
    } else {
        pwm_left_desired = -(speedl);
    3e18:	30 93 88 19 	sts	0x1988, r19
    3e1c:	20 93 87 19 	sts	0x1987, r18
    3e20:	08 95       	ret
    3e22:	31 95       	neg	r19
    3e24:	21 95       	neg	r18
    3e26:	31 09       	sbc	r19, r1
    3e28:	30 93 88 19 	sts	0x1988, r19
    3e2c:	20 93 87 19 	sts	0x1987, r18
    3e30:	08 95       	ret
}

// vel expressed in 1/5 of mm/s
void setLeftSpeed(signed char vel) {

	speedl = abs(vel);
    3e32:	31 95       	neg	r19
    3e34:	21 95       	neg	r18
    3e36:	31 09       	sbc	r19, r1
    3e38:	e9 cf       	rjmp	.-46     	; 0x3e0c <setLeftSpeed+0xc>

00003e3a <setRightSpeed>:

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3e3a:	28 2f       	mov	r18, r24
    3e3c:	08 2e       	mov	r0, r24
    3e3e:	00 0c       	add	r0, r0
    3e40:	33 0b       	sbc	r19, r19
    3e42:	37 fd       	sbrc	r19, 7
    3e44:	13 c0       	rjmp	.+38     	; 0x3e6c <setRightSpeed+0x32>
    3e46:	30 93 70 19 	sts	0x1970, r19
    3e4a:	20 93 6f 19 	sts	0x196F, r18

    if(vel >= 0) {
    3e4e:	87 fd       	sbrc	r24, 7
    3e50:	05 c0       	rjmp	.+10     	; 0x3e5c <setRightSpeed+0x22>
        pwm_right_desired = speedr;
    } else {
        pwm_right_desired = -(speedr);
    3e52:	30 93 8a 19 	sts	0x198A, r19
    3e56:	20 93 89 19 	sts	0x1989, r18
    3e5a:	08 95       	ret
    3e5c:	31 95       	neg	r19
    3e5e:	21 95       	neg	r18
    3e60:	31 09       	sbc	r19, r1
    3e62:	30 93 8a 19 	sts	0x198A, r19
    3e66:	20 93 89 19 	sts	0x1989, r18
    3e6a:	08 95       	ret

}

void setRightSpeed(signed char vel) {

	speedr = abs(vel);
    3e6c:	31 95       	neg	r19
    3e6e:	21 95       	neg	r18
    3e70:	31 09       	sbc	r19, r1
    3e72:	e9 cf       	rjmp	.-46     	; 0x3e46 <setRightSpeed+0xc>

00003e74 <getInputFromSpeed>:

}

// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    3e74:	8f 92       	push	r8
    3e76:	9f 92       	push	r9
    3e78:	af 92       	push	r10
    3e7a:	bf 92       	push	r11
    3e7c:	cf 92       	push	r12
    3e7e:	df 92       	push	r13
    3e80:	ef 92       	push	r14
    3e82:	ff 92       	push	r15
    3e84:	0f 93       	push	r16
    3e86:	1f 93       	push	r17
    3e88:	cf 93       	push	r28
    3e8a:	df 93       	push	r29
    3e8c:	1f 92       	push	r1
    3e8e:	1f 92       	push	r1
    3e90:	cd b7       	in	r28, 0x3d	; 61
    3e92:	de b7       	in	r29, 0x3e	; 62
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    3e94:	9c 01       	movw	r18, r24
    3e96:	22 0f       	add	r18, r18
    3e98:	33 1f       	adc	r19, r19
    3e9a:	22 0f       	add	r18, r18
    3e9c:	33 1f       	adc	r19, r19
    3e9e:	82 0f       	add	r24, r18
    3ea0:	93 1f       	adc	r25, r19
    signed int temp = 0;

    if(currVel == 0) {
    3ea2:	00 97       	sbiw	r24, 0x00	; 0
    3ea4:	09 f4       	brne	.+2      	; 0x3ea8 <getInputFromSpeed+0x34>
    3ea6:	8c c0       	rjmp	.+280    	; 0x3fc0 <getInputFromSpeed+0x14c>
    3ea8:	41 e0       	ldi	r20, 0x01	; 1
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	2e ef       	ldi	r18, 0xFE	; 254
    3eae:	26 0f       	add	r18, r22
    3eb0:	22 30       	cpi	r18, 0x02	; 2
    3eb2:	08 f0       	brcs	.+2      	; 0x3eb6 <getInputFromSpeed+0x42>
    3eb4:	96 c0       	rjmp	.+300    	; 0x3fe2 <getInputFromSpeed+0x16e>
    3eb6:	26 2f       	mov	r18, r22
    3eb8:	66 27       	eor	r22, r22
    3eba:	77 27       	eor	r23, r23
    3ebc:	64 1b       	sub	r22, r20
    3ebe:	75 0b       	sbc	r23, r21
    3ec0:	86 27       	eor	r24, r22
    3ec2:	97 27       	eor	r25, r23
    3ec4:	84 0f       	add	r24, r20
    3ec6:	95 1f       	adc	r25, r21
    3ec8:	21 11       	cpse	r18, r1
    3eca:	72 c0       	rjmp	.+228    	; 0x3fb0 <getInputFromSpeed+0x13c>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    3ecc:	60 91 bc 20 	lds	r22, 0x20BC
    3ed0:	70 91 bd 20 	lds	r23, 0x20BD
    3ed4:	68 17       	cp	r22, r24
    3ed6:	79 07       	cpc	r23, r25
    3ed8:	0c f0       	brlt	.+2      	; 0x3edc <getInputFromSpeed+0x68>
    3eda:	fd c1       	rjmp	.+1018   	; 0x42d6 <getInputFromSpeed+0x462>
    3edc:	20 91 cc 20 	lds	r18, 0x20CC
    3ee0:	30 91 cd 20 	lds	r19, 0x20CD
    3ee4:	28 17       	cp	r18, r24
    3ee6:	39 07       	cpc	r19, r25
    3ee8:	0c f0       	brlt	.+2      	; 0x3eec <getInputFromSpeed+0x78>
    3eea:	ed c1       	rjmp	.+986    	; 0x42c6 <getInputFromSpeed+0x452>
    3eec:	20 91 dc 20 	lds	r18, 0x20DC
    3ef0:	30 91 dd 20 	lds	r19, 0x20DD
    3ef4:	28 17       	cp	r18, r24
    3ef6:	39 07       	cpc	r19, r25
    3ef8:	0c f0       	brlt	.+2      	; 0x3efc <getInputFromSpeed+0x88>
    3efa:	e9 c1       	rjmp	.+978    	; 0x42ce <getInputFromSpeed+0x45a>
    3efc:	20 91 ec 20 	lds	r18, 0x20EC
    3f00:	30 91 ed 20 	lds	r19, 0x20ED
    3f04:	28 17       	cp	r18, r24
    3f06:	39 07       	cpc	r19, r25
    3f08:	0c f0       	brlt	.+2      	; 0x3f0c <getInputFromSpeed+0x98>
    3f0a:	8d c1       	rjmp	.+794    	; 0x4226 <getInputFromSpeed+0x3b2>
    3f0c:	20 91 fc 20 	lds	r18, 0x20FC
    3f10:	30 91 fd 20 	lds	r19, 0x20FD
    3f14:	28 17       	cp	r18, r24
    3f16:	39 07       	cpc	r19, r25
    3f18:	0c f0       	brlt	.+2      	; 0x3f1c <getInputFromSpeed+0xa8>
    3f1a:	ed c1       	rjmp	.+986    	; 0x42f6 <getInputFromSpeed+0x482>
    3f1c:	20 91 0c 21 	lds	r18, 0x210C
    3f20:	30 91 0d 21 	lds	r19, 0x210D
    3f24:	28 17       	cp	r18, r24
    3f26:	39 07       	cpc	r19, r25
    3f28:	0c f0       	brlt	.+2      	; 0x3f2c <getInputFromSpeed+0xb8>
    3f2a:	e9 c1       	rjmp	.+978    	; 0x42fe <getInputFromSpeed+0x48a>
    3f2c:	20 91 1c 21 	lds	r18, 0x211C
    3f30:	30 91 1d 21 	lds	r19, 0x211D
    3f34:	28 17       	cp	r18, r24
    3f36:	39 07       	cpc	r19, r25
    3f38:	0c f0       	brlt	.+2      	; 0x3f3c <getInputFromSpeed+0xc8>
    3f3a:	e5 c1       	rjmp	.+970    	; 0x4306 <getInputFromSpeed+0x492>
    3f3c:	20 91 2c 21 	lds	r18, 0x212C
    3f40:	30 91 2d 21 	lds	r19, 0x212D
    3f44:	28 17       	cp	r18, r24
    3f46:	39 07       	cpc	r19, r25
    3f48:	0c f0       	brlt	.+2      	; 0x3f4c <getInputFromSpeed+0xd8>
    3f4a:	e1 c1       	rjmp	.+962    	; 0x430e <getInputFromSpeed+0x49a>
    3f4c:	00 91 3c 21 	lds	r16, 0x213C
    3f50:	10 91 3d 21 	lds	r17, 0x213D
    3f54:	08 17       	cp	r16, r24
    3f56:	19 07       	cpc	r17, r25
    3f58:	0c f0       	brlt	.+2      	; 0x3f5c <getInputFromSpeed+0xe8>
    3f5a:	dd c1       	rjmp	.+954    	; 0x4316 <getInputFromSpeed+0x4a2>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    3f5c:	bc 01       	movw	r22, r24
    3f5e:	99 0f       	add	r25, r25
    3f60:	88 0b       	sbc	r24, r24
    3f62:	99 0b       	sbc	r25, r25
    3f64:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3f68:	6b 01       	movw	r12, r22
    3f6a:	7c 01       	movw	r14, r24
    3f6c:	80 91 3a 21 	lds	r24, 0x213A
    3f70:	90 91 3b 21 	lds	r25, 0x213B
    3f74:	bc 01       	movw	r22, r24
    3f76:	99 0f       	add	r25, r25
    3f78:	88 0b       	sbc	r24, r24
    3f7a:	99 0b       	sbc	r25, r25
    3f7c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3f80:	9b 01       	movw	r18, r22
    3f82:	ac 01       	movw	r20, r24
    3f84:	c7 01       	movw	r24, r14
    3f86:	b6 01       	movw	r22, r12
    3f88:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    3f8c:	6b 01       	movw	r12, r22
    3f8e:	7c 01       	movw	r14, r24
    3f90:	b8 01       	movw	r22, r16
    3f92:	11 0f       	add	r17, r17
    3f94:	88 0b       	sbc	r24, r24
    3f96:	99 0b       	sbc	r25, r25
    3f98:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    3f9c:	9b 01       	movw	r18, r22
    3f9e:	ac 01       	movw	r20, r24
    3fa0:	c7 01       	movw	r24, r14
    3fa2:	b6 01       	movw	r22, r12
    3fa4:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    3fa8:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    3fac:	cb 01       	movw	r24, r22
    3fae:	0a c0       	rjmp	.+20     	; 0x3fc4 <getInputFromSpeed+0x150>
    3fb0:	23 30       	cpi	r18, 0x03	; 3
    3fb2:	09 f4       	brne	.+2      	; 0x3fb6 <getInputFromSpeed+0x142>
    3fb4:	e3 c0       	rjmp	.+454    	; 0x417c <getInputFromSpeed+0x308>
    3fb6:	22 30       	cpi	r18, 0x02	; 2
    3fb8:	b9 f0       	breq	.+46     	; 0x3fe8 <getInputFromSpeed+0x174>
    3fba:	21 30       	cpi	r18, 0x01	; 1
    3fbc:	09 f4       	brne	.+2      	; 0x3fc0 <getInputFromSpeed+0x14c>
    3fbe:	89 c0       	rjmp	.+274    	; 0x40d2 <getInputFromSpeed+0x25e>
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;

    if(currVel == 0) {
        return 0;
    3fc0:	80 e0       	ldi	r24, 0x00	; 0
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
            temp = -temp;
        }        
    }
    
    return temp;
}
    3fc4:	0f 90       	pop	r0
    3fc6:	0f 90       	pop	r0
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	ff 90       	pop	r15
    3fd2:	ef 90       	pop	r14
    3fd4:	df 90       	pop	r13
    3fd6:	cf 90       	pop	r12
    3fd8:	bf 90       	pop	r11
    3fda:	af 90       	pop	r10
    3fdc:	9f 90       	pop	r9
    3fde:	8f 90       	pop	r8
    3fe0:	08 95       	ret
    3fe2:	40 e0       	ldi	r20, 0x00	; 0
    3fe4:	50 e0       	ldi	r21, 0x00	; 0
    3fe6:	67 cf       	rjmp	.-306    	; 0x3eb6 <getInputFromSpeed+0x42>
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
                break;
            }
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
    3fe8:	60 91 c4 20 	lds	r22, 0x20C4
    3fec:	70 91 c5 20 	lds	r23, 0x20C5
    3ff0:	68 17       	cp	r22, r24
    3ff2:	79 07       	cpc	r23, r25
    3ff4:	0c f0       	brlt	.+2      	; 0x3ff8 <getInputFromSpeed+0x184>
    3ff6:	a3 c1       	rjmp	.+838    	; 0x433e <getInputFromSpeed+0x4ca>
    3ff8:	20 91 d4 20 	lds	r18, 0x20D4
    3ffc:	30 91 d5 20 	lds	r19, 0x20D5
    4000:	28 17       	cp	r18, r24
    4002:	39 07       	cpc	r19, r25
    4004:	0c f0       	brlt	.+2      	; 0x4008 <getInputFromSpeed+0x194>
    4006:	ae c1       	rjmp	.+860    	; 0x4364 <getInputFromSpeed+0x4f0>
    4008:	20 91 e4 20 	lds	r18, 0x20E4
    400c:	30 91 e5 20 	lds	r19, 0x20E5
    4010:	28 17       	cp	r18, r24
    4012:	39 07       	cpc	r19, r25
    4014:	0c f0       	brlt	.+2      	; 0x4018 <getInputFromSpeed+0x1a4>
    4016:	d8 c2       	rjmp	.+1456   	; 0x45c8 <getInputFromSpeed+0x754>
    4018:	20 91 f4 20 	lds	r18, 0x20F4
    401c:	30 91 f5 20 	lds	r19, 0x20F5
    4020:	28 17       	cp	r18, r24
    4022:	39 07       	cpc	r19, r25
    4024:	0c f0       	brlt	.+2      	; 0x4028 <getInputFromSpeed+0x1b4>
    4026:	cc c2       	rjmp	.+1432   	; 0x45c0 <getInputFromSpeed+0x74c>
    4028:	20 91 04 21 	lds	r18, 0x2104
    402c:	30 91 05 21 	lds	r19, 0x2105
    4030:	28 17       	cp	r18, r24
    4032:	39 07       	cpc	r19, r25
    4034:	0c f0       	brlt	.+2      	; 0x4038 <getInputFromSpeed+0x1c4>
    4036:	c0 c2       	rjmp	.+1408   	; 0x45b8 <getInputFromSpeed+0x744>
    4038:	20 91 14 21 	lds	r18, 0x2114
    403c:	30 91 15 21 	lds	r19, 0x2115
    4040:	28 17       	cp	r18, r24
    4042:	39 07       	cpc	r19, r25
    4044:	0c f0       	brlt	.+2      	; 0x4048 <getInputFromSpeed+0x1d4>
    4046:	b4 c2       	rjmp	.+1384   	; 0x45b0 <getInputFromSpeed+0x73c>
    4048:	20 91 24 21 	lds	r18, 0x2124
    404c:	30 91 25 21 	lds	r19, 0x2125
    4050:	28 17       	cp	r18, r24
    4052:	39 07       	cpc	r19, r25
    4054:	0c f0       	brlt	.+2      	; 0x4058 <getInputFromSpeed+0x1e4>
    4056:	a8 c2       	rjmp	.+1360   	; 0x45a8 <getInputFromSpeed+0x734>
    4058:	20 91 34 21 	lds	r18, 0x2134
    405c:	30 91 35 21 	lds	r19, 0x2135
    4060:	28 17       	cp	r18, r24
    4062:	39 07       	cpc	r19, r25
    4064:	0c f0       	brlt	.+2      	; 0x4068 <getInputFromSpeed+0x1f4>
    4066:	b7 c2       	rjmp	.+1390   	; 0x45d6 <getInputFromSpeed+0x762>
    4068:	00 91 44 21 	lds	r16, 0x2144
    406c:	10 91 45 21 	lds	r17, 0x2145
    4070:	08 17       	cp	r16, r24
    4072:	19 07       	cpc	r17, r25
    4074:	0c f0       	brlt	.+2      	; 0x4078 <getInputFromSpeed+0x204>
    4076:	b3 c2       	rjmp	.+1382   	; 0x45de <getInputFromSpeed+0x76a>
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
    4078:	bc 01       	movw	r22, r24
    407a:	99 0f       	add	r25, r25
    407c:	88 0b       	sbc	r24, r24
    407e:	99 0b       	sbc	r25, r25
    4080:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4084:	6b 01       	movw	r12, r22
    4086:	7c 01       	movw	r14, r24
    4088:	80 91 42 21 	lds	r24, 0x2142
    408c:	90 91 43 21 	lds	r25, 0x2143
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    4090:	bc 01       	movw	r22, r24
    4092:	99 0f       	add	r25, r25
    4094:	88 0b       	sbc	r24, r24
    4096:	99 0b       	sbc	r25, r25
    4098:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    409c:	9b 01       	movw	r18, r22
    409e:	ac 01       	movw	r20, r24
    40a0:	c7 01       	movw	r24, r14
    40a2:	b6 01       	movw	r22, r12
    40a4:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    40a8:	6b 01       	movw	r12, r22
    40aa:	7c 01       	movw	r14, r24
    40ac:	b8 01       	movw	r22, r16
    40ae:	11 0f       	add	r17, r17
    40b0:	88 0b       	sbc	r24, r24
    40b2:	99 0b       	sbc	r25, r25
    40b4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    40b8:	9b 01       	movw	r18, r22
    40ba:	ac 01       	movw	r20, r24
    40bc:	c7 01       	movw	r24, r14
    40be:	b6 01       	movw	r22, r12
    40c0:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    40c4:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
            temp = -temp;
    40c8:	88 27       	eor	r24, r24
    40ca:	99 27       	eor	r25, r25
    40cc:	86 1b       	sub	r24, r22
    40ce:	97 0b       	sbc	r25, r23
    40d0:	79 cf       	rjmp	.-270    	; 0x3fc4 <getInputFromSpeed+0x150>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    40d2:	60 91 c0 20 	lds	r22, 0x20C0
    40d6:	70 91 c1 20 	lds	r23, 0x20C1
    40da:	68 17       	cp	r22, r24
    40dc:	79 07       	cpc	r23, r25
    40de:	0c f0       	brlt	.+2      	; 0x40e2 <getInputFromSpeed+0x26e>
    40e0:	1e c1       	rjmp	.+572    	; 0x431e <getInputFromSpeed+0x4aa>
    40e2:	20 91 d0 20 	lds	r18, 0x20D0
    40e6:	30 91 d1 20 	lds	r19, 0x20D1
    40ea:	28 17       	cp	r18, r24
    40ec:	39 07       	cpc	r19, r25
    40ee:	0c f0       	brlt	.+2      	; 0x40f2 <getInputFromSpeed+0x27e>
    40f0:	06 c2       	rjmp	.+1036   	; 0x44fe <getInputFromSpeed+0x68a>
    40f2:	20 91 e0 20 	lds	r18, 0x20E0
    40f6:	30 91 e1 20 	lds	r19, 0x20E1
    40fa:	28 17       	cp	r18, r24
    40fc:	39 07       	cpc	r19, r25
    40fe:	0c f0       	brlt	.+2      	; 0x4102 <getInputFromSpeed+0x28e>
    4100:	3f c2       	rjmp	.+1150   	; 0x4580 <getInputFromSpeed+0x70c>
    4102:	20 91 f0 20 	lds	r18, 0x20F0
    4106:	30 91 f1 20 	lds	r19, 0x20F1
    410a:	28 17       	cp	r18, r24
    410c:	39 07       	cpc	r19, r25
    410e:	0c f0       	brlt	.+2      	; 0x4112 <getInputFromSpeed+0x29e>
    4110:	33 c2       	rjmp	.+1126   	; 0x4578 <getInputFromSpeed+0x704>
    4112:	20 91 00 21 	lds	r18, 0x2100
    4116:	30 91 01 21 	lds	r19, 0x2101
    411a:	28 17       	cp	r18, r24
    411c:	39 07       	cpc	r19, r25
    411e:	0c f0       	brlt	.+2      	; 0x4122 <getInputFromSpeed+0x2ae>
    4120:	3f c2       	rjmp	.+1150   	; 0x45a0 <getInputFromSpeed+0x72c>
    4122:	20 91 10 21 	lds	r18, 0x2110
    4126:	30 91 11 21 	lds	r19, 0x2111
    412a:	28 17       	cp	r18, r24
    412c:	39 07       	cpc	r19, r25
    412e:	0c f0       	brlt	.+2      	; 0x4132 <getInputFromSpeed+0x2be>
    4130:	33 c2       	rjmp	.+1126   	; 0x4598 <getInputFromSpeed+0x724>
    4132:	20 91 20 21 	lds	r18, 0x2120
    4136:	30 91 21 21 	lds	r19, 0x2121
    413a:	28 17       	cp	r18, r24
    413c:	39 07       	cpc	r19, r25
    413e:	0c f0       	brlt	.+2      	; 0x4142 <getInputFromSpeed+0x2ce>
    4140:	27 c2       	rjmp	.+1102   	; 0x4590 <getInputFromSpeed+0x71c>
    4142:	20 91 30 21 	lds	r18, 0x2130
    4146:	30 91 31 21 	lds	r19, 0x2131
    414a:	28 17       	cp	r18, r24
    414c:	39 07       	cpc	r19, r25
    414e:	0c f0       	brlt	.+2      	; 0x4152 <getInputFromSpeed+0x2de>
    4150:	1b c2       	rjmp	.+1078   	; 0x4588 <getInputFromSpeed+0x714>
    4152:	00 91 40 21 	lds	r16, 0x2140
    4156:	10 91 41 21 	lds	r17, 0x2141
    415a:	08 17       	cp	r16, r24
    415c:	19 07       	cpc	r17, r25
    415e:	0c f0       	brlt	.+2      	; 0x4162 <getInputFromSpeed+0x2ee>
    4160:	42 c2       	rjmp	.+1156   	; 0x45e6 <getInputFromSpeed+0x772>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    4162:	bc 01       	movw	r22, r24
    4164:	99 0f       	add	r25, r25
    4166:	88 0b       	sbc	r24, r24
    4168:	99 0b       	sbc	r25, r25
    416a:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    416e:	6b 01       	movw	r12, r22
    4170:	7c 01       	movw	r14, r24
    4172:	80 91 3e 21 	lds	r24, 0x213E
    4176:	90 91 3f 21 	lds	r25, 0x213F
    417a:	fc ce       	rjmp	.-520    	; 0x3f74 <getInputFromSpeed+0x100>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            if(calibration[i][5] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            if(calibration[i][7] >= currVel) {
    417c:	60 91 c8 20 	lds	r22, 0x20C8
    4180:	70 91 c9 20 	lds	r23, 0x20C9
    4184:	68 17       	cp	r22, r24
    4186:	79 07       	cpc	r23, r25
    4188:	0c f0       	brlt	.+2      	; 0x418c <getInputFromSpeed+0x318>
    418a:	a6 c1       	rjmp	.+844    	; 0x44d8 <getInputFromSpeed+0x664>
    418c:	20 91 d8 20 	lds	r18, 0x20D8
    4190:	30 91 d9 20 	lds	r19, 0x20D9
    4194:	28 17       	cp	r18, r24
    4196:	39 07       	cpc	r19, r25
    4198:	0c f0       	brlt	.+2      	; 0x419c <getInputFromSpeed+0x328>
    419a:	9b c1       	rjmp	.+822    	; 0x44d2 <getInputFromSpeed+0x65e>
    419c:	20 91 e8 20 	lds	r18, 0x20E8
    41a0:	30 91 e9 20 	lds	r19, 0x20E9
    41a4:	28 17       	cp	r18, r24
    41a6:	39 07       	cpc	r19, r25
    41a8:	0c f0       	brlt	.+2      	; 0x41ac <getInputFromSpeed+0x338>
    41aa:	90 c1       	rjmp	.+800    	; 0x44cc <getInputFromSpeed+0x658>
    41ac:	20 91 f8 20 	lds	r18, 0x20F8
    41b0:	30 91 f9 20 	lds	r19, 0x20F9
    41b4:	28 17       	cp	r18, r24
    41b6:	39 07       	cpc	r19, r25
    41b8:	0c f0       	brlt	.+2      	; 0x41bc <getInputFromSpeed+0x348>
    41ba:	85 c1       	rjmp	.+778    	; 0x44c6 <getInputFromSpeed+0x652>
    41bc:	20 91 08 21 	lds	r18, 0x2108
    41c0:	30 91 09 21 	lds	r19, 0x2109
    41c4:	28 17       	cp	r18, r24
    41c6:	39 07       	cpc	r19, r25
    41c8:	0c f0       	brlt	.+2      	; 0x41cc <getInputFromSpeed+0x358>
    41ca:	7a c1       	rjmp	.+756    	; 0x44c0 <getInputFromSpeed+0x64c>
    41cc:	20 91 18 21 	lds	r18, 0x2118
    41d0:	30 91 19 21 	lds	r19, 0x2119
    41d4:	28 17       	cp	r18, r24
    41d6:	39 07       	cpc	r19, r25
    41d8:	0c f0       	brlt	.+2      	; 0x41dc <getInputFromSpeed+0x368>
    41da:	6f c1       	rjmp	.+734    	; 0x44ba <getInputFromSpeed+0x646>
    41dc:	20 91 28 21 	lds	r18, 0x2128
    41e0:	30 91 29 21 	lds	r19, 0x2129
    41e4:	28 17       	cp	r18, r24
    41e6:	39 07       	cpc	r19, r25
    41e8:	0c f0       	brlt	.+2      	; 0x41ec <getInputFromSpeed+0x378>
    41ea:	64 c1       	rjmp	.+712    	; 0x44b4 <getInputFromSpeed+0x640>
    41ec:	20 91 38 21 	lds	r18, 0x2138
    41f0:	30 91 39 21 	lds	r19, 0x2139
    41f4:	28 17       	cp	r18, r24
    41f6:	39 07       	cpc	r19, r25
    41f8:	0c f0       	brlt	.+2      	; 0x41fc <getInputFromSpeed+0x388>
    41fa:	07 c1       	rjmp	.+526    	; 0x440a <getInputFromSpeed+0x596>
    41fc:	00 91 48 21 	lds	r16, 0x2148
    4200:	10 91 49 21 	lds	r17, 0x2149
    4204:	08 17       	cp	r16, r24
    4206:	19 07       	cpc	r17, r25
    4208:	0c f0       	brlt	.+2      	; 0x420c <getInputFromSpeed+0x398>
    420a:	e2 c1       	rjmp	.+964    	; 0x45d0 <getInputFromSpeed+0x75c>
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][4]/(float)calibration[CALIBRATION_SAMPLES-1][5]);
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
    420c:	bc 01       	movw	r22, r24
    420e:	99 0f       	add	r25, r25
    4210:	88 0b       	sbc	r24, r24
    4212:	99 0b       	sbc	r25, r25
    4214:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4218:	6b 01       	movw	r12, r22
    421a:	7c 01       	movw	r14, r24
    421c:	80 91 46 21 	lds	r24, 0x2146
    4220:	90 91 47 21 	lds	r25, 0x2147
    4224:	35 cf       	rjmp	.-406    	; 0x4090 <getInputFromSpeed+0x21c>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4226:	53 e0       	ldi	r21, 0x03	; 3
    4228:	c5 2e       	mov	r12, r21
    422a:	d1 2c       	mov	r13, r1
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    422c:	f6 01       	movw	r30, r12
    422e:	e2 95       	swap	r30
    4230:	f2 95       	swap	r31
    4232:	f0 7f       	andi	r31, 0xF0	; 240
    4234:	fe 27       	eor	r31, r30
    4236:	e0 7f       	andi	r30, 0xF0	; 240
    4238:	fe 27       	eor	r31, r30
    423a:	e6 55       	subi	r30, 0x56	; 86
    423c:	ff 4d       	sbci	r31, 0xDF	; 223
    423e:	e2 80       	ldd	r14, Z+2	; 0x02
    4240:	f3 80       	ldd	r15, Z+3	; 0x03
    4242:	00 81       	ld	r16, Z
    4244:	11 81       	ldd	r17, Z+1	; 0x01
    4246:	bc 01       	movw	r22, r24
    4248:	6e 19       	sub	r22, r14
    424a:	7f 09       	sbc	r23, r15
    424c:	07 2e       	mov	r0, r23
    424e:	00 0c       	add	r0, r0
    4250:	88 0b       	sbc	r24, r24
    4252:	99 0b       	sbc	r25, r25
    4254:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4258:	4b 01       	movw	r8, r22
    425a:	5c 01       	movw	r10, r24
    425c:	c2 94       	swap	r12
    425e:	d2 94       	swap	r13
    4260:	b0 ef       	ldi	r27, 0xF0	; 240
    4262:	db 22       	and	r13, r27
    4264:	dc 24       	eor	r13, r12
    4266:	cb 22       	and	r12, r27
    4268:	dc 24       	eor	r13, r12
    426a:	c6 01       	movw	r24, r12
    426c:	86 54       	subi	r24, 0x46	; 70
    426e:	9f 4d       	sbci	r25, 0xDF	; 223
    4270:	6c 01       	movw	r12, r24
    4272:	fc 01       	movw	r30, r24
    4274:	80 81       	ld	r24, Z
    4276:	91 81       	ldd	r25, Z+1	; 0x01
    4278:	80 1b       	sub	r24, r16
    427a:	91 0b       	sbc	r25, r17
    427c:	bc 01       	movw	r22, r24
    427e:	99 0f       	add	r25, r25
    4280:	88 0b       	sbc	r24, r24
    4282:	99 0b       	sbc	r25, r25
    4284:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4288:	9b 01       	movw	r18, r22
    428a:	ac 01       	movw	r20, r24
    428c:	c5 01       	movw	r24, r10
    428e:	b4 01       	movw	r22, r8
    4290:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    4294:	4b 01       	movw	r8, r22
    4296:	5c 01       	movw	r10, r24
    4298:	f6 01       	movw	r30, r12
    429a:	82 81       	ldd	r24, Z+2	; 0x02
    429c:	93 81       	ldd	r25, Z+3	; 0x03
    429e:	8e 19       	sub	r24, r14
    42a0:	9f 09       	sbc	r25, r15
    42a2:	bc 01       	movw	r22, r24
    42a4:	99 0f       	add	r25, r25
    42a6:	88 0b       	sbc	r24, r24
    42a8:	99 0b       	sbc	r25, r25
    42aa:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    42ae:	9b 01       	movw	r18, r22
    42b0:	ac 01       	movw	r20, r24
    42b2:	c5 01       	movw	r24, r10
    42b4:	b4 01       	movw	r22, r8
    42b6:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    42ba:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    42be:	c8 01       	movw	r24, r16
    42c0:	86 0f       	add	r24, r22
    42c2:	97 1f       	adc	r25, r23
    42c4:	7f ce       	rjmp	.-770    	; 0x3fc4 <getInputFromSpeed+0x150>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    42c6:	cc 24       	eor	r12, r12
    42c8:	c3 94       	inc	r12
    42ca:	d1 2c       	mov	r13, r1
    42cc:	af cf       	rjmp	.-162    	; 0x422c <getInputFromSpeed+0x3b8>
    42ce:	62 e0       	ldi	r22, 0x02	; 2
    42d0:	c6 2e       	mov	r12, r22
    42d2:	d1 2c       	mov	r13, r1
    42d4:	ab cf       	rjmp	.-170    	; 0x422c <getInputFromSpeed+0x3b8>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    42d6:	40 91 ba 20 	lds	r20, 0x20BA
    42da:	50 91 bb 20 	lds	r21, 0x20BB
    42de:	84 9f       	mul	r24, r20
    42e0:	90 01       	movw	r18, r0
    42e2:	85 9f       	mul	r24, r21
    42e4:	30 0d       	add	r19, r0
    42e6:	94 9f       	mul	r25, r20
    42e8:	30 0d       	add	r19, r0
    42ea:	11 24       	eor	r1, r1
    42ec:	c9 01       	movw	r24, r18
    42ee:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    42f2:	cb 01       	movw	r24, r22
    42f4:	67 ce       	rjmp	.-818    	; 0x3fc4 <getInputFromSpeed+0x150>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    42f6:	44 e0       	ldi	r20, 0x04	; 4
    42f8:	c4 2e       	mov	r12, r20
    42fa:	d1 2c       	mov	r13, r1
    42fc:	97 cf       	rjmp	.-210    	; 0x422c <getInputFromSpeed+0x3b8>
    42fe:	35 e0       	ldi	r19, 0x05	; 5
    4300:	c3 2e       	mov	r12, r19
    4302:	d1 2c       	mov	r13, r1
    4304:	93 cf       	rjmp	.-218    	; 0x422c <getInputFromSpeed+0x3b8>
    4306:	26 e0       	ldi	r18, 0x06	; 6
    4308:	c2 2e       	mov	r12, r18
    430a:	d1 2c       	mov	r13, r1
    430c:	8f cf       	rjmp	.-226    	; 0x422c <getInputFromSpeed+0x3b8>
    430e:	07 e0       	ldi	r16, 0x07	; 7
    4310:	c0 2e       	mov	r12, r16
    4312:	d1 2c       	mov	r13, r1
    4314:	8b cf       	rjmp	.-234    	; 0x422c <getInputFromSpeed+0x3b8>
    4316:	18 e0       	ldi	r17, 0x08	; 8
    4318:	c1 2e       	mov	r12, r17
    431a:	d1 2c       	mov	r13, r1
    431c:	87 cf       	rjmp	.-242    	; 0x422c <getInputFromSpeed+0x3b8>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    431e:	40 91 be 20 	lds	r20, 0x20BE
    4322:	50 91 bf 20 	lds	r21, 0x20BF
    4326:	84 9f       	mul	r24, r20
    4328:	90 01       	movw	r18, r0
    432a:	85 9f       	mul	r24, r21
    432c:	30 0d       	add	r19, r0
    432e:	94 9f       	mul	r25, r20
    4330:	30 0d       	add	r19, r0
    4332:	11 24       	eor	r1, r1
    4334:	c9 01       	movw	r24, r18
    4336:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    433a:	cb 01       	movw	r24, r22
    433c:	43 ce       	rjmp	.-890    	; 0x3fc4 <getInputFromSpeed+0x150>
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
    433e:	40 91 c2 20 	lds	r20, 0x20C2
    4342:	50 91 c3 20 	lds	r21, 0x20C3
    4346:	84 9f       	mul	r24, r20
    4348:	90 01       	movw	r18, r0
    434a:	85 9f       	mul	r24, r21
    434c:	30 0d       	add	r19, r0
    434e:	94 9f       	mul	r25, r20
    4350:	30 0d       	add	r19, r0
    4352:	11 24       	eor	r1, r1
    4354:	c9 01       	movw	r24, r18
    4356:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
            temp = -temp;
    435a:	88 27       	eor	r24, r24
    435c:	99 27       	eor	r25, r25
    435e:	86 1b       	sub	r24, r22
    4360:	97 0b       	sbc	r25, r23
    4362:	30 ce       	rjmp	.-928    	; 0x3fc4 <getInputFromSpeed+0x150>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4364:	cc 24       	eor	r12, r12
    4366:	c3 94       	inc	r12
    4368:	d1 2c       	mov	r13, r1
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
    436a:	f6 01       	movw	r30, r12
    436c:	e2 95       	swap	r30
    436e:	f2 95       	swap	r31
    4370:	f0 7f       	andi	r31, 0xF0	; 240
    4372:	fe 27       	eor	r31, r30
    4374:	e0 7f       	andi	r30, 0xF0	; 240
    4376:	fe 27       	eor	r31, r30
    4378:	e6 55       	subi	r30, 0x56	; 86
    437a:	ff 4d       	sbci	r31, 0xDF	; 223
    437c:	e2 84       	ldd	r14, Z+10	; 0x0a
    437e:	f3 84       	ldd	r15, Z+11	; 0x0b
    4380:	00 85       	ldd	r16, Z+8	; 0x08
    4382:	11 85       	ldd	r17, Z+9	; 0x09
    4384:	bc 01       	movw	r22, r24
    4386:	6e 19       	sub	r22, r14
    4388:	7f 09       	sbc	r23, r15
    438a:	07 2e       	mov	r0, r23
    438c:	00 0c       	add	r0, r0
    438e:	88 0b       	sbc	r24, r24
    4390:	99 0b       	sbc	r25, r25
    4392:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4396:	4b 01       	movw	r8, r22
    4398:	5c 01       	movw	r10, r24
    439a:	c2 94       	swap	r12
    439c:	d2 94       	swap	r13
    439e:	b0 ef       	ldi	r27, 0xF0	; 240
    43a0:	db 22       	and	r13, r27
    43a2:	dc 24       	eor	r13, r12
    43a4:	cb 22       	and	r12, r27
    43a6:	dc 24       	eor	r13, r12
    43a8:	c6 01       	movw	r24, r12
    43aa:	86 54       	subi	r24, 0x46	; 70
    43ac:	9f 4d       	sbci	r25, 0xDF	; 223
    43ae:	6c 01       	movw	r12, r24
    43b0:	fc 01       	movw	r30, r24
    43b2:	60 85       	ldd	r22, Z+8	; 0x08
    43b4:	71 85       	ldd	r23, Z+9	; 0x09
    43b6:	60 1b       	sub	r22, r16
    43b8:	71 0b       	sbc	r23, r17
    43ba:	07 2e       	mov	r0, r23
    43bc:	00 0c       	add	r0, r0
    43be:	88 0b       	sbc	r24, r24
    43c0:	99 0b       	sbc	r25, r25
    43c2:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    43c6:	9b 01       	movw	r18, r22
    43c8:	ac 01       	movw	r20, r24
    43ca:	c5 01       	movw	r24, r10
    43cc:	b4 01       	movw	r22, r8
    43ce:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    43d2:	4b 01       	movw	r8, r22
    43d4:	5c 01       	movw	r10, r24
    43d6:	f6 01       	movw	r30, r12
    43d8:	82 85       	ldd	r24, Z+10	; 0x0a
    43da:	93 85       	ldd	r25, Z+11	; 0x0b
    43dc:	8e 19       	sub	r24, r14
    43de:	9f 09       	sbc	r25, r15
    43e0:	bc 01       	movw	r22, r24
    43e2:	99 0f       	add	r25, r25
    43e4:	88 0b       	sbc	r24, r24
    43e6:	99 0b       	sbc	r25, r25
    43e8:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    43ec:	9b 01       	movw	r18, r22
    43ee:	ac 01       	movw	r20, r24
    43f0:	c5 01       	movw	r24, r10
    43f2:	b4 01       	movw	r22, r8
    43f4:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    43f8:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    43fc:	60 0f       	add	r22, r16
    43fe:	71 1f       	adc	r23, r17
            temp = -temp;
    4400:	88 27       	eor	r24, r24
    4402:	99 27       	eor	r25, r25
    4404:	86 1b       	sub	r24, r22
    4406:	97 0b       	sbc	r25, r23
    4408:	dd cd       	rjmp	.-1094   	; 0x3fc4 <getInputFromSpeed+0x150>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    440a:	27 e0       	ldi	r18, 0x07	; 7
    440c:	30 e0       	ldi	r19, 0x00	; 0
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = calibration[i-1][4] + (signed int)(((float)(currVel-calibration[i-1][5])*(float)(calibration[i][4]-calibration[i-1][4]))/(float)(calibration[i][5]-calibration[i-1][5]));
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = calibration[i-1][6] + (signed int)(((float)(currVel-calibration[i-1][7])*(float)(calibration[i][6]-calibration[i-1][6]))/(float)(calibration[i][7]-calibration[i-1][7]));
    440e:	f9 01       	movw	r30, r18
    4410:	e2 95       	swap	r30
    4412:	f2 95       	swap	r31
    4414:	f0 7f       	andi	r31, 0xF0	; 240
    4416:	fe 27       	eor	r31, r30
    4418:	e0 7f       	andi	r30, 0xF0	; 240
    441a:	fe 27       	eor	r31, r30
    441c:	e6 55       	subi	r30, 0x56	; 86
    441e:	ff 4d       	sbci	r31, 0xDF	; 223
    4420:	06 85       	ldd	r16, Z+14	; 0x0e
    4422:	17 85       	ldd	r17, Z+15	; 0x0f
    4424:	c4 84       	ldd	r12, Z+12	; 0x0c
    4426:	d5 84       	ldd	r13, Z+13	; 0x0d
    4428:	bc 01       	movw	r22, r24
    442a:	60 1b       	sub	r22, r16
    442c:	71 0b       	sbc	r23, r17
    442e:	07 2e       	mov	r0, r23
    4430:	00 0c       	add	r0, r0
    4432:	88 0b       	sbc	r24, r24
    4434:	99 0b       	sbc	r25, r25
    4436:	29 83       	std	Y+1, r18	; 0x01
    4438:	3a 83       	std	Y+2, r19	; 0x02
    443a:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    443e:	4b 01       	movw	r8, r22
    4440:	5c 01       	movw	r10, r24
    4442:	29 81       	ldd	r18, Y+1	; 0x01
    4444:	3a 81       	ldd	r19, Y+2	; 0x02
    4446:	22 95       	swap	r18
    4448:	32 95       	swap	r19
    444a:	30 7f       	andi	r19, 0xF0	; 240
    444c:	32 27       	eor	r19, r18
    444e:	20 7f       	andi	r18, 0xF0	; 240
    4450:	32 27       	eor	r19, r18
    4452:	c9 01       	movw	r24, r18
    4454:	86 54       	subi	r24, 0x46	; 70
    4456:	9f 4d       	sbci	r25, 0xDF	; 223
    4458:	7c 01       	movw	r14, r24
    445a:	fc 01       	movw	r30, r24
    445c:	64 85       	ldd	r22, Z+12	; 0x0c
    445e:	75 85       	ldd	r23, Z+13	; 0x0d
    4460:	6c 19       	sub	r22, r12
    4462:	7d 09       	sbc	r23, r13
    4464:	07 2e       	mov	r0, r23
    4466:	00 0c       	add	r0, r0
    4468:	88 0b       	sbc	r24, r24
    446a:	99 0b       	sbc	r25, r25
    446c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4470:	9b 01       	movw	r18, r22
    4472:	ac 01       	movw	r20, r24
    4474:	c5 01       	movw	r24, r10
    4476:	b4 01       	movw	r22, r8
    4478:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    447c:	4b 01       	movw	r8, r22
    447e:	5c 01       	movw	r10, r24
    4480:	f7 01       	movw	r30, r14
    4482:	86 85       	ldd	r24, Z+14	; 0x0e
    4484:	97 85       	ldd	r25, Z+15	; 0x0f
    4486:	80 1b       	sub	r24, r16
    4488:	91 0b       	sbc	r25, r17
    448a:	bc 01       	movw	r22, r24
    448c:	99 0f       	add	r25, r25
    448e:	88 0b       	sbc	r24, r24
    4490:	99 0b       	sbc	r25, r25
    4492:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4496:	9b 01       	movw	r18, r22
    4498:	ac 01       	movw	r20, r24
    449a:	c5 01       	movw	r24, r10
    449c:	b4 01       	movw	r22, r8
    449e:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    44a2:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    44a6:	6c 0d       	add	r22, r12
    44a8:	7d 1d       	adc	r23, r13
            temp = -temp;
    44aa:	88 27       	eor	r24, r24
    44ac:	99 27       	eor	r25, r25
    44ae:	86 1b       	sub	r24, r22
    44b0:	97 0b       	sbc	r25, r23
    44b2:	88 cd       	rjmp	.-1264   	; 0x3fc4 <getInputFromSpeed+0x150>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    44b4:	26 e0       	ldi	r18, 0x06	; 6
    44b6:	30 e0       	ldi	r19, 0x00	; 0
    44b8:	aa cf       	rjmp	.-172    	; 0x440e <getInputFromSpeed+0x59a>
    44ba:	25 e0       	ldi	r18, 0x05	; 5
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	a7 cf       	rjmp	.-178    	; 0x440e <getInputFromSpeed+0x59a>
    44c0:	24 e0       	ldi	r18, 0x04	; 4
    44c2:	30 e0       	ldi	r19, 0x00	; 0
    44c4:	a4 cf       	rjmp	.-184    	; 0x440e <getInputFromSpeed+0x59a>
    44c6:	23 e0       	ldi	r18, 0x03	; 3
    44c8:	30 e0       	ldi	r19, 0x00	; 0
    44ca:	a1 cf       	rjmp	.-190    	; 0x440e <getInputFromSpeed+0x59a>
    44cc:	22 e0       	ldi	r18, 0x02	; 2
    44ce:	30 e0       	ldi	r19, 0x00	; 0
    44d0:	9e cf       	rjmp	.-196    	; 0x440e <getInputFromSpeed+0x59a>
    44d2:	21 e0       	ldi	r18, 0x01	; 1
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	9b cf       	rjmp	.-202    	; 0x440e <getInputFromSpeed+0x59a>
            temp = (currVel*calibration[0][2])/calibration[0][3];
        } else if(mode==LEFT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][4]/calibration[0][5];
            temp = -temp;
        } else if(mode==RIGHT_WHEEL_BW_SC) {
            temp = currVel*calibration[0][6]/calibration[0][7];
    44d8:	40 91 c6 20 	lds	r20, 0x20C6
    44dc:	50 91 c7 20 	lds	r21, 0x20C7
    44e0:	84 9f       	mul	r24, r20
    44e2:	90 01       	movw	r18, r0
    44e4:	85 9f       	mul	r24, r21
    44e6:	30 0d       	add	r19, r0
    44e8:	94 9f       	mul	r25, r20
    44ea:	30 0d       	add	r19, r0
    44ec:	11 24       	eor	r1, r1
    44ee:	c9 01       	movw	r24, r18
    44f0:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
            temp = -temp;
    44f4:	88 27       	eor	r24, r24
    44f6:	99 27       	eor	r25, r25
    44f8:	86 1b       	sub	r24, r22
    44fa:	97 0b       	sbc	r25, r23
    44fc:	63 cd       	rjmp	.-1338   	; 0x3fc4 <getInputFromSpeed+0x150>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    44fe:	cc 24       	eor	r12, r12
    4500:	c3 94       	inc	r12
    4502:	d1 2c       	mov	r13, r1
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    4504:	f6 01       	movw	r30, r12
    4506:	e2 95       	swap	r30
    4508:	f2 95       	swap	r31
    450a:	f0 7f       	andi	r31, 0xF0	; 240
    450c:	fe 27       	eor	r31, r30
    450e:	e0 7f       	andi	r30, 0xF0	; 240
    4510:	fe 27       	eor	r31, r30
    4512:	e6 55       	subi	r30, 0x56	; 86
    4514:	ff 4d       	sbci	r31, 0xDF	; 223
    4516:	e6 80       	ldd	r14, Z+6	; 0x06
    4518:	f7 80       	ldd	r15, Z+7	; 0x07
    451a:	04 81       	ldd	r16, Z+4	; 0x04
    451c:	15 81       	ldd	r17, Z+5	; 0x05
    451e:	bc 01       	movw	r22, r24
    4520:	6e 19       	sub	r22, r14
    4522:	7f 09       	sbc	r23, r15
    4524:	07 2e       	mov	r0, r23
    4526:	00 0c       	add	r0, r0
    4528:	88 0b       	sbc	r24, r24
    452a:	99 0b       	sbc	r25, r25
    452c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4530:	4b 01       	movw	r8, r22
    4532:	5c 01       	movw	r10, r24
    4534:	c2 94       	swap	r12
    4536:	d2 94       	swap	r13
    4538:	80 ef       	ldi	r24, 0xF0	; 240
    453a:	d8 22       	and	r13, r24
    453c:	dc 24       	eor	r13, r12
    453e:	c8 22       	and	r12, r24
    4540:	dc 24       	eor	r13, r12
    4542:	c6 01       	movw	r24, r12
    4544:	86 54       	subi	r24, 0x46	; 70
    4546:	9f 4d       	sbci	r25, 0xDF	; 223
    4548:	6c 01       	movw	r12, r24
    454a:	fc 01       	movw	r30, r24
    454c:	64 81       	ldd	r22, Z+4	; 0x04
    454e:	75 81       	ldd	r23, Z+5	; 0x05
    4550:	60 1b       	sub	r22, r16
    4552:	71 0b       	sbc	r23, r17
    4554:	07 2e       	mov	r0, r23
    4556:	00 0c       	add	r0, r0
    4558:	88 0b       	sbc	r24, r24
    455a:	99 0b       	sbc	r25, r25
    455c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4560:	9b 01       	movw	r18, r22
    4562:	ac 01       	movw	r20, r24
    4564:	c5 01       	movw	r24, r10
    4566:	b4 01       	movw	r22, r8
    4568:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    456c:	4b 01       	movw	r8, r22
    456e:	5c 01       	movw	r10, r24
    4570:	f6 01       	movw	r30, r12
    4572:	86 81       	ldd	r24, Z+6	; 0x06
    4574:	97 81       	ldd	r25, Z+7	; 0x07
    4576:	93 ce       	rjmp	.-730    	; 0x429e <getInputFromSpeed+0x42a>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4578:	73 e0       	ldi	r23, 0x03	; 3
    457a:	c7 2e       	mov	r12, r23
    457c:	d1 2c       	mov	r13, r1
    457e:	c2 cf       	rjmp	.-124    	; 0x4504 <getInputFromSpeed+0x690>
    4580:	e2 e0       	ldi	r30, 0x02	; 2
    4582:	ce 2e       	mov	r12, r30
    4584:	d1 2c       	mov	r13, r1
    4586:	be cf       	rjmp	.-132    	; 0x4504 <getInputFromSpeed+0x690>
    4588:	37 e0       	ldi	r19, 0x07	; 7
    458a:	c3 2e       	mov	r12, r19
    458c:	d1 2c       	mov	r13, r1
    458e:	ba cf       	rjmp	.-140    	; 0x4504 <getInputFromSpeed+0x690>
    4590:	46 e0       	ldi	r20, 0x06	; 6
    4592:	c4 2e       	mov	r12, r20
    4594:	d1 2c       	mov	r13, r1
    4596:	b6 cf       	rjmp	.-148    	; 0x4504 <getInputFromSpeed+0x690>
    4598:	55 e0       	ldi	r21, 0x05	; 5
    459a:	c5 2e       	mov	r12, r21
    459c:	d1 2c       	mov	r13, r1
    459e:	b2 cf       	rjmp	.-156    	; 0x4504 <getInputFromSpeed+0x690>
    45a0:	64 e0       	ldi	r22, 0x04	; 4
    45a2:	c6 2e       	mov	r12, r22
    45a4:	d1 2c       	mov	r13, r1
    45a6:	ae cf       	rjmp	.-164    	; 0x4504 <getInputFromSpeed+0x690>
    45a8:	e6 e0       	ldi	r30, 0x06	; 6
    45aa:	ce 2e       	mov	r12, r30
    45ac:	d1 2c       	mov	r13, r1
    45ae:	dd ce       	rjmp	.-582    	; 0x436a <getInputFromSpeed+0x4f6>
    45b0:	f5 e0       	ldi	r31, 0x05	; 5
    45b2:	cf 2e       	mov	r12, r31
    45b4:	d1 2c       	mov	r13, r1
    45b6:	d9 ce       	rjmp	.-590    	; 0x436a <getInputFromSpeed+0x4f6>
    45b8:	a4 e0       	ldi	r26, 0x04	; 4
    45ba:	ca 2e       	mov	r12, r26
    45bc:	d1 2c       	mov	r13, r1
    45be:	d5 ce       	rjmp	.-598    	; 0x436a <getInputFromSpeed+0x4f6>
    45c0:	b3 e0       	ldi	r27, 0x03	; 3
    45c2:	cb 2e       	mov	r12, r27
    45c4:	d1 2c       	mov	r13, r1
    45c6:	d1 ce       	rjmp	.-606    	; 0x436a <getInputFromSpeed+0x4f6>
    45c8:	12 e0       	ldi	r17, 0x02	; 2
    45ca:	c1 2e       	mov	r12, r17
    45cc:	d1 2c       	mov	r13, r1
    45ce:	cd ce       	rjmp	.-614    	; 0x436a <getInputFromSpeed+0x4f6>
    45d0:	28 e0       	ldi	r18, 0x08	; 8
    45d2:	30 e0       	ldi	r19, 0x00	; 0
    45d4:	1c cf       	rjmp	.-456    	; 0x440e <getInputFromSpeed+0x59a>
    45d6:	77 e0       	ldi	r23, 0x07	; 7
    45d8:	c7 2e       	mov	r12, r23
    45da:	d1 2c       	mov	r13, r1
    45dc:	c6 ce       	rjmp	.-628    	; 0x436a <getInputFromSpeed+0x4f6>
    45de:	68 e0       	ldi	r22, 0x08	; 8
    45e0:	c6 2e       	mov	r12, r22
    45e2:	d1 2c       	mov	r13, r1
    45e4:	c2 ce       	rjmp	.-636    	; 0x436a <getInputFromSpeed+0x4f6>
    45e6:	28 e0       	ldi	r18, 0x08	; 8
    45e8:	c2 2e       	mov	r12, r18
    45ea:	d1 2c       	mov	r13, r1
    45ec:	8b cf       	rjmp	.-234    	; 0x4504 <getInputFromSpeed+0x690>

000045ee <getRightSpeedFromInput>:
    
    return temp;
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {
    45ee:	8f 92       	push	r8
    45f0:	9f 92       	push	r9
    45f2:	af 92       	push	r10
    45f4:	bf 92       	push	r11
    45f6:	cf 92       	push	r12
    45f8:	df 92       	push	r13
    45fa:	ef 92       	push	r14
    45fc:	ff 92       	push	r15
    45fe:	0f 93       	push	r16
    4600:	1f 93       	push	r17
    4602:	cf 93       	push	r28
    4604:	df 93       	push	r29
    4606:	c0 91 8f 19 	lds	r28, 0x198F
    460a:	d0 91 90 19 	lds	r29, 0x1990
    460e:	80 91 8d 19 	lds	r24, 0x198D
    4612:	90 91 8e 19 	lds	r25, 0x198E
    4616:	97 fd       	sbrc	r25, 7
    4618:	0a c1       	rjmp	.+532    	; 0x482e <getRightSpeedFromInput+0x240>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    461a:	60 91 be 20 	lds	r22, 0x20BE
    461e:	70 91 bf 20 	lds	r23, 0x20BF
    4622:	6c 17       	cp	r22, r28
    4624:	7d 07       	cpc	r23, r29
    4626:	0c f4       	brge	.+2      	; 0x462a <getRightSpeedFromInput+0x3c>
    4628:	83 c0       	rjmp	.+262    	; 0x4730 <getRightSpeedFromInput+0x142>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    462a:	00 e0       	ldi	r16, 0x00	; 0
    462c:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    462e:	80 91 de 20 	lds	r24, 0x20DE
    4632:	90 91 df 20 	lds	r25, 0x20DF
    4636:	8c 17       	cp	r24, r28
    4638:	9d 07       	cpc	r25, r29
    463a:	0c f0       	brlt	.+2      	; 0x463e <getRightSpeedFromInput+0x50>
    463c:	b9 c0       	rjmp	.+370    	; 0x47b0 <getRightSpeedFromInput+0x1c2>
    463e:	80 91 ee 20 	lds	r24, 0x20EE
    4642:	90 91 ef 20 	lds	r25, 0x20EF
    4646:	8c 17       	cp	r24, r28
    4648:	9d 07       	cpc	r25, r29
    464a:	0c f4       	brge	.+2      	; 0x464e <getRightSpeedFromInput+0x60>
    464c:	82 c0       	rjmp	.+260    	; 0x4752 <getRightSpeedFromInput+0x164>
    464e:	0f 3f       	cpi	r16, 0xFF	; 255
    4650:	8f ef       	ldi	r24, 0xFF	; 255
    4652:	18 07       	cpc	r17, r24
    4654:	09 f4       	brne	.+2      	; 0x4658 <getRightSpeedFromInput+0x6a>
    4656:	f9 c1       	rjmp	.+1010   	; 0x4a4a <getRightSpeedFromInput+0x45c>
    4658:	80 91 0e 21 	lds	r24, 0x210E
    465c:	90 91 0f 21 	lds	r25, 0x210F
    4660:	8c 17       	cp	r24, r28
    4662:	9d 07       	cpc	r25, r29
    4664:	0c f0       	brlt	.+2      	; 0x4668 <getRightSpeedFromInput+0x7a>
    4666:	b8 c0       	rjmp	.+368    	; 0x47d8 <getRightSpeedFromInput+0x1ea>
    4668:	80 91 1e 21 	lds	r24, 0x211E
    466c:	90 91 1f 21 	lds	r25, 0x211F
    4670:	8c 17       	cp	r24, r28
    4672:	9d 07       	cpc	r25, r29
    4674:	0c f4       	brge	.+2      	; 0x4678 <getRightSpeedFromInput+0x8a>
    4676:	81 c0       	rjmp	.+258    	; 0x477a <getRightSpeedFromInput+0x18c>
    4678:	0f 3f       	cpi	r16, 0xFF	; 255
    467a:	8f ef       	ldi	r24, 0xFF	; 255
    467c:	18 07       	cpc	r17, r24
    467e:	09 f4       	brne	.+2      	; 0x4682 <getRightSpeedFromInput+0x94>
    4680:	e1 c1       	rjmp	.+962    	; 0x4a44 <getRightSpeedFromInput+0x456>
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    4682:	20 97       	sbiw	r28, 0x00	; 0
    4684:	09 f4       	brne	.+2      	; 0x4688 <getRightSpeedFromInput+0x9a>
    4686:	c2 c0       	rjmp	.+388    	; 0x480c <getRightSpeedFromInput+0x21e>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
    4688:	01 15       	cp	r16, r1
    468a:	11 05       	cpc	r17, r1
    468c:	09 f4       	brne	.+2      	; 0x4690 <getRightSpeedFromInput+0xa2>
    468e:	10 c2       	rjmp	.+1056   	; 0x4ab0 <getRightSpeedFromInput+0x4c2>
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4690:	0f 3f       	cpi	r16, 0xFF	; 255
    4692:	8f ef       	ldi	r24, 0xFF	; 255
    4694:	18 07       	cpc	r17, r24
    4696:	09 f4       	brne	.+2      	; 0x469a <getRightSpeedFromInput+0xac>
    4698:	a4 c1       	rjmp	.+840    	; 0x49e2 <getRightSpeedFromInput+0x3f4>
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
    469a:	f8 01       	movw	r30, r16
    469c:	e2 95       	swap	r30
    469e:	f2 95       	swap	r31
    46a0:	f0 7f       	andi	r31, 0xF0	; 240
    46a2:	fe 27       	eor	r31, r30
    46a4:	e0 7f       	andi	r30, 0xF0	; 240
    46a6:	fe 27       	eor	r31, r30
    46a8:	e6 55       	subi	r30, 0x56	; 86
    46aa:	ff 4d       	sbci	r31, 0xDF	; 223
    46ac:	c4 80       	ldd	r12, Z+4	; 0x04
    46ae:	d5 80       	ldd	r13, Z+5	; 0x05
    46b0:	e6 80       	ldd	r14, Z+6	; 0x06
    46b2:	f7 80       	ldd	r15, Z+7	; 0x07
    46b4:	cc 19       	sub	r28, r12
    46b6:	dd 09       	sbc	r29, r13
    46b8:	be 01       	movw	r22, r28
    46ba:	dd 0f       	add	r29, r29
    46bc:	88 0b       	sbc	r24, r24
    46be:	99 0b       	sbc	r25, r25
    46c0:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    46c4:	4b 01       	movw	r8, r22
    46c6:	5c 01       	movw	r10, r24
    46c8:	02 95       	swap	r16
    46ca:	12 95       	swap	r17
    46cc:	10 7f       	andi	r17, 0xF0	; 240
    46ce:	10 27       	eor	r17, r16
    46d0:	00 7f       	andi	r16, 0xF0	; 240
    46d2:	10 27       	eor	r17, r16
    46d4:	e8 01       	movw	r28, r16
    46d6:	c6 54       	subi	r28, 0x46	; 70
    46d8:	df 4d       	sbci	r29, 0xDF	; 223
    46da:	6e 81       	ldd	r22, Y+6	; 0x06
    46dc:	7f 81       	ldd	r23, Y+7	; 0x07
    46de:	6e 19       	sub	r22, r14
    46e0:	7f 09       	sbc	r23, r15
    46e2:	07 2e       	mov	r0, r23
    46e4:	00 0c       	add	r0, r0
    46e6:	88 0b       	sbc	r24, r24
    46e8:	99 0b       	sbc	r25, r25
    46ea:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    46ee:	9b 01       	movw	r18, r22
    46f0:	ac 01       	movw	r20, r24
    46f2:	c5 01       	movw	r24, r10
    46f4:	b4 01       	movw	r22, r8
    46f6:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    46fa:	4b 01       	movw	r8, r22
    46fc:	5c 01       	movw	r10, r24
    46fe:	8c 81       	ldd	r24, Y+4	; 0x04
    4700:	9d 81       	ldd	r25, Y+5	; 0x05
    4702:	8c 19       	sub	r24, r12
    4704:	9d 09       	sbc	r25, r13
    4706:	bc 01       	movw	r22, r24
    4708:	99 0f       	add	r25, r25
    470a:	88 0b       	sbc	r24, r24
    470c:	99 0b       	sbc	r25, r25
    470e:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4712:	9b 01       	movw	r18, r22
    4714:	ac 01       	movw	r20, r24
    4716:	c5 01       	movw	r24, r10
    4718:	b4 01       	movw	r22, r8
    471a:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    471e:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    4722:	6e 0d       	add	r22, r14
    4724:	7f 1d       	adc	r23, r15
    4726:	70 93 f8 17 	sts	0x17F8, r23
    472a:	60 93 f7 17 	sts	0x17F7, r22
    472e:	72 c0       	rjmp	.+228    	; 0x4814 <getRightSpeedFromInput+0x226>

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    4730:	80 91 ce 20 	lds	r24, 0x20CE
    4734:	90 91 cf 20 	lds	r25, 0x20CF
    4738:	8c 17       	cp	r24, r28
    473a:	9d 07       	cpc	r25, r29
    473c:	6c f1       	brlt	.+90     	; 0x4798 <getRightSpeedFromInput+0x1aa>
    473e:	01 e0       	ldi	r16, 0x01	; 1
    4740:	10 e0       	ldi	r17, 0x00	; 0
    4742:	80 91 ee 20 	lds	r24, 0x20EE
    4746:	90 91 ef 20 	lds	r25, 0x20EF
    474a:	8c 17       	cp	r24, r28
    474c:	9d 07       	cpc	r25, r29
    474e:	0c f0       	brlt	.+2      	; 0x4752 <getRightSpeedFromInput+0x164>
    4750:	83 cf       	rjmp	.-250    	; 0x4658 <getRightSpeedFromInput+0x6a>
    4752:	80 91 fe 20 	lds	r24, 0x20FE
    4756:	90 91 ff 20 	lds	r25, 0x20FF
    475a:	8c 17       	cp	r24, r28
    475c:	9d 07       	cpc	r25, r29
    475e:	7c f1       	brlt	.+94     	; 0x47be <getRightSpeedFromInput+0x1d0>
    4760:	0f 3f       	cpi	r16, 0xFF	; 255
    4762:	8f ef       	ldi	r24, 0xFF	; 255
    4764:	18 07       	cpc	r17, r24
    4766:	09 f4       	brne	.+2      	; 0x476a <getRightSpeedFromInput+0x17c>
    4768:	76 c1       	rjmp	.+748    	; 0x4a56 <getRightSpeedFromInput+0x468>
    476a:	80 91 1e 21 	lds	r24, 0x211E
    476e:	90 91 1f 21 	lds	r25, 0x211F
    4772:	8c 17       	cp	r24, r28
    4774:	9d 07       	cpc	r25, r29
    4776:	0c f0       	brlt	.+2      	; 0x477a <getRightSpeedFromInput+0x18c>
    4778:	84 cf       	rjmp	.-248    	; 0x4682 <getRightSpeedFromInput+0x94>
    477a:	80 91 2e 21 	lds	r24, 0x212E
    477e:	90 91 2f 21 	lds	r25, 0x212F
    4782:	8c 17       	cp	r24, r28
    4784:	9d 07       	cpc	r25, r29
    4786:	84 f1       	brlt	.+96     	; 0x47e8 <getRightSpeedFromInput+0x1fa>
    4788:	0f 3f       	cpi	r16, 0xFF	; 255
    478a:	8f ef       	ldi	r24, 0xFF	; 255
    478c:	18 07       	cpc	r17, r24
    478e:	09 f0       	breq	.+2      	; 0x4792 <getRightSpeedFromInput+0x1a4>
    4790:	78 cf       	rjmp	.-272    	; 0x4682 <getRightSpeedFromInput+0x94>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4792:	07 e0       	ldi	r16, 0x07	; 7
    4794:	10 e0       	ldi	r17, 0x00	; 0
    4796:	75 cf       	rjmp	.-278    	; 0x4682 <getRightSpeedFromInput+0x94>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    4798:	0f ef       	ldi	r16, 0xFF	; 255
    479a:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    479c:	80 91 de 20 	lds	r24, 0x20DE
    47a0:	90 91 df 20 	lds	r25, 0x20DF
    47a4:	8c 17       	cp	r24, r28
    47a6:	9d 07       	cpc	r25, r29
    47a8:	0c f4       	brge	.+2      	; 0x47ac <getRightSpeedFromInput+0x1be>
    47aa:	49 cf       	rjmp	.-366    	; 0x463e <getRightSpeedFromInput+0x50>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    47ac:	02 e0       	ldi	r16, 0x02	; 2
    47ae:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
    47b0:	80 91 fe 20 	lds	r24, 0x20FE
    47b4:	90 91 ff 20 	lds	r25, 0x20FF
    47b8:	8c 17       	cp	r24, r28
    47ba:	9d 07       	cpc	r25, r29
    47bc:	b4 f6       	brge	.-84     	; 0x476a <getRightSpeedFromInput+0x17c>
    47be:	80 91 0e 21 	lds	r24, 0x210E
    47c2:	90 91 0f 21 	lds	r25, 0x210F
    47c6:	8c 17       	cp	r24, r28
    47c8:	9d 07       	cpc	r25, r29
    47ca:	0c f4       	brge	.+2      	; 0x47ce <getRightSpeedFromInput+0x1e0>
    47cc:	4d cf       	rjmp	.-358    	; 0x4668 <getRightSpeedFromInput+0x7a>
    47ce:	0f 3f       	cpi	r16, 0xFF	; 255
    47d0:	8f ef       	ldi	r24, 0xFF	; 255
    47d2:	18 07       	cpc	r17, r24
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <getRightSpeedFromInput+0x1ea>
    47d6:	3c c1       	rjmp	.+632    	; 0x4a50 <getRightSpeedFromInput+0x462>
    47d8:	80 91 2e 21 	lds	r24, 0x212E
    47dc:	90 91 2f 21 	lds	r25, 0x212F
    47e0:	8c 17       	cp	r24, r28
    47e2:	9d 07       	cpc	r25, r29
    47e4:	0c f0       	brlt	.+2      	; 0x47e8 <getRightSpeedFromInput+0x1fa>
    47e6:	4d cf       	rjmp	.-358    	; 0x4682 <getRightSpeedFromInput+0x94>
    47e8:	80 91 3e 21 	lds	r24, 0x213E
    47ec:	90 91 3f 21 	lds	r25, 0x213F
    47f0:	8c 17       	cp	r24, r28
    47f2:	9d 07       	cpc	r25, r29
    47f4:	0c f4       	brge	.+2      	; 0x47f8 <getRightSpeedFromInput+0x20a>
    47f6:	45 cf       	rjmp	.-374    	; 0x4682 <getRightSpeedFromInput+0x94>
    47f8:	0f 3f       	cpi	r16, 0xFF	; 255
    47fa:	8f ef       	ldi	r24, 0xFF	; 255
    47fc:	18 07       	cpc	r17, r24
    47fe:	09 f0       	breq	.+2      	; 0x4802 <getRightSpeedFromInput+0x214>
    4800:	40 cf       	rjmp	.-384    	; 0x4682 <getRightSpeedFromInput+0x94>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4802:	08 e0       	ldi	r16, 0x08	; 8
    4804:	10 e0       	ldi	r17, 0x00	; 0
			}
		}        
    }

    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
    4806:	20 97       	sbiw	r28, 0x00	; 0
    4808:	09 f0       	breq	.+2      	; 0x480c <getRightSpeedFromInput+0x21e>
    480a:	42 cf       	rjmp	.-380    	; 0x4690 <getRightSpeedFromInput+0xa2>
            speedRightFromEnc = 0;
    480c:	10 92 f8 17 	sts	0x17F8, r1
    4810:	10 92 f7 17 	sts	0x17F7, r1
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    }
    
}
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	1f 91       	pop	r17
    481a:	0f 91       	pop	r16
    481c:	ff 90       	pop	r15
    481e:	ef 90       	pop	r14
    4820:	df 90       	pop	r13
    4822:	cf 90       	pop	r12
    4824:	bf 90       	pop	r11
    4826:	af 90       	pop	r10
    4828:	9f 90       	pop	r9
    482a:	8f 90       	pop	r8
    482c:	08 95       	ret
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    482e:	60 91 c6 20 	lds	r22, 0x20C6
    4832:	70 91 c7 20 	lds	r23, 0x20C7
    4836:	6c 17       	cp	r22, r28
    4838:	7d 07       	cpc	r23, r29
    483a:	0c f4       	brge	.+2      	; 0x483e <getRightSpeedFromInput+0x250>
    483c:	51 c0       	rjmp	.+162    	; 0x48e0 <getRightSpeedFromInput+0x2f2>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    483e:	00 e0       	ldi	r16, 0x00	; 0
    4840:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    4842:	80 91 e6 20 	lds	r24, 0x20E6
    4846:	90 91 e7 20 	lds	r25, 0x20E7
    484a:	8c 17       	cp	r24, r28
    484c:	9d 07       	cpc	r25, r29
    484e:	0c f0       	brlt	.+2      	; 0x4852 <getRightSpeedFromInput+0x264>
    4850:	5b c0       	rjmp	.+182    	; 0x4908 <getRightSpeedFromInput+0x31a>
    4852:	80 91 f6 20 	lds	r24, 0x20F6
    4856:	90 91 f7 20 	lds	r25, 0x20F7
    485a:	8c 17       	cp	r24, r28
    485c:	9d 07       	cpc	r25, r29
    485e:	0c f4       	brge	.+2      	; 0x4862 <getRightSpeedFromInput+0x274>
    4860:	17 c1       	rjmp	.+558    	; 0x4a90 <getRightSpeedFromInput+0x4a2>
    4862:	0f 3f       	cpi	r16, 0xFF	; 255
    4864:	8f ef       	ldi	r24, 0xFF	; 255
    4866:	18 07       	cpc	r17, r24
    4868:	09 f4       	brne	.+2      	; 0x486c <getRightSpeedFromInput+0x27e>
    486a:	63 c1       	rjmp	.+710    	; 0x4b32 <getRightSpeedFromInput+0x544>
    486c:	80 91 16 21 	lds	r24, 0x2116
    4870:	90 91 17 21 	lds	r25, 0x2117
    4874:	8c 17       	cp	r24, r28
    4876:	9d 07       	cpc	r25, r29
    4878:	0c f4       	brge	.+2      	; 0x487c <getRightSpeedFromInput+0x28e>
    487a:	4e c0       	rjmp	.+156    	; 0x4918 <getRightSpeedFromInput+0x32a>
    487c:	0f 3f       	cpi	r16, 0xFF	; 255
    487e:	8f ef       	ldi	r24, 0xFF	; 255
    4880:	18 07       	cpc	r17, r24
    4882:	09 f4       	brne	.+2      	; 0x4886 <getRightSpeedFromInput+0x298>
    4884:	50 c1       	rjmp	.+672    	; 0x4b26 <getRightSpeedFromInput+0x538>
    4886:	80 91 36 21 	lds	r24, 0x2136
    488a:	90 91 37 21 	lds	r25, 0x2137
    488e:	8c 17       	cp	r24, r28
    4890:	9d 07       	cpc	r25, r29
    4892:	6c f4       	brge	.+26     	; 0x48ae <getRightSpeedFromInput+0x2c0>
    4894:	e0 90 46 21 	lds	r14, 0x2146
    4898:	f0 90 47 21 	lds	r15, 0x2147
    489c:	ec 16       	cp	r14, r28
    489e:	fd 06       	cpc	r15, r29
    48a0:	0c f4       	brge	.+2      	; 0x48a4 <getRightSpeedFromInput+0x2b6>
    48a2:	4f c0       	rjmp	.+158    	; 0x4942 <getRightSpeedFromInput+0x354>
    48a4:	0f 3f       	cpi	r16, 0xFF	; 255
    48a6:	8f ef       	ldi	r24, 0xFF	; 255
    48a8:	18 07       	cpc	r17, r24
    48aa:	09 f4       	brne	.+2      	; 0x48ae <getRightSpeedFromInput+0x2c0>
    48ac:	45 c1       	rjmp	.+650    	; 0x4b38 <getRightSpeedFromInput+0x54a>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    48ae:	01 15       	cp	r16, r1
    48b0:	11 05       	cpc	r17, r1
    48b2:	09 f0       	breq	.+2      	; 0x48b6 <getRightSpeedFromInput+0x2c8>
    48b4:	4f c0       	rjmp	.+158    	; 0x4954 <getRightSpeedFromInput+0x366>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
    48b6:	20 91 c8 20 	lds	r18, 0x20C8
    48ba:	30 91 c9 20 	lds	r19, 0x20C9
    48be:	c2 9f       	mul	r28, r18
    48c0:	c0 01       	movw	r24, r0
    48c2:	c3 9f       	mul	r28, r19
    48c4:	90 0d       	add	r25, r0
    48c6:	d2 9f       	mul	r29, r18
    48c8:	90 0d       	add	r25, r0
    48ca:	11 24       	eor	r1, r1
    48cc:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
		}
		speedRightFromEnc = -speedRightFromEnc;
    48d0:	71 95       	neg	r23
    48d2:	61 95       	neg	r22
    48d4:	71 09       	sbc	r23, r1
    48d6:	70 93 f8 17 	sts	0x17F8, r23
    48da:	60 93 f7 17 	sts	0x17F7, r22
    48de:	9a cf       	rjmp	.-204    	; 0x4814 <getRightSpeedFromInput+0x226>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    48e0:	80 91 d6 20 	lds	r24, 0x20D6
    48e4:	90 91 d7 20 	lds	r25, 0x20D7
    48e8:	8c 17       	cp	r24, r28
    48ea:	9d 07       	cpc	r25, r29
    48ec:	0c f0       	brlt	.+2      	; 0x48f0 <getRightSpeedFromInput+0x302>
    48ee:	c6 c0       	rjmp	.+396    	; 0x4a7c <getRightSpeedFromInput+0x48e>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    48f0:	0f ef       	ldi	r16, 0xFF	; 255
    48f2:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    48f4:	80 91 e6 20 	lds	r24, 0x20E6
    48f8:	90 91 e7 20 	lds	r25, 0x20E7
    48fc:	8c 17       	cp	r24, r28
    48fe:	9d 07       	cpc	r25, r29
    4900:	0c f4       	brge	.+2      	; 0x4904 <getRightSpeedFromInput+0x316>
    4902:	a7 cf       	rjmp	.-178    	; 0x4852 <getRightSpeedFromInput+0x264>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4904:	02 e0       	ldi	r16, 0x02	; 2
    4906:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    4908:	80 91 06 21 	lds	r24, 0x2106
    490c:	90 91 07 21 	lds	r25, 0x2107
    4910:	8c 17       	cp	r24, r28
    4912:	9d 07       	cpc	r25, r29
    4914:	0c f4       	brge	.+2      	; 0x4918 <getRightSpeedFromInput+0x32a>
    4916:	aa cf       	rjmp	.-172    	; 0x486c <getRightSpeedFromInput+0x27e>
    4918:	80 91 26 21 	lds	r24, 0x2126
    491c:	90 91 27 21 	lds	r25, 0x2127
    4920:	8c 17       	cp	r24, r28
    4922:	9d 07       	cpc	r25, r29
    4924:	0c f4       	brge	.+2      	; 0x4928 <getRightSpeedFromInput+0x33a>
    4926:	9a c0       	rjmp	.+308    	; 0x4a5c <getRightSpeedFromInput+0x46e>
    4928:	0f 3f       	cpi	r16, 0xFF	; 255
    492a:	8f ef       	ldi	r24, 0xFF	; 255
    492c:	18 07       	cpc	r17, r24
    492e:	09 f4       	brne	.+2      	; 0x4932 <getRightSpeedFromInput+0x344>
    4930:	fd c0       	rjmp	.+506    	; 0x4b2c <getRightSpeedFromInput+0x53e>
    4932:	e0 90 46 21 	lds	r14, 0x2146
    4936:	f0 90 47 21 	lds	r15, 0x2147
    493a:	ec 16       	cp	r14, r28
    493c:	fd 06       	cpc	r15, r29
    493e:	0c f0       	brlt	.+2      	; 0x4942 <getRightSpeedFromInput+0x354>
    4940:	b6 cf       	rjmp	.-148    	; 0x48ae <getRightSpeedFromInput+0x2c0>
            } else {
                speedRightFromEnc = calibration[indFwR-1][3] + (signed int)(((float)(last_right_vel-calibration[indFwR-1][2])*(float)(calibration[indFwR][3]-calibration[indFwR-1][3]))/(float)(calibration[indFwR][2]-calibration[indFwR-1][2]));
            }
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
    4942:	01 15       	cp	r16, r1
    4944:	11 05       	cpc	r17, r1
    4946:	09 f4       	brne	.+2      	; 0x494a <getRightSpeedFromInput+0x35c>
    4948:	b6 cf       	rjmp	.-148    	; 0x48b6 <getRightSpeedFromInput+0x2c8>
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    494a:	0f 3f       	cpi	r16, 0xFF	; 255
    494c:	8f ef       	ldi	r24, 0xFF	; 255
    494e:	18 07       	cpc	r17, r24
    4950:	09 f4       	brne	.+2      	; 0x4954 <getRightSpeedFromInput+0x366>
    4952:	c0 c0       	rjmp	.+384    	; 0x4ad4 <getRightSpeedFromInput+0x4e6>
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
		} else {
        	speedRightFromEnc = calibration[indBwR-1][7] + (signed int)(((float)(last_right_vel-calibration[indBwR-1][6])*(float)(calibration[indBwR][7]-calibration[indBwR-1][7]))/(float)(calibration[indBwR][6]-calibration[indBwR-1][6]));
    4954:	f8 01       	movw	r30, r16
    4956:	e2 95       	swap	r30
    4958:	f2 95       	swap	r31
    495a:	f0 7f       	andi	r31, 0xF0	; 240
    495c:	fe 27       	eor	r31, r30
    495e:	e0 7f       	andi	r30, 0xF0	; 240
    4960:	fe 27       	eor	r31, r30
    4962:	e6 55       	subi	r30, 0x56	; 86
    4964:	ff 4d       	sbci	r31, 0xDF	; 223
    4966:	c4 84       	ldd	r12, Z+12	; 0x0c
    4968:	d5 84       	ldd	r13, Z+13	; 0x0d
    496a:	e6 84       	ldd	r14, Z+14	; 0x0e
    496c:	f7 84       	ldd	r15, Z+15	; 0x0f
    496e:	cc 19       	sub	r28, r12
    4970:	dd 09       	sbc	r29, r13
    4972:	be 01       	movw	r22, r28
    4974:	dd 0f       	add	r29, r29
    4976:	88 0b       	sbc	r24, r24
    4978:	99 0b       	sbc	r25, r25
    497a:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    497e:	4b 01       	movw	r8, r22
    4980:	5c 01       	movw	r10, r24
    4982:	02 95       	swap	r16
    4984:	12 95       	swap	r17
    4986:	10 7f       	andi	r17, 0xF0	; 240
    4988:	10 27       	eor	r17, r16
    498a:	00 7f       	andi	r16, 0xF0	; 240
    498c:	10 27       	eor	r17, r16
    498e:	e8 01       	movw	r28, r16
    4990:	c6 54       	subi	r28, 0x46	; 70
    4992:	df 4d       	sbci	r29, 0xDF	; 223
    4994:	6e 85       	ldd	r22, Y+14	; 0x0e
    4996:	7f 85       	ldd	r23, Y+15	; 0x0f
    4998:	6e 19       	sub	r22, r14
    499a:	7f 09       	sbc	r23, r15
    499c:	07 2e       	mov	r0, r23
    499e:	00 0c       	add	r0, r0
    49a0:	88 0b       	sbc	r24, r24
    49a2:	99 0b       	sbc	r25, r25
    49a4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    49a8:	9b 01       	movw	r18, r22
    49aa:	ac 01       	movw	r20, r24
    49ac:	c5 01       	movw	r24, r10
    49ae:	b4 01       	movw	r22, r8
    49b0:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    49b4:	4b 01       	movw	r8, r22
    49b6:	5c 01       	movw	r10, r24
    49b8:	8c 85       	ldd	r24, Y+12	; 0x0c
    49ba:	9d 85       	ldd	r25, Y+13	; 0x0d
    49bc:	8c 19       	sub	r24, r12
    49be:	9d 09       	sbc	r25, r13
    49c0:	bc 01       	movw	r22, r24
    49c2:	99 0f       	add	r25, r25
    49c4:	88 0b       	sbc	r24, r24
    49c6:	99 0b       	sbc	r25, r25
    49c8:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    49cc:	9b 01       	movw	r18, r22
    49ce:	ac 01       	movw	r20, r24
    49d0:	c5 01       	movw	r24, r10
    49d2:	b4 01       	movw	r22, r8
    49d4:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    49d8:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    49dc:	6e 0d       	add	r22, r14
    49de:	7f 1d       	adc	r23, r15
    49e0:	77 cf       	rjmp	.-274    	; 0x48d0 <getRightSpeedFromInput+0x2e2>
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
            } else if(indFwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][3]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][2]);  // take the max
    49e2:	60 91 40 21 	lds	r22, 0x2140
    49e6:	70 91 41 21 	lds	r23, 0x2141
    49ea:	07 2e       	mov	r0, r23
    49ec:	00 0c       	add	r0, r0
    49ee:	88 0b       	sbc	r24, r24
    49f0:	99 0b       	sbc	r25, r25
    49f2:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    49f6:	6b 01       	movw	r12, r22
    49f8:	7c 01       	movw	r14, r24
    49fa:	be 01       	movw	r22, r28
    49fc:	dd 0f       	add	r29, r29
    49fe:	88 0b       	sbc	r24, r24
    4a00:	99 0b       	sbc	r25, r25
    4a02:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4a06:	9b 01       	movw	r18, r22
    4a08:	ac 01       	movw	r20, r24
    4a0a:	c7 01       	movw	r24, r14
    4a0c:	b6 01       	movw	r22, r12
    4a0e:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    4a12:	6b 01       	movw	r12, r22
    4a14:	7c 01       	movw	r14, r24
    4a16:	80 91 3e 21 	lds	r24, 0x213E
    4a1a:	90 91 3f 21 	lds	r25, 0x213F
    4a1e:	bc 01       	movw	r22, r24
    4a20:	99 0f       	add	r25, r25
    4a22:	88 0b       	sbc	r24, r24
    4a24:	99 0b       	sbc	r25, r25
    4a26:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4a2a:	9b 01       	movw	r18, r22
    4a2c:	ac 01       	movw	r20, r24
    4a2e:	c7 01       	movw	r24, r14
    4a30:	b6 01       	movw	r22, r12
    4a32:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    4a36:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    4a3a:	70 93 f8 17 	sts	0x17F8, r23
    4a3e:	60 93 f7 17 	sts	0x17F7, r22
    4a42:	e8 ce       	rjmp	.-560    	; 0x4814 <getRightSpeedFromInput+0x226>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4a44:	06 e0       	ldi	r16, 0x06	; 6
    4a46:	10 e0       	ldi	r17, 0x00	; 0
    4a48:	1c ce       	rjmp	.-968    	; 0x4682 <getRightSpeedFromInput+0x94>
    4a4a:	03 e0       	ldi	r16, 0x03	; 3
    4a4c:	10 e0       	ldi	r17, 0x00	; 0
    4a4e:	04 ce       	rjmp	.-1016   	; 0x4658 <getRightSpeedFromInput+0x6a>
    4a50:	05 e0       	ldi	r16, 0x05	; 5
    4a52:	10 e0       	ldi	r17, 0x00	; 0
    4a54:	c1 ce       	rjmp	.-638    	; 0x47d8 <getRightSpeedFromInput+0x1ea>
    4a56:	04 e0       	ldi	r16, 0x04	; 4
    4a58:	10 e0       	ldi	r17, 0x00	; 0
    4a5a:	87 ce       	rjmp	.-754    	; 0x476a <getRightSpeedFromInput+0x17c>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    4a5c:	80 91 36 21 	lds	r24, 0x2136
    4a60:	90 91 37 21 	lds	r25, 0x2137
    4a64:	8c 17       	cp	r24, r28
    4a66:	9d 07       	cpc	r25, r29
    4a68:	0c f4       	brge	.+2      	; 0x4a6c <getRightSpeedFromInput+0x47e>
    4a6a:	14 cf       	rjmp	.-472    	; 0x4894 <getRightSpeedFromInput+0x2a6>
    4a6c:	0f 3f       	cpi	r16, 0xFF	; 255
    4a6e:	8f ef       	ldi	r24, 0xFF	; 255
    4a70:	18 07       	cpc	r17, r24
    4a72:	09 f0       	breq	.+2      	; 0x4a76 <getRightSpeedFromInput+0x488>
    4a74:	1c cf       	rjmp	.-456    	; 0x48ae <getRightSpeedFromInput+0x2c0>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4a76:	07 e0       	ldi	r16, 0x07	; 7
    4a78:	10 e0       	ldi	r17, 0x00	; 0
    4a7a:	19 cf       	rjmp	.-462    	; 0x48ae <getRightSpeedFromInput+0x2c0>
		if(pwm_right >= 0) {
			if(calibration[i][2]>=last_right_vel && indFwR<0) {	// forward right
				indFwR = i;
			}
		} else {
			if(calibration[i][6]>=last_right_vel && indBwR<0) {	// backward right
    4a7c:	01 e0       	ldi	r16, 0x01	; 1
    4a7e:	10 e0       	ldi	r17, 0x00	; 0
    4a80:	80 91 f6 20 	lds	r24, 0x20F6
    4a84:	90 91 f7 20 	lds	r25, 0x20F7
    4a88:	8c 17       	cp	r24, r28
    4a8a:	9d 07       	cpc	r25, r29
    4a8c:	0c f0       	brlt	.+2      	; 0x4a90 <getRightSpeedFromInput+0x4a2>
    4a8e:	ee ce       	rjmp	.-548    	; 0x486c <getRightSpeedFromInput+0x27e>
    4a90:	80 91 06 21 	lds	r24, 0x2106
    4a94:	90 91 07 21 	lds	r25, 0x2107
    4a98:	8c 17       	cp	r24, r28
    4a9a:	9d 07       	cpc	r25, r29
    4a9c:	0c f4       	brge	.+2      	; 0x4aa0 <getRightSpeedFromInput+0x4b2>
    4a9e:	e6 ce       	rjmp	.-564    	; 0x486c <getRightSpeedFromInput+0x27e>
    4aa0:	0f 3f       	cpi	r16, 0xFF	; 255
    4aa2:	8f ef       	ldi	r24, 0xFF	; 255
    4aa4:	18 07       	cpc	r17, r24
    4aa6:	09 f0       	breq	.+2      	; 0x4aaa <getRightSpeedFromInput+0x4bc>
    4aa8:	37 cf       	rjmp	.-402    	; 0x4918 <getRightSpeedFromInput+0x32a>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4aaa:	04 e0       	ldi	r16, 0x04	; 4
    4aac:	10 e0       	ldi	r17, 0x00	; 0
    4aae:	34 cf       	rjmp	.-408    	; 0x4918 <getRightSpeedFromInput+0x32a>
    if(pwm_right >= 0) {
        if(last_right_vel == 0) {
            speedRightFromEnc = 0;
        } else {
            if(indFwR==0) {  // the velocity is lower than first saved in the matrix
                speedRightFromEnc = (last_right_vel*calibration[0][3])/calibration[0][2];
    4ab0:	20 91 c0 20 	lds	r18, 0x20C0
    4ab4:	30 91 c1 20 	lds	r19, 0x20C1
    4ab8:	c2 9f       	mul	r28, r18
    4aba:	c0 01       	movw	r24, r0
    4abc:	c3 9f       	mul	r28, r19
    4abe:	90 0d       	add	r25, r0
    4ac0:	d2 9f       	mul	r29, r18
    4ac2:	90 0d       	add	r25, r0
    4ac4:	11 24       	eor	r1, r1
    4ac6:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    4aca:	70 93 f8 17 	sts	0x17F8, r23
    4ace:	60 93 f7 17 	sts	0x17F7, r22
    4ad2:	a0 ce       	rjmp	.-704    	; 0x4814 <getRightSpeedFromInput+0x226>
        }
    } else {
		if(indBwR==0) {  // the velocity is lower than first saved in the matrix
        	speedRightFromEnc = (last_right_vel*calibration[0][7])/calibration[0][6];
		} else if(indBwR==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedRightFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][7]*(float)last_right_vel)/(float)calibration[CALIBRATION_SAMPLES-1][6]);  // take the max
    4ad4:	60 91 48 21 	lds	r22, 0x2148
    4ad8:	70 91 49 21 	lds	r23, 0x2149
    4adc:	07 2e       	mov	r0, r23
    4ade:	00 0c       	add	r0, r0
    4ae0:	88 0b       	sbc	r24, r24
    4ae2:	99 0b       	sbc	r25, r25
    4ae4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4ae8:	4b 01       	movw	r8, r22
    4aea:	5c 01       	movw	r10, r24
    4aec:	be 01       	movw	r22, r28
    4aee:	dd 0f       	add	r29, r29
    4af0:	88 0b       	sbc	r24, r24
    4af2:	99 0b       	sbc	r25, r25
    4af4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4af8:	9b 01       	movw	r18, r22
    4afa:	ac 01       	movw	r20, r24
    4afc:	c5 01       	movw	r24, r10
    4afe:	b4 01       	movw	r22, r8
    4b00:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    4b04:	4b 01       	movw	r8, r22
    4b06:	5c 01       	movw	r10, r24
    4b08:	b7 01       	movw	r22, r14
    4b0a:	ff 0c       	add	r15, r15
    4b0c:	88 0b       	sbc	r24, r24
    4b0e:	99 0b       	sbc	r25, r25
    4b10:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4b14:	9b 01       	movw	r18, r22
    4b16:	ac 01       	movw	r20, r24
    4b18:	c5 01       	movw	r24, r10
    4b1a:	b4 01       	movw	r22, r8
    4b1c:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    4b20:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    4b24:	d5 ce       	rjmp	.-598    	; 0x48d0 <getRightSpeedFromInput+0x2e2>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getRightSpeedFromInput() {

    signed int i=0, indFwR=-1, indBwR=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4b26:	05 e0       	ldi	r16, 0x05	; 5
    4b28:	10 e0       	ldi	r17, 0x00	; 0
    4b2a:	ad ce       	rjmp	.-678    	; 0x4886 <getRightSpeedFromInput+0x298>
    4b2c:	06 e0       	ldi	r16, 0x06	; 6
    4b2e:	10 e0       	ldi	r17, 0x00	; 0
    4b30:	00 cf       	rjmp	.-512    	; 0x4932 <getRightSpeedFromInput+0x344>
    4b32:	03 e0       	ldi	r16, 0x03	; 3
    4b34:	10 e0       	ldi	r17, 0x00	; 0
    4b36:	9a ce       	rjmp	.-716    	; 0x486c <getRightSpeedFromInput+0x27e>
    4b38:	08 e0       	ldi	r16, 0x08	; 8
    4b3a:	10 e0       	ldi	r17, 0x00	; 0
    4b3c:	06 cf       	rjmp	.-500    	; 0x494a <getRightSpeedFromInput+0x35c>

00004b3e <getLeftSpeedFromInput>:
    }
    
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {
    4b3e:	8f 92       	push	r8
    4b40:	9f 92       	push	r9
    4b42:	af 92       	push	r10
    4b44:	bf 92       	push	r11
    4b46:	cf 92       	push	r12
    4b48:	df 92       	push	r13
    4b4a:	ef 92       	push	r14
    4b4c:	ff 92       	push	r15
    4b4e:	0f 93       	push	r16
    4b50:	1f 93       	push	r17
    4b52:	cf 93       	push	r28
    4b54:	df 93       	push	r29
    4b56:	c0 91 91 19 	lds	r28, 0x1991
    4b5a:	d0 91 92 19 	lds	r29, 0x1992
    4b5e:	80 91 8b 19 	lds	r24, 0x198B
    4b62:	90 91 8c 19 	lds	r25, 0x198C
    4b66:	97 fd       	sbrc	r25, 7
    4b68:	0a c1       	rjmp	.+532    	; 0x4d7e <getLeftSpeedFromInput+0x240>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    4b6a:	60 91 ba 20 	lds	r22, 0x20BA
    4b6e:	70 91 bb 20 	lds	r23, 0x20BB
    4b72:	6c 17       	cp	r22, r28
    4b74:	7d 07       	cpc	r23, r29
    4b76:	0c f4       	brge	.+2      	; 0x4b7a <getLeftSpeedFromInput+0x3c>
    4b78:	83 c0       	rjmp	.+262    	; 0x4c80 <getLeftSpeedFromInput+0x142>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4b7a:	00 e0       	ldi	r16, 0x00	; 0
    4b7c:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    4b7e:	80 91 da 20 	lds	r24, 0x20DA
    4b82:	90 91 db 20 	lds	r25, 0x20DB
    4b86:	8c 17       	cp	r24, r28
    4b88:	9d 07       	cpc	r25, r29
    4b8a:	0c f0       	brlt	.+2      	; 0x4b8e <getLeftSpeedFromInput+0x50>
    4b8c:	b9 c0       	rjmp	.+370    	; 0x4d00 <getLeftSpeedFromInput+0x1c2>
    4b8e:	80 91 ea 20 	lds	r24, 0x20EA
    4b92:	90 91 eb 20 	lds	r25, 0x20EB
    4b96:	8c 17       	cp	r24, r28
    4b98:	9d 07       	cpc	r25, r29
    4b9a:	0c f4       	brge	.+2      	; 0x4b9e <getLeftSpeedFromInput+0x60>
    4b9c:	82 c0       	rjmp	.+260    	; 0x4ca2 <getLeftSpeedFromInput+0x164>
    4b9e:	0f 3f       	cpi	r16, 0xFF	; 255
    4ba0:	8f ef       	ldi	r24, 0xFF	; 255
    4ba2:	18 07       	cpc	r17, r24
    4ba4:	09 f4       	brne	.+2      	; 0x4ba8 <getLeftSpeedFromInput+0x6a>
    4ba6:	f9 c1       	rjmp	.+1010   	; 0x4f9a <getLeftSpeedFromInput+0x45c>
    4ba8:	80 91 0a 21 	lds	r24, 0x210A
    4bac:	90 91 0b 21 	lds	r25, 0x210B
    4bb0:	8c 17       	cp	r24, r28
    4bb2:	9d 07       	cpc	r25, r29
    4bb4:	0c f0       	brlt	.+2      	; 0x4bb8 <getLeftSpeedFromInput+0x7a>
    4bb6:	b8 c0       	rjmp	.+368    	; 0x4d28 <getLeftSpeedFromInput+0x1ea>
    4bb8:	80 91 1a 21 	lds	r24, 0x211A
    4bbc:	90 91 1b 21 	lds	r25, 0x211B
    4bc0:	8c 17       	cp	r24, r28
    4bc2:	9d 07       	cpc	r25, r29
    4bc4:	0c f4       	brge	.+2      	; 0x4bc8 <getLeftSpeedFromInput+0x8a>
    4bc6:	81 c0       	rjmp	.+258    	; 0x4cca <getLeftSpeedFromInput+0x18c>
    4bc8:	0f 3f       	cpi	r16, 0xFF	; 255
    4bca:	8f ef       	ldi	r24, 0xFF	; 255
    4bcc:	18 07       	cpc	r17, r24
    4bce:	09 f4       	brne	.+2      	; 0x4bd2 <getLeftSpeedFromInput+0x94>
    4bd0:	e1 c1       	rjmp	.+962    	; 0x4f94 <getLeftSpeedFromInput+0x456>
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    4bd2:	20 97       	sbiw	r28, 0x00	; 0
    4bd4:	09 f4       	brne	.+2      	; 0x4bd8 <getLeftSpeedFromInput+0x9a>
    4bd6:	c2 c0       	rjmp	.+388    	; 0x4d5c <getLeftSpeedFromInput+0x21e>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
    4bd8:	01 15       	cp	r16, r1
    4bda:	11 05       	cpc	r17, r1
    4bdc:	09 f4       	brne	.+2      	; 0x4be0 <getLeftSpeedFromInput+0xa2>
    4bde:	10 c2       	rjmp	.+1056   	; 0x5000 <getLeftSpeedFromInput+0x4c2>
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4be0:	0f 3f       	cpi	r16, 0xFF	; 255
    4be2:	8f ef       	ldi	r24, 0xFF	; 255
    4be4:	18 07       	cpc	r17, r24
    4be6:	09 f4       	brne	.+2      	; 0x4bea <getLeftSpeedFromInput+0xac>
    4be8:	a4 c1       	rjmp	.+840    	; 0x4f32 <getLeftSpeedFromInput+0x3f4>
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
    4bea:	f8 01       	movw	r30, r16
    4bec:	e2 95       	swap	r30
    4bee:	f2 95       	swap	r31
    4bf0:	f0 7f       	andi	r31, 0xF0	; 240
    4bf2:	fe 27       	eor	r31, r30
    4bf4:	e0 7f       	andi	r30, 0xF0	; 240
    4bf6:	fe 27       	eor	r31, r30
    4bf8:	e6 55       	subi	r30, 0x56	; 86
    4bfa:	ff 4d       	sbci	r31, 0xDF	; 223
    4bfc:	c0 80       	ld	r12, Z
    4bfe:	d1 80       	ldd	r13, Z+1	; 0x01
    4c00:	e2 80       	ldd	r14, Z+2	; 0x02
    4c02:	f3 80       	ldd	r15, Z+3	; 0x03
    4c04:	cc 19       	sub	r28, r12
    4c06:	dd 09       	sbc	r29, r13
    4c08:	be 01       	movw	r22, r28
    4c0a:	dd 0f       	add	r29, r29
    4c0c:	88 0b       	sbc	r24, r24
    4c0e:	99 0b       	sbc	r25, r25
    4c10:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4c14:	4b 01       	movw	r8, r22
    4c16:	5c 01       	movw	r10, r24
    4c18:	02 95       	swap	r16
    4c1a:	12 95       	swap	r17
    4c1c:	10 7f       	andi	r17, 0xF0	; 240
    4c1e:	10 27       	eor	r17, r16
    4c20:	00 7f       	andi	r16, 0xF0	; 240
    4c22:	10 27       	eor	r17, r16
    4c24:	e8 01       	movw	r28, r16
    4c26:	c6 54       	subi	r28, 0x46	; 70
    4c28:	df 4d       	sbci	r29, 0xDF	; 223
    4c2a:	6a 81       	ldd	r22, Y+2	; 0x02
    4c2c:	7b 81       	ldd	r23, Y+3	; 0x03
    4c2e:	6e 19       	sub	r22, r14
    4c30:	7f 09       	sbc	r23, r15
    4c32:	07 2e       	mov	r0, r23
    4c34:	00 0c       	add	r0, r0
    4c36:	88 0b       	sbc	r24, r24
    4c38:	99 0b       	sbc	r25, r25
    4c3a:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4c3e:	9b 01       	movw	r18, r22
    4c40:	ac 01       	movw	r20, r24
    4c42:	c5 01       	movw	r24, r10
    4c44:	b4 01       	movw	r22, r8
    4c46:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    4c4a:	4b 01       	movw	r8, r22
    4c4c:	5c 01       	movw	r10, r24
    4c4e:	88 81       	ld	r24, Y
    4c50:	99 81       	ldd	r25, Y+1	; 0x01
    4c52:	8c 19       	sub	r24, r12
    4c54:	9d 09       	sbc	r25, r13
    4c56:	bc 01       	movw	r22, r24
    4c58:	99 0f       	add	r25, r25
    4c5a:	88 0b       	sbc	r24, r24
    4c5c:	99 0b       	sbc	r25, r25
    4c5e:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4c62:	9b 01       	movw	r18, r22
    4c64:	ac 01       	movw	r20, r24
    4c66:	c5 01       	movw	r24, r10
    4c68:	b4 01       	movw	r22, r8
    4c6a:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    4c6e:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    4c72:	6e 0d       	add	r22, r14
    4c74:	7f 1d       	adc	r23, r15
    4c76:	70 93 fa 17 	sts	0x17FA, r23
    4c7a:	60 93 f9 17 	sts	0x17F9, r22
    4c7e:	72 c0       	rjmp	.+228    	; 0x4d64 <getLeftSpeedFromInput+0x226>

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    4c80:	80 91 ca 20 	lds	r24, 0x20CA
    4c84:	90 91 cb 20 	lds	r25, 0x20CB
    4c88:	8c 17       	cp	r24, r28
    4c8a:	9d 07       	cpc	r25, r29
    4c8c:	6c f1       	brlt	.+90     	; 0x4ce8 <getLeftSpeedFromInput+0x1aa>
    4c8e:	01 e0       	ldi	r16, 0x01	; 1
    4c90:	10 e0       	ldi	r17, 0x00	; 0
    4c92:	80 91 ea 20 	lds	r24, 0x20EA
    4c96:	90 91 eb 20 	lds	r25, 0x20EB
    4c9a:	8c 17       	cp	r24, r28
    4c9c:	9d 07       	cpc	r25, r29
    4c9e:	0c f0       	brlt	.+2      	; 0x4ca2 <getLeftSpeedFromInput+0x164>
    4ca0:	83 cf       	rjmp	.-250    	; 0x4ba8 <getLeftSpeedFromInput+0x6a>
    4ca2:	80 91 fa 20 	lds	r24, 0x20FA
    4ca6:	90 91 fb 20 	lds	r25, 0x20FB
    4caa:	8c 17       	cp	r24, r28
    4cac:	9d 07       	cpc	r25, r29
    4cae:	7c f1       	brlt	.+94     	; 0x4d0e <getLeftSpeedFromInput+0x1d0>
    4cb0:	0f 3f       	cpi	r16, 0xFF	; 255
    4cb2:	8f ef       	ldi	r24, 0xFF	; 255
    4cb4:	18 07       	cpc	r17, r24
    4cb6:	09 f4       	brne	.+2      	; 0x4cba <getLeftSpeedFromInput+0x17c>
    4cb8:	76 c1       	rjmp	.+748    	; 0x4fa6 <getLeftSpeedFromInput+0x468>
    4cba:	80 91 1a 21 	lds	r24, 0x211A
    4cbe:	90 91 1b 21 	lds	r25, 0x211B
    4cc2:	8c 17       	cp	r24, r28
    4cc4:	9d 07       	cpc	r25, r29
    4cc6:	0c f0       	brlt	.+2      	; 0x4cca <getLeftSpeedFromInput+0x18c>
    4cc8:	84 cf       	rjmp	.-248    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
    4cca:	80 91 2a 21 	lds	r24, 0x212A
    4cce:	90 91 2b 21 	lds	r25, 0x212B
    4cd2:	8c 17       	cp	r24, r28
    4cd4:	9d 07       	cpc	r25, r29
    4cd6:	84 f1       	brlt	.+96     	; 0x4d38 <getLeftSpeedFromInput+0x1fa>
    4cd8:	0f 3f       	cpi	r16, 0xFF	; 255
    4cda:	8f ef       	ldi	r24, 0xFF	; 255
    4cdc:	18 07       	cpc	r17, r24
    4cde:	09 f0       	breq	.+2      	; 0x4ce2 <getLeftSpeedFromInput+0x1a4>
    4ce0:	78 cf       	rjmp	.-272    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4ce2:	07 e0       	ldi	r16, 0x07	; 7
    4ce4:	10 e0       	ldi	r17, 0x00	; 0
    4ce6:	75 cf       	rjmp	.-278    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    4ce8:	0f ef       	ldi	r16, 0xFF	; 255
    4cea:	1f ef       	ldi	r17, 0xFF	; 255
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    4cec:	80 91 da 20 	lds	r24, 0x20DA
    4cf0:	90 91 db 20 	lds	r25, 0x20DB
    4cf4:	8c 17       	cp	r24, r28
    4cf6:	9d 07       	cpc	r25, r29
    4cf8:	0c f4       	brge	.+2      	; 0x4cfc <getLeftSpeedFromInput+0x1be>
    4cfa:	49 cf       	rjmp	.-366    	; 0x4b8e <getLeftSpeedFromInput+0x50>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4cfc:	02 e0       	ldi	r16, 0x02	; 2
    4cfe:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
    4d00:	80 91 fa 20 	lds	r24, 0x20FA
    4d04:	90 91 fb 20 	lds	r25, 0x20FB
    4d08:	8c 17       	cp	r24, r28
    4d0a:	9d 07       	cpc	r25, r29
    4d0c:	b4 f6       	brge	.-84     	; 0x4cba <getLeftSpeedFromInput+0x17c>
    4d0e:	80 91 0a 21 	lds	r24, 0x210A
    4d12:	90 91 0b 21 	lds	r25, 0x210B
    4d16:	8c 17       	cp	r24, r28
    4d18:	9d 07       	cpc	r25, r29
    4d1a:	0c f4       	brge	.+2      	; 0x4d1e <getLeftSpeedFromInput+0x1e0>
    4d1c:	4d cf       	rjmp	.-358    	; 0x4bb8 <getLeftSpeedFromInput+0x7a>
    4d1e:	0f 3f       	cpi	r16, 0xFF	; 255
    4d20:	8f ef       	ldi	r24, 0xFF	; 255
    4d22:	18 07       	cpc	r17, r24
    4d24:	09 f4       	brne	.+2      	; 0x4d28 <getLeftSpeedFromInput+0x1ea>
    4d26:	3c c1       	rjmp	.+632    	; 0x4fa0 <getLeftSpeedFromInput+0x462>
    4d28:	80 91 2a 21 	lds	r24, 0x212A
    4d2c:	90 91 2b 21 	lds	r25, 0x212B
    4d30:	8c 17       	cp	r24, r28
    4d32:	9d 07       	cpc	r25, r29
    4d34:	0c f0       	brlt	.+2      	; 0x4d38 <getLeftSpeedFromInput+0x1fa>
    4d36:	4d cf       	rjmp	.-358    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
    4d38:	80 91 3a 21 	lds	r24, 0x213A
    4d3c:	90 91 3b 21 	lds	r25, 0x213B
    4d40:	8c 17       	cp	r24, r28
    4d42:	9d 07       	cpc	r25, r29
    4d44:	0c f4       	brge	.+2      	; 0x4d48 <getLeftSpeedFromInput+0x20a>
    4d46:	45 cf       	rjmp	.-374    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
    4d48:	0f 3f       	cpi	r16, 0xFF	; 255
    4d4a:	8f ef       	ldi	r24, 0xFF	; 255
    4d4c:	18 07       	cpc	r17, r24
    4d4e:	09 f0       	breq	.+2      	; 0x4d52 <getLeftSpeedFromInput+0x214>
    4d50:	40 cf       	rjmp	.-384    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4d52:	08 e0       	ldi	r16, 0x08	; 8
    4d54:	10 e0       	ldi	r17, 0x00	; 0
			}
		}     
    }

    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
    4d56:	20 97       	sbiw	r28, 0x00	; 0
    4d58:	09 f0       	breq	.+2      	; 0x4d5c <getLeftSpeedFromInput+0x21e>
    4d5a:	42 cf       	rjmp	.-380    	; 0x4be0 <getLeftSpeedFromInput+0xa2>
            speedLeftFromEnc = 0;
    4d5c:	10 92 fa 17 	sts	0x17FA, r1
    4d60:	10 92 f9 17 	sts	0x17F9, r1
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}
    4d64:	df 91       	pop	r29
    4d66:	cf 91       	pop	r28
    4d68:	1f 91       	pop	r17
    4d6a:	0f 91       	pop	r16
    4d6c:	ff 90       	pop	r15
    4d6e:	ef 90       	pop	r14
    4d70:	df 90       	pop	r13
    4d72:	cf 90       	pop	r12
    4d74:	bf 90       	pop	r11
    4d76:	af 90       	pop	r10
    4d78:	9f 90       	pop	r9
    4d7a:	8f 90       	pop	r8
    4d7c:	08 95       	ret
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4d7e:	60 91 c2 20 	lds	r22, 0x20C2
    4d82:	70 91 c3 20 	lds	r23, 0x20C3
    4d86:	6c 17       	cp	r22, r28
    4d88:	7d 07       	cpc	r23, r29
    4d8a:	0c f4       	brge	.+2      	; 0x4d8e <getLeftSpeedFromInput+0x250>
    4d8c:	51 c0       	rjmp	.+162    	; 0x4e30 <getLeftSpeedFromInput+0x2f2>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4d8e:	00 e0       	ldi	r16, 0x00	; 0
    4d90:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4d92:	80 91 e2 20 	lds	r24, 0x20E2
    4d96:	90 91 e3 20 	lds	r25, 0x20E3
    4d9a:	8c 17       	cp	r24, r28
    4d9c:	9d 07       	cpc	r25, r29
    4d9e:	0c f0       	brlt	.+2      	; 0x4da2 <getLeftSpeedFromInput+0x264>
    4da0:	5b c0       	rjmp	.+182    	; 0x4e58 <getLeftSpeedFromInput+0x31a>
    4da2:	80 91 f2 20 	lds	r24, 0x20F2
    4da6:	90 91 f3 20 	lds	r25, 0x20F3
    4daa:	8c 17       	cp	r24, r28
    4dac:	9d 07       	cpc	r25, r29
    4dae:	0c f4       	brge	.+2      	; 0x4db2 <getLeftSpeedFromInput+0x274>
    4db0:	17 c1       	rjmp	.+558    	; 0x4fe0 <getLeftSpeedFromInput+0x4a2>
    4db2:	0f 3f       	cpi	r16, 0xFF	; 255
    4db4:	8f ef       	ldi	r24, 0xFF	; 255
    4db6:	18 07       	cpc	r17, r24
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <getLeftSpeedFromInput+0x27e>
    4dba:	63 c1       	rjmp	.+710    	; 0x5082 <getLeftSpeedFromInput+0x544>
    4dbc:	80 91 12 21 	lds	r24, 0x2112
    4dc0:	90 91 13 21 	lds	r25, 0x2113
    4dc4:	8c 17       	cp	r24, r28
    4dc6:	9d 07       	cpc	r25, r29
    4dc8:	0c f4       	brge	.+2      	; 0x4dcc <getLeftSpeedFromInput+0x28e>
    4dca:	4e c0       	rjmp	.+156    	; 0x4e68 <getLeftSpeedFromInput+0x32a>
    4dcc:	0f 3f       	cpi	r16, 0xFF	; 255
    4dce:	8f ef       	ldi	r24, 0xFF	; 255
    4dd0:	18 07       	cpc	r17, r24
    4dd2:	09 f4       	brne	.+2      	; 0x4dd6 <getLeftSpeedFromInput+0x298>
    4dd4:	50 c1       	rjmp	.+672    	; 0x5076 <getLeftSpeedFromInput+0x538>
    4dd6:	80 91 32 21 	lds	r24, 0x2132
    4dda:	90 91 33 21 	lds	r25, 0x2133
    4dde:	8c 17       	cp	r24, r28
    4de0:	9d 07       	cpc	r25, r29
    4de2:	6c f4       	brge	.+26     	; 0x4dfe <getLeftSpeedFromInput+0x2c0>
    4de4:	e0 90 42 21 	lds	r14, 0x2142
    4de8:	f0 90 43 21 	lds	r15, 0x2143
    4dec:	ec 16       	cp	r14, r28
    4dee:	fd 06       	cpc	r15, r29
    4df0:	0c f4       	brge	.+2      	; 0x4df4 <getLeftSpeedFromInput+0x2b6>
    4df2:	4f c0       	rjmp	.+158    	; 0x4e92 <getLeftSpeedFromInput+0x354>
    4df4:	0f 3f       	cpi	r16, 0xFF	; 255
    4df6:	8f ef       	ldi	r24, 0xFF	; 255
    4df8:	18 07       	cpc	r17, r24
    4dfa:	09 f4       	brne	.+2      	; 0x4dfe <getLeftSpeedFromInput+0x2c0>
    4dfc:	45 c1       	rjmp	.+650    	; 0x5088 <getLeftSpeedFromInput+0x54a>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    4dfe:	01 15       	cp	r16, r1
    4e00:	11 05       	cpc	r17, r1
    4e02:	09 f0       	breq	.+2      	; 0x4e06 <getLeftSpeedFromInput+0x2c8>
    4e04:	4f c0       	rjmp	.+158    	; 0x4ea4 <getLeftSpeedFromInput+0x366>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
    4e06:	20 91 c4 20 	lds	r18, 0x20C4
    4e0a:	30 91 c5 20 	lds	r19, 0x20C5
    4e0e:	c2 9f       	mul	r28, r18
    4e10:	c0 01       	movw	r24, r0
    4e12:	c3 9f       	mul	r28, r19
    4e14:	90 0d       	add	r25, r0
    4e16:	d2 9f       	mul	r29, r18
    4e18:	90 0d       	add	r25, r0
    4e1a:	11 24       	eor	r1, r1
    4e1c:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
		}
		speedLeftFromEnc = -speedLeftFromEnc;
    4e20:	71 95       	neg	r23
    4e22:	61 95       	neg	r22
    4e24:	71 09       	sbc	r23, r1
    4e26:	70 93 fa 17 	sts	0x17FA, r23
    4e2a:	60 93 f9 17 	sts	0x17F9, r22
    4e2e:	9a cf       	rjmp	.-204    	; 0x4d64 <getLeftSpeedFromInput+0x226>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4e30:	80 91 d2 20 	lds	r24, 0x20D2
    4e34:	90 91 d3 20 	lds	r25, 0x20D3
    4e38:	8c 17       	cp	r24, r28
    4e3a:	9d 07       	cpc	r25, r29
    4e3c:	0c f0       	brlt	.+2      	; 0x4e40 <getLeftSpeedFromInput+0x302>
    4e3e:	c6 c0       	rjmp	.+396    	; 0x4fcc <getLeftSpeedFromInput+0x48e>
}

// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    4e40:	0f ef       	ldi	r16, 0xFF	; 255
    4e42:	1f ef       	ldi	r17, 0xFF	; 255
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4e44:	80 91 e2 20 	lds	r24, 0x20E2
    4e48:	90 91 e3 20 	lds	r25, 0x20E3
    4e4c:	8c 17       	cp	r24, r28
    4e4e:	9d 07       	cpc	r25, r29
    4e50:	0c f4       	brge	.+2      	; 0x4e54 <getLeftSpeedFromInput+0x316>
    4e52:	a7 cf       	rjmp	.-178    	; 0x4da2 <getLeftSpeedFromInput+0x264>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4e54:	02 e0       	ldi	r16, 0x02	; 2
    4e56:	10 e0       	ldi	r17, 0x00	; 0
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4e58:	80 91 02 21 	lds	r24, 0x2102
    4e5c:	90 91 03 21 	lds	r25, 0x2103
    4e60:	8c 17       	cp	r24, r28
    4e62:	9d 07       	cpc	r25, r29
    4e64:	0c f4       	brge	.+2      	; 0x4e68 <getLeftSpeedFromInput+0x32a>
    4e66:	aa cf       	rjmp	.-172    	; 0x4dbc <getLeftSpeedFromInput+0x27e>
    4e68:	80 91 22 21 	lds	r24, 0x2122
    4e6c:	90 91 23 21 	lds	r25, 0x2123
    4e70:	8c 17       	cp	r24, r28
    4e72:	9d 07       	cpc	r25, r29
    4e74:	0c f4       	brge	.+2      	; 0x4e78 <getLeftSpeedFromInput+0x33a>
    4e76:	9a c0       	rjmp	.+308    	; 0x4fac <getLeftSpeedFromInput+0x46e>
    4e78:	0f 3f       	cpi	r16, 0xFF	; 255
    4e7a:	8f ef       	ldi	r24, 0xFF	; 255
    4e7c:	18 07       	cpc	r17, r24
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <getLeftSpeedFromInput+0x344>
    4e80:	fd c0       	rjmp	.+506    	; 0x507c <getLeftSpeedFromInput+0x53e>
    4e82:	e0 90 42 21 	lds	r14, 0x2142
    4e86:	f0 90 43 21 	lds	r15, 0x2143
    4e8a:	ec 16       	cp	r14, r28
    4e8c:	fd 06       	cpc	r15, r29
    4e8e:	0c f0       	brlt	.+2      	; 0x4e92 <getLeftSpeedFromInput+0x354>
    4e90:	b6 cf       	rjmp	.-148    	; 0x4dfe <getLeftSpeedFromInput+0x2c0>
            } else {
                speedLeftFromEnc = calibration[indFwL-1][1] + (signed int)(((float)(last_left_vel-calibration[indFwL-1][0])*(float)(calibration[indFwL][1]-calibration[indFwL-1][1]))/(float)(calibration[indFwL][0]-calibration[indFwL-1][0]));
            }
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
    4e92:	01 15       	cp	r16, r1
    4e94:	11 05       	cpc	r17, r1
    4e96:	09 f4       	brne	.+2      	; 0x4e9a <getLeftSpeedFromInput+0x35c>
    4e98:	b6 cf       	rjmp	.-148    	; 0x4e06 <getLeftSpeedFromInput+0x2c8>
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
    4e9a:	0f 3f       	cpi	r16, 0xFF	; 255
    4e9c:	8f ef       	ldi	r24, 0xFF	; 255
    4e9e:	18 07       	cpc	r17, r24
    4ea0:	09 f4       	brne	.+2      	; 0x4ea4 <getLeftSpeedFromInput+0x366>
    4ea2:	c0 c0       	rjmp	.+384    	; 0x5024 <getLeftSpeedFromInput+0x4e6>
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
		} else {
        	speedLeftFromEnc = calibration[indBwL-1][5] + (signed int)(((float)(last_left_vel-calibration[indBwL-1][4])*(float)(calibration[indBwL][5]-calibration[indBwL-1][5]))/(float)(calibration[indBwL][4]-calibration[indBwL-1][4]));
    4ea4:	f8 01       	movw	r30, r16
    4ea6:	e2 95       	swap	r30
    4ea8:	f2 95       	swap	r31
    4eaa:	f0 7f       	andi	r31, 0xF0	; 240
    4eac:	fe 27       	eor	r31, r30
    4eae:	e0 7f       	andi	r30, 0xF0	; 240
    4eb0:	fe 27       	eor	r31, r30
    4eb2:	e6 55       	subi	r30, 0x56	; 86
    4eb4:	ff 4d       	sbci	r31, 0xDF	; 223
    4eb6:	c0 84       	ldd	r12, Z+8	; 0x08
    4eb8:	d1 84       	ldd	r13, Z+9	; 0x09
    4eba:	e2 84       	ldd	r14, Z+10	; 0x0a
    4ebc:	f3 84       	ldd	r15, Z+11	; 0x0b
    4ebe:	cc 19       	sub	r28, r12
    4ec0:	dd 09       	sbc	r29, r13
    4ec2:	be 01       	movw	r22, r28
    4ec4:	dd 0f       	add	r29, r29
    4ec6:	88 0b       	sbc	r24, r24
    4ec8:	99 0b       	sbc	r25, r25
    4eca:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4ece:	4b 01       	movw	r8, r22
    4ed0:	5c 01       	movw	r10, r24
    4ed2:	02 95       	swap	r16
    4ed4:	12 95       	swap	r17
    4ed6:	10 7f       	andi	r17, 0xF0	; 240
    4ed8:	10 27       	eor	r17, r16
    4eda:	00 7f       	andi	r16, 0xF0	; 240
    4edc:	10 27       	eor	r17, r16
    4ede:	e8 01       	movw	r28, r16
    4ee0:	c6 54       	subi	r28, 0x46	; 70
    4ee2:	df 4d       	sbci	r29, 0xDF	; 223
    4ee4:	6a 85       	ldd	r22, Y+10	; 0x0a
    4ee6:	7b 85       	ldd	r23, Y+11	; 0x0b
    4ee8:	6e 19       	sub	r22, r14
    4eea:	7f 09       	sbc	r23, r15
    4eec:	07 2e       	mov	r0, r23
    4eee:	00 0c       	add	r0, r0
    4ef0:	88 0b       	sbc	r24, r24
    4ef2:	99 0b       	sbc	r25, r25
    4ef4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4ef8:	9b 01       	movw	r18, r22
    4efa:	ac 01       	movw	r20, r24
    4efc:	c5 01       	movw	r24, r10
    4efe:	b4 01       	movw	r22, r8
    4f00:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    4f04:	4b 01       	movw	r8, r22
    4f06:	5c 01       	movw	r10, r24
    4f08:	88 85       	ldd	r24, Y+8	; 0x08
    4f0a:	99 85       	ldd	r25, Y+9	; 0x09
    4f0c:	8c 19       	sub	r24, r12
    4f0e:	9d 09       	sbc	r25, r13
    4f10:	bc 01       	movw	r22, r24
    4f12:	99 0f       	add	r25, r25
    4f14:	88 0b       	sbc	r24, r24
    4f16:	99 0b       	sbc	r25, r25
    4f18:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4f1c:	9b 01       	movw	r18, r22
    4f1e:	ac 01       	movw	r20, r24
    4f20:	c5 01       	movw	r24, r10
    4f22:	b4 01       	movw	r22, r8
    4f24:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    4f28:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    4f2c:	6e 0d       	add	r22, r14
    4f2e:	7f 1d       	adc	r23, r15
    4f30:	77 cf       	rjmp	.-274    	; 0x4e20 <getLeftSpeedFromInput+0x2e2>
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
            } else if(indFwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
                speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][1]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][0]);  // take the max
    4f32:	60 91 3c 21 	lds	r22, 0x213C
    4f36:	70 91 3d 21 	lds	r23, 0x213D
    4f3a:	07 2e       	mov	r0, r23
    4f3c:	00 0c       	add	r0, r0
    4f3e:	88 0b       	sbc	r24, r24
    4f40:	99 0b       	sbc	r25, r25
    4f42:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4f46:	6b 01       	movw	r12, r22
    4f48:	7c 01       	movw	r14, r24
    4f4a:	be 01       	movw	r22, r28
    4f4c:	dd 0f       	add	r29, r29
    4f4e:	88 0b       	sbc	r24, r24
    4f50:	99 0b       	sbc	r25, r25
    4f52:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4f56:	9b 01       	movw	r18, r22
    4f58:	ac 01       	movw	r20, r24
    4f5a:	c7 01       	movw	r24, r14
    4f5c:	b6 01       	movw	r22, r12
    4f5e:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    4f62:	6b 01       	movw	r12, r22
    4f64:	7c 01       	movw	r14, r24
    4f66:	80 91 3a 21 	lds	r24, 0x213A
    4f6a:	90 91 3b 21 	lds	r25, 0x213B
    4f6e:	bc 01       	movw	r22, r24
    4f70:	99 0f       	add	r25, r25
    4f72:	88 0b       	sbc	r24, r24
    4f74:	99 0b       	sbc	r25, r25
    4f76:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    4f7a:	9b 01       	movw	r18, r22
    4f7c:	ac 01       	movw	r20, r24
    4f7e:	c7 01       	movw	r24, r14
    4f80:	b6 01       	movw	r22, r12
    4f82:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    4f86:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    4f8a:	70 93 fa 17 	sts	0x17FA, r23
    4f8e:	60 93 f9 17 	sts	0x17F9, r22
    4f92:	e8 ce       	rjmp	.-560    	; 0x4d64 <getLeftSpeedFromInput+0x226>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4f94:	06 e0       	ldi	r16, 0x06	; 6
    4f96:	10 e0       	ldi	r17, 0x00	; 0
    4f98:	1c ce       	rjmp	.-968    	; 0x4bd2 <getLeftSpeedFromInput+0x94>
    4f9a:	03 e0       	ldi	r16, 0x03	; 3
    4f9c:	10 e0       	ldi	r17, 0x00	; 0
    4f9e:	04 ce       	rjmp	.-1016   	; 0x4ba8 <getLeftSpeedFromInput+0x6a>
    4fa0:	05 e0       	ldi	r16, 0x05	; 5
    4fa2:	10 e0       	ldi	r17, 0x00	; 0
    4fa4:	c1 ce       	rjmp	.-638    	; 0x4d28 <getLeftSpeedFromInput+0x1ea>
    4fa6:	04 e0       	ldi	r16, 0x04	; 4
    4fa8:	10 e0       	ldi	r17, 0x00	; 0
    4faa:	87 ce       	rjmp	.-754    	; 0x4cba <getLeftSpeedFromInput+0x17c>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4fac:	80 91 32 21 	lds	r24, 0x2132
    4fb0:	90 91 33 21 	lds	r25, 0x2133
    4fb4:	8c 17       	cp	r24, r28
    4fb6:	9d 07       	cpc	r25, r29
    4fb8:	0c f4       	brge	.+2      	; 0x4fbc <getLeftSpeedFromInput+0x47e>
    4fba:	14 cf       	rjmp	.-472    	; 0x4de4 <getLeftSpeedFromInput+0x2a6>
    4fbc:	0f 3f       	cpi	r16, 0xFF	; 255
    4fbe:	8f ef       	ldi	r24, 0xFF	; 255
    4fc0:	18 07       	cpc	r17, r24
    4fc2:	09 f0       	breq	.+2      	; 0x4fc6 <getLeftSpeedFromInput+0x488>
    4fc4:	1c cf       	rjmp	.-456    	; 0x4dfe <getLeftSpeedFromInput+0x2c0>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4fc6:	07 e0       	ldi	r16, 0x07	; 7
    4fc8:	10 e0       	ldi	r17, 0x00	; 0
    4fca:	19 cf       	rjmp	.-462    	; 0x4dfe <getLeftSpeedFromInput+0x2c0>
		if(pwm_left >= 0) {
			if(calibration[i][0]>=last_left_vel && indFwL<0) {	// forward left
				indFwL = i;
			}
		} else {
			if(calibration[i][4]>=last_left_vel && indBwL<0) {	// backward left
    4fcc:	01 e0       	ldi	r16, 0x01	; 1
    4fce:	10 e0       	ldi	r17, 0x00	; 0
    4fd0:	80 91 f2 20 	lds	r24, 0x20F2
    4fd4:	90 91 f3 20 	lds	r25, 0x20F3
    4fd8:	8c 17       	cp	r24, r28
    4fda:	9d 07       	cpc	r25, r29
    4fdc:	0c f0       	brlt	.+2      	; 0x4fe0 <getLeftSpeedFromInput+0x4a2>
    4fde:	ee ce       	rjmp	.-548    	; 0x4dbc <getLeftSpeedFromInput+0x27e>
    4fe0:	80 91 02 21 	lds	r24, 0x2102
    4fe4:	90 91 03 21 	lds	r25, 0x2103
    4fe8:	8c 17       	cp	r24, r28
    4fea:	9d 07       	cpc	r25, r29
    4fec:	0c f4       	brge	.+2      	; 0x4ff0 <getLeftSpeedFromInput+0x4b2>
    4fee:	e6 ce       	rjmp	.-564    	; 0x4dbc <getLeftSpeedFromInput+0x27e>
    4ff0:	0f 3f       	cpi	r16, 0xFF	; 255
    4ff2:	8f ef       	ldi	r24, 0xFF	; 255
    4ff4:	18 07       	cpc	r17, r24
    4ff6:	09 f0       	breq	.+2      	; 0x4ffa <getLeftSpeedFromInput+0x4bc>
    4ff8:	37 cf       	rjmp	.-402    	; 0x4e68 <getLeftSpeedFromInput+0x32a>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    4ffa:	04 e0       	ldi	r16, 0x04	; 4
    4ffc:	10 e0       	ldi	r17, 0x00	; 0
    4ffe:	34 cf       	rjmp	.-408    	; 0x4e68 <getLeftSpeedFromInput+0x32a>
    if(pwm_left >= 0) {
        if(last_left_vel == 0) {
            speedLeftFromEnc = 0;
        } else {
            if(indFwL==0) {  // the velocity is lower than first saved in the matrix
                speedLeftFromEnc = (last_left_vel*calibration[0][1])/calibration[0][0];
    5000:	20 91 bc 20 	lds	r18, 0x20BC
    5004:	30 91 bd 20 	lds	r19, 0x20BD
    5008:	c2 9f       	mul	r28, r18
    500a:	c0 01       	movw	r24, r0
    500c:	c3 9f       	mul	r28, r19
    500e:	90 0d       	add	r25, r0
    5010:	d2 9f       	mul	r29, r18
    5012:	90 0d       	add	r25, r0
    5014:	11 24       	eor	r1, r1
    5016:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    501a:	70 93 fa 17 	sts	0x17FA, r23
    501e:	60 93 f9 17 	sts	0x17F9, r22
    5022:	a0 ce       	rjmp	.-704    	; 0x4d64 <getLeftSpeedFromInput+0x226>
        }
    } else {
		if(indBwL==0) {  // the velocity is lower than first saved in the matrix
        	speedLeftFromEnc = (last_left_vel*calibration[0][5])/calibration[0][4];
		} else if(indBwL==-1) { //CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        	speedLeftFromEnc = (signed int)(((float)calibration[CALIBRATION_SAMPLES-1][5]*(float)last_left_vel)/(float)calibration[CALIBRATION_SAMPLES-1][4]);  // take the max
    5024:	60 91 44 21 	lds	r22, 0x2144
    5028:	70 91 45 21 	lds	r23, 0x2145
    502c:	07 2e       	mov	r0, r23
    502e:	00 0c       	add	r0, r0
    5030:	88 0b       	sbc	r24, r24
    5032:	99 0b       	sbc	r25, r25
    5034:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5038:	4b 01       	movw	r8, r22
    503a:	5c 01       	movw	r10, r24
    503c:	be 01       	movw	r22, r28
    503e:	dd 0f       	add	r29, r29
    5040:	88 0b       	sbc	r24, r24
    5042:	99 0b       	sbc	r25, r25
    5044:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5048:	9b 01       	movw	r18, r22
    504a:	ac 01       	movw	r20, r24
    504c:	c5 01       	movw	r24, r10
    504e:	b4 01       	movw	r22, r8
    5050:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5054:	4b 01       	movw	r8, r22
    5056:	5c 01       	movw	r10, r24
    5058:	b7 01       	movw	r22, r14
    505a:	ff 0c       	add	r15, r15
    505c:	88 0b       	sbc	r24, r24
    505e:	99 0b       	sbc	r25, r25
    5060:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5064:	9b 01       	movw	r18, r22
    5066:	ac 01       	movw	r20, r24
    5068:	c5 01       	movw	r24, r10
    506a:	b4 01       	movw	r22, r8
    506c:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    5070:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    5074:	d5 ce       	rjmp	.-598    	; 0x4e20 <getLeftSpeedFromInput+0x2e2>
// extract the speed of the motors in mm/s given a measured speed (adc)
void getLeftSpeedFromInput() {

    signed int i=0, indFwL=-1, indBwL=-1;
    
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5076:	05 e0       	ldi	r16, 0x05	; 5
    5078:	10 e0       	ldi	r17, 0x00	; 0
    507a:	ad ce       	rjmp	.-678    	; 0x4dd6 <getLeftSpeedFromInput+0x298>
    507c:	06 e0       	ldi	r16, 0x06	; 6
    507e:	10 e0       	ldi	r17, 0x00	; 0
    5080:	00 cf       	rjmp	.-512    	; 0x4e82 <getLeftSpeedFromInput+0x344>
    5082:	03 e0       	ldi	r16, 0x03	; 3
    5084:	10 e0       	ldi	r17, 0x00	; 0
    5086:	9a ce       	rjmp	.-716    	; 0x4dbc <getLeftSpeedFromInput+0x27e>
    5088:	08 e0       	ldi	r16, 0x08	; 8
    508a:	10 e0       	ldi	r17, 0x00	; 0
    508c:	06 cf       	rjmp	.-500    	; 0x4e9a <getLeftSpeedFromInput+0x35c>

0000508e <writeDefaultCalibration>:
		speedLeftFromEnc = -speedLeftFromEnc;
    }
    
}

void writeDefaultCalibration() {
    508e:	2f 92       	push	r2
    5090:	3f 92       	push	r3
    5092:	4f 92       	push	r4
    5094:	5f 92       	push	r5
    5096:	6f 92       	push	r6
    5098:	7f 92       	push	r7
    509a:	8f 92       	push	r8
    509c:	9f 92       	push	r9
    509e:	af 92       	push	r10
    50a0:	bf 92       	push	r11
    50a2:	cf 92       	push	r12
    50a4:	df 92       	push	r13
    50a6:	ef 92       	push	r14
    50a8:	ff 92       	push	r15
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    	calibration[i][0] = i+1;
	}
    // the following values are taken from a field test
    // forward left, speed control enabled
    calibration[0][0] = 20;		// measured speed with back EMF (adc 0..1023)
    50b2:	ea eb       	ldi	r30, 0xBA	; 186
    50b4:	f0 e2       	ldi	r31, 0x20	; 32
    50b6:	04 e1       	ldi	r16, 0x14	; 20
    50b8:	10 e0       	ldi	r17, 0x00	; 0
    50ba:	11 83       	std	Z+1, r17	; 0x01
    50bc:	00 83       	st	Z, r16
    calibration[1][0] = 40;
    50be:	88 e2       	ldi	r24, 0x28	; 40
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	91 8b       	std	Z+17, r25	; 0x11
    50c4:	80 8b       	std	Z+16, r24	; 0x10
    calibration[2][0] = 59;
    50c6:	8b e3       	ldi	r24, 0x3B	; 59
    50c8:	c8 2e       	mov	r12, r24
    50ca:	d1 2c       	mov	r13, r1
    50cc:	d1 a2       	std	Z+33, r13	; 0x21
    50ce:	c0 a2       	std	Z+32, r12	; 0x20
    calibration[3][0] = 79;
    50d0:	9f e4       	ldi	r25, 0x4F	; 79
    50d2:	69 2e       	mov	r6, r25
    50d4:	71 2c       	mov	r7, r1
    50d6:	71 aa       	std	Z+49, r7	; 0x31
    50d8:	60 aa       	std	Z+48, r6	; 0x30
    calibration[4][0] = 100;
    50da:	24 e6       	ldi	r18, 0x64	; 100
    50dc:	e2 2e       	mov	r14, r18
    50de:	f1 2c       	mov	r15, r1
    50e0:	f0 92 fb 20 	sts	0x20FB, r15
    50e4:	e0 92 fa 20 	sts	0x20FA, r14
    calibration[5][0] = 120;
    50e8:	38 e7       	ldi	r19, 0x78	; 120
    50ea:	23 2e       	mov	r2, r19
    50ec:	31 2c       	mov	r3, r1
    50ee:	30 92 0b 21 	sts	0x210B, r3
    50f2:	20 92 0a 21 	sts	0x210A, r2
    calibration[6][0] = 139;
    50f6:	8b e8       	ldi	r24, 0x8B	; 139
    50f8:	90 e0       	ldi	r25, 0x00	; 0
    50fa:	90 93 1b 21 	sts	0x211B, r25
    50fe:	80 93 1a 21 	sts	0x211A, r24
    calibration[7][0] = 159;
    5102:	2f e9       	ldi	r18, 0x9F	; 159
    5104:	30 e0       	ldi	r19, 0x00	; 0
    5106:	30 93 2b 21 	sts	0x212B, r19
    510a:	20 93 2a 21 	sts	0x212A, r18
	calibration[8][0] = 180;
    510e:	64 eb       	ldi	r22, 0xB4	; 180
    5110:	70 e0       	ldi	r23, 0x00	; 0
    5112:	70 93 3b 21 	sts	0x213B, r23
    5116:	60 93 3a 21 	sts	0x213A, r22
    calibration[0][1] = 19;    	// real speed measured in mm/s
    511a:	a3 e1       	ldi	r26, 0x13	; 19
    511c:	b0 e0       	ldi	r27, 0x00	; 0
    511e:	b3 83       	std	Z+3, r27	; 0x03
    5120:	a2 83       	std	Z+2, r26	; 0x02
    calibration[1][1] = 47;
    5122:	2f e2       	ldi	r18, 0x2F	; 47
    5124:	30 e0       	ldi	r19, 0x00	; 0
    5126:	33 8b       	std	Z+19, r19	; 0x13
    5128:	22 8b       	std	Z+18, r18	; 0x12
    calibration[2][1] = 72;
    512a:	28 e4       	ldi	r18, 0x48	; 72
    512c:	30 e0       	ldi	r19, 0x00	; 0
    512e:	33 a3       	std	Z+35, r19	; 0x23
    5130:	22 a3       	std	Z+34, r18	; 0x22
    calibration[3][1] = 91;
    5132:	2b e5       	ldi	r18, 0x5B	; 91
    5134:	30 e0       	ldi	r19, 0x00	; 0
    5136:	33 ab       	std	Z+51, r19	; 0x33
    5138:	22 ab       	std	Z+50, r18	; 0x32
    calibration[4][1] = 109;
    513a:	2d e6       	ldi	r18, 0x6D	; 109
    513c:	30 e0       	ldi	r19, 0x00	; 0
    513e:	30 93 fd 20 	sts	0x20FD, r19
    5142:	20 93 fc 20 	sts	0x20FC, r18
    calibration[5][1] = 125;
    5146:	4d e7       	ldi	r20, 0x7D	; 125
    5148:	50 e0       	ldi	r21, 0x00	; 0
    514a:	50 93 0d 21 	sts	0x210D, r21
    514e:	40 93 0c 21 	sts	0x210C, r20
    calibration[6][1] = 143;
    5152:	2f e8       	ldi	r18, 0x8F	; 143
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	30 93 1d 21 	sts	0x211D, r19
    515a:	20 93 1c 21 	sts	0x211C, r18
    calibration[7][1] = 160;
    515e:	20 ea       	ldi	r18, 0xA0	; 160
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	30 93 2d 21 	sts	0x212D, r19
    5166:	20 93 2c 21 	sts	0x212C, r18
	calibration[8][1] = 174;
    516a:	ce ea       	ldi	r28, 0xAE	; 174
    516c:	d0 e0       	ldi	r29, 0x00	; 0
    516e:	d0 93 3d 21 	sts	0x213D, r29
    5172:	c0 93 3c 21 	sts	0x213C, r28
    // forward right, speed control enabled
    calibration[0][2] = 19;		// measured speed with back EMF (adc 0..1023)
    5176:	b5 83       	std	Z+5, r27	; 0x05
    5178:	a4 83       	std	Z+4, r26	; 0x04
    calibration[1][2] = 39;
    517a:	c7 e2       	ldi	r28, 0x27	; 39
    517c:	d0 e0       	ldi	r29, 0x00	; 0
    517e:	d5 8b       	std	Z+21, r29	; 0x15
    5180:	c4 8b       	std	Z+20, r28	; 0x14
    calibration[2][2] = 60;
    5182:	ac e3       	ldi	r26, 0x3C	; 60
    5184:	8a 2e       	mov	r8, r26
    5186:	91 2c       	mov	r9, r1
    5188:	95 a2       	std	Z+37, r9	; 0x25
    518a:	84 a2       	std	Z+36, r8	; 0x24
    calibration[3][2] = 80;
    518c:	a0 e5       	ldi	r26, 0x50	; 80
    518e:	b0 e0       	ldi	r27, 0x00	; 0
    5190:	b5 ab       	std	Z+53, r27	; 0x35
    5192:	a4 ab       	std	Z+52, r26	; 0x34
    calibration[4][2] = 99;
    5194:	b3 e6       	ldi	r27, 0x63	; 99
    5196:	4b 2e       	mov	r4, r27
    5198:	51 2c       	mov	r5, r1
    519a:	50 92 ff 20 	sts	0x20FF, r5
    519e:	40 92 fe 20 	sts	0x20FE, r4
    calibration[5][2] = 119;
    51a2:	a7 e7       	ldi	r26, 0x77	; 119
    51a4:	b0 e0       	ldi	r27, 0x00	; 0
    51a6:	b0 93 0f 21 	sts	0x210F, r27
    51aa:	a0 93 0e 21 	sts	0x210E, r26
    calibration[6][2] = 140;
    51ae:	0f 2e       	mov	r0, r31
    51b0:	fc e8       	ldi	r31, 0x8C	; 140
    51b2:	cf 2e       	mov	r12, r31
    51b4:	d1 2c       	mov	r13, r1
    51b6:	f0 2d       	mov	r31, r0
    51b8:	d0 92 1f 21 	sts	0x211F, r13
    51bc:	c0 92 1e 21 	sts	0x211E, r12
    calibration[7][2] = 160;
    51c0:	30 93 2f 21 	sts	0x212F, r19
    51c4:	20 93 2e 21 	sts	0x212E, r18
	calibration[8][2] = 180;
    51c8:	70 93 3f 21 	sts	0x213F, r23
    51cc:	60 93 3e 21 	sts	0x213E, r22
    calibration[0][3] = 23;    	// real speed measured in mm/s
    51d0:	0f 2e       	mov	r0, r31
    51d2:	f7 e1       	ldi	r31, 0x17	; 23
    51d4:	ef 2e       	mov	r14, r31
    51d6:	f1 2c       	mov	r15, r1
    51d8:	f0 2d       	mov	r31, r0
    51da:	f7 82       	std	Z+7, r15	; 0x07
    51dc:	e6 82       	std	Z+6, r14	; 0x06
    calibration[1][3] = 46;
    51de:	0f 2e       	mov	r0, r31
    51e0:	fe e2       	ldi	r31, 0x2E	; 46
    51e2:	af 2e       	mov	r10, r31
    51e4:	b1 2c       	mov	r11, r1
    51e6:	f0 2d       	mov	r31, r0
    51e8:	b7 8a       	std	Z+23, r11	; 0x17
    51ea:	a6 8a       	std	Z+22, r10	; 0x16
    calibration[2][3] = 64;
    51ec:	68 94       	set
    51ee:	ee 24       	eor	r14, r14
    51f0:	e6 f8       	bld	r14, 6
    51f2:	f1 2c       	mov	r15, r1
    51f4:	f7 a2       	std	Z+39, r15	; 0x27
    51f6:	e6 a2       	std	Z+38, r14	; 0x26
    calibration[3][3] = 81;
    51f8:	0f 2e       	mov	r0, r31
    51fa:	f1 e5       	ldi	r31, 0x51	; 81
    51fc:	ef 2e       	mov	r14, r31
    51fe:	f1 2c       	mov	r15, r1
    5200:	f0 2d       	mov	r31, r0
    5202:	f7 aa       	std	Z+55, r15	; 0x37
    5204:	e6 aa       	std	Z+54, r14	; 0x36
    calibration[4][3] = 97;
    5206:	0f 2e       	mov	r0, r31
    5208:	f1 e6       	ldi	r31, 0x61	; 97
    520a:	cf 2e       	mov	r12, r31
    520c:	d1 2c       	mov	r13, r1
    520e:	f0 2d       	mov	r31, r0
    5210:	d0 92 01 21 	sts	0x2101, r13
    5214:	c0 92 00 21 	sts	0x2100, r12
    calibration[5][3] = 112;
    5218:	0f 2e       	mov	r0, r31
    521a:	f0 e7       	ldi	r31, 0x70	; 112
    521c:	cf 2e       	mov	r12, r31
    521e:	d1 2c       	mov	r13, r1
    5220:	f0 2d       	mov	r31, r0
    5222:	d0 92 11 21 	sts	0x2111, r13
    5226:	c0 92 10 21 	sts	0x2110, r12
    calibration[6][3] = 125;
    522a:	50 93 21 21 	sts	0x2121, r21
    522e:	40 93 20 21 	sts	0x2120, r20
    calibration[7][3] = 139;
    5232:	90 93 31 21 	sts	0x2131, r25
    5236:	80 93 30 21 	sts	0x2130, r24
	calibration[8][3] = 152;
    523a:	0f 2e       	mov	r0, r31
    523c:	f8 e9       	ldi	r31, 0x98	; 152
    523e:	cf 2e       	mov	r12, r31
    5240:	d1 2c       	mov	r13, r1
    5242:	f0 2d       	mov	r31, r0
    5244:	d0 92 41 21 	sts	0x2141, r13
    5248:	c0 92 40 21 	sts	0x2140, r12
    // backward left, speed control enabled
    calibration[0][4] = 20;		// measured speed with back EMF (adc 0..1023)
    524c:	11 87       	std	Z+9, r17	; 0x09
    524e:	00 87       	std	Z+8, r16	; 0x08
    calibration[1][4] = 39;
    5250:	d1 8f       	std	Z+25, r29	; 0x19
    5252:	c0 8f       	std	Z+24, r28	; 0x18
    calibration[2][4] = 60;
    5254:	91 a6       	std	Z+41, r9	; 0x29
    5256:	80 a6       	std	Z+40, r8	; 0x28
    calibration[3][4] = 79;
    5258:	71 ae       	std	Z+57, r7	; 0x39
    525a:	60 ae       	std	Z+56, r6	; 0x38
    calibration[4][4] = 99;
    525c:	50 92 03 21 	sts	0x2103, r5
    5260:	40 92 02 21 	sts	0x2102, r4
    calibration[5][4] = 120;
    5264:	30 92 13 21 	sts	0x2113, r3
    5268:	20 92 12 21 	sts	0x2112, r2
    calibration[6][4] = 140;
    526c:	0f 2e       	mov	r0, r31
    526e:	fc e8       	ldi	r31, 0x8C	; 140
    5270:	cf 2e       	mov	r12, r31
    5272:	d1 2c       	mov	r13, r1
    5274:	f0 2d       	mov	r31, r0
    5276:	d0 92 23 21 	sts	0x2123, r13
    527a:	c0 92 22 21 	sts	0x2122, r12
    calibration[7][4] = 160;
    527e:	30 93 33 21 	sts	0x2133, r19
    5282:	20 93 32 21 	sts	0x2132, r18
	calibration[8][4] = 179;
    5286:	0f 2e       	mov	r0, r31
    5288:	f3 eb       	ldi	r31, 0xB3	; 179
    528a:	cf 2e       	mov	r12, r31
    528c:	d1 2c       	mov	r13, r1
    528e:	f0 2d       	mov	r31, r0
    5290:	d0 92 43 21 	sts	0x2143, r13
    5294:	c0 92 42 21 	sts	0x2142, r12
    calibration[0][5] = 18;    	// real speed measured in mm/s
    5298:	0f 2e       	mov	r0, r31
    529a:	f2 e1       	ldi	r31, 0x12	; 18
    529c:	cf 2e       	mov	r12, r31
    529e:	d1 2c       	mov	r13, r1
    52a0:	f0 2d       	mov	r31, r0
    52a2:	d3 86       	std	Z+11, r13	; 0x0b
    52a4:	c2 86       	std	Z+10, r12	; 0x0a
    calibration[1][5] = 45;
    52a6:	0f 2e       	mov	r0, r31
    52a8:	fd e2       	ldi	r31, 0x2D	; 45
    52aa:	cf 2e       	mov	r12, r31
    52ac:	d1 2c       	mov	r13, r1
    52ae:	f0 2d       	mov	r31, r0
    52b0:	d3 8e       	std	Z+27, r13	; 0x1b
    52b2:	c2 8e       	std	Z+26, r12	; 0x1a
    calibration[2][5] = 68;
    52b4:	0f 2e       	mov	r0, r31
    52b6:	f4 e4       	ldi	r31, 0x44	; 68
    52b8:	cf 2e       	mov	r12, r31
    52ba:	d1 2c       	mov	r13, r1
    52bc:	f0 2d       	mov	r31, r0
    52be:	d3 a6       	std	Z+43, r13	; 0x2b
    52c0:	c2 a6       	std	Z+42, r12	; 0x2a
    calibration[3][5] = 87;
    52c2:	0f 2e       	mov	r0, r31
    52c4:	f7 e5       	ldi	r31, 0x57	; 87
    52c6:	cf 2e       	mov	r12, r31
    52c8:	d1 2c       	mov	r13, r1
    52ca:	f0 2d       	mov	r31, r0
    52cc:	d3 ae       	std	Z+59, r13	; 0x3b
    52ce:	c2 ae       	std	Z+58, r12	; 0x3a
    calibration[4][5] = 105;
    52d0:	0f 2e       	mov	r0, r31
    52d2:	f9 e6       	ldi	r31, 0x69	; 105
    52d4:	cf 2e       	mov	r12, r31
    52d6:	d1 2c       	mov	r13, r1
    52d8:	f0 2d       	mov	r31, r0
    52da:	d0 92 05 21 	sts	0x2105, r13
    52de:	c0 92 04 21 	sts	0x2104, r12
    calibration[5][5] = 119;
    52e2:	b0 93 15 21 	sts	0x2115, r27
    52e6:	a0 93 14 21 	sts	0x2114, r26
    calibration[6][5] = 137;
    52ea:	0f 2e       	mov	r0, r31
    52ec:	f9 e8       	ldi	r31, 0x89	; 137
    52ee:	cf 2e       	mov	r12, r31
    52f0:	d1 2c       	mov	r13, r1
    52f2:	f0 2d       	mov	r31, r0
    52f4:	d0 92 25 21 	sts	0x2125, r13
    52f8:	c0 92 24 21 	sts	0x2124, r12
    calibration[7][5] = 151;
    52fc:	0f 2e       	mov	r0, r31
    52fe:	f7 e9       	ldi	r31, 0x97	; 151
    5300:	cf 2e       	mov	r12, r31
    5302:	d1 2c       	mov	r13, r1
    5304:	f0 2d       	mov	r31, r0
    5306:	d0 92 35 21 	sts	0x2135, r13
    530a:	c0 92 34 21 	sts	0x2134, r12
	calibration[8][5] = 168;
    530e:	0f 2e       	mov	r0, r31
    5310:	f8 ea       	ldi	r31, 0xA8	; 168
    5312:	cf 2e       	mov	r12, r31
    5314:	d1 2c       	mov	r13, r1
    5316:	f0 2d       	mov	r31, r0
    5318:	d0 92 45 21 	sts	0x2145, r13
    531c:	c0 92 44 21 	sts	0x2144, r12
    // backward right, speed control enabled
    calibration[0][6] = 20;		// measured speed with back EMF (adc 0..1023)
    5320:	15 87       	std	Z+13, r17	; 0x0d
    5322:	04 87       	std	Z+12, r16	; 0x0c
    calibration[1][6] = 39;
    5324:	d5 8f       	std	Z+29, r29	; 0x1d
    5326:	c4 8f       	std	Z+28, r28	; 0x1c
    calibration[2][6] = 59;
    5328:	cb e3       	ldi	r28, 0x3B	; 59
    532a:	d0 e0       	ldi	r29, 0x00	; 0
    532c:	d5 a7       	std	Z+45, r29	; 0x2d
    532e:	c4 a7       	std	Z+44, r28	; 0x2c
    calibration[3][6] = 80;
    5330:	c0 e5       	ldi	r28, 0x50	; 80
    5332:	cc 2e       	mov	r12, r28
    5334:	d1 2c       	mov	r13, r1
    5336:	d5 ae       	std	Z+61, r13	; 0x3d
    5338:	c4 ae       	std	Z+60, r12	; 0x3c
    calibration[4][6] = 100;
    533a:	c4 e6       	ldi	r28, 0x64	; 100
    533c:	d0 e0       	ldi	r29, 0x00	; 0
    533e:	d0 93 07 21 	sts	0x2107, r29
    5342:	c0 93 06 21 	sts	0x2106, r28
    calibration[5][6] = 119;
    5346:	b0 93 17 21 	sts	0x2117, r27
    534a:	a0 93 16 21 	sts	0x2116, r26
    calibration[6][6] = 139;
    534e:	90 93 27 21 	sts	0x2127, r25
    5352:	80 93 26 21 	sts	0x2126, r24
    calibration[7][6] = 160;
    5356:	30 93 37 21 	sts	0x2137, r19
    535a:	20 93 36 21 	sts	0x2136, r18
	calibration[8][6] = 180;
    535e:	70 93 47 21 	sts	0x2147, r23
    5362:	60 93 46 21 	sts	0x2146, r22
    calibration[0][7] = 22;    	// real speed measured in mm/s
    5366:	26 e1       	ldi	r18, 0x16	; 22
    5368:	30 e0       	ldi	r19, 0x00	; 0
    536a:	37 87       	std	Z+15, r19	; 0x0f
    536c:	26 87       	std	Z+14, r18	; 0x0e
    calibration[1][7] = 46;
    536e:	b7 8e       	std	Z+31, r11	; 0x1f
    5370:	a6 8e       	std	Z+30, r10	; 0x1e
    calibration[2][7] = 65;
    5372:	21 e4       	ldi	r18, 0x41	; 65
    5374:	30 e0       	ldi	r19, 0x00	; 0
    5376:	37 a7       	std	Z+47, r19	; 0x2f
    5378:	26 a7       	std	Z+46, r18	; 0x2e
    calibration[3][7] = 81;
    537a:	f0 92 f9 20 	sts	0x20F9, r15
    537e:	e0 92 f8 20 	sts	0x20F8, r14
    calibration[4][7] = 96;
    5382:	20 e6       	ldi	r18, 0x60	; 96
    5384:	30 e0       	ldi	r19, 0x00	; 0
    5386:	30 93 09 21 	sts	0x2109, r19
    538a:	20 93 08 21 	sts	0x2108, r18
    calibration[5][7] = 111;
    538e:	2f e6       	ldi	r18, 0x6F	; 111
    5390:	30 e0       	ldi	r19, 0x00	; 0
    5392:	30 93 19 21 	sts	0x2119, r19
    5396:	20 93 18 21 	sts	0x2118, r18
    calibration[6][7] = 125;
    539a:	50 93 29 21 	sts	0x2129, r21
    539e:	40 93 28 21 	sts	0x2128, r20
    calibration[7][7] = 139;
    53a2:	90 93 39 21 	sts	0x2139, r25
    53a6:	80 93 38 21 	sts	0x2138, r24
	calibration[8][7] = 153;
    53aa:	89 e9       	ldi	r24, 0x99	; 153
    53ac:	90 e0       	ldi	r25, 0x00	; 0
    53ae:	90 93 49 21 	sts	0x2149, r25
    53b2:	80 93 48 21 	sts	0x2148, r24

    writeCalibrationToFlash();
}
    53b6:	df 91       	pop	r29
    53b8:	cf 91       	pop	r28
    53ba:	1f 91       	pop	r17
    53bc:	0f 91       	pop	r16
    53be:	ff 90       	pop	r15
    53c0:	ef 90       	pop	r14
    53c2:	df 90       	pop	r13
    53c4:	cf 90       	pop	r12
    53c6:	bf 90       	pop	r11
    53c8:	af 90       	pop	r10
    53ca:	9f 90       	pop	r9
    53cc:	8f 90       	pop	r8
    53ce:	7f 90       	pop	r7
    53d0:	6f 90       	pop	r6
    53d2:	5f 90       	pop	r5
    53d4:	4f 90       	pop	r4
    53d6:	3f 90       	pop	r3
    53d8:	2f 90       	pop	r2
    calibration[5][7] = 111;
    calibration[6][7] = 125;
    calibration[7][7] = 139;
	calibration[8][7] = 153;

    writeCalibrationToFlash();
    53da:	0c 94 ec 01 	jmp	0x3d8	; 0x3d8 <writeCalibrationToFlash>

000053de <initCalibration>:

void initCalibration() {

    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);
    53de:	8a e6       	ldi	r24, 0x6A	; 106
    53e0:	9f e0       	ldi	r25, 0x0F	; 15
    53e2:	0e 94 0f 5a 	call	0xb41e	; 0xb41e <eeprom_read_word>

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
    53e6:	85 35       	cpi	r24, 0x55	; 85
    53e8:	9a 4a       	sbci	r25, 0xAA	; 170
    53ea:	11 f0       	breq	.+4      	; 0x53f0 <initCalibration+0x12>
        readCalibrationFromFlash();
    } else {
		writeDefaultCalibration();		
    53ec:	0c 94 47 28 	jmp	0x508e	; 0x508e <writeDefaultCalibration>
    unsigned int temp=0;
 
 	temp = eeprom_read_word((uint16_t*)CALIB_CHECK_ADDRESS);

    if(temp==0xAA55) {   // valid odometry data saved in flash, read them
        readCalibrationFromFlash();
    53f0:	0c 94 fa 01 	jmp	0x3f4	; 0x3f4 <readCalibrationFromFlash>

000053f4 <handleSoftAcceleration>:

// Handle "soft acceleration" that basically increase or decrease the current speed
// at steps untill raching the new desired speed, resulting in a smooth acceleration).
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
    53f4:	af 92       	push	r10
    53f6:	bf 92       	push	r11
    53f8:	cf 92       	push	r12
    53fa:	df 92       	push	r13
    53fc:	ef 92       	push	r14
    53fe:	ff 92       	push	r15
    5400:	0f 93       	push	r16
    5402:	1f 93       	push	r17
    5404:	cf 93       	push	r28
    5406:	df 93       	push	r29
		
	if(calibrateOdomFlag==0) {
    5408:	80 91 fe 1d 	lds	r24, 0x1DFE
    540c:	88 23       	and	r24, r24
    540e:	59 f0       	breq	.+22     	; 0x5426 <handleSoftAcceleration+0x32>
			}

		}
	}

}
    5410:	df 91       	pop	r29
    5412:	cf 91       	pop	r28
    5414:	1f 91       	pop	r17
    5416:	0f 91       	pop	r16
    5418:	ff 90       	pop	r15
    541a:	ef 90       	pop	r14
    541c:	df 90       	pop	r13
    541e:	cf 90       	pop	r12
    5420:	bf 90       	pop	r11
    5422:	af 90       	pop	r10
    5424:	08 95       	ret
// At the moment the "soft acceleration" is disabled and can be enabled only in the code 
// by setting the value of "softAccEnabled" to 1 at variable initialization.
void handleSoftAcceleration() {
		
	if(calibrateOdomFlag==0) {
		if((getTime100MicroSec()-speedStepCounter) >= SPEED_STEP_DELAY) {
    5426:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    542a:	dc 01       	movw	r26, r24
    542c:	cb 01       	movw	r24, r22
    542e:	9c 01       	movw	r18, r24
    5430:	ad 01       	movw	r20, r26
    5432:	60 e0       	ldi	r22, 0x00	; 0
    5434:	70 e0       	ldi	r23, 0x00	; 0
    5436:	80 e0       	ldi	r24, 0x00	; 0
    5438:	90 e0       	ldi	r25, 0x00	; 0
    543a:	a0 90 34 18 	lds	r10, 0x1834
    543e:	b0 90 35 18 	lds	r11, 0x1835
    5442:	c0 90 36 18 	lds	r12, 0x1836
    5446:	d0 90 37 18 	lds	r13, 0x1837
    544a:	e0 90 38 18 	lds	r14, 0x1838
    544e:	f0 90 39 18 	lds	r15, 0x1839
    5452:	00 91 3a 18 	lds	r16, 0x183A
    5456:	10 91 3b 18 	lds	r17, 0x183B
    545a:	0e 94 4f 56 	call	0xac9e	; 0xac9e <__subdi3>
    545e:	2f 38       	cpi	r18, 0x8F	; 143
    5460:	31 40       	sbci	r19, 0x01	; 1
    5462:	41 05       	cpc	r20, r1
    5464:	51 05       	cpc	r21, r1
    5466:	61 05       	cpc	r22, r1
    5468:	71 05       	cpc	r23, r1
    546a:	81 05       	cpc	r24, r1
    546c:	91 05       	cpc	r25, r1
    546e:	81 f2       	breq	.-96     	; 0x5410 <handleSoftAcceleration+0x1c>
    5470:	78 f2       	brcs	.-98     	; 0x5410 <handleSoftAcceleration+0x1c>
			speedStepCounter = getTime100MicroSec();
    5472:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    5476:	dc 01       	movw	r26, r24
    5478:	cb 01       	movw	r24, r22
    547a:	80 93 34 18 	sts	0x1834, r24
    547e:	90 93 35 18 	sts	0x1835, r25
    5482:	a0 93 36 18 	sts	0x1836, r26
    5486:	b0 93 37 18 	sts	0x1837, r27
    548a:	10 92 38 18 	sts	0x1838, r1
    548e:	10 92 39 18 	sts	0x1839, r1
    5492:	10 92 3a 18 	sts	0x183A, r1
    5496:	10 92 3b 18 	sts	0x183B, r1

			if(softAccEnabled) {
    549a:	80 91 33 18 	lds	r24, 0x1833
    549e:	88 23       	and	r24, r24
    54a0:	69 f1       	breq	.+90     	; 0x54fc <handleSoftAcceleration+0x108>
				if(pwm_right_desired == 0) {
    54a2:	80 91 89 19 	lds	r24, 0x1989
    54a6:	90 91 8a 19 	lds	r25, 0x198A
    54aa:	00 97       	sbiw	r24, 0x00	; 0
    54ac:	c1 f5       	brne	.+112    	; 0x551e <handleSoftAcceleration+0x12a>
					pwm_intermediate_right_desired = 0;
    54ae:	10 92 86 19 	sts	0x1986, r1
    54b2:	10 92 85 19 	sts	0x1985, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}					
				}
	
				if(pwm_left_desired == 0) {
    54b6:	80 91 87 19 	lds	r24, 0x1987
    54ba:	90 91 88 19 	lds	r25, 0x1988
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	09 f4       	brne	.+2      	; 0x54c4 <handleSoftAcceleration+0xd0>
    54c2:	49 c0       	rjmp	.+146    	; 0x5556 <handleSoftAcceleration+0x162>
					pwm_intermediate_left_desired = 0;
				} else if((pwm_left_desired*pwm_intermediate_left_desired) < 0) {
    54c4:	20 91 83 19 	lds	r18, 0x1983
    54c8:	30 91 84 19 	lds	r19, 0x1984
    54cc:	82 9f       	mul	r24, r18
    54ce:	a0 01       	movw	r20, r0
    54d0:	83 9f       	mul	r24, r19
    54d2:	50 0d       	add	r21, r0
    54d4:	92 9f       	mul	r25, r18
    54d6:	50 0d       	add	r21, r0
    54d8:	11 24       	eor	r1, r1
    54da:	57 fd       	sbrc	r21, 7
    54dc:	3c c0       	rjmp	.+120    	; 0x5556 <handleSoftAcceleration+0x162>
					pwm_intermediate_left_desired = 0;
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
    54de:	28 17       	cp	r18, r24
    54e0:	39 07       	cpc	r19, r25
    54e2:	f4 f5       	brge	.+124    	; 0x5560 <handleSoftAcceleration+0x16c>
					pwm_intermediate_left_desired += speedStep;
    54e4:	40 91 1e 03 	lds	r20, 0x031E
    54e8:	24 0f       	add	r18, r20
    54ea:	31 1d       	adc	r19, r1
					if(pwm_intermediate_left_desired > pwm_left_desired) {
    54ec:	82 17       	cp	r24, r18
    54ee:	93 07       	cpc	r25, r19
    54f0:	8c f0       	brlt	.+34     	; 0x5514 <handleSoftAcceleration+0x120>
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired -= speedStep;
    54f2:	30 93 84 19 	sts	0x1984, r19
    54f6:	20 93 83 19 	sts	0x1983, r18
    54fa:	8a cf       	rjmp	.-236    	; 0x5410 <handleSoftAcceleration+0x1c>
					if(pwm_intermediate_left_desired < pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}					
				}
			} else {
				pwm_intermediate_right_desired = pwm_right_desired;
    54fc:	80 91 89 19 	lds	r24, 0x1989
    5500:	90 91 8a 19 	lds	r25, 0x198A
    5504:	90 93 86 19 	sts	0x1986, r25
    5508:	80 93 85 19 	sts	0x1985, r24
				pwm_intermediate_left_desired = pwm_left_desired;
    550c:	80 91 87 19 	lds	r24, 0x1987
    5510:	90 91 88 19 	lds	r25, 0x1988
    5514:	90 93 84 19 	sts	0x1984, r25
    5518:	80 93 83 19 	sts	0x1983, r24
    551c:	79 cf       	rjmp	.-270    	; 0x5410 <handleSoftAcceleration+0x1c>
			speedStepCounter = getTime100MicroSec();

			if(softAccEnabled) {
				if(pwm_right_desired == 0) {
					pwm_intermediate_right_desired = 0;
				} else if((pwm_right_desired*pwm_intermediate_right_desired) < 0) {
    551e:	20 91 85 19 	lds	r18, 0x1985
    5522:	30 91 86 19 	lds	r19, 0x1986
    5526:	82 9f       	mul	r24, r18
    5528:	a0 01       	movw	r20, r0
    552a:	83 9f       	mul	r24, r19
    552c:	50 0d       	add	r21, r0
    552e:	92 9f       	mul	r25, r18
    5530:	50 0d       	add	r21, r0
    5532:	11 24       	eor	r1, r1
    5534:	57 fd       	sbrc	r21, 7
    5536:	bb cf       	rjmp	.-138    	; 0x54ae <handleSoftAcceleration+0xba>
					pwm_intermediate_right_desired = 0;
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
    5538:	28 17       	cp	r18, r24
    553a:	39 07       	cpc	r19, r25
    553c:	ec f4       	brge	.+58     	; 0x5578 <handleSoftAcceleration+0x184>
					pwm_intermediate_right_desired += speedStep;
    553e:	40 91 1e 03 	lds	r20, 0x031E
    5542:	24 0f       	add	r18, r20
    5544:	31 1d       	adc	r19, r1
					if(pwm_intermediate_right_desired > pwm_right_desired) {
    5546:	82 17       	cp	r24, r18
    5548:	93 07       	cpc	r25, r19
    554a:	0c f5       	brge	.+66     	; 0x558e <handleSoftAcceleration+0x19a>
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
					if(pwm_intermediate_right_desired < pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
    554c:	90 93 86 19 	sts	0x1986, r25
    5550:	80 93 85 19 	sts	0x1985, r24
    5554:	b0 cf       	rjmp	.-160    	; 0x54b6 <handleSoftAcceleration+0xc2>
					}					
				}
	
				if(pwm_left_desired == 0) {
					pwm_intermediate_left_desired = 0;
    5556:	10 92 84 19 	sts	0x1984, r1
    555a:	10 92 83 19 	sts	0x1983, r1
    555e:	58 cf       	rjmp	.-336    	; 0x5410 <handleSoftAcceleration+0x1c>
				} else if(pwm_left_desired > pwm_intermediate_left_desired) {
					pwm_intermediate_left_desired += speedStep;
					if(pwm_intermediate_left_desired > pwm_left_desired) {
						pwm_intermediate_left_desired = pwm_left_desired;
					}
				} else if(pwm_left_desired < pwm_intermediate_left_desired) {
    5560:	82 17       	cp	r24, r18
    5562:	93 07       	cpc	r25, r19
    5564:	0c f0       	brlt	.+2      	; 0x5568 <handleSoftAcceleration+0x174>
    5566:	54 cf       	rjmp	.-344    	; 0x5410 <handleSoftAcceleration+0x1c>
					pwm_intermediate_left_desired -= speedStep;
    5568:	40 91 1e 03 	lds	r20, 0x031E
    556c:	24 1b       	sub	r18, r20
    556e:	31 09       	sbc	r19, r1
					if(pwm_intermediate_left_desired < pwm_left_desired) {
    5570:	28 17       	cp	r18, r24
    5572:	39 07       	cpc	r19, r25
    5574:	7c f2       	brlt	.-98     	; 0x5514 <handleSoftAcceleration+0x120>
    5576:	bd cf       	rjmp	.-134    	; 0x54f2 <handleSoftAcceleration+0xfe>
				} else if(pwm_right_desired > pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
    5578:	82 17       	cp	r24, r18
    557a:	93 07       	cpc	r25, r19
    557c:	0c f0       	brlt	.+2      	; 0x5580 <handleSoftAcceleration+0x18c>
    557e:	9b cf       	rjmp	.-202    	; 0x54b6 <handleSoftAcceleration+0xc2>
					pwm_intermediate_right_desired -= speedStep;
    5580:	40 91 1e 03 	lds	r20, 0x031E
    5584:	24 1b       	sub	r18, r20
    5586:	31 09       	sbc	r19, r1
					if(pwm_intermediate_right_desired < pwm_right_desired) {
    5588:	28 17       	cp	r18, r24
    558a:	39 07       	cpc	r19, r25
    558c:	fc f2       	brlt	.-66     	; 0x554c <handleSoftAcceleration+0x158>
					pwm_intermediate_right_desired += speedStep;
					if(pwm_intermediate_right_desired > pwm_right_desired) {
						pwm_intermediate_right_desired = pwm_right_desired;
					}
				} else if(pwm_right_desired < pwm_intermediate_right_desired) {
					pwm_intermediate_right_desired -= speedStep;
    558e:	30 93 86 19 	sts	0x1986, r19
    5592:	20 93 85 19 	sts	0x1985, r18
    5596:	8f cf       	rjmp	.-226    	; 0x54b6 <handleSoftAcceleration+0xc2>

00005598 <handleMotorsWithSpeedController>:
		OCR4B = 0;
	}

}

void handleMotorsWithSpeedController() {
    5598:	4f 92       	push	r4
    559a:	5f 92       	push	r5
    559c:	6f 92       	push	r6
    559e:	7f 92       	push	r7
    55a0:	8f 92       	push	r8
    55a2:	9f 92       	push	r9
    55a4:	af 92       	push	r10
    55a6:	bf 92       	push	r11
    55a8:	cf 92       	push	r12
    55aa:	df 92       	push	r13
    55ac:	ef 92       	push	r14
    55ae:	ff 92       	push	r15
    55b0:	0f 93       	push	r16
    55b2:	1f 93       	push	r17
    55b4:	cf 93       	push	r28
    55b6:	df 93       	push	r29

	handleSoftAcceleration();
    55b8:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <handleSoftAcceleration>

	if(calibrateOdomFlag==1) {
    55bc:	80 91 fe 1d 	lds	r24, 0x1DFE
    55c0:	81 30       	cpi	r24, 0x01	; 1
    55c2:	09 f4       	brne	.+2      	; 0x55c6 <handleMotorsWithSpeedController+0x2e>
    55c4:	24 c3       	rjmp	.+1608   	; 0x5c0e <handleMotorsWithSpeedController+0x676>
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
    55c6:	80 91 85 19 	lds	r24, 0x1985
    55ca:	90 91 86 19 	lds	r25, 0x1986
    55ce:	97 fd       	sbrc	r25, 7
    55d0:	51 c3       	rjmp	.+1698   	; 0x5c74 <handleMotorsWithSpeedController+0x6dc>
// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    55d2:	bc 01       	movw	r22, r24
    55d4:	66 0f       	add	r22, r22
    55d6:	77 1f       	adc	r23, r23
    55d8:	66 0f       	add	r22, r22
    55da:	77 1f       	adc	r23, r23
    55dc:	68 0f       	add	r22, r24
    55de:	79 1f       	adc	r23, r25
    signed int temp = 0;

    if(currVel == 0) {
    55e0:	61 15       	cp	r22, r1
    55e2:	71 05       	cpc	r23, r1
    55e4:	09 f4       	brne	.+2      	; 0x55e8 <handleMotorsWithSpeedController+0x50>
    55e6:	62 c2       	rjmp	.+1220   	; 0x5aac <handleMotorsWithSpeedController+0x514>
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
                break;
            }
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            if(calibration[i][3] >= currVel) {
    55e8:	20 91 c0 20 	lds	r18, 0x20C0
    55ec:	30 91 c1 20 	lds	r19, 0x20C1
    55f0:	26 17       	cp	r18, r22
    55f2:	37 07       	cpc	r19, r23
    55f4:	0c f0       	brlt	.+2      	; 0x55f8 <handleMotorsWithSpeedController+0x60>
    55f6:	b0 c3       	rjmp	.+1888   	; 0x5d58 <handleMotorsWithSpeedController+0x7c0>
    55f8:	c0 91 d0 20 	lds	r28, 0x20D0
    55fc:	d0 91 d1 20 	lds	r29, 0x20D1
    5600:	c6 17       	cp	r28, r22
    5602:	d7 07       	cpc	r29, r23
    5604:	0c f0       	brlt	.+2      	; 0x5608 <handleMotorsWithSpeedController+0x70>
    5606:	c6 c3       	rjmp	.+1932   	; 0x5d94 <handleMotorsWithSpeedController+0x7fc>
    5608:	c0 91 e0 20 	lds	r28, 0x20E0
    560c:	d0 91 e1 20 	lds	r29, 0x20E1
    5610:	c6 17       	cp	r28, r22
    5612:	d7 07       	cpc	r29, r23
    5614:	0c f0       	brlt	.+2      	; 0x5618 <handleMotorsWithSpeedController+0x80>
    5616:	07 c4       	rjmp	.+2062   	; 0x5e26 <handleMotorsWithSpeedController+0x88e>
    5618:	c0 91 f0 20 	lds	r28, 0x20F0
    561c:	d0 91 f1 20 	lds	r29, 0x20F1
    5620:	c6 17       	cp	r28, r22
    5622:	d7 07       	cpc	r29, r23
    5624:	0c f0       	brlt	.+2      	; 0x5628 <handleMotorsWithSpeedController+0x90>
    5626:	58 c4       	rjmp	.+2224   	; 0x5ed8 <handleMotorsWithSpeedController+0x940>
    5628:	c0 91 00 21 	lds	r28, 0x2100
    562c:	d0 91 01 21 	lds	r29, 0x2101
    5630:	c6 17       	cp	r28, r22
    5632:	d7 07       	cpc	r29, r23
    5634:	0c f0       	brlt	.+2      	; 0x5638 <handleMotorsWithSpeedController+0xa0>
    5636:	4c c4       	rjmp	.+2200   	; 0x5ed0 <handleMotorsWithSpeedController+0x938>
    5638:	c0 91 10 21 	lds	r28, 0x2110
    563c:	d0 91 11 21 	lds	r29, 0x2111
    5640:	c6 17       	cp	r28, r22
    5642:	d7 07       	cpc	r29, r23
    5644:	0c f0       	brlt	.+2      	; 0x5648 <handleMotorsWithSpeedController+0xb0>
    5646:	5c c4       	rjmp	.+2232   	; 0x5f00 <handleMotorsWithSpeedController+0x968>
    5648:	c0 91 20 21 	lds	r28, 0x2120
    564c:	d0 91 21 21 	lds	r29, 0x2121
    5650:	c6 17       	cp	r28, r22
    5652:	d7 07       	cpc	r29, r23
    5654:	0c f0       	brlt	.+2      	; 0x5658 <handleMotorsWithSpeedController+0xc0>
    5656:	4c c4       	rjmp	.+2200   	; 0x5ef0 <handleMotorsWithSpeedController+0x958>
    5658:	c0 91 30 21 	lds	r28, 0x2130
    565c:	d0 91 31 21 	lds	r29, 0x2131
    5660:	c6 17       	cp	r28, r22
    5662:	d7 07       	cpc	r29, r23
    5664:	0c f0       	brlt	.+2      	; 0x5668 <handleMotorsWithSpeedController+0xd0>
    5666:	54 c4       	rjmp	.+2216   	; 0x5f10 <handleMotorsWithSpeedController+0x978>
    5668:	c0 91 40 21 	lds	r28, 0x2140
    566c:	d0 91 41 21 	lds	r29, 0x2141
    5670:	c6 17       	cp	r28, r22
    5672:	d7 07       	cpc	r29, r23
    5674:	0c f0       	brlt	.+2      	; 0x5678 <handleMotorsWithSpeedController+0xe0>
    5676:	50 c4       	rjmp	.+2208   	; 0x5f18 <handleMotorsWithSpeedController+0x980>
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
	    } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][2]/(float)calibration[CALIBRATION_SAMPLES-1][3]);
    5678:	07 2e       	mov	r0, r23
    567a:	00 0c       	add	r0, r0
    567c:	88 0b       	sbc	r24, r24
    567e:	99 0b       	sbc	r25, r25
    5680:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5684:	6b 01       	movw	r12, r22
    5686:	7c 01       	movw	r14, r24
    5688:	80 91 3e 21 	lds	r24, 0x213E
    568c:	90 91 3f 21 	lds	r25, 0x213F
    5690:	bc 01       	movw	r22, r24
    5692:	99 0f       	add	r25, r25
    5694:	88 0b       	sbc	r24, r24
    5696:	99 0b       	sbc	r25, r25
    5698:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    569c:	9b 01       	movw	r18, r22
    569e:	ac 01       	movw	r20, r24
    56a0:	c7 01       	movw	r24, r14
    56a2:	b6 01       	movw	r22, r12
    56a4:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    56a8:	6b 01       	movw	r12, r22
    56aa:	7c 01       	movw	r14, r24
    56ac:	be 01       	movw	r22, r28
    56ae:	dd 0f       	add	r29, r29
    56b0:	88 0b       	sbc	r24, r24
    56b2:	99 0b       	sbc	r25, r25
    56b4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    56b8:	9b 01       	movw	r18, r22
    56ba:	ac 01       	movw	r20, r24
    56bc:	c7 01       	movw	r24, r14
    56be:	b6 01       	movw	r22, r12
    56c0:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    56c4:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
    56c8:	70 93 76 19 	sts	0x1976, r23
    56cc:	60 93 75 19 	sts	0x1975, r22
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
    56d0:	80 91 83 19 	lds	r24, 0x1983
    56d4:	90 91 84 19 	lds	r25, 0x1984
    56d8:	97 fd       	sbrc	r25, 7
    56da:	c7 c2       	rjmp	.+1422   	; 0x5c6a <handleMotorsWithSpeedController+0x6d2>
// extract data to pass to speed controller given a desired speed in mm/s
// mode => return a measured speed 0..1023
signed int getInputFromSpeed(signed int s, unsigned char mode) {
    
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    56dc:	bc 01       	movw	r22, r24
    56de:	66 0f       	add	r22, r22
    56e0:	77 1f       	adc	r23, r23
    56e2:	66 0f       	add	r22, r22
    56e4:	77 1f       	adc	r23, r23
    56e6:	68 0f       	add	r22, r24
    56e8:	79 1f       	adc	r23, r25
    signed int temp = 0;

    if(currVel == 0) {
    56ea:	61 15       	cp	r22, r1
    56ec:	71 05       	cpc	r23, r1
    56ee:	09 f4       	brne	.+2      	; 0x56f2 <handleMotorsWithSpeedController+0x15a>
    56f0:	b9 c2       	rjmp	.+1394   	; 0x5c64 <handleMotorsWithSpeedController+0x6cc>
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
        if(mode==LEFT_WHEEL_FW_SC) {
            if(calibration[i][1] >= currVel) {
    56f2:	20 91 bc 20 	lds	r18, 0x20BC
    56f6:	30 91 bd 20 	lds	r19, 0x20BD
    56fa:	26 17       	cp	r18, r22
    56fc:	37 07       	cpc	r19, r23
    56fe:	0c f0       	brlt	.+2      	; 0x5702 <handleMotorsWithSpeedController+0x16a>
    5700:	3a c3       	rjmp	.+1652   	; 0x5d76 <handleMotorsWithSpeedController+0x7de>
    5702:	c0 91 cc 20 	lds	r28, 0x20CC
    5706:	d0 91 cd 20 	lds	r29, 0x20CD
    570a:	c6 17       	cp	r28, r22
    570c:	d7 07       	cpc	r29, r23
    570e:	0c f0       	brlt	.+2      	; 0x5712 <handleMotorsWithSpeedController+0x17a>
    5710:	d7 c3       	rjmp	.+1966   	; 0x5ec0 <handleMotorsWithSpeedController+0x928>
    5712:	c0 91 dc 20 	lds	r28, 0x20DC
    5716:	d0 91 dd 20 	lds	r29, 0x20DD
    571a:	c6 17       	cp	r28, r22
    571c:	d7 07       	cpc	r29, r23
    571e:	0c f0       	brlt	.+2      	; 0x5722 <handleMotorsWithSpeedController+0x18a>
    5720:	86 c3       	rjmp	.+1804   	; 0x5e2e <handleMotorsWithSpeedController+0x896>
    5722:	c0 91 ec 20 	lds	r28, 0x20EC
    5726:	d0 91 ed 20 	lds	r29, 0x20ED
    572a:	c6 17       	cp	r28, r22
    572c:	d7 07       	cpc	r29, r23
    572e:	0c f0       	brlt	.+2      	; 0x5732 <handleMotorsWithSpeedController+0x19a>
    5730:	d7 c3       	rjmp	.+1966   	; 0x5ee0 <handleMotorsWithSpeedController+0x948>
    5732:	c0 91 fc 20 	lds	r28, 0x20FC
    5736:	d0 91 fd 20 	lds	r29, 0x20FD
    573a:	c6 17       	cp	r28, r22
    573c:	d7 07       	cpc	r29, r23
    573e:	0c f0       	brlt	.+2      	; 0x5742 <handleMotorsWithSpeedController+0x1aa>
    5740:	c3 c3       	rjmp	.+1926   	; 0x5ec8 <handleMotorsWithSpeedController+0x930>
    5742:	c0 91 0c 21 	lds	r28, 0x210C
    5746:	d0 91 0d 21 	lds	r29, 0x210D
    574a:	c6 17       	cp	r28, r22
    574c:	d7 07       	cpc	r29, r23
    574e:	0c f0       	brlt	.+2      	; 0x5752 <handleMotorsWithSpeedController+0x1ba>
    5750:	cb c3       	rjmp	.+1942   	; 0x5ee8 <handleMotorsWithSpeedController+0x950>
    5752:	c0 91 1c 21 	lds	r28, 0x211C
    5756:	d0 91 1d 21 	lds	r29, 0x211D
    575a:	c6 17       	cp	r28, r22
    575c:	d7 07       	cpc	r29, r23
    575e:	0c f0       	brlt	.+2      	; 0x5762 <handleMotorsWithSpeedController+0x1ca>
    5760:	cb c3       	rjmp	.+1942   	; 0x5ef8 <handleMotorsWithSpeedController+0x960>
    5762:	c0 91 2c 21 	lds	r28, 0x212C
    5766:	d0 91 2d 21 	lds	r29, 0x212D
    576a:	c6 17       	cp	r28, r22
    576c:	d7 07       	cpc	r29, r23
    576e:	0c f0       	brlt	.+2      	; 0x5772 <handleMotorsWithSpeedController+0x1da>
    5770:	d7 c3       	rjmp	.+1966   	; 0x5f20 <handleMotorsWithSpeedController+0x988>
    5772:	c0 91 3c 21 	lds	r28, 0x213C
    5776:	d0 91 3d 21 	lds	r29, 0x213D
    577a:	c6 17       	cp	r28, r22
    577c:	d7 07       	cpc	r29, r23
    577e:	0c f0       	brlt	.+2      	; 0x5782 <handleMotorsWithSpeedController+0x1ea>
    5780:	c3 c3       	rjmp	.+1926   	; 0x5f08 <handleMotorsWithSpeedController+0x970>
            temp = currVel*calibration[0][6]/calibration[0][7];
            temp = -temp;
        }        
    } else if(i==CALIBRATION_SAMPLES) {   // the velocity is greater than all the ones saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][0]/(float)calibration[CALIBRATION_SAMPLES-1][1]);
    5782:	07 2e       	mov	r0, r23
    5784:	00 0c       	add	r0, r0
    5786:	88 0b       	sbc	r24, r24
    5788:	99 0b       	sbc	r25, r25
    578a:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    578e:	6b 01       	movw	r12, r22
    5790:	7c 01       	movw	r14, r24
    5792:	80 91 3a 21 	lds	r24, 0x213A
    5796:	90 91 3b 21 	lds	r25, 0x213B
    579a:	bc 01       	movw	r22, r24
    579c:	99 0f       	add	r25, r25
    579e:	88 0b       	sbc	r24, r24
    57a0:	99 0b       	sbc	r25, r25
    57a2:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    57a6:	9b 01       	movw	r18, r22
    57a8:	ac 01       	movw	r20, r24
    57aa:	c7 01       	movw	r24, r14
    57ac:	b6 01       	movw	r22, r12
    57ae:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    57b2:	6b 01       	movw	r12, r22
    57b4:	7c 01       	movw	r14, r24
    57b6:	be 01       	movw	r22, r28
    57b8:	dd 0f       	add	r29, r29
    57ba:	88 0b       	sbc	r24, r24
    57bc:	99 0b       	sbc	r25, r25
    57be:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    57c2:	9b 01       	movw	r18, r22
    57c4:	ac 01       	movw	r20, r24
    57c6:	c7 01       	movw	r24, r14
    57c8:	b6 01       	movw	r22, r12
    57ca:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    57ce:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    57d2:	70 93 74 19 	sts	0x1974, r23
    57d6:	60 93 73 19 	sts	0x1973, r22
		}
	}

	if(obstacleAvoidanceEnabled) {
    57da:	80 91 2e 18 	lds	r24, 0x182E
    57de:	81 11       	cpse	r24, r1
    57e0:	0b c2       	rjmp	.+1046   	; 0x5bf8 <handleMotorsWithSpeedController+0x660>
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
	}
	pwm_left_desired_to_control = pwm_left_working;
    57e2:	70 93 98 19 	sts	0x1998, r23
    57e6:	60 93 97 19 	sts	0x1997, r22
	pwm_right_desired_to_control = pwm_right_working;
    57ea:	80 91 75 19 	lds	r24, 0x1975
    57ee:	90 91 76 19 	lds	r25, 0x1976
    57f2:	90 93 9a 19 	sts	0x199A, r25
    57f6:	80 93 99 19 	sts	0x1999, r24

	if(compute_left_vel) {
    57fa:	80 91 2a 03 	lds	r24, 0x032A
    57fe:	88 23       	and	r24, r24
    5800:	09 f4       	brne	.+2      	; 0x5804 <handleMotorsWithSpeedController+0x26c>
    5802:	a2 c0       	rjmp	.+324    	; 0x5948 <handleMotorsWithSpeedController+0x3b0>

		last_left_vel = left_vel_sum>>2;
    5804:	80 91 95 19 	lds	r24, 0x1995
    5808:	90 91 96 19 	lds	r25, 0x1996
    580c:	96 95       	lsr	r25
    580e:	87 95       	ror	r24
    5810:	96 95       	lsr	r25
    5812:	87 95       	ror	r24
    5814:	90 93 92 19 	sts	0x1992, r25
    5818:	80 93 91 19 	sts	0x1991, r24
		compute_left_vel = 0;
    581c:	10 92 2a 03 	sts	0x032A, r1
		left_vel_sum = 0;
    5820:	10 92 96 19 	sts	0x1996, r1
    5824:	10 92 95 19 	sts	0x1995, r1
		
		if(calibrateOdomFlag==1) {
    5828:	20 91 fe 1d 	lds	r18, 0x1DFE
    582c:	21 30       	cpi	r18, 0x01	; 1
    582e:	09 f4       	brne	.+2      	; 0x5832 <handleMotorsWithSpeedController+0x29a>
    5830:	4b c2       	rjmp	.+1174   	; 0x5cc8 <handleMotorsWithSpeedController+0x730>
			leftSpeedSumOdom += last_left_vel;
			leftSumCount++;
		}

		getLeftSpeedFromInput();	// get speed in mm/s
    5832:	0e 94 9f 25 	call	0x4b3e	; 0x4b3e <getLeftSpeedFromInput>
		leftDistPrev = leftDist;
    5836:	80 91 18 18 	lds	r24, 0x1818
    583a:	90 91 19 18 	lds	r25, 0x1819
    583e:	a0 91 1a 18 	lds	r26, 0x181A
    5842:	b0 91 1b 18 	lds	r27, 0x181B
    5846:	80 93 10 18 	sts	0x1810, r24
    584a:	90 93 11 18 	sts	0x1811, r25
    584e:	a0 93 12 18 	sts	0x1812, r26
    5852:	b0 93 13 18 	sts	0x1813, r27
		//timeOdometry = getTime100MicroSec()-timeLeftOdom;
		leftDist += ((float)speedLeftFromEnc*((float)(getTime100MicroSec()-timeLeftOdom)*104.0))/1000000.0;	// distance in mm				
    5856:	60 91 f9 17 	lds	r22, 0x17F9
    585a:	70 91 fa 17 	lds	r23, 0x17FA
    585e:	07 2e       	mov	r0, r23
    5860:	00 0c       	add	r0, r0
    5862:	88 0b       	sbc	r24, r24
    5864:	99 0b       	sbc	r25, r25
    5866:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    586a:	6b 01       	movw	r12, r22
    586c:	7c 01       	movw	r14, r24
    586e:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    5872:	00 91 f3 17 	lds	r16, 0x17F3
    5876:	10 91 f4 17 	lds	r17, 0x17F4
    587a:	20 91 f5 17 	lds	r18, 0x17F5
    587e:	30 91 f6 17 	lds	r19, 0x17F6
    5882:	60 1b       	sub	r22, r16
    5884:	71 0b       	sbc	r23, r17
    5886:	82 0b       	sbc	r24, r18
    5888:	93 0b       	sbc	r25, r19
    588a:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <__floatunsisf>
    588e:	20 e0       	ldi	r18, 0x00	; 0
    5890:	30 e0       	ldi	r19, 0x00	; 0
    5892:	40 ed       	ldi	r20, 0xD0	; 208
    5894:	52 e4       	ldi	r21, 0x42	; 66
    5896:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    589a:	9b 01       	movw	r18, r22
    589c:	ac 01       	movw	r20, r24
    589e:	c7 01       	movw	r24, r14
    58a0:	b6 01       	movw	r22, r12
    58a2:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    58a6:	20 e0       	ldi	r18, 0x00	; 0
    58a8:	34 e2       	ldi	r19, 0x24	; 36
    58aa:	44 e7       	ldi	r20, 0x74	; 116
    58ac:	59 e4       	ldi	r21, 0x49	; 73
    58ae:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    58b2:	9b 01       	movw	r18, r22
    58b4:	ac 01       	movw	r20, r24
    58b6:	60 91 18 18 	lds	r22, 0x1818
    58ba:	70 91 19 18 	lds	r23, 0x1819
    58be:	80 91 1a 18 	lds	r24, 0x181A
    58c2:	90 91 1b 18 	lds	r25, 0x181B
    58c6:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    58ca:	60 93 18 18 	sts	0x1818, r22
    58ce:	70 93 19 18 	sts	0x1819, r23
    58d2:	80 93 1a 18 	sts	0x181A, r24
    58d6:	90 93 1b 18 	sts	0x181B, r25
		timeLeftOdom = getTime100MicroSec();
    58da:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    58de:	60 93 f3 17 	sts	0x17F3, r22
    58e2:	70 93 f4 17 	sts	0x17F4, r23
    58e6:	80 93 f5 17 	sts	0x17F5, r24
    58ea:	90 93 f6 17 	sts	0x17F6, r25
		leftMotSteps = (signed long int)leftDist;
    58ee:	60 91 18 18 	lds	r22, 0x1818
    58f2:	70 91 19 18 	lds	r23, 0x1819
    58f6:	80 91 1a 18 	lds	r24, 0x181A
    58fa:	90 91 1b 18 	lds	r25, 0x181B
    58fe:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    5902:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5906:	60 93 9f 19 	sts	0x199F, r22
    590a:	70 93 a0 19 	sts	0x19A0, r23
    590e:	80 93 a1 19 	sts	0x19A1, r24
    5912:	90 93 a2 19 	sts	0x19A2, r25

		start_speed_control_left(&pwm_left_working);
    5916:	83 e7       	ldi	r24, 0x73	; 115
    5918:	99 e1       	ldi	r25, 0x19	; 25
    591a:	0e 94 f3 34 	call	0x69e6	; 0x69e6 <start_speed_control_left>

		pwm_left = pwm_left_working;
    591e:	80 91 73 19 	lds	r24, 0x1973
    5922:	90 91 74 19 	lds	r25, 0x1974
    5926:	90 93 8c 19 	sts	0x198C, r25
    592a:	80 93 8b 19 	sts	0x198B, r24

		if(pwm_left > 0) {
    592e:	18 16       	cp	r1, r24
    5930:	19 06       	cpc	r1, r25
    5932:	0c f0       	brlt	.+2      	; 0x5936 <handleMotorsWithSpeedController+0x39e>
    5934:	eb c1       	rjmp	.+982    	; 0x5d0c <handleMotorsWithSpeedController+0x774>
			OCR4A = (unsigned int)pwm_left;
    5936:	90 93 a9 00 	sts	0x00A9, r25
    593a:	80 93 a8 00 	sts	0x00A8, r24
		} else {
			OCR4A = 0;
			OCR4B = 0;
		}

		computeOdometry++;
    593e:	80 91 0b 18 	lds	r24, 0x180B
    5942:	8f 5f       	subi	r24, 0xFF	; 255
    5944:	80 93 0b 18 	sts	0x180B, r24

	}

	if(compute_right_vel) {
    5948:	80 91 29 03 	lds	r24, 0x0329
    594c:	81 11       	cpse	r24, r1
    594e:	b1 c0       	rjmp	.+354    	; 0x5ab2 <handleMotorsWithSpeedController+0x51a>
    5950:	80 91 0b 18 	lds	r24, 0x180B

		computeOdometry++;

	}

	if(computeOdometry>=2) {	// compute odometry when we get the last encoders values for both wheels
    5954:	82 30       	cpi	r24, 0x02	; 2
    5956:	08 f4       	brcc	.+2      	; 0x595a <handleMotorsWithSpeedController+0x3c2>
    5958:	98 c0       	rjmp	.+304    	; 0x5a8a <handleMotorsWithSpeedController+0x4f2>

		// the odometry computation takes about 1 ms

		computeOdometry = 0;
    595a:	10 92 0b 18 	sts	0x180B, r1

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;
    595e:	80 90 14 18 	lds	r8, 0x1814
    5962:	90 90 15 18 	lds	r9, 0x1815
    5966:	a0 90 16 18 	lds	r10, 0x1816
    596a:	b0 90 17 18 	lds	r11, 0x1817
    596e:	40 90 18 18 	lds	r4, 0x1818
    5972:	50 90 19 18 	lds	r5, 0x1819
    5976:	60 90 1a 18 	lds	r6, 0x181A
    597a:	70 90 1b 18 	lds	r7, 0x181B
    597e:	20 91 0c 18 	lds	r18, 0x180C
    5982:	30 91 0d 18 	lds	r19, 0x180D
    5986:	40 91 0e 18 	lds	r20, 0x180E
    598a:	50 91 0f 18 	lds	r21, 0x180F
    598e:	c5 01       	movw	r24, r10
    5990:	b4 01       	movw	r22, r8
    5992:	0e 94 58 56 	call	0xacb0	; 0xacb0 <__subsf3>
    5996:	6b 01       	movw	r12, r22
    5998:	7c 01       	movw	r14, r24
    599a:	20 91 10 18 	lds	r18, 0x1810
    599e:	30 91 11 18 	lds	r19, 0x1811
    59a2:	40 91 12 18 	lds	r20, 0x1812
    59a6:	50 91 13 18 	lds	r21, 0x1813
    59aa:	c3 01       	movw	r24, r6
    59ac:	b2 01       	movw	r22, r4
    59ae:	0e 94 58 56 	call	0xacb0	; 0xacb0 <__subsf3>
    59b2:	9b 01       	movw	r18, r22
    59b4:	ac 01       	movw	r20, r24
    59b6:	c7 01       	movw	r24, r14
    59b8:	b6 01       	movw	r22, r12
    59ba:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    59be:	20 e0       	ldi	r18, 0x00	; 0
    59c0:	30 e0       	ldi	r19, 0x00	; 0
    59c2:	40 e0       	ldi	r20, 0x00	; 0
    59c4:	5f e3       	ldi	r21, 0x3F	; 63
    59c6:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    59ca:	6b 01       	movw	r12, r22
    59cc:	7c 01       	movw	r14, r24
    59ce:	60 93 1c 18 	sts	0x181C, r22
    59d2:	70 93 1d 18 	sts	0x181D, r23
    59d6:	80 93 1e 18 	sts	0x181E, r24
    59da:	90 93 1f 18 	sts	0x181F, r25

		if(robotPosition == HORIZONTAL_POS) {
    59de:	80 91 1f 03 	lds	r24, 0x031F
    59e2:	81 30       	cpi	r24, 0x01	; 1
    59e4:	09 f4       	brne	.+2      	; 0x59e8 <handleMotorsWithSpeedController+0x450>
    59e6:	24 c1       	rjmp	.+584    	; 0x5c30 <handleMotorsWithSpeedController+0x698>
			theta = (rightDist-leftDist)/WHEEL_DIST;
		} else {
			theta = thetaAcc;
    59e8:	00 91 07 18 	lds	r16, 0x1807
    59ec:	10 91 08 18 	lds	r17, 0x1808
    59f0:	d0 91 09 18 	lds	r29, 0x1809
    59f4:	c0 91 0a 18 	lds	r28, 0x180A
    59f8:	c8 01       	movw	r24, r16
    59fa:	ad 2f       	mov	r26, r29
    59fc:	bc 2f       	mov	r27, r28
    59fe:	80 93 28 18 	sts	0x1828, r24
    5a02:	90 93 29 18 	sts	0x1829, r25
    5a06:	a0 93 2a 18 	sts	0x182A, r26
    5a0a:	b0 93 2b 18 	sts	0x182B, r27
		}

		xPos = xPos + cos(theta)*deltaDist;				
    5a0e:	b8 01       	movw	r22, r16
    5a10:	8d 2f       	mov	r24, r29
    5a12:	9c 2f       	mov	r25, r28
    5a14:	0e 94 37 57 	call	0xae6e	; 0xae6e <cos>
    5a18:	9b 01       	movw	r18, r22
    5a1a:	ac 01       	movw	r20, r24
    5a1c:	c7 01       	movw	r24, r14
    5a1e:	b6 01       	movw	r22, r12
    5a20:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5a24:	9b 01       	movw	r18, r22
    5a26:	ac 01       	movw	r20, r24
    5a28:	60 91 24 18 	lds	r22, 0x1824
    5a2c:	70 91 25 18 	lds	r23, 0x1825
    5a30:	80 91 26 18 	lds	r24, 0x1826
    5a34:	90 91 27 18 	lds	r25, 0x1827
    5a38:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    5a3c:	60 93 24 18 	sts	0x1824, r22
    5a40:	70 93 25 18 	sts	0x1825, r23
    5a44:	80 93 26 18 	sts	0x1826, r24
    5a48:	90 93 27 18 	sts	0x1827, r25
		yPos = yPos + sin(theta)*deltaDist;
    5a4c:	b8 01       	movw	r22, r16
    5a4e:	8d 2f       	mov	r24, r29
    5a50:	9c 2f       	mov	r25, r28
    5a52:	0e 94 4d 59 	call	0xb29a	; 0xb29a <sin>
    5a56:	9b 01       	movw	r18, r22
    5a58:	ac 01       	movw	r20, r24
    5a5a:	c7 01       	movw	r24, r14
    5a5c:	b6 01       	movw	r22, r12
    5a5e:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5a62:	9b 01       	movw	r18, r22
    5a64:	ac 01       	movw	r20, r24
    5a66:	60 91 20 18 	lds	r22, 0x1820
    5a6a:	70 91 21 18 	lds	r23, 0x1821
    5a6e:	80 91 22 18 	lds	r24, 0x1822
    5a72:	90 91 23 18 	lds	r25, 0x1823
    5a76:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    5a7a:	60 93 20 18 	sts	0x1820, r22
    5a7e:	70 93 21 18 	sts	0x1821, r23
    5a82:	80 93 22 18 	sts	0x1822, r24
    5a86:	90 93 23 18 	sts	0x1823, r25

	}

}
    5a8a:	df 91       	pop	r29
    5a8c:	cf 91       	pop	r28
    5a8e:	1f 91       	pop	r17
    5a90:	0f 91       	pop	r16
    5a92:	ff 90       	pop	r15
    5a94:	ef 90       	pop	r14
    5a96:	df 90       	pop	r13
    5a98:	cf 90       	pop	r12
    5a9a:	bf 90       	pop	r11
    5a9c:	af 90       	pop	r10
    5a9e:	9f 90       	pop	r9
    5aa0:	8f 90       	pop	r8
    5aa2:	7f 90       	pop	r7
    5aa4:	6f 90       	pop	r6
    5aa6:	5f 90       	pop	r5
    5aa8:	4f 90       	pop	r4
    5aaa:	08 95       	ret
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;

    if(currVel == 0) {
        return 0;
    5aac:	60 e0       	ldi	r22, 0x00	; 0
    5aae:	70 e0       	ldi	r23, 0x00	; 0
    5ab0:	0b ce       	rjmp	.-1002   	; 0x56c8 <handleMotorsWithSpeedController+0x130>

	}

	if(compute_right_vel) {

		last_right_vel = right_vel_sum>>2;
    5ab2:	80 91 93 19 	lds	r24, 0x1993
    5ab6:	90 91 94 19 	lds	r25, 0x1994
    5aba:	96 95       	lsr	r25
    5abc:	87 95       	ror	r24
    5abe:	96 95       	lsr	r25
    5ac0:	87 95       	ror	r24
    5ac2:	90 93 90 19 	sts	0x1990, r25
    5ac6:	80 93 8f 19 	sts	0x198F, r24
		compute_right_vel = 0;
    5aca:	10 92 29 03 	sts	0x0329, r1
		right_vel_sum = 0;
    5ace:	10 92 94 19 	sts	0x1994, r1
    5ad2:	10 92 93 19 	sts	0x1993, r1

		if(calibrateOdomFlag==1) {
    5ad6:	20 91 fe 1d 	lds	r18, 0x1DFE
    5ada:	21 30       	cpi	r18, 0x01	; 1
    5adc:	09 f4       	brne	.+2      	; 0x5ae0 <handleMotorsWithSpeedController+0x548>
    5ade:	d2 c0       	rjmp	.+420    	; 0x5c84 <handleMotorsWithSpeedController+0x6ec>
			rightSpeedSumOdom += last_right_vel;
			rightSumCount++;
		}

		getRightSpeedFromInput();
    5ae0:	0e 94 f7 22 	call	0x45ee	; 0x45ee <getRightSpeedFromInput>
		rightDistPrev = rightDist;
    5ae4:	80 91 14 18 	lds	r24, 0x1814
    5ae8:	90 91 15 18 	lds	r25, 0x1815
    5aec:	a0 91 16 18 	lds	r26, 0x1816
    5af0:	b0 91 17 18 	lds	r27, 0x1817
    5af4:	80 93 0c 18 	sts	0x180C, r24
    5af8:	90 93 0d 18 	sts	0x180D, r25
    5afc:	a0 93 0e 18 	sts	0x180E, r26
    5b00:	b0 93 0f 18 	sts	0x180F, r27
		rightDist += ((float)speedRightFromEnc*((float)(getTime100MicroSec()-timeRightOdom)*104.0))/1000000.0;	// distance in mm				
    5b04:	60 91 f7 17 	lds	r22, 0x17F7
    5b08:	70 91 f8 17 	lds	r23, 0x17F8
    5b0c:	07 2e       	mov	r0, r23
    5b0e:	00 0c       	add	r0, r0
    5b10:	88 0b       	sbc	r24, r24
    5b12:	99 0b       	sbc	r25, r25
    5b14:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5b18:	6b 01       	movw	r12, r22
    5b1a:	7c 01       	movw	r14, r24
    5b1c:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    5b20:	00 91 ef 17 	lds	r16, 0x17EF
    5b24:	10 91 f0 17 	lds	r17, 0x17F0
    5b28:	20 91 f1 17 	lds	r18, 0x17F1
    5b2c:	30 91 f2 17 	lds	r19, 0x17F2
    5b30:	60 1b       	sub	r22, r16
    5b32:	71 0b       	sbc	r23, r17
    5b34:	82 0b       	sbc	r24, r18
    5b36:	93 0b       	sbc	r25, r19
    5b38:	0e 94 e4 57 	call	0xafc8	; 0xafc8 <__floatunsisf>
    5b3c:	20 e0       	ldi	r18, 0x00	; 0
    5b3e:	30 e0       	ldi	r19, 0x00	; 0
    5b40:	40 ed       	ldi	r20, 0xD0	; 208
    5b42:	52 e4       	ldi	r21, 0x42	; 66
    5b44:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5b48:	9b 01       	movw	r18, r22
    5b4a:	ac 01       	movw	r20, r24
    5b4c:	c7 01       	movw	r24, r14
    5b4e:	b6 01       	movw	r22, r12
    5b50:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5b54:	20 e0       	ldi	r18, 0x00	; 0
    5b56:	34 e2       	ldi	r19, 0x24	; 36
    5b58:	44 e7       	ldi	r20, 0x74	; 116
    5b5a:	59 e4       	ldi	r21, 0x49	; 73
    5b5c:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    5b60:	9b 01       	movw	r18, r22
    5b62:	ac 01       	movw	r20, r24
    5b64:	60 91 14 18 	lds	r22, 0x1814
    5b68:	70 91 15 18 	lds	r23, 0x1815
    5b6c:	80 91 16 18 	lds	r24, 0x1816
    5b70:	90 91 17 18 	lds	r25, 0x1817
    5b74:	0e 94 59 56 	call	0xacb2	; 0xacb2 <__addsf3>
    5b78:	60 93 14 18 	sts	0x1814, r22
    5b7c:	70 93 15 18 	sts	0x1815, r23
    5b80:	80 93 16 18 	sts	0x1816, r24
    5b84:	90 93 17 18 	sts	0x1817, r25
		timeRightOdom = getTime100MicroSec();
    5b88:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    5b8c:	60 93 ef 17 	sts	0x17EF, r22
    5b90:	70 93 f0 17 	sts	0x17F0, r23
    5b94:	80 93 f1 17 	sts	0x17F1, r24
    5b98:	90 93 f2 17 	sts	0x17F2, r25
		rightMotSteps = (signed long int)rightDist;
    5b9c:	60 91 14 18 	lds	r22, 0x1814
    5ba0:	70 91 15 18 	lds	r23, 0x1815
    5ba4:	80 91 16 18 	lds	r24, 0x1816
    5ba8:	90 91 17 18 	lds	r25, 0x1817
    5bac:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    5bb0:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5bb4:	60 93 a3 19 	sts	0x19A3, r22
    5bb8:	70 93 a4 19 	sts	0x19A4, r23
    5bbc:	80 93 a5 19 	sts	0x19A5, r24
    5bc0:	90 93 a6 19 	sts	0x19A6, r25

		start_speed_control_right(&pwm_right_working);
    5bc4:	85 e7       	ldi	r24, 0x75	; 117
    5bc6:	99 e1       	ldi	r25, 0x19	; 25
    5bc8:	0e 94 cd 33 	call	0x679a	; 0x679a <start_speed_control_right>

		pwm_right = pwm_right_working;
    5bcc:	80 91 75 19 	lds	r24, 0x1975
    5bd0:	90 91 76 19 	lds	r25, 0x1976
    5bd4:	90 93 8e 19 	sts	0x198E, r25
    5bd8:	80 93 8d 19 	sts	0x198D, r24

		if(pwm_right > 0) {
    5bdc:	18 16       	cp	r1, r24
    5bde:	19 06       	cpc	r1, r25
    5be0:	0c f0       	brlt	.+2      	; 0x5be4 <handleMotorsWithSpeedController+0x64c>
    5be2:	9f c0       	rjmp	.+318    	; 0x5d22 <handleMotorsWithSpeedController+0x78a>
			OCR3A = (unsigned int)pwm_right;
    5be4:	90 93 99 00 	sts	0x0099, r25
    5be8:	80 93 98 00 	sts	0x0098, r24
		} else {
			OCR3A = 0;
			OCR3B = 0;
		}

		computeOdometry++;
    5bec:	80 91 0b 18 	lds	r24, 0x180B
    5bf0:	8f 5f       	subi	r24, 0xFF	; 255
    5bf2:	80 93 0b 18 	sts	0x180B, r24
    5bf6:	ae ce       	rjmp	.-676    	; 0x5954 <handleMotorsWithSpeedController+0x3bc>
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
		}
	}

	if(obstacleAvoidanceEnabled) {
		obstacleAvoidance(&pwm_left_working, &pwm_right_working);
    5bf8:	65 e7       	ldi	r22, 0x75	; 117
    5bfa:	79 e1       	ldi	r23, 0x19	; 25
    5bfc:	83 e7       	ldi	r24, 0x73	; 115
    5bfe:	99 e1       	ldi	r25, 0x19	; 25
    5c00:	0e 94 c2 31 	call	0x6384	; 0x6384 <obstacleAvoidance>
    5c04:	60 91 73 19 	lds	r22, 0x1973
    5c08:	70 91 74 19 	lds	r23, 0x1974
    5c0c:	ea cd       	rjmp	.-1068   	; 0x57e2 <handleMotorsWithSpeedController+0x24a>
void handleMotorsWithSpeedController() {

	handleSoftAcceleration();

	if(calibrateOdomFlag==1) {
		pwm_right_working = pwm_intermediate_right_desired;
    5c0e:	80 91 85 19 	lds	r24, 0x1985
    5c12:	90 91 86 19 	lds	r25, 0x1986
    5c16:	90 93 76 19 	sts	0x1976, r25
    5c1a:	80 93 75 19 	sts	0x1975, r24
		pwm_left_working = pwm_intermediate_left_desired;
    5c1e:	60 91 83 19 	lds	r22, 0x1983
    5c22:	70 91 84 19 	lds	r23, 0x1984
    5c26:	70 93 74 19 	sts	0x1974, r23
    5c2a:	60 93 73 19 	sts	0x1973, r22
    5c2e:	d5 cd       	rjmp	.-1110   	; 0x57da <handleMotorsWithSpeedController+0x242>
		computeOdometry = 0;

		deltaDist = ((rightDist-rightDistPrev)+(leftDist-leftDistPrev))/2.0;

		if(robotPosition == HORIZONTAL_POS) {
			theta = (rightDist-leftDist)/WHEEL_DIST;
    5c30:	a3 01       	movw	r20, r6
    5c32:	92 01       	movw	r18, r4
    5c34:	c5 01       	movw	r24, r10
    5c36:	b4 01       	movw	r22, r8
    5c38:	0e 94 58 56 	call	0xacb0	; 0xacb0 <__subsf3>
    5c3c:	20 e0       	ldi	r18, 0x00	; 0
    5c3e:	30 e0       	ldi	r19, 0x00	; 0
    5c40:	4e e1       	ldi	r20, 0x1E	; 30
    5c42:	52 e4       	ldi	r21, 0x42	; 66
    5c44:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    5c48:	8b 01       	movw	r16, r22
    5c4a:	ab 01       	movw	r20, r22
    5c4c:	bc 01       	movw	r22, r24
    5c4e:	40 93 28 18 	sts	0x1828, r20
    5c52:	50 93 29 18 	sts	0x1829, r21
    5c56:	60 93 2a 18 	sts	0x182A, r22
    5c5a:	70 93 2b 18 	sts	0x182B, r23
    5c5e:	d8 2f       	mov	r29, r24
    5c60:	c9 2f       	mov	r28, r25
    5c62:	d5 ce       	rjmp	.-598    	; 0x5a0e <handleMotorsWithSpeedController+0x476>
    int i = 0;
    signed int currVel = s*BYTE_TO_MM_S;
    signed int temp = 0;

    if(currVel == 0) {
        return 0;
    5c64:	60 e0       	ldi	r22, 0x00	; 0
    5c66:	70 e0       	ldi	r23, 0x00	; 0
    5c68:	b4 cd       	rjmp	.-1176   	; 0x57d2 <handleMotorsWithSpeedController+0x23a>
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
		}
		if(pwm_intermediate_left_desired >= 0) {		// pwm in the range -127..127
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_FW_SC);
		} else {
			pwm_left_working = getInputFromSpeed(pwm_intermediate_left_desired, LEFT_WHEEL_BW_SC);
    5c6a:	62 e0       	ldi	r22, 0x02	; 2
    5c6c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <getInputFromSpeed>
    5c70:	bc 01       	movw	r22, r24
    5c72:	af cd       	rjmp	.-1186   	; 0x57d2 <handleMotorsWithSpeedController+0x23a>
		pwm_left_working = pwm_intermediate_left_desired;
	} else {
		if(pwm_intermediate_right_desired >= 0) {		// pwm in the range -127..127
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_FW_SC);
		} else {
			pwm_right_working = getInputFromSpeed(pwm_intermediate_right_desired, RIGHT_WHEEL_BW_SC);
    5c74:	63 e0       	ldi	r22, 0x03	; 3
    5c76:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <getInputFromSpeed>
    5c7a:	90 93 76 19 	sts	0x1976, r25
    5c7e:	80 93 75 19 	sts	0x1975, r24
    5c82:	26 cd       	rjmp	.-1460   	; 0x56d0 <handleMotorsWithSpeedController+0x138>
		last_right_vel = right_vel_sum>>2;
		compute_right_vel = 0;
		right_vel_sum = 0;

		if(calibrateOdomFlag==1) {
			rightSpeedSumOdom += last_right_vel;
    5c84:	09 2e       	mov	r0, r25
    5c86:	00 0c       	add	r0, r0
    5c88:	aa 0b       	sbc	r26, r26
    5c8a:	bb 0b       	sbc	r27, r27
    5c8c:	40 91 ff 17 	lds	r20, 0x17FF
    5c90:	50 91 00 18 	lds	r21, 0x1800
    5c94:	60 91 01 18 	lds	r22, 0x1801
    5c98:	70 91 02 18 	lds	r23, 0x1802
    5c9c:	84 0f       	add	r24, r20
    5c9e:	95 1f       	adc	r25, r21
    5ca0:	a6 1f       	adc	r26, r22
    5ca2:	b7 1f       	adc	r27, r23
    5ca4:	80 93 ff 17 	sts	0x17FF, r24
    5ca8:	90 93 00 18 	sts	0x1800, r25
    5cac:	a0 93 01 18 	sts	0x1801, r26
    5cb0:	b0 93 02 18 	sts	0x1802, r27
			rightSumCount++;
    5cb4:	80 91 fb 17 	lds	r24, 0x17FB
    5cb8:	90 91 fc 17 	lds	r25, 0x17FC
    5cbc:	01 96       	adiw	r24, 0x01	; 1
    5cbe:	90 93 fc 17 	sts	0x17FC, r25
    5cc2:	80 93 fb 17 	sts	0x17FB, r24
    5cc6:	0c cf       	rjmp	.-488    	; 0x5ae0 <handleMotorsWithSpeedController+0x548>
		last_left_vel = left_vel_sum>>2;
		compute_left_vel = 0;
		left_vel_sum = 0;
		
		if(calibrateOdomFlag==1) {
			leftSpeedSumOdom += last_left_vel;
    5cc8:	09 2e       	mov	r0, r25
    5cca:	00 0c       	add	r0, r0
    5ccc:	aa 0b       	sbc	r26, r26
    5cce:	bb 0b       	sbc	r27, r27
    5cd0:	40 91 03 18 	lds	r20, 0x1803
    5cd4:	50 91 04 18 	lds	r21, 0x1804
    5cd8:	60 91 05 18 	lds	r22, 0x1805
    5cdc:	70 91 06 18 	lds	r23, 0x1806
    5ce0:	84 0f       	add	r24, r20
    5ce2:	95 1f       	adc	r25, r21
    5ce4:	a6 1f       	adc	r26, r22
    5ce6:	b7 1f       	adc	r27, r23
    5ce8:	80 93 03 18 	sts	0x1803, r24
    5cec:	90 93 04 18 	sts	0x1804, r25
    5cf0:	a0 93 05 18 	sts	0x1805, r26
    5cf4:	b0 93 06 18 	sts	0x1806, r27
			leftSumCount++;
    5cf8:	80 91 fd 17 	lds	r24, 0x17FD
    5cfc:	90 91 fe 17 	lds	r25, 0x17FE
    5d00:	01 96       	adiw	r24, 0x01	; 1
    5d02:	90 93 fe 17 	sts	0x17FE, r25
    5d06:	80 93 fd 17 	sts	0x17FD, r24
    5d0a:	93 cd       	rjmp	.-1242   	; 0x5832 <handleMotorsWithSpeedController+0x29a>

		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
    5d0c:	00 97       	sbiw	r24, 0x00	; 0
    5d0e:	a1 f4       	brne	.+40     	; 0x5d38 <handleMotorsWithSpeedController+0x7a0>
			OCR4B =(unsigned int)( -pwm_left);
		} else {
			OCR4A = 0;
    5d10:	10 92 a9 00 	sts	0x00A9, r1
    5d14:	10 92 a8 00 	sts	0x00A8, r1
			OCR4B = 0;
    5d18:	10 92 ab 00 	sts	0x00AB, r1
    5d1c:	10 92 aa 00 	sts	0x00AA, r1
    5d20:	0e ce       	rjmp	.-996    	; 0x593e <handleMotorsWithSpeedController+0x3a6>

		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
    5d22:	00 97       	sbiw	r24, 0x00	; 0
    5d24:	89 f4       	brne	.+34     	; 0x5d48 <handleMotorsWithSpeedController+0x7b0>
			OCR3B = (unsigned int)(-pwm_right);
		} else {
			OCR3A = 0;
    5d26:	10 92 99 00 	sts	0x0099, r1
    5d2a:	10 92 98 00 	sts	0x0098, r1
			OCR3B = 0;
    5d2e:	10 92 9b 00 	sts	0x009B, r1
    5d32:	10 92 9a 00 	sts	0x009A, r1
    5d36:	5a cf       	rjmp	.-332    	; 0x5bec <handleMotorsWithSpeedController+0x654>
		pwm_left = pwm_left_working;

		if(pwm_left > 0) {
			OCR4A = (unsigned int)pwm_left;
		} else if(pwm_left < 0) {
			OCR4B =(unsigned int)( -pwm_left);
    5d38:	91 95       	neg	r25
    5d3a:	81 95       	neg	r24
    5d3c:	91 09       	sbc	r25, r1
    5d3e:	90 93 ab 00 	sts	0x00AB, r25
    5d42:	80 93 aa 00 	sts	0x00AA, r24
    5d46:	fb cd       	rjmp	.-1034   	; 0x593e <handleMotorsWithSpeedController+0x3a6>
		pwm_right = pwm_right_working;

		if(pwm_right > 0) {
			OCR3A = (unsigned int)pwm_right;
		} else if(pwm_right < 0) {
			OCR3B = (unsigned int)(-pwm_right);
    5d48:	91 95       	neg	r25
    5d4a:	81 95       	neg	r24
    5d4c:	91 09       	sbc	r25, r1
    5d4e:	90 93 9b 00 	sts	0x009B, r25
    5d52:	80 93 9a 00 	sts	0x009A, r24
    5d56:	4a cf       	rjmp	.-364    	; 0x5bec <handleMotorsWithSpeedController+0x654>

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][2])/calibration[0][3];
    5d58:	40 91 be 20 	lds	r20, 0x20BE
    5d5c:	50 91 bf 20 	lds	r21, 0x20BF
    5d60:	64 9f       	mul	r22, r20
    5d62:	c0 01       	movw	r24, r0
    5d64:	65 9f       	mul	r22, r21
    5d66:	90 0d       	add	r25, r0
    5d68:	74 9f       	mul	r23, r20
    5d6a:	90 0d       	add	r25, r0
    5d6c:	11 24       	eor	r1, r1
    5d6e:	b9 01       	movw	r22, r18
    5d70:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    5d74:	a9 cc       	rjmp	.-1710   	; 0x56c8 <handleMotorsWithSpeedController+0x130>
        } 
    }

    if(i==0) {  // the velocity is lower than first saved in the matrix
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = (currVel*calibration[0][0])/calibration[0][1];
    5d76:	40 91 ba 20 	lds	r20, 0x20BA
    5d7a:	50 91 bb 20 	lds	r21, 0x20BB
    5d7e:	64 9f       	mul	r22, r20
    5d80:	c0 01       	movw	r24, r0
    5d82:	65 9f       	mul	r22, r21
    5d84:	90 0d       	add	r25, r0
    5d86:	74 9f       	mul	r23, r20
    5d88:	90 0d       	add	r25, r0
    5d8a:	11 24       	eor	r1, r1
    5d8c:	b9 01       	movw	r22, r18
    5d8e:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    5d92:	1f cd       	rjmp	.-1474   	; 0x57d2 <handleMotorsWithSpeedController+0x23a>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5d94:	cc 24       	eor	r12, r12
    5d96:	c3 94       	inc	r12
    5d98:	d1 2c       	mov	r13, r1
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
        } else if(mode==RIGHT_WHEEL_FW_SC) {
            temp = calibration[i-1][2] + (signed int)(((float)(currVel-calibration[i-1][3])*(float)(calibration[i][2]-calibration[i-1][2]))/(float)(calibration[i][3]-calibration[i-1][3]));
    5d9a:	f6 01       	movw	r30, r12
    5d9c:	e2 95       	swap	r30
    5d9e:	f2 95       	swap	r31
    5da0:	f0 7f       	andi	r31, 0xF0	; 240
    5da2:	fe 27       	eor	r31, r30
    5da4:	e0 7f       	andi	r30, 0xF0	; 240
    5da6:	fe 27       	eor	r31, r30
    5da8:	e6 55       	subi	r30, 0x56	; 86
    5daa:	ff 4d       	sbci	r31, 0xDF	; 223
    5dac:	e6 80       	ldd	r14, Z+6	; 0x06
    5dae:	f7 80       	ldd	r15, Z+7	; 0x07
    5db0:	04 81       	ldd	r16, Z+4	; 0x04
    5db2:	15 81       	ldd	r17, Z+5	; 0x05
    5db4:	cb 01       	movw	r24, r22
    5db6:	8e 19       	sub	r24, r14
    5db8:	9f 09       	sbc	r25, r15
    5dba:	bc 01       	movw	r22, r24
    5dbc:	99 0f       	add	r25, r25
    5dbe:	88 0b       	sbc	r24, r24
    5dc0:	99 0b       	sbc	r25, r25
    5dc2:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5dc6:	4b 01       	movw	r8, r22
    5dc8:	5c 01       	movw	r10, r24
    5dca:	f6 01       	movw	r30, r12
    5dcc:	e2 95       	swap	r30
    5dce:	f2 95       	swap	r31
    5dd0:	f0 7f       	andi	r31, 0xF0	; 240
    5dd2:	fe 27       	eor	r31, r30
    5dd4:	e0 7f       	andi	r30, 0xF0	; 240
    5dd6:	fe 27       	eor	r31, r30
    5dd8:	e6 54       	subi	r30, 0x46	; 70
    5dda:	ff 4d       	sbci	r31, 0xDF	; 223
    5ddc:	64 81       	ldd	r22, Z+4	; 0x04
    5dde:	75 81       	ldd	r23, Z+5	; 0x05
    5de0:	60 1b       	sub	r22, r16
    5de2:	71 0b       	sbc	r23, r17
    5de4:	07 2e       	mov	r0, r23
    5de6:	00 0c       	add	r0, r0
    5de8:	88 0b       	sbc	r24, r24
    5dea:	99 0b       	sbc	r25, r25
    5dec:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5df0:	9b 01       	movw	r18, r22
    5df2:	ac 01       	movw	r20, r24
    5df4:	c5 01       	movw	r24, r10
    5df6:	b4 01       	movw	r22, r8
    5df8:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5dfc:	4b 01       	movw	r8, r22
    5dfe:	5c 01       	movw	r10, r24
    5e00:	ce 19       	sub	r28, r14
    5e02:	df 09       	sbc	r29, r15
    5e04:	be 01       	movw	r22, r28
    5e06:	dd 0f       	add	r29, r29
    5e08:	88 0b       	sbc	r24, r24
    5e0a:	99 0b       	sbc	r25, r25
    5e0c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5e10:	9b 01       	movw	r18, r22
    5e12:	ac 01       	movw	r20, r24
    5e14:	c5 01       	movw	r24, r10
    5e16:	b4 01       	movw	r22, r8
    5e18:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    5e1c:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    5e20:	60 0f       	add	r22, r16
    5e22:	71 1f       	adc	r23, r17
    5e24:	51 cc       	rjmp	.-1886   	; 0x56c8 <handleMotorsWithSpeedController+0x130>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5e26:	f2 e0       	ldi	r31, 0x02	; 2
    5e28:	cf 2e       	mov	r12, r31
    5e2a:	d1 2c       	mov	r13, r1
    5e2c:	b6 cf       	rjmp	.-148    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5e2e:	a2 e0       	ldi	r26, 0x02	; 2
    5e30:	ca 2e       	mov	r12, r26
    5e32:	d1 2c       	mov	r13, r1
            temp = (signed int)((float)currVel*(float)calibration[CALIBRATION_SAMPLES-1][6]/(float)calibration[CALIBRATION_SAMPLES-1][7]);
            temp = -temp;
        }
    } else {
        if(mode==LEFT_WHEEL_FW_SC) {
            temp = calibration[i-1][0] + (signed int)(((float)(currVel-calibration[i-1][1])*(float)(calibration[i][0]-calibration[i-1][0]))/(float)(calibration[i][1]-calibration[i-1][1]));
    5e34:	f6 01       	movw	r30, r12
    5e36:	e2 95       	swap	r30
    5e38:	f2 95       	swap	r31
    5e3a:	f0 7f       	andi	r31, 0xF0	; 240
    5e3c:	fe 27       	eor	r31, r30
    5e3e:	e0 7f       	andi	r30, 0xF0	; 240
    5e40:	fe 27       	eor	r31, r30
    5e42:	e6 55       	subi	r30, 0x56	; 86
    5e44:	ff 4d       	sbci	r31, 0xDF	; 223
    5e46:	e2 80       	ldd	r14, Z+2	; 0x02
    5e48:	f3 80       	ldd	r15, Z+3	; 0x03
    5e4a:	00 81       	ld	r16, Z
    5e4c:	11 81       	ldd	r17, Z+1	; 0x01
    5e4e:	ab 01       	movw	r20, r22
    5e50:	4e 19       	sub	r20, r14
    5e52:	5f 09       	sbc	r21, r15
    5e54:	ba 01       	movw	r22, r20
    5e56:	55 0f       	add	r21, r21
    5e58:	88 0b       	sbc	r24, r24
    5e5a:	99 0b       	sbc	r25, r25
    5e5c:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5e60:	4b 01       	movw	r8, r22
    5e62:	5c 01       	movw	r10, r24
    5e64:	f6 01       	movw	r30, r12
    5e66:	e2 95       	swap	r30
    5e68:	f2 95       	swap	r31
    5e6a:	f0 7f       	andi	r31, 0xF0	; 240
    5e6c:	fe 27       	eor	r31, r30
    5e6e:	e0 7f       	andi	r30, 0xF0	; 240
    5e70:	fe 27       	eor	r31, r30
    5e72:	e6 54       	subi	r30, 0x46	; 70
    5e74:	ff 4d       	sbci	r31, 0xDF	; 223
    5e76:	60 81       	ld	r22, Z
    5e78:	71 81       	ldd	r23, Z+1	; 0x01
    5e7a:	60 1b       	sub	r22, r16
    5e7c:	71 0b       	sbc	r23, r17
    5e7e:	07 2e       	mov	r0, r23
    5e80:	00 0c       	add	r0, r0
    5e82:	88 0b       	sbc	r24, r24
    5e84:	99 0b       	sbc	r25, r25
    5e86:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5e8a:	9b 01       	movw	r18, r22
    5e8c:	ac 01       	movw	r20, r24
    5e8e:	c5 01       	movw	r24, r10
    5e90:	b4 01       	movw	r22, r8
    5e92:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    5e96:	4b 01       	movw	r8, r22
    5e98:	5c 01       	movw	r10, r24
    5e9a:	ce 19       	sub	r28, r14
    5e9c:	df 09       	sbc	r29, r15
    5e9e:	be 01       	movw	r22, r28
    5ea0:	dd 0f       	add	r29, r29
    5ea2:	88 0b       	sbc	r24, r24
    5ea4:	99 0b       	sbc	r25, r25
    5ea6:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    5eaa:	9b 01       	movw	r18, r22
    5eac:	ac 01       	movw	r20, r24
    5eae:	c5 01       	movw	r24, r10
    5eb0:	b4 01       	movw	r22, r8
    5eb2:	0e 94 3c 57 	call	0xae78	; 0xae78 <__divsf3>
    5eb6:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>
    5eba:	60 0f       	add	r22, r16
    5ebc:	71 1f       	adc	r23, r17
    5ebe:	89 cc       	rjmp	.-1774   	; 0x57d2 <handleMotorsWithSpeedController+0x23a>

    if(mode==LEFT_WHEEL_BW_SC || mode==RIGHT_WHEEL_BW_SC) {
        currVel = -currVel; // consider only positive values
    }

    for(i=0; i<CALIBRATION_SAMPLES; i++) {
    5ec0:	cc 24       	eor	r12, r12
    5ec2:	c3 94       	inc	r12
    5ec4:	d1 2c       	mov	r13, r1
    5ec6:	b6 cf       	rjmp	.-148    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>
    5ec8:	e4 e0       	ldi	r30, 0x04	; 4
    5eca:	ce 2e       	mov	r12, r30
    5ecc:	d1 2c       	mov	r13, r1
    5ece:	b2 cf       	rjmp	.-156    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>
    5ed0:	54 e0       	ldi	r21, 0x04	; 4
    5ed2:	c5 2e       	mov	r12, r21
    5ed4:	d1 2c       	mov	r13, r1
    5ed6:	61 cf       	rjmp	.-318    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5ed8:	e3 e0       	ldi	r30, 0x03	; 3
    5eda:	ce 2e       	mov	r12, r30
    5edc:	d1 2c       	mov	r13, r1
    5ede:	5d cf       	rjmp	.-326    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5ee0:	f3 e0       	ldi	r31, 0x03	; 3
    5ee2:	cf 2e       	mov	r12, r31
    5ee4:	d1 2c       	mov	r13, r1
    5ee6:	a6 cf       	rjmp	.-180    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>
    5ee8:	55 e0       	ldi	r21, 0x05	; 5
    5eea:	c5 2e       	mov	r12, r21
    5eec:	d1 2c       	mov	r13, r1
    5eee:	a2 cf       	rjmp	.-188    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>
    5ef0:	36 e0       	ldi	r19, 0x06	; 6
    5ef2:	c3 2e       	mov	r12, r19
    5ef4:	d1 2c       	mov	r13, r1
    5ef6:	51 cf       	rjmp	.-350    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5ef8:	46 e0       	ldi	r20, 0x06	; 6
    5efa:	c4 2e       	mov	r12, r20
    5efc:	d1 2c       	mov	r13, r1
    5efe:	9a cf       	rjmp	.-204    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>
    5f00:	45 e0       	ldi	r20, 0x05	; 5
    5f02:	c4 2e       	mov	r12, r20
    5f04:	d1 2c       	mov	r13, r1
    5f06:	49 cf       	rjmp	.-366    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5f08:	28 e0       	ldi	r18, 0x08	; 8
    5f0a:	c2 2e       	mov	r12, r18
    5f0c:	d1 2c       	mov	r13, r1
    5f0e:	92 cf       	rjmp	.-220    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>
    5f10:	27 e0       	ldi	r18, 0x07	; 7
    5f12:	c2 2e       	mov	r12, r18
    5f14:	d1 2c       	mov	r13, r1
    5f16:	41 cf       	rjmp	.-382    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5f18:	98 e0       	ldi	r25, 0x08	; 8
    5f1a:	c9 2e       	mov	r12, r25
    5f1c:	d1 2c       	mov	r13, r1
    5f1e:	3d cf       	rjmp	.-390    	; 0x5d9a <handleMotorsWithSpeedController+0x802>
    5f20:	37 e0       	ldi	r19, 0x07	; 7
    5f22:	c3 2e       	mov	r12, r19
    5f24:	d1 2c       	mov	r13, r1
    5f26:	86 cf       	rjmp	.-244    	; 0x5e34 <handleMotorsWithSpeedController+0x89c>

00005f28 <__vector_45>:

}


// Motor left
ISR(TIMER4_OVF_vect) {
    5f28:	1f 92       	push	r1
    5f2a:	0f 92       	push	r0
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	0f 92       	push	r0
    5f30:	11 24       	eor	r1, r1
    5f32:	8f 93       	push	r24
    5f34:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    5f36:	80 91 2c 18 	lds	r24, 0x182C
    5f3a:	88 23       	and	r24, r24
    5f3c:	61 f0       	breq	.+24     	; 0x5f56 <__vector_45+0x2e>
		pwm_left = 0;
    5f3e:	10 92 8c 19 	sts	0x198C, r1
    5f42:	10 92 8b 19 	sts	0x198B, r1
		OCR4A = 0;
    5f46:	10 92 a9 00 	sts	0x00A9, r1
    5f4a:	10 92 a8 00 	sts	0x00A8, r1
		OCR4B = 0;
    5f4e:	10 92 ab 00 	sts	0x00AB, r1
    5f52:	10 92 aa 00 	sts	0x00AA, r1
	}

	left_current_avg = 0;
    5f56:	10 92 9e 19 	sts	0x199E, r1
    5f5a:	10 92 9d 19 	sts	0x199D, r1

	// set pins mode based on controller output
	if(pwm_left == 0) {
    5f5e:	80 91 8b 19 	lds	r24, 0x198B
    5f62:	90 91 8c 19 	lds	r25, 0x198C
    5f66:	00 97       	sbiw	r24, 0x00	; 0
    5f68:	41 f5       	brne	.+80     	; 0x5fba <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    5f6a:	80 91 97 19 	lds	r24, 0x1997
    5f6e:	90 91 98 19 	lds	r25, 0x1998
    5f72:	97 fd       	sbrc	r25, 7
    5f74:	67 c0       	rjmp	.+206    	; 0x6044 <__vector_45+0x11c>
			leftMotorPhase = PASSIVE_PHASE;
    5f76:	81 e0       	ldi	r24, 0x01	; 1
    5f78:	80 93 4f 1a 	sts	0x1A4F, r24
			currentMotLeftChannel = 14;
    5f7c:	8e e0       	ldi	r24, 0x0E	; 14
    5f7e:	80 93 52 1a 	sts	0x1A52, r24
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    5f82:	81 e0       	ldi	r24, 0x01	; 1
    5f84:	80 93 27 03 	sts	0x0327, r24

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    5f88:	80 91 a0 00 	lds	r24, 0x00A0
    5f8c:	8f 75       	andi	r24, 0x5F	; 95
    5f8e:	80 93 a0 00 	sts	0x00A0, r24
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    5f92:	80 91 02 01 	lds	r24, 0x0102
    5f96:	87 7e       	andi	r24, 0xE7	; 231
    5f98:	80 93 02 01 	sts	0x0102, r24
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    5f9c:	80 91 72 00 	lds	r24, 0x0072
    5fa0:	89 7f       	andi	r24, 0xF9	; 249
    5fa2:	80 93 72 00 	sts	0x0072, r24
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    5fa6:	89 b3       	in	r24, 0x19	; 25
    5fa8:	86 60       	ori	r24, 0x06	; 6
    5faa:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    5fac:	9f 91       	pop	r25
    5fae:	8f 91       	pop	r24
    5fb0:	0f 90       	pop	r0
    5fb2:	0f be       	out	0x3f, r0	; 63
    5fb4:	0f 90       	pop	r0
    5fb6:	1f 90       	pop	r1
    5fb8:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
		leftMotorPhase = ACTIVE_PHASE;
    5fba:	10 92 4f 1a 	sts	0x1A4F, r1
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    5fbe:	18 16       	cp	r1, r24
    5fc0:	19 06       	cpc	r1, r25
    5fc2:	1c f5       	brge	.+70     	; 0x600a <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    5fc4:	8f e0       	ldi	r24, 0x0F	; 15
    5fc6:	80 93 52 1a 	sts	0x1A52, r24
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    5fca:	80 91 a0 00 	lds	r24, 0x00A0
    5fce:	8f 7d       	andi	r24, 0xDF	; 223
    5fd0:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    5fd4:	80 91 72 00 	lds	r24, 0x0072
    5fd8:	8b 7f       	andi	r24, 0xFB	; 251
    5fda:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 4);				// output to 0
    5fde:	80 91 02 01 	lds	r24, 0x0102
    5fe2:	8f 7e       	andi	r24, 0xEF	; 239
    5fe4:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4A1);		// enable OCA
    5fe8:	80 91 a0 00 	lds	r24, 0x00A0
    5fec:	80 68       	ori	r24, 0x80	; 128
    5fee:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    5ff2:	80 91 72 00 	lds	r24, 0x0072
    5ff6:	82 60       	ori	r24, 0x02	; 2
    5ff8:	80 93 72 00 	sts	0x0072, r24
	}
*/

//	LED_GREEN_OFF;

}
    5ffc:	9f 91       	pop	r25
    5ffe:	8f 91       	pop	r24
    6000:	0f 90       	pop	r0
    6002:	0f be       	out	0x3f, r0	; 63
    6004:	0f 90       	pop	r0
    6006:	1f 90       	pop	r1
    6008:	18 95       	reti
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    600a:	8e e0       	ldi	r24, 0x0E	; 14
    600c:	80 93 52 1a 	sts	0x1A52, r24
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    6010:	80 91 a0 00 	lds	r24, 0x00A0
    6014:	8f 77       	andi	r24, 0x7F	; 127
    6016:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    601a:	80 91 72 00 	lds	r24, 0x0072
    601e:	8d 7f       	andi	r24, 0xFD	; 253
    6020:	80 93 72 00 	sts	0x0072, r24
		PORTH &= ~(1 << 3);				// output to 0
    6024:	80 91 02 01 	lds	r24, 0x0102
    6028:	87 7f       	andi	r24, 0xF7	; 247
    602a:	80 93 02 01 	sts	0x0102, r24
		TCCR4A |= (1 << COM4B1);		// enable OCB
    602e:	80 91 a0 00 	lds	r24, 0x00A0
    6032:	80 62       	ori	r24, 0x20	; 32
    6034:	80 93 a0 00 	sts	0x00A0, r24
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    6038:	80 91 72 00 	lds	r24, 0x0072
    603c:	84 60       	ori	r24, 0x04	; 4
    603e:	80 93 72 00 	sts	0x0072, r24
    6042:	b4 cf       	rjmp	.-152    	; 0x5fac <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    6044:	81 e0       	ldi	r24, 0x01	; 1
    6046:	80 93 4f 1a 	sts	0x1A4F, r24
			currentMotLeftChannel = 15;
    604a:	8f e0       	ldi	r24, 0x0F	; 15
    604c:	80 93 52 1a 	sts	0x1A52, r24
    6050:	98 cf       	rjmp	.-208    	; 0x5f82 <__vector_45+0x5a>

00006052 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    6052:	1f 92       	push	r1
    6054:	0f 92       	push	r0
    6056:	0f b6       	in	r0, 0x3f	; 63
    6058:	0f 92       	push	r0
    605a:	11 24       	eor	r1, r1
    605c:	8f 93       	push	r24
    605e:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    6060:	81 e0       	ldi	r24, 0x01	; 1
    6062:	80 93 4f 1a 	sts	0x1A4F, r24
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    6066:	9e e0       	ldi	r25, 0x0E	; 14
    6068:	90 93 52 1a 	sts	0x1A52, r25

	firstSampleLeft = 1;
    606c:	80 93 27 03 	sts	0x0327, r24

//	LED_GREEN_OFF;

}
    6070:	9f 91       	pop	r25
    6072:	8f 91       	pop	r24
    6074:	0f 90       	pop	r0
    6076:	0f be       	out	0x3f, r0	; 63
    6078:	0f 90       	pop	r0
    607a:	1f 90       	pop	r1
    607c:	18 95       	reti

0000607e <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    607e:	1f 92       	push	r1
    6080:	0f 92       	push	r0
    6082:	0f b6       	in	r0, 0x3f	; 63
    6084:	0f 92       	push	r0
    6086:	11 24       	eor	r1, r1
    6088:	8f 93       	push	r24
    608a:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    608c:	81 e0       	ldi	r24, 0x01	; 1
    608e:	80 93 4f 1a 	sts	0x1A4F, r24
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    6092:	9f e0       	ldi	r25, 0x0F	; 15
    6094:	90 93 52 1a 	sts	0x1A52, r25

	firstSampleLeft = 1;
    6098:	80 93 27 03 	sts	0x0327, r24

//	LED_GREEN_OFF;

}
    609c:	9f 91       	pop	r25
    609e:	8f 91       	pop	r24
    60a0:	0f 90       	pop	r0
    60a2:	0f be       	out	0x3f, r0	; 63
    60a4:	0f 90       	pop	r0
    60a6:	1f 90       	pop	r1
    60a8:	18 95       	reti

000060aa <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    60aa:	1f 92       	push	r1
    60ac:	0f 92       	push	r0
    60ae:	0f b6       	in	r0, 0x3f	; 63
    60b0:	0f 92       	push	r0
    60b2:	11 24       	eor	r1, r1
    60b4:	8f 93       	push	r24
    60b6:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    60b8:	80 91 2c 18 	lds	r24, 0x182C
    60bc:	88 23       	and	r24, r24
    60be:	61 f0       	breq	.+24     	; 0x60d8 <__vector_35+0x2e>
		pwm_right = 0;
    60c0:	10 92 8e 19 	sts	0x198E, r1
    60c4:	10 92 8d 19 	sts	0x198D, r1
		OCR3A = 0;
    60c8:	10 92 99 00 	sts	0x0099, r1
    60cc:	10 92 98 00 	sts	0x0098, r1
		OCR3B = 0;
    60d0:	10 92 9b 00 	sts	0x009B, r1
    60d4:	10 92 9a 00 	sts	0x009A, r1
	}

	right_current_avg = 0;
    60d8:	10 92 9c 19 	sts	0x199C, r1
    60dc:	10 92 9b 19 	sts	0x199B, r1


	if(pwm_right == 0) {
    60e0:	80 91 8d 19 	lds	r24, 0x198D
    60e4:	90 91 8e 19 	lds	r25, 0x198E
    60e8:	00 97       	sbiw	r24, 0x00	; 0
    60ea:	31 f5       	brne	.+76     	; 0x6138 <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    60ec:	80 91 99 19 	lds	r24, 0x1999
    60f0:	90 91 9a 19 	lds	r25, 0x199A
    60f4:	97 fd       	sbrc	r25, 7
    60f6:	5d c0       	rjmp	.+186    	; 0x61b2 <__vector_35+0x108>
			rightMotorPhase = PASSIVE_PHASE;
    60f8:	81 e0       	ldi	r24, 0x01	; 1
    60fa:	80 93 50 1a 	sts	0x1A50, r24
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    60fe:	8c e0       	ldi	r24, 0x0C	; 12
    6100:	80 93 51 1a 	sts	0x1A51, r24
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    6104:	81 e0       	ldi	r24, 0x01	; 1
    6106:	80 93 28 03 	sts	0x0328, r24

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    610a:	80 91 90 00 	lds	r24, 0x0090
    610e:	8f 75       	andi	r24, 0x5F	; 95
    6110:	80 93 90 00 	sts	0x0090, r24
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    6114:	8e b1       	in	r24, 0x0e	; 14
    6116:	87 7e       	andi	r24, 0xE7	; 231
    6118:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    611a:	80 91 71 00 	lds	r24, 0x0071
    611e:	89 7f       	andi	r24, 0xF9	; 249
    6120:	80 93 71 00 	sts	0x0071, r24
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    6124:	88 b3       	in	r24, 0x18	; 24
    6126:	86 60       	ori	r24, 0x06	; 6
    6128:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    612a:	9f 91       	pop	r25
    612c:	8f 91       	pop	r24
    612e:	0f 90       	pop	r0
    6130:	0f be       	out	0x3f, r0	; 63
    6132:	0f 90       	pop	r0
    6134:	1f 90       	pop	r1
    6136:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
		rightMotorPhase = ACTIVE_PHASE;
    6138:	10 92 50 1a 	sts	0x1A50, r1
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    613c:	18 16       	cp	r1, r24
    613e:	19 06       	cpc	r1, r25
    6140:	fc f4       	brge	.+62     	; 0x6180 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    6142:	8d e0       	ldi	r24, 0x0D	; 13
    6144:	80 93 51 1a 	sts	0x1A51, r24
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    6148:	80 91 90 00 	lds	r24, 0x0090
    614c:	8f 7d       	andi	r24, 0xDF	; 223
    614e:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    6152:	80 91 71 00 	lds	r24, 0x0071
    6156:	8b 7f       	andi	r24, 0xFB	; 251
    6158:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 4);				// output to 0
    615c:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    615e:	80 91 90 00 	lds	r24, 0x0090
    6162:	80 68       	ori	r24, 0x80	; 128
    6164:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    6168:	80 91 71 00 	lds	r24, 0x0071
    616c:	82 60       	ori	r24, 0x02	; 2
    616e:	80 93 71 00 	sts	0x0071, r24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    6172:	9f 91       	pop	r25
    6174:	8f 91       	pop	r24
    6176:	0f 90       	pop	r0
    6178:	0f be       	out	0x3f, r0	; 63
    617a:	0f 90       	pop	r0
    617c:	1f 90       	pop	r1
    617e:	18 95       	reti
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    6180:	8c e0       	ldi	r24, 0x0C	; 12
    6182:	80 93 51 1a 	sts	0x1A51, r24
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    6186:	80 91 90 00 	lds	r24, 0x0090
    618a:	8f 77       	andi	r24, 0x7F	; 127
    618c:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    6190:	80 91 71 00 	lds	r24, 0x0071
    6194:	8d 7f       	andi	r24, 0xFD	; 253
    6196:	80 93 71 00 	sts	0x0071, r24
		PORTE &= ~(1 << 3);				// output to 0
    619a:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    619c:	80 91 90 00 	lds	r24, 0x0090
    61a0:	80 62       	ori	r24, 0x20	; 32
    61a2:	80 93 90 00 	sts	0x0090, r24
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    61a6:	80 91 71 00 	lds	r24, 0x0071
    61aa:	84 60       	ori	r24, 0x04	; 4
    61ac:	80 93 71 00 	sts	0x0071, r24
    61b0:	bc cf       	rjmp	.-136    	; 0x612a <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    61b2:	81 e0       	ldi	r24, 0x01	; 1
    61b4:	80 93 50 1a 	sts	0x1A50, r24
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    61b8:	8d e0       	ldi	r24, 0x0D	; 13
    61ba:	80 93 51 1a 	sts	0x1A51, r24
    61be:	a2 cf       	rjmp	.-188    	; 0x6104 <__vector_35+0x5a>

000061c0 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    61c0:	1f 92       	push	r1
    61c2:	0f 92       	push	r0
    61c4:	0f b6       	in	r0, 0x3f	; 63
    61c6:	0f 92       	push	r0
    61c8:	11 24       	eor	r1, r1
    61ca:	8f 93       	push	r24
    61cc:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    61ce:	81 e0       	ldi	r24, 0x01	; 1
    61d0:	80 93 50 1a 	sts	0x1A50, r24
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    61d4:	9c e0       	ldi	r25, 0x0C	; 12
    61d6:	90 93 51 1a 	sts	0x1A51, r25

	firstSampleRight = 1;
    61da:	80 93 28 03 	sts	0x0328, r24

//	LED_RED_OFF;

}
    61de:	9f 91       	pop	r25
    61e0:	8f 91       	pop	r24
    61e2:	0f 90       	pop	r0
    61e4:	0f be       	out	0x3f, r0	; 63
    61e6:	0f 90       	pop	r0
    61e8:	1f 90       	pop	r1
    61ea:	18 95       	reti

000061ec <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    61ec:	1f 92       	push	r1
    61ee:	0f 92       	push	r0
    61f0:	0f b6       	in	r0, 0x3f	; 63
    61f2:	0f 92       	push	r0
    61f4:	11 24       	eor	r1, r1
    61f6:	8f 93       	push	r24
    61f8:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    61fa:	81 e0       	ldi	r24, 0x01	; 1
    61fc:	80 93 50 1a 	sts	0x1A50, r24
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    6200:	9d e0       	ldi	r25, 0x0D	; 13
    6202:	90 93 51 1a 	sts	0x1A51, r25

	firstSampleRight = 1;
    6206:	80 93 28 03 	sts	0x0328, r24

//	LED_RED_OFF;
}
    620a:	9f 91       	pop	r25
    620c:	8f 91       	pop	r24
    620e:	0f 90       	pop	r0
    6210:	0f be       	out	0x3f, r0	; 63
    6212:	0f 90       	pop	r0
    6214:	1f 90       	pop	r1
    6216:	18 95       	reti

00006218 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    6218:	85 b7       	in	r24, 0x35	; 53
    621a:	80 61       	ori	r24, 0x10	; 16
    621c:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    621e:	8f ef       	ldi	r24, 0xFF	; 255
    6220:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    6222:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    6224:	97 ef       	ldi	r25, 0xF7	; 247
    6226:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    6228:	90 ee       	ldi	r25, 0xE0	; 224
    622a:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    622c:	90 ef       	ldi	r25, 0xF0	; 240
    622e:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    6230:	90 eb       	ldi	r25, 0xB0	; 176
    6232:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    6234:	9c ef       	ldi	r25, 0xFC	; 252
    6236:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    6238:	93 e0       	ldi	r25, 0x03	; 3
    623a:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    623c:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    623e:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    6240:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    6242:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    6244:	80 91 3c 18 	lds	r24, 0x183C
    6248:	81 11       	cpse	r24, r1
    624a:	03 c0       	rjmp	.+6      	; 0x6252 <initPortsIO+0x3a>
		PORTG = 0x00;		// default for unused pins is 0
    624c:	14 ba       	out	0x14, r1	; 20
    624e:	80 91 3c 18 	lds	r24, 0x183C
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    6252:	81 30       	cpi	r24, 0x01	; 1
    6254:	09 f4       	brne	.+2      	; 0x6258 <initPortsIO+0x40>
    6256:	40 c0       	rjmp	.+128    	; 0x62d8 <initPortsIO+0xc0>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    6258:	82 30       	cpi	r24, 0x02	; 2
    625a:	d9 f1       	breq	.+118    	; 0x62d2 <initPortsIO+0xba>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    625c:	8f ef       	ldi	r24, 0xFF	; 255
    625e:	80 93 01 01 	sts	0x0101, r24
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    6262:	10 92 02 01 	sts	0x0102, r1

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    6266:	8f e0       	ldi	r24, 0x0F	; 15
    6268:	80 93 04 01 	sts	0x0104, r24
	if(hardwareRevision == HW_REV_3_0) {
    626c:	80 91 3c 18 	lds	r24, 0x183C
    6270:	81 11       	cpse	r24, r1
    6272:	06 c0       	rjmp	.+12     	; 0x6280 <initPortsIO+0x68>
		PORTJ &= 0x00;		// cliff pulse turned off
    6274:	80 91 05 01 	lds	r24, 0x0105
    6278:	10 92 05 01 	sts	0x0105, r1
    627c:	80 91 3c 18 	lds	r24, 0x183C
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    6280:	81 30       	cpi	r24, 0x01	; 1
    6282:	09 f1       	breq	.+66     	; 0x62c6 <initPortsIO+0xae>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    6284:	82 30       	cpi	r24, 0x02	; 2
    6286:	d9 f0       	breq	.+54     	; 0x62be <initPortsIO+0xa6>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    6288:	10 92 07 01 	sts	0x0107, r1

	DDRL = 0xFF;			// all pins to output
    628c:	8f ef       	ldi	r24, 0xFF	; 255
    628e:	80 93 0a 01 	sts	0x010A, r24
	if(hardwareRevision == HW_REV_3_0) {
    6292:	80 91 3c 18 	lds	r24, 0x183C
    6296:	81 11       	cpse	r24, r1
    6298:	04 c0       	rjmp	.+8      	; 0x62a2 <initPortsIO+0x8a>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    629a:	10 92 0b 01 	sts	0x010B, r1
    629e:	80 91 3c 18 	lds	r24, 0x183C
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    62a2:	81 30       	cpi	r24, 0x01	; 1
    62a4:	39 f0       	breq	.+14     	; 0x62b4 <initPortsIO+0x9c>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    62a6:	82 30       	cpi	r24, 0x02	; 2
    62a8:	09 f0       	breq	.+2      	; 0x62ac <initPortsIO+0x94>
    62aa:	08 95       	ret
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    62ac:	87 ef       	ldi	r24, 0xF7	; 247
    62ae:	80 93 0b 01 	sts	0x010B, r24
    62b2:	08 95       	ret
	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    62b4:	10 92 0b 01 	sts	0x010B, r1
    62b8:	80 91 3c 18 	lds	r24, 0x183C
    62bc:	f4 cf       	rjmp	.-24     	; 0x62a6 <initPortsIO+0x8e>
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    62be:	8f e0       	ldi	r24, 0x0F	; 15
    62c0:	80 93 05 01 	sts	0x0105, r24
    62c4:	e1 cf       	rjmp	.-62     	; 0x6288 <initPortsIO+0x70>
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    62c6:	8f e0       	ldi	r24, 0x0F	; 15
    62c8:	80 93 05 01 	sts	0x0105, r24
    62cc:	80 91 3c 18 	lds	r24, 0x183C
    62d0:	d9 cf       	rjmp	.-78     	; 0x6284 <initPortsIO+0x6c>
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    62d2:	88 e0       	ldi	r24, 0x08	; 8
    62d4:	84 bb       	out	0x14, r24	; 20
    62d6:	c2 cf       	rjmp	.-124    	; 0x625c <initPortsIO+0x44>
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    62d8:	14 ba       	out	0x14, r1	; 20
    62da:	80 91 3c 18 	lds	r24, 0x183C
    62de:	bc cf       	rjmp	.-136    	; 0x6258 <initPortsIO+0x40>

000062e0 <initUsart0>:
	// @38400 baud: 8000000/16/38400-1 = 12 => 8000000/16/13 = 38461 => 100-(38400/38461*100)=0.15% of error
	// Double speed mode:
	// @57600 baud: 8000000/8/57600-1 = 16 => 8000000/8/17 = 58823 => 100-(57600/58823*100)=2.08% of error	


	UBRR0H = 0;												// set baudrate
    62e0:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 16;
    62e4:	80 e1       	ldi	r24, 0x10	; 16
    62e6:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0A  |= (1 << U2X0);									// enable double speed
    62ea:	e0 ec       	ldi	r30, 0xC0	; 192
    62ec:	f0 e0       	ldi	r31, 0x00	; 0
    62ee:	80 81       	ld	r24, Z
    62f0:	82 60       	ori	r24, 0x02	; 2
    62f2:	80 83       	st	Z, r24
	//UCSR0A &= ~(1 << U2X0);
	UCSR0B |= (1 << TXEN0) | (1 << RXEN0) | (1 << RXCIE0);	// enable uart0 transmitter and receiver; enable rx interrupt for use with aseba
    62f4:	e1 ec       	ldi	r30, 0xC1	; 193
    62f6:	f0 e0       	ldi	r31, 0x00	; 0
    62f8:	80 81       	ld	r24, Z
    62fa:	88 69       	ori	r24, 0x98	; 152
    62fc:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01) | (1<<UCSZ00);					// set frame format: 8-bit data, no parity, 1 stop bit
    62fe:	e2 ec       	ldi	r30, 0xC2	; 194
    6300:	f0 e0       	ldi	r31, 0x00	; 0
    6302:	80 81       	ld	r24, Z
    6304:	86 60       	ori	r24, 0x06	; 6
    6306:	80 83       	st	Z, r24
    6308:	08 95       	ret

0000630a <usart0Transmit>:

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    630a:	90 91 c0 00 	lds	r25, 0x00C0
    630e:	95 ff       	sbrs	r25, 5
    6310:	fc cf       	rjmp	.-8      	; 0x630a <usart0Transmit>
	UDR0 = data;						// put data into buffer, sends the data
    6312:	80 93 c6 00 	sts	0x00C6, r24
	if(isBlocking) {
    6316:	66 23       	and	r22, r22
    6318:	21 f0       	breq	.+8      	; 0x6322 <usart0Transmit+0x18>
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    631a:	80 91 c0 00 	lds	r24, 0x00C0
    631e:	86 ff       	sbrs	r24, 6
    6320:	fc cf       	rjmp	.-8      	; 0x631a <usart0Transmit+0x10>
    6322:	08 95       	ret

00006324 <__vector_25>:
	return UDR0;					// get and return received data from buffer

}

// The following usart0 rx isr has to be used with aseba.
ISR(USART0_RX_vect) {
    6324:	1f 92       	push	r1
    6326:	0f 92       	push	r0
    6328:	0f b6       	in	r0, 0x3f	; 63
    632a:	0f 92       	push	r0
    632c:	11 24       	eor	r1, r1
    632e:	0b b6       	in	r0, 0x3b	; 59
    6330:	0f 92       	push	r0
    6332:	2f 93       	push	r18
    6334:	8f 93       	push	r24
    6336:	9f 93       	push	r25
    6338:	ef 93       	push	r30
    633a:	ff 93       	push	r31
	byteCount++;
    633c:	80 91 68 19 	lds	r24, 0x1968
    6340:	90 91 69 19 	lds	r25, 0x1969
    6344:	01 96       	adiw	r24, 0x01	; 1
    6346:	90 93 69 19 	sts	0x1969, r25
    634a:	80 93 68 19 	sts	0x1968, r24
	if(byteCount <= UART_BUFF_SIZE) {
    634e:	81 30       	cpi	r24, 0x01	; 1
    6350:	91 40       	sbci	r25, 0x01	; 1
    6352:	60 f4       	brcc	.+24     	; 0x636c <__vector_25+0x48>
		uartBuff[nextByteIndex] = UDR0;
    6354:	80 91 67 18 	lds	r24, 0x1867
    6358:	90 91 c6 00 	lds	r25, 0x00C6
    635c:	e8 2f       	mov	r30, r24
    635e:	f0 e0       	ldi	r31, 0x00	; 0
    6360:	e8 59       	subi	r30, 0x98	; 152
    6362:	f7 4e       	sbci	r31, 0xE7	; 231
    6364:	90 83       	st	Z, r25
		nextByteIndex++;
    6366:	8f 5f       	subi	r24, 0xFF	; 255
    6368:	80 93 67 18 	sts	0x1867, r24
		if(nextByteIndex==UART_BUFF_SIZE) {
			nextByteIndex=0;
		}
	}
}
    636c:	ff 91       	pop	r31
    636e:	ef 91       	pop	r30
    6370:	9f 91       	pop	r25
    6372:	8f 91       	pop	r24
    6374:	2f 91       	pop	r18
    6376:	0f 90       	pop	r0
    6378:	0b be       	out	0x3b, r0	; 59
    637a:	0f 90       	pop	r0
    637c:	0f be       	out	0x3f, r0	; 63
    637e:	0f 90       	pop	r0
    6380:	1f 90       	pop	r1
    6382:	18 95       	reti

00006384 <obstacleAvoidance>:

	srand(TCNT3);	// initialize random seed (used in obstacle avoidance)

}

void obstacleAvoidance(signed int *pwmLeft, signed int *pwmRight) {
    6384:	2f 92       	push	r2
    6386:	3f 92       	push	r3
    6388:	4f 92       	push	r4
    638a:	5f 92       	push	r5
    638c:	6f 92       	push	r6
    638e:	7f 92       	push	r7
    6390:	8f 92       	push	r8
    6392:	9f 92       	push	r9
    6394:	af 92       	push	r10
    6396:	bf 92       	push	r11
    6398:	cf 92       	push	r12
    639a:	df 92       	push	r13
    639c:	ef 92       	push	r14
    639e:	ff 92       	push	r15
    63a0:	0f 93       	push	r16
    63a2:	1f 93       	push	r17
    63a4:	cf 93       	push	r28
    63a6:	df 93       	push	r29
    63a8:	00 d0       	rcall	.+0      	; 0x63aa <obstacleAvoidance+0x26>
    63aa:	1f 92       	push	r1
    63ac:	cd b7       	in	r28, 0x3d	; 61
    63ae:	de b7       	in	r29, 0x3e	; 62
    63b0:	9c 83       	std	Y+4, r25	; 0x04
    63b2:	8b 83       	std	Y+3, r24	; 0x03
    63b4:	7a 83       	std	Y+2, r23	; 0x02
    63b6:	69 83       	std	Y+1, r22	; 0x01
	//	y	0		0.5		1		0.5		0		-0.5	-1		-0.5

	unsigned int i=0;
	signed int long res=0;
	signed int sumSensorsX=0, sumSensorsY=0;
	signed int desL=*pwmLeft, desR=*pwmRight;
    63b8:	fc 01       	movw	r30, r24
    63ba:	20 80       	ld	r2, Z
    63bc:	31 80       	ldd	r3, Z+1	; 0x01
    63be:	fb 01       	movw	r30, r22
    63c0:	00 81       	ld	r16, Z
    63c2:	11 81       	ldd	r17, Z+1	; 0x01

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    63c4:	80 90 a7 19 	lds	r8, 0x19A7
    63c8:	90 90 a8 19 	lds	r9, 0x19A8
    63cc:	f5 e0       	ldi	r31, 0x05	; 5
    63ce:	8f 16       	cp	r8, r31
    63d0:	91 04       	cpc	r9, r1
    63d2:	34 f4       	brge	.+12     	; 0x63e0 <obstacleAvoidance+0x5c>
			proximityResultLinear[i] = 0;
    63d4:	10 92 a8 19 	sts	0x19A8, r1
    63d8:	10 92 a7 19 	sts	0x19A7, r1
    63dc:	81 2c       	mov	r8, r1
    63de:	91 2c       	mov	r9, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    63e0:	60 91 a9 19 	lds	r22, 0x19A9
    63e4:	70 91 aa 19 	lds	r23, 0x19AA
    63e8:	65 30       	cpi	r22, 0x05	; 5
    63ea:	71 05       	cpc	r23, r1
    63ec:	34 f4       	brge	.+12     	; 0x63fa <obstacleAvoidance+0x76>
			proximityResultLinear[i] = 0;
    63ee:	10 92 aa 19 	sts	0x19AA, r1
    63f2:	10 92 a9 19 	sts	0x19A9, r1
    63f6:	60 e0       	ldi	r22, 0x00	; 0
    63f8:	70 e0       	ldi	r23, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    63fa:	80 91 ab 19 	lds	r24, 0x19AB
    63fe:	90 91 ac 19 	lds	r25, 0x19AC
    6402:	05 97       	sbiw	r24, 0x05	; 5
    6404:	24 f4       	brge	.+8      	; 0x640e <obstacleAvoidance+0x8a>
			proximityResultLinear[i] = 0;
    6406:	10 92 ac 19 	sts	0x19AC, r1
    640a:	10 92 ab 19 	sts	0x19AB, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    640e:	20 91 ad 19 	lds	r18, 0x19AD
    6412:	30 91 ae 19 	lds	r19, 0x19AE
    6416:	25 30       	cpi	r18, 0x05	; 5
    6418:	31 05       	cpc	r19, r1
    641a:	34 f4       	brge	.+12     	; 0x6428 <obstacleAvoidance+0xa4>
			proximityResultLinear[i] = 0;
    641c:	10 92 ae 19 	sts	0x19AE, r1
    6420:	10 92 ad 19 	sts	0x19AD, r1
    6424:	20 e0       	ldi	r18, 0x00	; 0
    6426:	30 e0       	ldi	r19, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6428:	e0 90 af 19 	lds	r14, 0x19AF
    642c:	f0 90 b0 19 	lds	r15, 0x19B0
    6430:	85 e0       	ldi	r24, 0x05	; 5
    6432:	e8 16       	cp	r14, r24
    6434:	f1 04       	cpc	r15, r1
    6436:	34 f4       	brge	.+12     	; 0x6444 <obstacleAvoidance+0xc0>
			proximityResultLinear[i] = 0;
    6438:	10 92 b0 19 	sts	0x19B0, r1
    643c:	10 92 af 19 	sts	0x19AF, r1
    6440:	e1 2c       	mov	r14, r1
    6442:	f1 2c       	mov	r15, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6444:	80 91 b1 19 	lds	r24, 0x19B1
    6448:	90 91 b2 19 	lds	r25, 0x19B2
    644c:	85 30       	cpi	r24, 0x05	; 5
    644e:	91 05       	cpc	r25, r1
    6450:	34 f4       	brge	.+12     	; 0x645e <obstacleAvoidance+0xda>
			proximityResultLinear[i] = 0;
    6452:	10 92 b2 19 	sts	0x19B2, r1
    6456:	10 92 b1 19 	sts	0x19B1, r1
    645a:	80 e0       	ldi	r24, 0x00	; 0
    645c:	90 e0       	ldi	r25, 0x00	; 0
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    645e:	40 91 b3 19 	lds	r20, 0x19B3
    6462:	50 91 b4 19 	lds	r21, 0x19B4
    6466:	45 30       	cpi	r20, 0x05	; 5
    6468:	51 05       	cpc	r21, r1
    646a:	24 f4       	brge	.+8      	; 0x6474 <obstacleAvoidance+0xf0>
			proximityResultLinear[i] = 0;
    646c:	10 92 b4 19 	sts	0x19B4, r1
    6470:	10 92 b3 19 	sts	0x19B3, r1
	signed int desL=*pwmLeft, desR=*pwmRight;

	// consider small values to be noise thus set them to zero in order to not influence
	// the resulting force
	for(i=0; i<8; i++) {
		if(proximityResultLinear[i] < NOISE_THR) {
    6474:	40 91 b5 19 	lds	r20, 0x19B5
    6478:	50 91 b6 19 	lds	r21, 0x19B6
    647c:	45 30       	cpi	r20, 0x05	; 5
    647e:	51 05       	cpc	r21, r1
    6480:	34 f4       	brge	.+12     	; 0x648e <obstacleAvoidance+0x10a>
			proximityResultLinear[i] = 0;
    6482:	10 92 b6 19 	sts	0x19B6, r1
    6486:	10 92 b5 19 	sts	0x19B5, r1
    648a:	40 e0       	ldi	r20, 0x00	; 0
    648c:	50 e0       	ldi	r21, 0x00	; 0
	}

	// sum the contribution of each sensor (based on the previous weights table);
	// give more weight to prox2 and prox6 (side proximities) in order to get more stability in narrow aisles;
	// add some noise to the sum in order to escape from dead-lock positions
	sumSensorsX = -proximityResultLinear[0] - (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) + proximityResultLinear[4] + (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + ((rand()%60)-30);
    648e:	91 94       	neg	r9
    6490:	81 94       	neg	r8
    6492:	91 08       	sbc	r9, r1
    6494:	75 95       	asr	r23
    6496:	67 95       	ror	r22
    6498:	86 1a       	sub	r8, r22
    649a:	97 0a       	sbc	r9, r23
    649c:	35 95       	asr	r19
    649e:	27 95       	ror	r18
    64a0:	28 0d       	add	r18, r8
    64a2:	39 1d       	adc	r19, r9
    64a4:	e2 0e       	add	r14, r18
    64a6:	f3 1e       	adc	r15, r19
    64a8:	95 95       	asr	r25
    64aa:	87 95       	ror	r24
    64ac:	47 01       	movw	r8, r14
    64ae:	88 0e       	add	r8, r24
    64b0:	99 1e       	adc	r9, r25
    64b2:	55 95       	asr	r21
    64b4:	47 95       	ror	r20
    64b6:	74 01       	movw	r14, r8
    64b8:	e4 1a       	sub	r14, r20
    64ba:	f5 0a       	sbc	r15, r21
    64bc:	0e 94 c6 59 	call	0xb38c	; 0xb38c <rand>
    64c0:	2c e3       	ldi	r18, 0x3C	; 60
    64c2:	a2 2e       	mov	r10, r18
    64c4:	b1 2c       	mov	r11, r1
    64c6:	b5 01       	movw	r22, r10
    64c8:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    64cc:	4c 01       	movw	r8, r24
    64ce:	ee e1       	ldi	r30, 0x1E	; 30
    64d0:	8e 1a       	sub	r8, r30
    64d2:	91 08       	sbc	r9, r1
    64d4:	8e 0c       	add	r8, r14
    64d6:	9f 1c       	adc	r9, r15
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
    64d8:	e0 90 a9 19 	lds	r14, 0x19A9
    64dc:	f0 90 aa 19 	lds	r15, 0x19AA
    64e0:	f5 94       	asr	r15
    64e2:	e7 94       	ror	r14
    64e4:	80 91 ab 19 	lds	r24, 0x19AB
    64e8:	90 91 ac 19 	lds	r25, 0x19AC
    64ec:	95 95       	asr	r25
    64ee:	87 95       	ror	r24
    64f0:	95 95       	asr	r25
    64f2:	87 95       	ror	r24
    64f4:	e8 0e       	add	r14, r24
    64f6:	f9 1e       	adc	r15, r25
    64f8:	80 91 ad 19 	lds	r24, 0x19AD
    64fc:	90 91 ae 19 	lds	r25, 0x19AE
    6500:	95 95       	asr	r25
    6502:	87 95       	ror	r24
    6504:	e8 0e       	add	r14, r24
    6506:	f9 1e       	adc	r15, r25
    6508:	80 91 b1 19 	lds	r24, 0x19B1
    650c:	90 91 b2 19 	lds	r25, 0x19B2
    6510:	95 95       	asr	r25
    6512:	87 95       	ror	r24
    6514:	e8 1a       	sub	r14, r24
    6516:	f9 0a       	sbc	r15, r25
    6518:	80 91 b3 19 	lds	r24, 0x19B3
    651c:	90 91 b4 19 	lds	r25, 0x19B4
    6520:	95 95       	asr	r25
    6522:	87 95       	ror	r24
    6524:	95 95       	asr	r25
    6526:	87 95       	ror	r24
    6528:	e8 1a       	sub	r14, r24
    652a:	f9 0a       	sbc	r15, r25
    652c:	80 91 b5 19 	lds	r24, 0x19B5
    6530:	90 91 b6 19 	lds	r25, 0x19B6
    6534:	95 95       	asr	r25
    6536:	87 95       	ror	r24
    6538:	e8 1a       	sub	r14, r24
    653a:	f9 0a       	sbc	r15, r25
    653c:	0e 94 c6 59 	call	0xb38c	; 0xb38c <rand>
    6540:	b5 01       	movw	r22, r10
    6542:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    6546:	6c 01       	movw	r12, r24
    6548:	fe e1       	ldi	r31, 0x1E	; 30
    654a:	cf 1a       	sub	r12, r31
    654c:	d1 08       	sbc	r13, r1
    654e:	ce 0c       	add	r12, r14
    6550:	df 1c       	adc	r13, r15
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    6552:	09 2c       	mov	r0, r9
    6554:	00 0c       	add	r0, r0
    6556:	aa 08       	sbc	r10, r10
    6558:	bb 08       	sbc	r11, r11
    655a:	0d 2c       	mov	r0, r13
    655c:	00 0c       	add	r0, r0
    655e:	ee 08       	sbc	r14, r14
    6560:	ff 08       	sbc	r15, r15
    6562:	c5 01       	movw	r24, r10
    6564:	b4 01       	movw	r22, r8
	//sumSensorsX = -proximityResultLinear[0]  + proximityResultLinear[4];	
	sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[2]>>2) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[6]>>2) - (proximityResultLinear[7]>>1)+ ((rand()%60)-30);
	//sumSensorsY = (proximityResultLinear[1]>>1) + (proximityResultLinear[3]>>1) - (proximityResultLinear[5]>>1) - (proximityResultLinear[7]>>1) + (rand()%30);

	// modify the velocity components based on sensor values
	if(desL >= 0) {
    6566:	37 fc       	sbrc	r3, 7
    6568:	dd c0       	rjmp	.+442    	; 0x6724 <obstacleAvoidance+0x3a0>
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    656a:	6c 19       	sub	r22, r12
    656c:	7d 09       	sbc	r23, r13
    656e:	8e 09       	sbc	r24, r14
    6570:	9f 09       	sbc	r25, r15
    6572:	21 01       	movw	r4, r2
    6574:	03 2c       	mov	r0, r3
    6576:	00 0c       	add	r0, r0
    6578:	66 08       	sbc	r6, r6
    657a:	77 08       	sbc	r7, r7
    657c:	a3 01       	movw	r20, r6
    657e:	92 01       	movw	r18, r4
    6580:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    6584:	dc 01       	movw	r26, r24
    6586:	cb 01       	movw	r24, r22
    6588:	56 e0       	ldi	r21, 0x06	; 6
    658a:	b5 95       	asr	r27
    658c:	a7 95       	ror	r26
    658e:	97 95       	ror	r25
    6590:	87 95       	ror	r24
    6592:	5a 95       	dec	r21
    6594:	d1 f7       	brne	.-12     	; 0x658a <obstacleAvoidance+0x206>
    6596:	48 0e       	add	r4, r24
    6598:	59 1e       	adc	r5, r25
    659a:	6a 1e       	adc	r6, r26
    659c:	7b 1e       	adc	r7, r27
		*pwmLeft = (signed int)res;
    659e:	eb 81       	ldd	r30, Y+3	; 0x03
    65a0:	fc 81       	ldd	r31, Y+4	; 0x04
    65a2:	51 82       	std	Z+1, r5	; 0x01
    65a4:	40 82       	st	Z, r4
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    65a6:	c5 01       	movw	r24, r10
    65a8:	b4 01       	movw	r22, r8
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	}
	if(desR >=0) {
    65aa:	17 fd       	sbrc	r17, 7
    65ac:	9b c0       	rjmp	.+310    	; 0x66e4 <obstacleAvoidance+0x360>
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    65ae:	6c 0d       	add	r22, r12
    65b0:	7d 1d       	adc	r23, r13
    65b2:	8e 1d       	adc	r24, r14
    65b4:	9f 1d       	adc	r25, r15
    65b6:	28 01       	movw	r4, r16
    65b8:	01 2e       	mov	r0, r17
    65ba:	00 0c       	add	r0, r0
    65bc:	66 08       	sbc	r6, r6
    65be:	77 08       	sbc	r7, r7
    65c0:	a3 01       	movw	r20, r6
    65c2:	92 01       	movw	r18, r4
    65c4:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    65c8:	dc 01       	movw	r26, r24
    65ca:	cb 01       	movw	r24, r22
    65cc:	36 e0       	ldi	r19, 0x06	; 6
    65ce:	b5 95       	asr	r27
    65d0:	a7 95       	ror	r26
    65d2:	97 95       	ror	r25
    65d4:	87 95       	ror	r24
    65d6:	3a 95       	dec	r19
    65d8:	d1 f7       	brne	.-12     	; 0x65ce <obstacleAvoidance+0x24a>
    65da:	84 0d       	add	r24, r4
    65dc:	95 1d       	adc	r25, r5
    65de:	a6 1d       	adc	r26, r6
    65e0:	b7 1d       	adc	r27, r7
		*pwmRight = (signed int)res;
    65e2:	ac 01       	movw	r20, r24
    65e4:	e9 81       	ldd	r30, Y+1	; 0x01
    65e6:	fa 81       	ldd	r31, Y+2	; 0x02
    65e8:	91 83       	std	Z+1, r25	; 0x01
    65ea:	80 83       	st	Z, r24
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
    65ec:	80 91 3f 18 	lds	r24, 0x183F
    65f0:	8a 30       	cpi	r24, 0x0A	; 10
    65f2:	09 f4       	brne	.+2      	; 0x65f6 <obstacleAvoidance+0x272>
    65f4:	57 c0       	rjmp	.+174    	; 0x66a4 <obstacleAvoidance+0x320>
			}
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
    65f6:	41 15       	cp	r20, r1
    65f8:	f2 e0       	ldi	r31, 0x02	; 2
    65fa:	5f 07       	cpc	r21, r31
    65fc:	0c f4       	brge	.+2      	; 0x6600 <obstacleAvoidance+0x27c>
    65fe:	46 c0       	rjmp	.+140    	; 0x668c <obstacleAvoidance+0x308>
    6600:	8f ef       	ldi	r24, 0xFF	; 255
    6602:	91 e0       	ldi	r25, 0x01	; 1
    6604:	e9 81       	ldd	r30, Y+1	; 0x01
    6606:	fa 81       	ldd	r31, Y+2	; 0x02
    6608:	91 83       	std	Z+1, r25	; 0x01
    660a:	80 83       	st	Z, r24
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    660c:	eb 81       	ldd	r30, Y+3	; 0x03
    660e:	fc 81       	ldd	r31, Y+4	; 0x04
    6610:	80 81       	ld	r24, Z
    6612:	91 81       	ldd	r25, Z+1	; 0x01
    6614:	81 15       	cp	r24, r1
    6616:	f2 e0       	ldi	r31, 0x02	; 2
    6618:	9f 07       	cpc	r25, r31
    661a:	04 f5       	brge	.+64     	; 0x665c <obstacleAvoidance+0x2d8>
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
	if (*pwmLeft<-(MAX_MOTORS_PWM/2)) *pwmLeft=-(MAX_MOTORS_PWM/2);
    661c:	81 30       	cpi	r24, 0x01	; 1
    661e:	9e 4f       	sbci	r25, 0xFE	; 254
    6620:	34 f4       	brge	.+12     	; 0x662e <obstacleAvoidance+0x2aa>
    6622:	81 e0       	ldi	r24, 0x01	; 1
    6624:	9e ef       	ldi	r25, 0xFE	; 254
    6626:	eb 81       	ldd	r30, Y+3	; 0x03
    6628:	fc 81       	ldd	r31, Y+4	; 0x04
    662a:	91 83       	std	Z+1, r25	; 0x01
    662c:	80 83       	st	Z, r24

}
    662e:	0f 90       	pop	r0
    6630:	0f 90       	pop	r0
    6632:	0f 90       	pop	r0
    6634:	0f 90       	pop	r0
    6636:	df 91       	pop	r29
    6638:	cf 91       	pop	r28
    663a:	1f 91       	pop	r17
    663c:	0f 91       	pop	r16
    663e:	ff 90       	pop	r15
    6640:	ef 90       	pop	r14
    6642:	df 90       	pop	r13
    6644:	cf 90       	pop	r12
    6646:	bf 90       	pop	r11
    6648:	af 90       	pop	r10
    664a:	9f 90       	pop	r9
    664c:	8f 90       	pop	r8
    664e:	7f 90       	pop	r7
    6650:	6f 90       	pop	r6
    6652:	5f 90       	pop	r5
    6654:	4f 90       	pop	r4
    6656:	3f 90       	pop	r3
    6658:	2f 90       	pop	r2
    665a:	08 95       	ret
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    665c:	8f ef       	ldi	r24, 0xFF	; 255
    665e:	91 e0       	ldi	r25, 0x01	; 1
    6660:	eb 81       	ldd	r30, Y+3	; 0x03
    6662:	fc 81       	ldd	r31, Y+4	; 0x04
    6664:	91 83       	std	Z+1, r25	; 0x01
    6666:	80 83       	st	Z, r24
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    6668:	e9 81       	ldd	r30, Y+1	; 0x01
    666a:	fa 81       	ldd	r31, Y+2	; 0x02
    666c:	80 81       	ld	r24, Z
    666e:	91 81       	ldd	r25, Z+1	; 0x01
    6670:	81 30       	cpi	r24, 0x01	; 1
    6672:	9e 4f       	sbci	r25, 0xFE	; 254
    6674:	e4 f6       	brge	.-72     	; 0x662e <obstacleAvoidance+0x2aa>
    6676:	81 e0       	ldi	r24, 0x01	; 1
    6678:	9e ef       	ldi	r25, 0xFE	; 254
    667a:	e9 81       	ldd	r30, Y+1	; 0x01
    667c:	fa 81       	ldd	r31, Y+2	; 0x02
    667e:	91 83       	std	Z+1, r25	; 0x01
    6680:	80 83       	st	Z, r24
    6682:	eb 81       	ldd	r30, Y+3	; 0x03
    6684:	fc 81       	ldd	r31, Y+4	; 0x04
    6686:	80 81       	ld	r24, Z
    6688:	91 81       	ldd	r25, Z+1	; 0x01
    668a:	c8 cf       	rjmp	.-112    	; 0x661c <obstacleAvoidance+0x298>
		}
	}

	// force the values to be in the pwm maximum range
	if (*pwmRight>(MAX_MOTORS_PWM/2)) *pwmRight=(MAX_MOTORS_PWM/2);
	if (*pwmLeft>(MAX_MOTORS_PWM/2)) *pwmLeft=(MAX_MOTORS_PWM/2);
    668c:	eb 81       	ldd	r30, Y+3	; 0x03
    668e:	fc 81       	ldd	r31, Y+4	; 0x04
    6690:	80 81       	ld	r24, Z
    6692:	91 81       	ldd	r25, Z+1	; 0x01
    6694:	81 15       	cp	r24, r1
    6696:	f2 e0       	ldi	r31, 0x02	; 2
    6698:	9f 07       	cpc	r25, r31
    669a:	04 f7       	brge	.-64     	; 0x665c <obstacleAvoidance+0x2d8>
	if (*pwmRight<-(MAX_MOTORS_PWM/2)) *pwmRight=-(MAX_MOTORS_PWM/2);
    669c:	41 30       	cpi	r20, 0x01	; 1
    669e:	5e 4f       	sbci	r21, 0xFE	; 254
    66a0:	54 f3       	brlt	.-44     	; 0x6676 <obstacleAvoidance+0x2f2>
    66a2:	bc cf       	rjmp	.-136    	; 0x661c <obstacleAvoidance+0x298>
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
    66a4:	23 28       	or	r2, r3
    66a6:	09 f4       	brne	.+2      	; 0x66aa <obstacleAvoidance+0x326>
    66a8:	a6 cf       	rjmp	.-180    	; 0x65f6 <obstacleAvoidance+0x272>
    66aa:	01 2b       	or	r16, r17
    66ac:	09 f4       	brne	.+2      	; 0x66b0 <obstacleAvoidance+0x32c>
    66ae:	a3 cf       	rjmp	.-186    	; 0x65f6 <obstacleAvoidance+0x272>
			if(currentAngle<270 && currentAngle>90) {
    66b0:	80 91 4c 18 	lds	r24, 0x184C
    66b4:	90 91 4d 18 	lds	r25, 0x184D
    66b8:	8b 55       	subi	r24, 0x5B	; 91
    66ba:	91 09       	sbc	r25, r1
				*pwmLeft += 10;
    66bc:	eb 81       	ldd	r30, Y+3	; 0x03
    66be:	fc 81       	ldd	r31, Y+4	; 0x04
		*pwmRight = (signed int)res;
	}

	if(currentSelector == 10) {	// force a little bit the upwards direction in vertical motion
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
    66c0:	83 3b       	cpi	r24, 0xB3	; 179
    66c2:	91 05       	cpc	r25, r1
    66c4:	08 f0       	brcs	.+2      	; 0x66c8 <obstacleAvoidance+0x344>
    66c6:	4d c0       	rjmp	.+154    	; 0x6762 <obstacleAvoidance+0x3de>
				*pwmLeft += 10;
    66c8:	80 81       	ld	r24, Z
    66ca:	91 81       	ldd	r25, Z+1	; 0x01
    66cc:	0a 96       	adiw	r24, 0x0a	; 10
    66ce:	91 83       	std	Z+1, r25	; 0x01
    66d0:	80 83       	st	Z, r24
				*pwmRight -= 10;
    66d2:	e9 81       	ldd	r30, Y+1	; 0x01
    66d4:	fa 81       	ldd	r31, Y+2	; 0x02
    66d6:	40 81       	ld	r20, Z
    66d8:	51 81       	ldd	r21, Z+1	; 0x01
    66da:	4a 50       	subi	r20, 0x0A	; 10
    66dc:	51 09       	sbc	r21, r1
    66de:	51 83       	std	Z+1, r21	; 0x01
    66e0:	40 83       	st	Z, r20
    66e2:	89 cf       	rjmp	.-238    	; 0x65f6 <obstacleAvoidance+0x272>
	}
	if(desR >=0) {
		res = (signed long int)desR + (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
		*pwmRight = (signed int)res;
	} else {
		res = (signed long int)desR - (((signed long int)(desR) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
    66e4:	6c 19       	sub	r22, r12
    66e6:	7d 09       	sbc	r23, r13
    66e8:	8e 09       	sbc	r24, r14
    66ea:	9f 09       	sbc	r25, r15
    66ec:	68 01       	movw	r12, r16
    66ee:	01 2e       	mov	r0, r17
    66f0:	00 0c       	add	r0, r0
    66f2:	ee 08       	sbc	r14, r14
    66f4:	ff 08       	sbc	r15, r15
    66f6:	a7 01       	movw	r20, r14
    66f8:	96 01       	movw	r18, r12
    66fa:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    66fe:	dc 01       	movw	r26, r24
    6700:	cb 01       	movw	r24, r22
    6702:	26 e0       	ldi	r18, 0x06	; 6
    6704:	b5 95       	asr	r27
    6706:	a7 95       	ror	r26
    6708:	97 95       	ror	r25
    670a:	87 95       	ror	r24
    670c:	2a 95       	dec	r18
    670e:	d1 f7       	brne	.-12     	; 0x6704 <obstacleAvoidance+0x380>
    6710:	c8 1a       	sub	r12, r24
    6712:	d9 0a       	sbc	r13, r25
    6714:	ea 0a       	sbc	r14, r26
    6716:	fb 0a       	sbc	r15, r27
		*pwmRight = (signed int)res;
    6718:	a6 01       	movw	r20, r12
    671a:	e9 81       	ldd	r30, Y+1	; 0x01
    671c:	fa 81       	ldd	r31, Y+2	; 0x02
    671e:	d1 82       	std	Z+1, r13	; 0x01
    6720:	c0 82       	st	Z, r12
    6722:	64 cf       	rjmp	.-312    	; 0x65ec <obstacleAvoidance+0x268>
	// modify the velocity components based on sensor values
	if(desL >= 0) {
		res = (signed long int)desL + (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX - (signed long int)sumSensorsY))>>6); //7);
		*pwmLeft = (signed int)res;
	} else {
		res = (signed long int)desL - (((signed long int)(desL) * (signed long int)((signed long int)sumSensorsX + (signed long int)sumSensorsY))>>6); //7);
    6724:	6c 0d       	add	r22, r12
    6726:	7d 1d       	adc	r23, r13
    6728:	8e 1d       	adc	r24, r14
    672a:	9f 1d       	adc	r25, r15
    672c:	21 01       	movw	r4, r2
    672e:	03 2c       	mov	r0, r3
    6730:	00 0c       	add	r0, r0
    6732:	66 08       	sbc	r6, r6
    6734:	77 08       	sbc	r7, r7
    6736:	a3 01       	movw	r20, r6
    6738:	92 01       	movw	r18, r4
    673a:	0e 94 a5 55 	call	0xab4a	; 0xab4a <__mulsi3>
    673e:	dc 01       	movw	r26, r24
    6740:	cb 01       	movw	r24, r22
    6742:	46 e0       	ldi	r20, 0x06	; 6
    6744:	b5 95       	asr	r27
    6746:	a7 95       	ror	r26
    6748:	97 95       	ror	r25
    674a:	87 95       	ror	r24
    674c:	4a 95       	dec	r20
    674e:	d1 f7       	brne	.-12     	; 0x6744 <obstacleAvoidance+0x3c0>
    6750:	48 1a       	sub	r4, r24
    6752:	59 0a       	sbc	r5, r25
    6754:	6a 0a       	sbc	r6, r26
    6756:	7b 0a       	sbc	r7, r27
		*pwmLeft = (signed int)res;
    6758:	eb 81       	ldd	r30, Y+3	; 0x03
    675a:	fc 81       	ldd	r31, Y+4	; 0x04
    675c:	51 82       	std	Z+1, r5	; 0x01
    675e:	40 82       	st	Z, r4
    6760:	22 cf       	rjmp	.-444    	; 0x65a6 <obstacleAvoidance+0x222>
		if(desL!=0 && desR!=0) {
			if(currentAngle<270 && currentAngle>90) {
				*pwmLeft += 10;
				*pwmRight -= 10;
			} else {
				*pwmLeft -= 10;
    6762:	80 81       	ld	r24, Z
    6764:	91 81       	ldd	r25, Z+1	; 0x01
    6766:	0a 97       	sbiw	r24, 0x0a	; 10
    6768:	91 83       	std	Z+1, r25	; 0x01
    676a:	80 83       	st	Z, r24
				*pwmRight += 10;
    676c:	e9 81       	ldd	r30, Y+1	; 0x01
    676e:	fa 81       	ldd	r31, Y+2	; 0x02
    6770:	40 81       	ld	r20, Z
    6772:	51 81       	ldd	r21, Z+1	; 0x01
    6774:	46 5f       	subi	r20, 0xF6	; 246
    6776:	5f 4f       	sbci	r21, 0xFF	; 255
    6778:	51 83       	std	Z+1, r21	; 0x01
    677a:	40 83       	st	Z, r20
    677c:	3c cf       	rjmp	.-392    	; 0x65f6 <obstacleAvoidance+0x272>

0000677e <enableObstacleAvoidance>:


}

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    677e:	81 e0       	ldi	r24, 0x01	; 1
    6780:	80 93 2e 18 	sts	0x182E, r24
    6784:	08 95       	ret

00006786 <disableObstacleAvoidance>:
}

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    6786:	10 92 2e 18 	sts	0x182E, r1
    678a:	08 95       	ret

0000678c <enableCliffAvoidance>:
}

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    678c:	81 e0       	ldi	r24, 0x01	; 1
    678e:	80 93 2d 18 	sts	0x182D, r24
    6792:	08 95       	ret

00006794 <disableCliffAvoidance>:
}

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    6794:	10 92 2d 18 	sts	0x182D, r1
    6798:	08 95       	ret

0000679a <start_speed_control_right>:
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}

void start_speed_control_right(signed int *pwm_right) {
    679a:	8f 92       	push	r8
    679c:	9f 92       	push	r9
    679e:	af 92       	push	r10
    67a0:	bf 92       	push	r11
    67a2:	cf 92       	push	r12
    67a4:	df 92       	push	r13
    67a6:	ef 92       	push	r14
    67a8:	ff 92       	push	r15
    67aa:	0f 93       	push	r16
    67ac:	1f 93       	push	r17
    67ae:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    67b0:	80 81       	ld	r24, Z
    67b2:	91 81       	ldd	r25, Z+1	; 0x01
    67b4:	89 2b       	or	r24, r25
    67b6:	09 f4       	brne	.+2      	; 0x67ba <start_speed_control_right+0x20>
    67b8:	a6 c0       	rjmp	.+332    	; 0x6906 <start_speed_control_right+0x16c>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    67ba:	20 91 6f 21 	lds	r18, 0x216F
    67be:	30 91 70 21 	lds	r19, 0x2170
    67c2:	30 93 99 20 	sts	0x2099, r19
    67c6:	20 93 98 20 	sts	0x2098, r18
	if(*pwm_right >= 0) {
    67ca:	00 81       	ld	r16, Z
    67cc:	11 81       	ldd	r17, Z+1	; 0x01
    67ce:	17 fd       	sbrc	r17, 7
    67d0:	d6 c0       	rjmp	.+428    	; 0x697e <start_speed_control_right+0x1e4>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    67d2:	80 91 8f 19 	lds	r24, 0x198F
    67d6:	90 91 90 19 	lds	r25, 0x1990
    67da:	08 1b       	sub	r16, r24
    67dc:	19 0b       	sbc	r17, r25
    67de:	10 93 70 21 	sts	0x2170, r17
    67e2:	00 93 6f 21 	sts	0x216F, r16
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    67e6:	40 91 77 19 	lds	r20, 0x1977
    67ea:	50 91 78 19 	lds	r21, 0x1978
    67ee:	40 0f       	add	r20, r16
    67f0:	51 1f       	adc	r21, r17

	if(delta_right_speed_sum > I_LIMIT) {
    67f2:	41 34       	cpi	r20, 0x41	; 65
    67f4:	86 e0       	ldi	r24, 0x06	; 6
    67f6:	58 07       	cpc	r21, r24
    67f8:	0c f4       	brge	.+2      	; 0x67fc <start_speed_control_right+0x62>
    67fa:	9a c0       	rjmp	.+308    	; 0x6930 <start_speed_control_right+0x196>
		delta_right_speed_sum = I_LIMIT;
    67fc:	80 e4       	ldi	r24, 0x40	; 64
    67fe:	96 e0       	ldi	r25, 0x06	; 6
    6800:	90 93 78 19 	sts	0x1978, r25
    6804:	80 93 77 19 	sts	0x1977, r24
    6808:	90 ec       	ldi	r25, 0xC0	; 192
    680a:	c9 2e       	mov	r12, r25
    680c:	92 e1       	ldi	r25, 0x12	; 18
    680e:	d9 2e       	mov	r13, r25
    6810:	e1 2c       	mov	r14, r1
    6812:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    6814:	80 81       	ld	r24, Z
    6816:	91 81       	ldd	r25, Z+1	; 0x01
    6818:	ac 01       	movw	r20, r24
    681a:	44 0f       	add	r20, r20
    681c:	55 1f       	adc	r21, r21
    681e:	44 0f       	add	r20, r20
    6820:	55 1f       	adc	r21, r21
    6822:	44 0f       	add	r20, r20
    6824:	55 1f       	adc	r21, r21
    6826:	4a 01       	movw	r8, r20
    6828:	55 0f       	add	r21, r21
    682a:	aa 08       	sbc	r10, r10
    682c:	bb 08       	sbc	r11, r11
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
    682e:	d8 01       	movw	r26, r16
    6830:	aa 0f       	add	r26, r26
    6832:	bb 1f       	adc	r27, r27
    6834:	b8 01       	movw	r22, r16
    6836:	66 0f       	add	r22, r22
    6838:	77 1f       	adc	r23, r23
    683a:	66 0f       	add	r22, r22
    683c:	77 1f       	adc	r23, r23
    683e:	66 0f       	add	r22, r22
    6840:	77 1f       	adc	r23, r23
    6842:	ad 01       	movw	r20, r26
    6844:	46 0f       	add	r20, r22
    6846:	57 1f       	adc	r21, r23
    6848:	05 2e       	mov	r0, r21
    684a:	00 0c       	add	r0, r0
    684c:	66 0b       	sbc	r22, r22
    684e:	77 0b       	sbc	r23, r23
    6850:	48 0d       	add	r20, r8
    6852:	59 1d       	adc	r21, r9
    6854:	6a 1d       	adc	r22, r10
    6856:	7b 1d       	adc	r23, r11
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
    6858:	02 1b       	sub	r16, r18
    685a:	13 0b       	sbc	r17, r19
    685c:	00 0f       	add	r16, r16
    685e:	11 1f       	adc	r17, r17
    6860:	01 2e       	mov	r0, r17
    6862:	00 0c       	add	r0, r0
    6864:	22 0b       	sbc	r18, r18
    6866:	33 0b       	sbc	r19, r19
    6868:	40 0f       	add	r20, r16
    686a:	51 1f       	adc	r21, r17
    686c:	62 1f       	adc	r22, r18
    686e:	73 1f       	adc	r23, r19
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    6870:	4c 0d       	add	r20, r12
    6872:	5d 1d       	adc	r21, r13
    6874:	6e 1d       	adc	r22, r14
    6876:	7f 1d       	adc	r23, r15
    6878:	40 93 7f 19 	sts	0x197F, r20
    687c:	50 93 80 19 	sts	0x1980, r21
    6880:	60 93 81 19 	sts	0x1981, r22
    6884:	70 93 82 19 	sts	0x1982, r23

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    6888:	77 fd       	sbrc	r23, 7
    688a:	64 c0       	rjmp	.+200    	; 0x6954 <start_speed_control_right+0x1ba>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    688c:	41 15       	cp	r20, r1
    688e:	51 05       	cpc	r21, r1
    6890:	61 05       	cpc	r22, r1
    6892:	71 05       	cpc	r23, r1
    6894:	11 f0       	breq	.+4      	; 0x689a <start_speed_control_right+0x100>
    6896:	97 fd       	sbrc	r25, 7
    6898:	5f c0       	rjmp	.+190    	; 0x6958 <start_speed_control_right+0x1be>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    689a:	41 3c       	cpi	r20, 0xC1	; 193
    689c:	8d e5       	ldi	r24, 0x5D	; 93
    689e:	58 07       	cpc	r21, r24
    68a0:	61 05       	cpc	r22, r1
    68a2:	71 05       	cpc	r23, r1
    68a4:	0c f4       	brge	.+2      	; 0x68a8 <start_speed_control_right+0x10e>
    68a6:	89 c0       	rjmp	.+274    	; 0x69ba <start_speed_control_right+0x220>
    68a8:	80 ec       	ldi	r24, 0xC0	; 192
    68aa:	9d e5       	ldi	r25, 0x5D	; 93
    68ac:	a0 e0       	ldi	r26, 0x00	; 0
    68ae:	b0 e0       	ldi	r27, 0x00	; 0
    68b0:	80 93 7f 19 	sts	0x197F, r24
    68b4:	90 93 80 19 	sts	0x1980, r25
    68b8:	a0 93 81 19 	sts	0x1981, r26
    68bc:	b0 93 82 19 	sts	0x1982, r27
    68c0:	4c ed       	ldi	r20, 0xDC	; 220
    68c2:	55 e0       	ldi	r21, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    68c4:	51 83       	std	Z+1, r21	; 0x01
    68c6:	40 83       	st	Z, r20

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    68c8:	80 91 99 19 	lds	r24, 0x1999
    68cc:	90 91 9a 19 	lds	r25, 0x199A
    68d0:	18 16       	cp	r1, r24
    68d2:	19 06       	cpc	r1, r25
    68d4:	0c f0       	brlt	.+2      	; 0x68d8 <start_speed_control_right+0x13e>
    68d6:	6c c0       	rjmp	.+216    	; 0x69b0 <start_speed_control_right+0x216>
		*pwm_right += 1;
    68d8:	4f 5f       	subi	r20, 0xFF	; 255
    68da:	5f 4f       	sbci	r21, 0xFF	; 255
    68dc:	51 83       	std	Z+1, r21	; 0x01
    68de:	40 83       	st	Z, r20
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    68e0:	41 15       	cp	r20, r1
    68e2:	82 e0       	ldi	r24, 0x02	; 2
    68e4:	58 07       	cpc	r21, r24
    68e6:	e4 f0       	brlt	.+56     	; 0x6920 <start_speed_control_right+0x186>
    68e8:	8f ef       	ldi	r24, 0xFF	; 255
    68ea:	91 e0       	ldi	r25, 0x01	; 1
    68ec:	91 83       	std	Z+1, r25	; 0x01
    68ee:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    68f0:	1f 91       	pop	r17
    68f2:	0f 91       	pop	r16
    68f4:	ff 90       	pop	r15
    68f6:	ef 90       	pop	r14
    68f8:	df 90       	pop	r13
    68fa:	cf 90       	pop	r12
    68fc:	bf 90       	pop	r11
    68fe:	af 90       	pop	r10
    6900:	9f 90       	pop	r9
    6902:	8f 90       	pop	r8
    6904:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    6906:	10 92 78 19 	sts	0x1978, r1
    690a:	10 92 77 19 	sts	0x1977, r1
		delta_right_speed_current = 0;
    690e:	10 92 70 21 	sts	0x2170, r1
    6912:	10 92 6f 21 	sts	0x216F, r1
		delta_right_speed_prev = 0;
    6916:	10 92 99 20 	sts	0x2099, r1
    691a:	10 92 98 20 	sts	0x2098, r1
		return;
    691e:	e8 cf       	rjmp	.-48     	; 0x68f0 <start_speed_control_right+0x156>
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    6920:	41 30       	cpi	r20, 0x01	; 1
    6922:	5e 4f       	sbci	r21, 0xFE	; 254
    6924:	2c f7       	brge	.-54     	; 0x68f0 <start_speed_control_right+0x156>
    6926:	81 e0       	ldi	r24, 0x01	; 1
    6928:	9e ef       	ldi	r25, 0xFE	; 254
    692a:	91 83       	std	Z+1, r25	; 0x01
    692c:	80 83       	st	Z, r24
    692e:	e0 cf       	rjmp	.-64     	; 0x68f0 <start_speed_control_right+0x156>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    6930:	40 3c       	cpi	r20, 0xC0	; 192
    6932:	89 ef       	ldi	r24, 0xF9	; 249
    6934:	58 07       	cpc	r21, r24
    6936:	74 f5       	brge	.+92     	; 0x6994 <start_speed_control_right+0x1fa>
		delta_right_speed_sum = -I_LIMIT;
    6938:	80 ec       	ldi	r24, 0xC0	; 192
    693a:	99 ef       	ldi	r25, 0xF9	; 249
    693c:	90 93 78 19 	sts	0x1978, r25
    6940:	80 93 77 19 	sts	0x1977, r24
    6944:	b0 e4       	ldi	r27, 0x40	; 64
    6946:	cb 2e       	mov	r12, r27
    6948:	bd ee       	ldi	r27, 0xED	; 237
    694a:	db 2e       	mov	r13, r27
    694c:	ee 24       	eor	r14, r14
    694e:	ea 94       	dec	r14
    6950:	fe 2c       	mov	r15, r14
    6952:	60 cf       	rjmp	.-320    	; 0x6814 <start_speed_control_right+0x7a>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    6954:	97 fd       	sbrc	r25, 7
    6956:	31 c0       	rjmp	.+98     	; 0x69ba <start_speed_control_right+0x220>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    6958:	10 92 7f 19 	sts	0x197F, r1
    695c:	10 92 80 19 	sts	0x1980, r1
    6960:	10 92 81 19 	sts	0x1981, r1
    6964:	10 92 82 19 	sts	0x1982, r1
    6968:	40 e0       	ldi	r20, 0x00	; 0
    696a:	50 e0       	ldi	r21, 0x00	; 0
    696c:	ba 01       	movw	r22, r20
    696e:	84 e0       	ldi	r24, 0x04	; 4
    6970:	75 95       	asr	r23
    6972:	67 95       	ror	r22
    6974:	57 95       	ror	r21
    6976:	47 95       	ror	r20
    6978:	8a 95       	dec	r24
    697a:	d1 f7       	brne	.-12     	; 0x6970 <start_speed_control_right+0x1d6>
    697c:	a3 cf       	rjmp	.-186    	; 0x68c4 <start_speed_control_right+0x12a>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    697e:	40 91 8f 19 	lds	r20, 0x198F
    6982:	50 91 90 19 	lds	r21, 0x1990
    6986:	04 0f       	add	r16, r20
    6988:	15 1f       	adc	r17, r21
    698a:	10 93 70 21 	sts	0x2170, r17
    698e:	00 93 6f 21 	sts	0x216F, r16
    6992:	29 cf       	rjmp	.-430    	; 0x67e6 <start_speed_control_right+0x4c>
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    6994:	50 93 78 19 	sts	0x1978, r21
    6998:	40 93 77 19 	sts	0x1977, r20
    699c:	6a 01       	movw	r12, r20
    699e:	cc 0c       	add	r12, r12
    69a0:	dd 1c       	adc	r13, r13
    69a2:	4c 0d       	add	r20, r12
    69a4:	5d 1d       	adc	r21, r13
    69a6:	6a 01       	movw	r12, r20
    69a8:	55 0f       	add	r21, r21
    69aa:	ee 08       	sbc	r14, r14
    69ac:	ff 08       	sbc	r15, r15
    69ae:	32 cf       	rjmp	.-412    	; 0x6814 <start_speed_control_right+0x7a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    69b0:	41 50       	subi	r20, 0x01	; 1
    69b2:	51 09       	sbc	r21, r1
    69b4:	51 83       	std	Z+1, r21	; 0x01
    69b6:	40 83       	st	Z, r20
    69b8:	93 cf       	rjmp	.-218    	; 0x68e0 <start_speed_control_right+0x146>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    69ba:	40 34       	cpi	r20, 0x40	; 64
    69bc:	82 ea       	ldi	r24, 0xA2	; 162
    69be:	58 07       	cpc	r21, r24
    69c0:	8f ef       	ldi	r24, 0xFF	; 255
    69c2:	68 07       	cpc	r22, r24
    69c4:	78 07       	cpc	r23, r24
    69c6:	9c f6       	brge	.-90     	; 0x696e <start_speed_control_right+0x1d4>
    69c8:	80 e4       	ldi	r24, 0x40	; 64
    69ca:	92 ea       	ldi	r25, 0xA2	; 162
    69cc:	af ef       	ldi	r26, 0xFF	; 255
    69ce:	bf ef       	ldi	r27, 0xFF	; 255
    69d0:	80 93 7f 19 	sts	0x197F, r24
    69d4:	90 93 80 19 	sts	0x1980, r25
    69d8:	a0 93 81 19 	sts	0x1981, r26
    69dc:	b0 93 82 19 	sts	0x1982, r27
    69e0:	44 e2       	ldi	r20, 0x24	; 36
    69e2:	5a ef       	ldi	r21, 0xFA	; 250
    69e4:	6f cf       	rjmp	.-290    	; 0x68c4 <start_speed_control_right+0x12a>

000069e6 <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    69e6:	8f 92       	push	r8
    69e8:	9f 92       	push	r9
    69ea:	af 92       	push	r10
    69ec:	bf 92       	push	r11
    69ee:	cf 92       	push	r12
    69f0:	df 92       	push	r13
    69f2:	ef 92       	push	r14
    69f4:	ff 92       	push	r15
    69f6:	0f 93       	push	r16
    69f8:	1f 93       	push	r17
    69fa:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    69fc:	80 81       	ld	r24, Z
    69fe:	91 81       	ldd	r25, Z+1	; 0x01
    6a00:	89 2b       	or	r24, r25
    6a02:	09 f4       	brne	.+2      	; 0x6a06 <start_speed_control_left+0x20>
    6a04:	a6 c0       	rjmp	.+332    	; 0x6b52 <start_speed_control_left+0x16c>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    6a06:	20 91 ff 1d 	lds	r18, 0x1DFF
    6a0a:	30 91 00 1e 	lds	r19, 0x1E00
    6a0e:	30 93 51 21 	sts	0x2151, r19
    6a12:	20 93 50 21 	sts	0x2150, r18
	if(*pwm_left >= 0) {
    6a16:	00 81       	ld	r16, Z
    6a18:	11 81       	ldd	r17, Z+1	; 0x01
    6a1a:	17 fd       	sbrc	r17, 7
    6a1c:	d6 c0       	rjmp	.+428    	; 0x6bca <start_speed_control_left+0x1e4>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    6a1e:	80 91 91 19 	lds	r24, 0x1991
    6a22:	90 91 92 19 	lds	r25, 0x1992
    6a26:	08 1b       	sub	r16, r24
    6a28:	19 0b       	sbc	r17, r25
    6a2a:	10 93 00 1e 	sts	0x1E00, r17
    6a2e:	00 93 ff 1d 	sts	0x1DFF, r16
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    6a32:	40 91 79 19 	lds	r20, 0x1979
    6a36:	50 91 7a 19 	lds	r21, 0x197A
    6a3a:	40 0f       	add	r20, r16
    6a3c:	51 1f       	adc	r21, r17

	if(delta_left_speed_sum > I_LIMIT) {
    6a3e:	41 34       	cpi	r20, 0x41	; 65
    6a40:	86 e0       	ldi	r24, 0x06	; 6
    6a42:	58 07       	cpc	r21, r24
    6a44:	0c f4       	brge	.+2      	; 0x6a48 <start_speed_control_left+0x62>
    6a46:	9a c0       	rjmp	.+308    	; 0x6b7c <start_speed_control_left+0x196>
		delta_left_speed_sum = I_LIMIT;
    6a48:	80 e4       	ldi	r24, 0x40	; 64
    6a4a:	96 e0       	ldi	r25, 0x06	; 6
    6a4c:	90 93 7a 19 	sts	0x197A, r25
    6a50:	80 93 79 19 	sts	0x1979, r24
    6a54:	90 ec       	ldi	r25, 0xC0	; 192
    6a56:	c9 2e       	mov	r12, r25
    6a58:	92 e1       	ldi	r25, 0x12	; 18
    6a5a:	d9 2e       	mov	r13, r25
    6a5c:	e1 2c       	mov	r14, r1
    6a5e:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    6a60:	80 81       	ld	r24, Z
    6a62:	91 81       	ldd	r25, Z+1	; 0x01
    6a64:	ac 01       	movw	r20, r24
    6a66:	44 0f       	add	r20, r20
    6a68:	55 1f       	adc	r21, r21
    6a6a:	44 0f       	add	r20, r20
    6a6c:	55 1f       	adc	r21, r21
    6a6e:	44 0f       	add	r20, r20
    6a70:	55 1f       	adc	r21, r21
    6a72:	4a 01       	movw	r8, r20
    6a74:	55 0f       	add	r21, r21
    6a76:	aa 08       	sbc	r10, r10
    6a78:	bb 08       	sbc	r11, r11
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
    6a7a:	d8 01       	movw	r26, r16
    6a7c:	aa 0f       	add	r26, r26
    6a7e:	bb 1f       	adc	r27, r27
    6a80:	b8 01       	movw	r22, r16
    6a82:	66 0f       	add	r22, r22
    6a84:	77 1f       	adc	r23, r23
    6a86:	66 0f       	add	r22, r22
    6a88:	77 1f       	adc	r23, r23
    6a8a:	66 0f       	add	r22, r22
    6a8c:	77 1f       	adc	r23, r23
    6a8e:	ad 01       	movw	r20, r26
    6a90:	46 0f       	add	r20, r22
    6a92:	57 1f       	adc	r21, r23
    6a94:	05 2e       	mov	r0, r21
    6a96:	00 0c       	add	r0, r0
    6a98:	66 0b       	sbc	r22, r22
    6a9a:	77 0b       	sbc	r23, r23
    6a9c:	48 0d       	add	r20, r8
    6a9e:	59 1d       	adc	r21, r9
    6aa0:	6a 1d       	adc	r22, r10
    6aa2:	7b 1d       	adc	r23, r11
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
    6aa4:	02 1b       	sub	r16, r18
    6aa6:	13 0b       	sbc	r17, r19
    6aa8:	00 0f       	add	r16, r16
    6aaa:	11 1f       	adc	r17, r17
    6aac:	01 2e       	mov	r0, r17
    6aae:	00 0c       	add	r0, r0
    6ab0:	22 0b       	sbc	r18, r18
    6ab2:	33 0b       	sbc	r19, r19
    6ab4:	40 0f       	add	r20, r16
    6ab6:	51 1f       	adc	r21, r17
    6ab8:	62 1f       	adc	r22, r18
    6aba:	73 1f       	adc	r23, r19
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    6abc:	4c 0d       	add	r20, r12
    6abe:	5d 1d       	adc	r21, r13
    6ac0:	6e 1d       	adc	r22, r14
    6ac2:	7f 1d       	adc	r23, r15
    6ac4:	40 93 7b 19 	sts	0x197B, r20
    6ac8:	50 93 7c 19 	sts	0x197C, r21
    6acc:	60 93 7d 19 	sts	0x197D, r22
    6ad0:	70 93 7e 19 	sts	0x197E, r23

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    6ad4:	77 fd       	sbrc	r23, 7
    6ad6:	64 c0       	rjmp	.+200    	; 0x6ba0 <start_speed_control_left+0x1ba>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    6ad8:	41 15       	cp	r20, r1
    6ada:	51 05       	cpc	r21, r1
    6adc:	61 05       	cpc	r22, r1
    6ade:	71 05       	cpc	r23, r1
    6ae0:	11 f0       	breq	.+4      	; 0x6ae6 <start_speed_control_left+0x100>
    6ae2:	97 fd       	sbrc	r25, 7
    6ae4:	5f c0       	rjmp	.+190    	; 0x6ba4 <start_speed_control_left+0x1be>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    6ae6:	41 3c       	cpi	r20, 0xC1	; 193
    6ae8:	8d e5       	ldi	r24, 0x5D	; 93
    6aea:	58 07       	cpc	r21, r24
    6aec:	61 05       	cpc	r22, r1
    6aee:	71 05       	cpc	r23, r1
    6af0:	0c f4       	brge	.+2      	; 0x6af4 <start_speed_control_left+0x10e>
    6af2:	89 c0       	rjmp	.+274    	; 0x6c06 <start_speed_control_left+0x220>
    6af4:	80 ec       	ldi	r24, 0xC0	; 192
    6af6:	9d e5       	ldi	r25, 0x5D	; 93
    6af8:	a0 e0       	ldi	r26, 0x00	; 0
    6afa:	b0 e0       	ldi	r27, 0x00	; 0
    6afc:	80 93 7b 19 	sts	0x197B, r24
    6b00:	90 93 7c 19 	sts	0x197C, r25
    6b04:	a0 93 7d 19 	sts	0x197D, r26
    6b08:	b0 93 7e 19 	sts	0x197E, r27
    6b0c:	4c ed       	ldi	r20, 0xDC	; 220
    6b0e:	55 e0       	ldi	r21, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    6b10:	51 83       	std	Z+1, r21	; 0x01
    6b12:	40 83       	st	Z, r20

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    6b14:	80 91 97 19 	lds	r24, 0x1997
    6b18:	90 91 98 19 	lds	r25, 0x1998
    6b1c:	18 16       	cp	r1, r24
    6b1e:	19 06       	cpc	r1, r25
    6b20:	0c f0       	brlt	.+2      	; 0x6b24 <start_speed_control_left+0x13e>
    6b22:	6c c0       	rjmp	.+216    	; 0x6bfc <start_speed_control_left+0x216>
		*pwm_left += 1;
    6b24:	4f 5f       	subi	r20, 0xFF	; 255
    6b26:	5f 4f       	sbci	r21, 0xFF	; 255
    6b28:	51 83       	std	Z+1, r21	; 0x01
    6b2a:	40 83       	st	Z, r20
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    6b2c:	41 15       	cp	r20, r1
    6b2e:	82 e0       	ldi	r24, 0x02	; 2
    6b30:	58 07       	cpc	r21, r24
    6b32:	e4 f0       	brlt	.+56     	; 0x6b6c <start_speed_control_left+0x186>
    6b34:	8f ef       	ldi	r24, 0xFF	; 255
    6b36:	91 e0       	ldi	r25, 0x01	; 1
    6b38:	91 83       	std	Z+1, r25	; 0x01
    6b3a:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    6b3c:	1f 91       	pop	r17
    6b3e:	0f 91       	pop	r16
    6b40:	ff 90       	pop	r15
    6b42:	ef 90       	pop	r14
    6b44:	df 90       	pop	r13
    6b46:	cf 90       	pop	r12
    6b48:	bf 90       	pop	r11
    6b4a:	af 90       	pop	r10
    6b4c:	9f 90       	pop	r9
    6b4e:	8f 90       	pop	r8
    6b50:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    6b52:	10 92 7a 19 	sts	0x197A, r1
    6b56:	10 92 79 19 	sts	0x1979, r1
		delta_left_speed_current = 0;
    6b5a:	10 92 00 1e 	sts	0x1E00, r1
    6b5e:	10 92 ff 1d 	sts	0x1DFF, r1
		delta_left_speed_prev = 0;
    6b62:	10 92 51 21 	sts	0x2151, r1
    6b66:	10 92 50 21 	sts	0x2150, r1
		return;
    6b6a:	e8 cf       	rjmp	.-48     	; 0x6b3c <start_speed_control_left+0x156>
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    6b6c:	41 30       	cpi	r20, 0x01	; 1
    6b6e:	5e 4f       	sbci	r21, 0xFE	; 254
    6b70:	2c f7       	brge	.-54     	; 0x6b3c <start_speed_control_left+0x156>
    6b72:	81 e0       	ldi	r24, 0x01	; 1
    6b74:	9e ef       	ldi	r25, 0xFE	; 254
    6b76:	91 83       	std	Z+1, r25	; 0x01
    6b78:	80 83       	st	Z, r24
    6b7a:	e0 cf       	rjmp	.-64     	; 0x6b3c <start_speed_control_left+0x156>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    6b7c:	40 3c       	cpi	r20, 0xC0	; 192
    6b7e:	89 ef       	ldi	r24, 0xF9	; 249
    6b80:	58 07       	cpc	r21, r24
    6b82:	74 f5       	brge	.+92     	; 0x6be0 <start_speed_control_left+0x1fa>
		delta_left_speed_sum = -I_LIMIT;
    6b84:	80 ec       	ldi	r24, 0xC0	; 192
    6b86:	99 ef       	ldi	r25, 0xF9	; 249
    6b88:	90 93 7a 19 	sts	0x197A, r25
    6b8c:	80 93 79 19 	sts	0x1979, r24
    6b90:	b0 e4       	ldi	r27, 0x40	; 64
    6b92:	cb 2e       	mov	r12, r27
    6b94:	bd ee       	ldi	r27, 0xED	; 237
    6b96:	db 2e       	mov	r13, r27
    6b98:	ee 24       	eor	r14, r14
    6b9a:	ea 94       	dec	r14
    6b9c:	fe 2c       	mov	r15, r14
    6b9e:	60 cf       	rjmp	.-320    	; 0x6a60 <start_speed_control_left+0x7a>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    6ba0:	97 fd       	sbrc	r25, 7
    6ba2:	31 c0       	rjmp	.+98     	; 0x6c06 <start_speed_control_left+0x220>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    6ba4:	10 92 7b 19 	sts	0x197B, r1
    6ba8:	10 92 7c 19 	sts	0x197C, r1
    6bac:	10 92 7d 19 	sts	0x197D, r1
    6bb0:	10 92 7e 19 	sts	0x197E, r1
    6bb4:	40 e0       	ldi	r20, 0x00	; 0
    6bb6:	50 e0       	ldi	r21, 0x00	; 0
    6bb8:	ba 01       	movw	r22, r20
    6bba:	84 e0       	ldi	r24, 0x04	; 4
    6bbc:	75 95       	asr	r23
    6bbe:	67 95       	ror	r22
    6bc0:	57 95       	ror	r21
    6bc2:	47 95       	ror	r20
    6bc4:	8a 95       	dec	r24
    6bc6:	d1 f7       	brne	.-12     	; 0x6bbc <start_speed_control_left+0x1d6>
    6bc8:	a3 cf       	rjmp	.-186    	; 0x6b10 <start_speed_control_left+0x12a>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    6bca:	40 91 91 19 	lds	r20, 0x1991
    6bce:	50 91 92 19 	lds	r21, 0x1992
    6bd2:	04 0f       	add	r16, r20
    6bd4:	15 1f       	adc	r17, r21
    6bd6:	10 93 00 1e 	sts	0x1E00, r17
    6bda:	00 93 ff 1d 	sts	0x1DFF, r16
    6bde:	29 cf       	rjmp	.-430    	; 0x6a32 <start_speed_control_left+0x4c>
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    6be0:	50 93 7a 19 	sts	0x197A, r21
    6be4:	40 93 79 19 	sts	0x1979, r20
    6be8:	6a 01       	movw	r12, r20
    6bea:	cc 0c       	add	r12, r12
    6bec:	dd 1c       	adc	r13, r13
    6bee:	4c 0d       	add	r20, r12
    6bf0:	5d 1d       	adc	r21, r13
    6bf2:	6a 01       	movw	r12, r20
    6bf4:	55 0f       	add	r21, r21
    6bf6:	ee 08       	sbc	r14, r14
    6bf8:	ff 08       	sbc	r15, r15
    6bfa:	32 cf       	rjmp	.-412    	; 0x6a60 <start_speed_control_left+0x7a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    6bfc:	41 50       	subi	r20, 0x01	; 1
    6bfe:	51 09       	sbc	r21, r1
    6c00:	51 83       	std	Z+1, r21	; 0x01
    6c02:	40 83       	st	Z, r20
    6c04:	93 cf       	rjmp	.-218    	; 0x6b2c <start_speed_control_left+0x146>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    6c06:	40 34       	cpi	r20, 0x40	; 64
    6c08:	82 ea       	ldi	r24, 0xA2	; 162
    6c0a:	58 07       	cpc	r21, r24
    6c0c:	8f ef       	ldi	r24, 0xFF	; 255
    6c0e:	68 07       	cpc	r22, r24
    6c10:	78 07       	cpc	r23, r24
    6c12:	9c f6       	brge	.-90     	; 0x6bba <start_speed_control_left+0x1d4>
    6c14:	80 e4       	ldi	r24, 0x40	; 64
    6c16:	92 ea       	ldi	r25, 0xA2	; 162
    6c18:	af ef       	ldi	r26, 0xFF	; 255
    6c1a:	bf ef       	ldi	r27, 0xFF	; 255
    6c1c:	80 93 7b 19 	sts	0x197B, r24
    6c20:	90 93 7c 19 	sts	0x197C, r25
    6c24:	a0 93 7d 19 	sts	0x197D, r26
    6c28:	b0 93 7e 19 	sts	0x197E, r27
    6c2c:	44 e2       	ldi	r20, 0x24	; 36
    6c2e:	5a ef       	ldi	r21, 0xFA	; 250
    6c30:	6f cf       	rjmp	.-290    	; 0x6b10 <start_speed_control_left+0x12a>

00006c32 <initAdc>:

#include "adc.h"


void initAdc(void) {
    6c32:	cf 93       	push	r28
    6c34:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    6c36:	ea e7       	ldi	r30, 0x7A	; 122
    6c38:	f0 e0       	ldi	r31, 0x00	; 0
    6c3a:	10 82       	st	Z, r1
	ADCSRB = 0;
    6c3c:	ab e7       	ldi	r26, 0x7B	; 123
    6c3e:	b0 e0       	ldi	r27, 0x00	; 0
    6c40:	1c 92       	st	X, r1
	ADMUX = 0;
    6c42:	cc e7       	ldi	r28, 0x7C	; 124
    6c44:	d0 e0       	ldi	r29, 0x00	; 0
    6c46:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    6c48:	80 81       	ld	r24, Z
    6c4a:	86 60       	ori	r24, 0x06	; 6
    6c4c:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    6c4e:	88 81       	ld	r24, Y
    6c50:	80 64       	ori	r24, 0x40	; 64
    6c52:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    6c54:	80 81       	ld	r24, Z
    6c56:	80 62       	ori	r24, 0x20	; 32
    6c58:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    6c5a:	8c 91       	ld	r24, X
    6c5c:	88 7f       	andi	r24, 0xF8	; 248
    6c5e:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    6c60:	80 81       	ld	r24, Z
    6c62:	88 60       	ori	r24, 0x08	; 8
    6c64:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    6c66:	80 81       	ld	r24, Z
    6c68:	80 68       	ori	r24, 0x80	; 128
    6c6a:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    6c6c:	80 81       	ld	r24, Z
    6c6e:	80 64       	ori	r24, 0x40	; 64
    6c70:	80 83       	st	Z, r24

}
    6c72:	df 91       	pop	r29
    6c74:	cf 91       	pop	r28
    6c76:	08 95       	ret

00006c78 <__vector_29>:

ISR(ADC_vect) {
    6c78:	1f 92       	push	r1
    6c7a:	0f 92       	push	r0
    6c7c:	0f b6       	in	r0, 0x3f	; 63
    6c7e:	0f 92       	push	r0
    6c80:	11 24       	eor	r1, r1
    6c82:	0b b6       	in	r0, 0x3b	; 59
    6c84:	0f 92       	push	r0
    6c86:	2f 93       	push	r18
    6c88:	3f 93       	push	r19
    6c8a:	4f 93       	push	r20
    6c8c:	5f 93       	push	r21
    6c8e:	6f 93       	push	r22
    6c90:	7f 93       	push	r23
    6c92:	8f 93       	push	r24
    6c94:	9f 93       	push	r25
    6c96:	af 93       	push	r26
    6c98:	bf 93       	push	r27
    6c9a:	cf 93       	push	r28
    6c9c:	ef 93       	push	r30
    6c9e:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    6ca0:	80 91 40 18 	lds	r24, 0x1840
    6ca4:	90 91 41 18 	lds	r25, 0x1841
    6ca8:	a0 91 42 18 	lds	r26, 0x1842
    6cac:	b0 91 43 18 	lds	r27, 0x1843
    6cb0:	8f 3f       	cpi	r24, 0xFF	; 255
    6cb2:	2f ef       	ldi	r18, 0xFF	; 255
    6cb4:	92 07       	cpc	r25, r18
    6cb6:	a2 07       	cpc	r26, r18
    6cb8:	b2 07       	cpc	r27, r18
    6cba:	09 f4       	brne	.+2      	; 0x6cbe <__vector_29+0x46>
    6cbc:	22 c1       	rjmp	.+580    	; 0x6f02 <__vector_29+0x28a>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    6cbe:	01 96       	adiw	r24, 0x01	; 1
    6cc0:	a1 1d       	adc	r26, r1
    6cc2:	b1 1d       	adc	r27, r1
    6cc4:	80 93 40 18 	sts	0x1840, r24
    6cc8:	90 93 41 18 	sts	0x1841, r25
    6ccc:	a0 93 42 18 	sts	0x1842, r26
    6cd0:	b0 93 43 18 	sts	0x1843, r27
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    6cd4:	80 91 78 00 	lds	r24, 0x0078
	value = (ADCH<<8) | value;
    6cd8:	20 91 79 00 	lds	r18, 0x0079
    6cdc:	90 e0       	ldi	r25, 0x00	; 0
    6cde:	92 2b       	or	r25, r18
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    6ce0:	20 91 be 19 	lds	r18, 0x19BE
    6ce4:	22 30       	cpi	r18, 0x02	; 2
    6ce6:	09 f4       	brne	.+2      	; 0x6cea <__vector_29+0x72>
    6ce8:	1c c2       	rjmp	.+1080   	; 0x7122 <__vector_29+0x4aa>
    6cea:	08 f4       	brcc	.+2      	; 0x6cee <__vector_29+0x76>
    6cec:	c1 c0       	rjmp	.+386    	; 0x6e70 <__vector_29+0x1f8>
    6cee:	24 30       	cpi	r18, 0x04	; 4
    6cf0:	09 f4       	brne	.+2      	; 0x6cf4 <__vector_29+0x7c>
    6cf2:	1e c1       	rjmp	.+572    	; 0x6f30 <__vector_29+0x2b8>
    6cf4:	08 f4       	brcc	.+2      	; 0x6cf8 <__vector_29+0x80>
    6cf6:	3d c2       	rjmp	.+1146   	; 0x7172 <__vector_29+0x4fa>
    6cf8:	26 30       	cpi	r18, 0x06	; 6
    6cfa:	a9 f5       	brne	.+106    	; 0x6d66 <__vector_29+0xee>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    6cfc:	40 91 53 1a 	lds	r20, 0x1A53
    6d00:	50 91 df 17 	lds	r21, 0x17DF
    6d04:	24 2f       	mov	r18, r20
    6d06:	30 e0       	ldi	r19, 0x00	; 0
    6d08:	f9 01       	movw	r30, r18
    6d0a:	68 e0       	ldi	r22, 0x08	; 8
    6d0c:	56 9f       	mul	r21, r22
    6d0e:	e0 0d       	add	r30, r0
    6d10:	f1 1d       	adc	r31, r1
    6d12:	11 24       	eor	r1, r1
    6d14:	ee 0f       	add	r30, r30
    6d16:	ff 1f       	adc	r31, r31
    6d18:	60 91 95 20 	lds	r22, 0x2095
    6d1c:	70 91 96 20 	lds	r23, 0x2096
    6d20:	e6 0f       	add	r30, r22
    6d22:	f7 1f       	adc	r31, r23
    6d24:	91 83       	std	Z+1, r25	; 0x01
    6d26:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    6d28:	22 0f       	add	r18, r18
    6d2a:	33 1f       	adc	r19, r19
    6d2c:	e0 91 75 21 	lds	r30, 0x2175
    6d30:	f0 91 76 21 	lds	r31, 0x2176
    6d34:	e2 0f       	add	r30, r18
    6d36:	f3 1f       	adc	r31, r19
    6d38:	60 81       	ld	r22, Z
    6d3a:	71 81       	ldd	r23, Z+1	; 0x01
    6d3c:	68 17       	cp	r22, r24
    6d3e:	79 07       	cpc	r23, r25
    6d40:	10 f4       	brcc	.+4      	; 0x6d46 <__vector_29+0xce>
				irCommMaxSensorValueAdc[currentProx] = value;
    6d42:	91 83       	std	Z+1, r25	; 0x01
    6d44:	80 83       	st	Z, r24
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    6d46:	e0 91 01 1e 	lds	r30, 0x1E01
    6d4a:	f0 91 02 1e 	lds	r31, 0x1E02
    6d4e:	e2 0f       	add	r30, r18
    6d50:	f3 1f       	adc	r31, r19
    6d52:	20 81       	ld	r18, Z
    6d54:	31 81       	ldd	r19, Z+1	; 0x01
    6d56:	82 17       	cp	r24, r18
    6d58:	93 07       	cpc	r25, r19
    6d5a:	10 f4       	brcc	.+4      	; 0x6d60 <__vector_29+0xe8>
				irCommMinSensorValueAdc[currentProx] = value;
    6d5c:	91 83       	std	Z+1, r25	; 0x01
    6d5e:	80 83       	st	Z, r24
			}
			currentProx++;
    6d60:	4f 5f       	subi	r20, 0xFF	; 255
    6d62:	40 93 53 1a 	sts	0x1A53, r20
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    6d66:	80 91 ec 17 	lds	r24, 0x17EC
    6d6a:	82 30       	cpi	r24, 0x02	; 2
    6d6c:	09 f4       	brne	.+2      	; 0x6d70 <__vector_29+0xf8>
    6d6e:	97 c0       	rjmp	.+302    	; 0x6e9e <__vector_29+0x226>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    6d70:	81 30       	cpi	r24, 0x01	; 1
    6d72:	09 f4       	brne	.+2      	; 0x6d76 <__vector_29+0xfe>
    6d74:	cf c0       	rjmp	.+414    	; 0x6f14 <__vector_29+0x29c>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    6d76:	81 11       	cpse	r24, r1
    6d78:	2d c0       	rjmp	.+90     	; 0x6dd4 <__vector_29+0x15c>
		switch(adcSamplingState) {
    6d7a:	80 91 bd 19 	lds	r24, 0x19BD
    6d7e:	82 30       	cpi	r24, 0x02	; 2
    6d80:	09 f4       	brne	.+2      	; 0x6d84 <__vector_29+0x10c>
    6d82:	a0 c3       	rjmp	.+1856   	; 0x74c4 <__vector_29+0x84c>
    6d84:	08 f0       	brcs	.+2      	; 0x6d88 <__vector_29+0x110>
    6d86:	00 c1       	rjmp	.+512    	; 0x6f88 <__vector_29+0x310>
    6d88:	88 23       	and	r24, r24
    6d8a:	09 f4       	brne	.+2      	; 0x6d8e <__vector_29+0x116>
    6d8c:	ae c3       	rjmp	.+1884   	; 0x74ea <__vector_29+0x872>
    6d8e:	81 30       	cpi	r24, 0x01	; 1
    6d90:	09 f5       	brne	.+66     	; 0x6dd4 <__vector_29+0x15c>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    6d92:	80 91 52 1a 	lds	r24, 0x1A52
    6d96:	80 93 54 1a 	sts	0x1A54, r24
				leftChannelPhase = leftMotorPhase;
    6d9a:	80 91 4f 1a 	lds	r24, 0x1A4F
    6d9e:	80 93 bb 19 	sts	0x19BB, r24
				adcSaveDataTo = SAVE_TO_PROX;
    6da2:	10 92 be 19 	sts	0x19BE, r1
				adcSamplingState = 2;
    6da6:	82 e0       	ldi	r24, 0x02	; 2
    6da8:	80 93 bd 19 	sts	0x19BD, r24
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    6dac:	c0 91 ee 17 	lds	r28, 0x17EE
    6db0:	c1 30       	cpi	r28, 0x01	; 1
    6db2:	09 f4       	brne	.+2      	; 0x6db6 <__vector_29+0x13e>
    6db4:	f3 c3       	rjmp	.+2022   	; 0x759c <__vector_29+0x924>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    6db6:	c2 30       	cpi	r28, 0x02	; 2
    6db8:	69 f4       	brne	.+26     	; 0x6dd4 <__vector_29+0x15c>
    6dba:	80 91 53 1a 	lds	r24, 0x1A53
    6dbe:	87 31       	cpi	r24, 0x17	; 23
    6dc0:	49 f4       	brne	.+18     	; 0x6dd4 <__vector_29+0x15c>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    6dc2:	c0 93 ec 17 	sts	0x17EC, r28
					if(irCommTxByteEnqueued==1) {
    6dc6:	80 91 bd 17 	lds	r24, 0x17BD
    6dca:	81 30       	cpi	r24, 0x01	; 1
    6dcc:	09 f4       	brne	.+2      	; 0x6dd0 <__vector_29+0x158>
    6dce:	14 c1       	rjmp	.+552    	; 0x6ff8 <__vector_29+0x380>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    6dd0:	10 92 ec 17 	sts	0x17EC, r1
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    6dd4:	80 91 54 1a 	lds	r24, 0x1A54
    6dd8:	88 30       	cpi	r24, 0x08	; 8
    6dda:	10 f5       	brcc	.+68     	; 0x6e20 <__vector_29+0x1a8>
		ADCSRB &= ~(1 << MUX5);
    6ddc:	80 91 7b 00 	lds	r24, 0x007B
    6de0:	87 7f       	andi	r24, 0xF7	; 247
    6de2:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + currentAdChannel;
    6de6:	80 91 54 1a 	lds	r24, 0x1A54
    6dea:	80 5c       	subi	r24, 0xC0	; 192
    6dec:	80 93 7c 00 	sts	0x007C, r24
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    6df0:	80 91 bd 19 	lds	r24, 0x19BD
    6df4:	82 30       	cpi	r24, 0x02	; 2
    6df6:	11 f1       	breq	.+68     	; 0x6e3c <__vector_29+0x1c4>

	}

	//LED_BLUE_OFF;

}
    6df8:	ff 91       	pop	r31
    6dfa:	ef 91       	pop	r30
    6dfc:	cf 91       	pop	r28
    6dfe:	bf 91       	pop	r27
    6e00:	af 91       	pop	r26
    6e02:	9f 91       	pop	r25
    6e04:	8f 91       	pop	r24
    6e06:	7f 91       	pop	r23
    6e08:	6f 91       	pop	r22
    6e0a:	5f 91       	pop	r21
    6e0c:	4f 91       	pop	r20
    6e0e:	3f 91       	pop	r19
    6e10:	2f 91       	pop	r18
    6e12:	0f 90       	pop	r0
    6e14:	0b be       	out	0x3b, r0	; 59
    6e16:	0f 90       	pop	r0
    6e18:	0f be       	out	0x3f, r0	; 63
    6e1a:	0f 90       	pop	r0
    6e1c:	1f 90       	pop	r1
    6e1e:	18 95       	reti
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    6e20:	80 91 7b 00 	lds	r24, 0x007B
    6e24:	88 60       	ori	r24, 0x08	; 8
    6e26:	80 93 7b 00 	sts	0x007B, r24
		ADMUX = 0x40 + (currentAdChannel-8);
    6e2a:	80 91 54 1a 	lds	r24, 0x1A54
    6e2e:	88 5c       	subi	r24, 0xC8	; 200
    6e30:	80 93 7c 00 	sts	0x007C, r24
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    6e34:	80 91 bd 19 	lds	r24, 0x19BD
    6e38:	82 30       	cpi	r24, 0x02	; 2
    6e3a:	f1 f6       	brne	.-68     	; 0x6df8 <__vector_29+0x180>
    6e3c:	80 91 ec 17 	lds	r24, 0x17EC
    6e40:	81 11       	cpse	r24, r1
    6e42:	da cf       	rjmp	.-76     	; 0x6df8 <__vector_29+0x180>

		if(hardwareRevision == HW_REV_3_0) {
    6e44:	80 91 3c 18 	lds	r24, 0x183C
    6e48:	81 11       	cpse	r24, r1
    6e4a:	08 c0       	rjmp	.+16     	; 0x6e5c <__vector_29+0x1e4>
			PORTJ &= 0xF0;
    6e4c:	80 91 05 01 	lds	r24, 0x0105
    6e50:	80 7f       	andi	r24, 0xF0	; 240
    6e52:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    6e56:	12 b8       	out	0x02, r1	; 2
    6e58:	80 91 3c 18 	lds	r24, 0x183C
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    6e5c:	81 30       	cpi	r24, 0x01	; 1
    6e5e:	09 f4       	brne	.+2      	; 0x6e62 <__vector_29+0x1ea>
    6e60:	bf c0       	rjmp	.+382    	; 0x6fe0 <__vector_29+0x368>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    6e62:	82 30       	cpi	r24, 0x02	; 2
    6e64:	49 f6       	brne	.-110    	; 0x6df8 <__vector_29+0x180>
			PORTJ = 0xFF;
    6e66:	8f ef       	ldi	r24, 0xFF	; 255
    6e68:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    6e6c:	12 b8       	out	0x02, r1	; 2
    6e6e:	c4 cf       	rjmp	.-120    	; 0x6df8 <__vector_29+0x180>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    6e70:	22 23       	and	r18, r18
    6e72:	09 f4       	brne	.+2      	; 0x6e76 <__vector_29+0x1fe>
    6e74:	c5 c0       	rjmp	.+394    	; 0x7000 <__vector_29+0x388>
    6e76:	21 30       	cpi	r18, 0x01	; 1
    6e78:	09 f0       	breq	.+2      	; 0x6e7c <__vector_29+0x204>
    6e7a:	75 cf       	rjmp	.-278    	; 0x6d66 <__vector_29+0xee>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
    6e7c:	20 91 9b 19 	lds	r18, 0x199B
    6e80:	30 91 9c 19 	lds	r19, 0x199C
    6e84:	82 0f       	add	r24, r18
    6e86:	93 1f       	adc	r25, r19
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    6e88:	96 95       	lsr	r25
    6e8a:	87 95       	ror	r24
    6e8c:	90 93 9c 19 	sts	0x199C, r25
    6e90:	80 93 9b 19 	sts	0x199B, r24
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    6e94:	80 91 ec 17 	lds	r24, 0x17EC
    6e98:	82 30       	cpi	r24, 0x02	; 2
    6e9a:	09 f0       	breq	.+2      	; 0x6e9e <__vector_29+0x226>
    6e9c:	69 cf       	rjmp	.-302    	; 0x6d70 <__vector_29+0xf8>
		switch(irCommAdcTxState) {
    6e9e:	80 91 bf 17 	lds	r24, 0x17BF
    6ea2:	81 30       	cpi	r24, 0x01	; 1
    6ea4:	09 f4       	brne	.+2      	; 0x6ea8 <__vector_29+0x230>
    6ea6:	78 c1       	rjmp	.+752    	; 0x7198 <__vector_29+0x520>
    6ea8:	08 f4       	brcc	.+2      	; 0x6eac <__vector_29+0x234>
    6eaa:	a1 c0       	rjmp	.+322    	; 0x6fee <__vector_29+0x376>
    6eac:	83 30       	cpi	r24, 0x03	; 3
    6eae:	09 f4       	brne	.+2      	; 0x6eb2 <__vector_29+0x23a>
    6eb0:	9d c1       	rjmp	.+826    	; 0x71ec <__vector_29+0x574>
    6eb2:	84 30       	cpi	r24, 0x04	; 4
    6eb4:	09 f0       	breq	.+2      	; 0x6eb8 <__vector_29+0x240>
    6eb6:	8e cf       	rjmp	.-228    	; 0x6dd4 <__vector_29+0x15c>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    6eb8:	80 91 b1 17 	lds	r24, 0x17B1
    6ebc:	8f 5f       	subi	r24, 0xFF	; 255
    6ebe:	80 93 b1 17 	sts	0x17B1, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    6ec2:	90 e0       	ldi	r25, 0x00	; 0
    6ec4:	20 91 b4 17 	lds	r18, 0x17B4
    6ec8:	30 91 b5 17 	lds	r19, 0x17B5
    6ecc:	82 17       	cp	r24, r18
    6ece:	93 07       	cpc	r25, r19
    6ed0:	09 f4       	brne	.+2      	; 0x6ed4 <__vector_29+0x25c>
    6ed2:	d8 c1       	rjmp	.+944    	; 0x7284 <__vector_29+0x60c>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    6ed4:	80 91 52 1a 	lds	r24, 0x1A52
    6ed8:	80 93 54 1a 	sts	0x1A54, r24
				leftChannelPhase = leftMotorPhase;
    6edc:	80 91 4f 1a 	lds	r24, 0x1A4F
    6ee0:	80 93 bb 19 	sts	0x19BB, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    6ee4:	80 91 bc 19 	lds	r24, 0x19BC
    6ee8:	88 23       	and	r24, r24
    6eea:	09 f4       	brne	.+2      	; 0x6eee <__vector_29+0x276>
    6eec:	aa c1       	rjmp	.+852    	; 0x7242 <__vector_29+0x5ca>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    6eee:	81 30       	cpi	r24, 0x01	; 1
    6ef0:	09 f4       	brne	.+2      	; 0x6ef4 <__vector_29+0x27c>
    6ef2:	d1 c3       	rjmp	.+1954   	; 0x7696 <__vector_29+0xa1e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    6ef4:	85 e0       	ldi	r24, 0x05	; 5
    6ef6:	80 93 be 19 	sts	0x19BE, r24
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    6efa:	83 e0       	ldi	r24, 0x03	; 3
    6efc:	80 93 bf 17 	sts	0x17BF, r24
				break;
    6f00:	69 cf       	rjmp	.-302    	; 0x6dd4 <__vector_29+0x15c>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    6f02:	10 92 40 18 	sts	0x1840, r1
    6f06:	10 92 41 18 	sts	0x1841, r1
    6f0a:	10 92 42 18 	sts	0x1842, r1
    6f0e:	10 92 43 18 	sts	0x1843, r1
    6f12:	e0 ce       	rjmp	.-576    	; 0x6cd4 <__vector_29+0x5c>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    6f14:	80 91 e0 17 	lds	r24, 0x17E0
    6f18:	90 e0       	ldi	r25, 0x00	; 0
    6f1a:	8d 30       	cpi	r24, 0x0D	; 13
    6f1c:	91 05       	cpc	r25, r1
    6f1e:	08 f0       	brcs	.+2      	; 0x6f22 <__vector_29+0x2aa>
    6f20:	59 cf       	rjmp	.-334    	; 0x6dd4 <__vector_29+0x15c>
    6f22:	fc 01       	movw	r30, r24
    6f24:	88 27       	eor	r24, r24
    6f26:	e6 58       	subi	r30, 0x86	; 134
    6f28:	ff 4f       	sbci	r31, 0xFF	; 255
    6f2a:	8f 4f       	sbci	r24, 0xFF	; 255
    6f2c:	0c 94 1e 56 	jmp	0xac3c	; 0xac3c <__tablejump2__>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    6f30:	20 91 27 03 	lds	r18, 0x0327
    6f34:	22 23       	and	r18, r18
    6f36:	09 f4       	brne	.+2      	; 0x6f3a <__vector_29+0x2c2>
    6f38:	16 cf       	rjmp	.-468    	; 0x6d66 <__vector_29+0xee>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    6f3a:	30 91 00 01 	lds	r19, 0x0100
    6f3e:	33 fd       	sbrc	r19, 3
    6f40:	12 cf       	rjmp	.-476    	; 0x6d66 <__vector_29+0xee>
    6f42:	30 91 00 01 	lds	r19, 0x0100
    6f46:	34 fd       	sbrc	r19, 4
    6f48:	0e cf       	rjmp	.-484    	; 0x6d66 <__vector_29+0xee>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    6f4a:	2f 5f       	subi	r18, 0xFF	; 255
    6f4c:	20 93 27 03 	sts	0x0327, r18
				if(firstSampleLeft > 4) {
    6f50:	25 30       	cpi	r18, 0x05	; 5
    6f52:	08 f4       	brcc	.+2      	; 0x6f56 <__vector_29+0x2de>
    6f54:	08 cf       	rjmp	.-496    	; 0x6d66 <__vector_29+0xee>
					if(pwm_left != 0) {
    6f56:	40 91 8b 19 	lds	r20, 0x198B
    6f5a:	50 91 8c 19 	lds	r21, 0x198C
    6f5e:	45 2b       	or	r20, r21
    6f60:	51 f0       	breq	.+20     	; 0x6f76 <__vector_29+0x2fe>
						left_vel_sum += value;
    6f62:	40 91 95 19 	lds	r20, 0x1995
    6f66:	50 91 96 19 	lds	r21, 0x1996
    6f6a:	84 0f       	add	r24, r20
    6f6c:	95 1f       	adc	r25, r21
    6f6e:	90 93 96 19 	sts	0x1996, r25
    6f72:	80 93 95 19 	sts	0x1995, r24
					}
					if(firstSampleLeft==8) {
    6f76:	28 30       	cpi	r18, 0x08	; 8
    6f78:	09 f0       	breq	.+2      	; 0x6f7c <__vector_29+0x304>
    6f7a:	f5 ce       	rjmp	.-534    	; 0x6d66 <__vector_29+0xee>
						firstSampleLeft = 0;
    6f7c:	10 92 27 03 	sts	0x0327, r1
						compute_left_vel = 1;
    6f80:	81 e0       	ldi	r24, 0x01	; 1
    6f82:	80 93 2a 03 	sts	0x032A, r24
    6f86:	ef ce       	rjmp	.-546    	; 0x6d66 <__vector_29+0xee>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    6f88:	83 30       	cpi	r24, 0x03	; 3
    6f8a:	09 f4       	brne	.+2      	; 0x6f8e <__vector_29+0x316>
    6f8c:	88 c2       	rjmp	.+1296   	; 0x749e <__vector_29+0x826>
    6f8e:	84 30       	cpi	r24, 0x04	; 4
    6f90:	09 f0       	breq	.+2      	; 0x6f94 <__vector_29+0x31c>
    6f92:	20 cf       	rjmp	.-448    	; 0x6dd4 <__vector_29+0x15c>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    6f94:	90 91 51 1a 	lds	r25, 0x1A51
    6f98:	90 93 54 1a 	sts	0x1A54, r25
				rightChannelPhase = rightMotorPhase;
    6f9c:	90 91 50 1a 	lds	r25, 0x1A50
    6fa0:	90 93 bc 19 	sts	0x19BC, r25
				if(leftChannelPhase == ACTIVE_PHASE) {
    6fa4:	90 91 bb 19 	lds	r25, 0x19BB
    6fa8:	91 11       	cpse	r25, r1
    6faa:	cf c2       	rjmp	.+1438   	; 0x754a <__vector_29+0x8d2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    6fac:	83 e0       	ldi	r24, 0x03	; 3
    6fae:	80 93 be 19 	sts	0x19BE, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    6fb2:	10 92 bd 19 	sts	0x19BD, r1

				if(currentProx==14 && measBattery==1) {
    6fb6:	80 91 53 1a 	lds	r24, 0x1A53
    6fba:	8e 30       	cpi	r24, 0x0E	; 14
    6fbc:	09 f4       	brne	.+2      	; 0x6fc0 <__vector_29+0x348>
    6fbe:	e2 c2       	rjmp	.+1476   	; 0x7584 <__vector_29+0x90c>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    6fc0:	80 ff       	sbrs	r24, 0
    6fc2:	08 cf       	rjmp	.-496    	; 0x6dd4 <__vector_29+0x15c>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    6fc4:	80 31       	cpi	r24, 0x10	; 16
    6fc6:	08 f0       	brcs	.+2      	; 0x6fca <__vector_29+0x352>
    6fc8:	0e c3       	rjmp	.+1564   	; 0x75e6 <__vector_29+0x96e>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    6fca:	86 95       	lsr	r24
    6fcc:	21 e0       	ldi	r18, 0x01	; 1
    6fce:	30 e0       	ldi	r19, 0x00	; 0
    6fd0:	a9 01       	movw	r20, r18
    6fd2:	02 c0       	rjmp	.+4      	; 0x6fd8 <__vector_29+0x360>
    6fd4:	44 0f       	add	r20, r20
    6fd6:	55 1f       	adc	r21, r21
    6fd8:	8a 95       	dec	r24
    6fda:	e2 f7       	brpl	.-8      	; 0x6fd4 <__vector_29+0x35c>
    6fdc:	42 b9       	out	0x02, r20	; 2
    6fde:	fa ce       	rjmp	.-524    	; 0x6dd4 <__vector_29+0x15c>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
			PORTJ = 0xFF;
    6fe0:	8f ef       	ldi	r24, 0xFF	; 255
    6fe2:	80 93 05 01 	sts	0x0105, r24
			PORTA = 0x00;
    6fe6:	12 b8       	out	0x02, r1	; 2
    6fe8:	80 91 3c 18 	lds	r24, 0x183C
    6fec:	3a cf       	rjmp	.-396    	; 0x6e62 <__vector_29+0x1ea>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    6fee:	80 91 bd 17 	lds	r24, 0x17BD
    6ff2:	81 30       	cpi	r24, 0x01	; 1
    6ff4:	09 f0       	breq	.+2      	; 0x6ff8 <__vector_29+0x380>
    6ff6:	ee ce       	rjmp	.-548    	; 0x6dd4 <__vector_29+0x15c>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    6ff8:	81 e0       	ldi	r24, 0x01	; 1
    6ffa:	80 93 bf 17 	sts	0x17BF, r24
    6ffe:	ea ce       	rjmp	.-556    	; 0x6dd4 <__vector_29+0x15c>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    7000:	20 91 53 1a 	lds	r18, 0x1A53
    7004:	2e 30       	cpi	r18, 0x0E	; 14
    7006:	09 f4       	brne	.+2      	; 0x700a <__vector_29+0x392>
    7008:	80 c2       	rjmp	.+1280   	; 0x750a <__vector_29+0x892>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    700a:	e2 2f       	mov	r30, r18
    700c:	f0 e0       	ldi	r31, 0x00	; 0
    700e:	ee 0f       	add	r30, r30
    7010:	ff 1f       	adc	r31, r31
    7012:	e1 5e       	subi	r30, 0xE1	; 225
    7014:	f5 4e       	sbci	r31, 0xE5	; 229
    7016:	91 83       	std	Z+1, r25	; 0x01
    7018:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    701a:	20 ff       	sbrs	r18, 0
    701c:	7c c0       	rjmp	.+248    	; 0x7116 <__vector_29+0x49e>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    701e:	42 2f       	mov	r20, r18
    7020:	50 e0       	ldi	r21, 0x00	; 0
    7022:	fa 01       	movw	r30, r20
    7024:	ee 0f       	add	r30, r30
    7026:	ff 1f       	adc	r31, r31
    7028:	e3 5e       	subi	r30, 0xE3	; 227
    702a:	f5 4e       	sbci	r31, 0xE5	; 229
    702c:	80 81       	ld	r24, Z
    702e:	91 81       	ldd	r25, Z+1	; 0x01
    7030:	44 0f       	add	r20, r20
    7032:	55 1f       	adc	r21, r21
    7034:	fa 01       	movw	r30, r20
    7036:	e1 5e       	subi	r30, 0xE1	; 225
    7038:	f5 4e       	sbci	r31, 0xE5	; 229
    703a:	60 81       	ld	r22, Z
    703c:	71 81       	ldd	r23, Z+1	; 0x01
    703e:	42 2f       	mov	r20, r18
    7040:	46 95       	lsr	r20
    7042:	50 e0       	ldi	r21, 0x00	; 0
    7044:	86 1b       	sub	r24, r22
    7046:	97 0b       	sbc	r25, r23
    7048:	44 0f       	add	r20, r20
    704a:	55 1f       	adc	r21, r21
    704c:	fa 01       	movw	r30, r20
    704e:	e1 51       	subi	r30, 0x11	; 17
    7050:	f6 4e       	sbci	r31, 0xE6	; 230
    7052:	60 81       	ld	r22, Z
    7054:	71 81       	ldd	r23, Z+1	; 0x01
    7056:	86 1b       	sub	r24, r22
    7058:	97 0b       	sbc	r25, r23
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    705a:	97 fd       	sbrc	r25, 7
    705c:	83 c2       	rjmp	.+1286   	; 0x7564 <__vector_29+0x8ec>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    705e:	81 30       	cpi	r24, 0x01	; 1
    7060:	74 e0       	ldi	r23, 0x04	; 4
    7062:	97 07       	cpc	r25, r23
    7064:	0c f4       	brge	.+2      	; 0x7068 <__vector_29+0x3f0>
    7066:	f1 c0       	rjmp	.+482    	; 0x724a <__vector_29+0x5d2>
					proximityResult[currentProx>>1] = 1024;
    7068:	80 e0       	ldi	r24, 0x00	; 0
    706a:	94 e0       	ldi	r25, 0x04	; 4
    706c:	fa 01       	movw	r30, r20
    706e:	e9 5f       	subi	r30, 0xF9	; 249
    7070:	f5 4e       	sbci	r31, 0xE5	; 229
    7072:	91 83       	std	Z+1, r25	; 0x01
    7074:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    7076:	20 31       	cpi	r18, 0x10	; 16
    7078:	88 f4       	brcc	.+34     	; 0x709c <__vector_29+0x424>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    707a:	80 e0       	ldi	r24, 0x00	; 0
    707c:	94 e0       	ldi	r25, 0x04	; 4

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    707e:	fa 01       	movw	r30, r20
    7080:	e9 55       	subi	r30, 0x59	; 89
    7082:	f6 4e       	sbci	r31, 0xE6	; 230
    7084:	84 5a       	subi	r24, 0xA4	; 164
    7086:	91 40       	sbci	r25, 0x01	; 1
    7088:	95 95       	asr	r25
    708a:	87 95       	ror	r24
    708c:	95 95       	asr	r25
    708e:	87 95       	ror	r24
    7090:	95 95       	asr	r25
    7092:	87 95       	ror	r24
    7094:	8c 54       	subi	r24, 0x4C	; 76
    7096:	9f 4f       	sbci	r25, 0xFF	; 255
    7098:	91 83       	std	Z+1, r25	; 0x01
    709a:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    709c:	80 91 2d 18 	lds	r24, 0x182D
    70a0:	88 23       	and	r24, r24
    70a2:	09 f4       	brne	.+2      	; 0x70a6 <__vector_29+0x42e>
    70a4:	41 c2       	rjmp	.+1154   	; 0x7528 <__vector_29+0x8b0>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    70a6:	80 91 17 1a 	lds	r24, 0x1A17
    70aa:	90 91 18 1a 	lds	r25, 0x1A18
    70ae:	84 3a       	cpi	r24, 0xA4	; 164
    70b0:	91 40       	sbci	r25, 0x01	; 1
    70b2:	b4 f0       	brlt	.+44     	; 0x70e0 <__vector_29+0x468>
    70b4:	80 91 19 1a 	lds	r24, 0x1A19
    70b8:	90 91 1a 1a 	lds	r25, 0x1A1A
    70bc:	84 3a       	cpi	r24, 0xA4	; 164
    70be:	91 40       	sbci	r25, 0x01	; 1
    70c0:	7c f0       	brlt	.+30     	; 0x70e0 <__vector_29+0x468>
    70c2:	80 91 1b 1a 	lds	r24, 0x1A1B
    70c6:	90 91 1c 1a 	lds	r25, 0x1A1C
    70ca:	84 3a       	cpi	r24, 0xA4	; 164
    70cc:	91 40       	sbci	r25, 0x01	; 1
    70ce:	44 f0       	brlt	.+16     	; 0x70e0 <__vector_29+0x468>
    70d0:	80 91 1d 1a 	lds	r24, 0x1A1D
    70d4:	90 91 1e 1a 	lds	r25, 0x1A1E
    70d8:	84 3a       	cpi	r24, 0xA4	; 164
    70da:	91 40       	sbci	r25, 0x01	; 1
    70dc:	0c f0       	brlt	.+2      	; 0x70e0 <__vector_29+0x468>
    70de:	24 c2       	rjmp	.+1096   	; 0x7528 <__vector_29+0x8b0>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    70e0:	81 e0       	ldi	r24, 0x01	; 1
    70e2:	80 93 2c 18 	sts	0x182C, r24
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    70e6:	10 92 8c 19 	sts	0x198C, r1
    70ea:	10 92 8b 19 	sts	0x198B, r1
						OCR4A = 0;
    70ee:	10 92 a9 00 	sts	0x00A9, r1
    70f2:	10 92 a8 00 	sts	0x00A8, r1
						OCR4B = 0;
    70f6:	10 92 ab 00 	sts	0x00AB, r1
    70fa:	10 92 aa 00 	sts	0x00AA, r1
						// right motor
						pwm_right = 0;
    70fe:	10 92 8e 19 	sts	0x198E, r1
    7102:	10 92 8d 19 	sts	0x198D, r1
						OCR3A = 0;
    7106:	10 92 99 00 	sts	0x0099, r1
    710a:	10 92 98 00 	sts	0x0098, r1
						OCR3B = 0;
    710e:	10 92 9b 00 	sts	0x009B, r1
    7112:	10 92 9a 00 	sts	0x009A, r1
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    7116:	2f 5f       	subi	r18, 0xFF	; 255
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    7118:	28 31       	cpi	r18, 0x18	; 24
    711a:	c0 f5       	brcc	.+112    	; 0x718c <__vector_29+0x514>
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    711c:	20 93 53 1a 	sts	0x1A53, r18
    7120:	22 ce       	rjmp	.-956    	; 0x6d66 <__vector_29+0xee>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    7122:	20 91 28 03 	lds	r18, 0x0328
    7126:	22 23       	and	r18, r18
    7128:	09 f4       	brne	.+2      	; 0x712c <__vector_29+0x4b4>
    712a:	1d ce       	rjmp	.-966    	; 0x6d66 <__vector_29+0xee>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    712c:	63 99       	sbic	0x0c, 3	; 12
    712e:	1b ce       	rjmp	.-970    	; 0x6d66 <__vector_29+0xee>
    7130:	64 99       	sbic	0x0c, 4	; 12
    7132:	19 ce       	rjmp	.-974    	; 0x6d66 <__vector_29+0xee>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    7134:	2f 5f       	subi	r18, 0xFF	; 255
    7136:	20 93 28 03 	sts	0x0328, r18
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    713a:	25 30       	cpi	r18, 0x05	; 5
    713c:	08 f4       	brcc	.+2      	; 0x7140 <__vector_29+0x4c8>
    713e:	13 ce       	rjmp	.-986    	; 0x6d66 <__vector_29+0xee>
					if(pwm_right != 0) {
    7140:	40 91 8d 19 	lds	r20, 0x198D
    7144:	50 91 8e 19 	lds	r21, 0x198E
    7148:	45 2b       	or	r20, r21
    714a:	51 f0       	breq	.+20     	; 0x7160 <__vector_29+0x4e8>
						right_vel_sum += value;
    714c:	40 91 93 19 	lds	r20, 0x1993
    7150:	50 91 94 19 	lds	r21, 0x1994
    7154:	84 0f       	add	r24, r20
    7156:	95 1f       	adc	r25, r21
    7158:	90 93 94 19 	sts	0x1994, r25
    715c:	80 93 93 19 	sts	0x1993, r24
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    7160:	28 30       	cpi	r18, 0x08	; 8
    7162:	09 f0       	breq	.+2      	; 0x7166 <__vector_29+0x4ee>
    7164:	00 ce       	rjmp	.-1024   	; 0x6d66 <__vector_29+0xee>
						firstSampleRight = 0;
    7166:	10 92 28 03 	sts	0x0328, r1
						compute_right_vel = 1;
    716a:	81 e0       	ldi	r24, 0x01	; 1
    716c:	80 93 29 03 	sts	0x0329, r24
    7170:	fa cd       	rjmp	.-1036   	; 0x6d66 <__vector_29+0xee>
				}
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
    7172:	20 91 9d 19 	lds	r18, 0x199D
    7176:	30 91 9e 19 	lds	r19, 0x199E
    717a:	82 0f       	add	r24, r18
    717c:	93 1f       	adc	r25, r19
			left_current_avg = left_current_avg >> 1;
    717e:	96 95       	lsr	r25
    7180:	87 95       	ror	r24
    7182:	90 93 9e 19 	sts	0x199E, r25
    7186:	80 93 9d 19 	sts	0x199D, r24
			break;
    718a:	ed cd       	rjmp	.-1062   	; 0x6d66 <__vector_29+0xee>
				}

			}			
			currentProx++;
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    718c:	10 92 53 1a 	sts	0x1A53, r1
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    7190:	81 e0       	ldi	r24, 0x01	; 1
    7192:	80 93 b7 19 	sts	0x19B7, r24
    7196:	e7 cd       	rjmp	.-1074   	; 0x6d66 <__vector_29+0xee>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    7198:	80 91 3c 18 	lds	r24, 0x183C
    719c:	81 11       	cpse	r24, r1
    719e:	08 c0       	rjmp	.+16     	; 0x71b0 <__vector_29+0x538>
					PORTJ &= 0xF0;	// ground
    71a0:	80 91 05 01 	lds	r24, 0x0105
    71a4:	80 7f       	andi	r24, 0xF0	; 240
    71a6:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    71aa:	12 b8       	out	0x02, r1	; 2
    71ac:	80 91 3c 18 	lds	r24, 0x183C
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    71b0:	81 30       	cpi	r24, 0x01	; 1
    71b2:	09 f4       	brne	.+2      	; 0x71b6 <__vector_29+0x53e>
    71b4:	af c0       	rjmp	.+350    	; 0x7314 <__vector_29+0x69c>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    71b6:	82 30       	cpi	r24, 0x02	; 2
    71b8:	09 f4       	brne	.+2      	; 0x71bc <__vector_29+0x544>
    71ba:	a7 c0       	rjmp	.+334    	; 0x730a <__vector_29+0x692>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    71bc:	80 91 52 1a 	lds	r24, 0x1A52
    71c0:	80 93 54 1a 	sts	0x1A54, r24
				leftChannelPhase = leftMotorPhase;
    71c4:	80 91 4f 1a 	lds	r24, 0x1A4F
    71c8:	80 93 bb 19 	sts	0x19BB, r24
				adcSaveDataTo = SKIP_SAMPLE;				
    71cc:	85 e0       	ldi	r24, 0x05	; 5
    71ce:	80 93 be 19 	sts	0x19BE, r24
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    71d2:	80 93 eb 17 	sts	0x17EB, r24
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    71d6:	82 e0       	ldi	r24, 0x02	; 2
    71d8:	80 93 bf 17 	sts	0x17BF, r24
				if(irCommTxSensorGroup==0) {
    71dc:	80 91 b0 17 	lds	r24, 0x17B0
    71e0:	81 11       	cpse	r24, r1
    71e2:	25 c0       	rjmp	.+74     	; 0x722e <__vector_29+0x5b6>
					irCommTxSensorGroup = 1;
    71e4:	81 e0       	ldi	r24, 0x01	; 1
    71e6:	80 93 b0 17 	sts	0x17B0, r24
    71ea:	f4 cd       	rjmp	.-1048   	; 0x6dd4 <__vector_29+0x15c>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    71ec:	80 91 b1 17 	lds	r24, 0x17B1
    71f0:	8f 5f       	subi	r24, 0xFF	; 255
    71f2:	80 93 b1 17 	sts	0x17B1, r24
				if(irCommTxDurationCycle == irCommTxDuration) {
    71f6:	90 e0       	ldi	r25, 0x00	; 0
    71f8:	20 91 b4 17 	lds	r18, 0x17B4
    71fc:	30 91 b5 17 	lds	r19, 0x17B5
    7200:	82 17       	cp	r24, r18
    7202:	93 07       	cpc	r25, r19
    7204:	09 f4       	brne	.+2      	; 0x7208 <__vector_29+0x590>
    7206:	68 c0       	rjmp	.+208    	; 0x72d8 <__vector_29+0x660>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    7208:	80 91 51 1a 	lds	r24, 0x1A51
    720c:	80 93 54 1a 	sts	0x1A54, r24
				rightChannelPhase = rightMotorPhase;
    7210:	80 91 50 1a 	lds	r24, 0x1A50
    7214:	80 93 bc 19 	sts	0x19BC, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    7218:	80 91 bb 19 	lds	r24, 0x19BB
    721c:	81 11       	cpse	r24, r1
    721e:	0a c0       	rjmp	.+20     	; 0x7234 <__vector_29+0x5bc>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    7220:	83 e0       	ldi	r24, 0x03	; 3
    7222:	80 93 be 19 	sts	0x19BE, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    7226:	84 e0       	ldi	r24, 0x04	; 4
    7228:	80 93 bf 17 	sts	0x17BF, r24
				break;
    722c:	d3 cd       	rjmp	.-1114   	; 0x6dd4 <__vector_29+0x15c>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    722e:	10 92 b0 17 	sts	0x17B0, r1
    7232:	d0 cd       	rjmp	.-1120   	; 0x6dd4 <__vector_29+0x15c>
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    7234:	81 30       	cpi	r24, 0x01	; 1
    7236:	09 f4       	brne	.+2      	; 0x723a <__vector_29+0x5c2>
    7238:	1c c2       	rjmp	.+1080   	; 0x7672 <__vector_29+0x9fa>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    723a:	85 e0       	ldi	r24, 0x05	; 5
    723c:	80 93 be 19 	sts	0x19BE, r24
    7240:	f2 cf       	rjmp	.-28     	; 0x7226 <__vector_29+0x5ae>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    7242:	81 e0       	ldi	r24, 0x01	; 1
    7244:	80 93 be 19 	sts	0x19BE, r24
    7248:	58 ce       	rjmp	.-848    	; 0x6efa <__vector_29+0x282>
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
			}

			if(currentProx & 0x01) {
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    724a:	fa 01       	movw	r30, r20
    724c:	e9 5f       	subi	r30, 0xF9	; 249
    724e:	f5 4e       	sbci	r31, 0xE5	; 229
    7250:	91 83       	std	Z+1, r25	; 0x01
    7252:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    7254:	20 31       	cpi	r18, 0x10	; 16
    7256:	08 f0       	brcs	.+2      	; 0x725a <__vector_29+0x5e2>
    7258:	21 cf       	rjmp	.-446    	; 0x709c <__vector_29+0x424>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    725a:	8c 33       	cpi	r24, 0x3C	; 60
    725c:	91 05       	cpc	r25, r1
    725e:	0c f4       	brge	.+2      	; 0x7262 <__vector_29+0x5ea>
    7260:	8b c1       	rjmp	.+790    	; 0x7578 <__vector_29+0x900>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    7262:	bc 01       	movw	r22, r24
    7264:	64 5c       	subi	r22, 0xC4	; 196
    7266:	7f 4f       	sbci	r23, 0xFF	; 255
    7268:	60 3f       	cpi	r22, 0xF0	; 240
    726a:	71 05       	cpc	r23, r1
    726c:	0c f0       	brlt	.+2      	; 0x7270 <__vector_29+0x5f8>
    726e:	cb c2       	rjmp	.+1430   	; 0x7806 <__vector_29+0xb8e>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    7270:	fa 01       	movw	r30, r20
    7272:	e9 55       	subi	r30, 0x59	; 89
    7274:	f6 4e       	sbci	r31, 0xE6	; 230
    7276:	cc 97       	sbiw	r24, 0x3c	; 60
    7278:	95 95       	asr	r25
    727a:	87 95       	ror	r24
    727c:	cc 96       	adiw	r24, 0x3c	; 60
    727e:	91 83       	std	Z+1, r25	; 0x01
    7280:	80 83       	st	Z, r24
    7282:	0c cf       	rjmp	.-488    	; 0x709c <__vector_29+0x424>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    7284:	10 92 b1 17 	sts	0x17B1, r1
					if(irCommTxPulseState == 0) {
    7288:	80 91 b6 17 	lds	r24, 0x17B6
    728c:	81 11       	cpse	r24, r1
    728e:	df c1       	rjmp	.+958    	; 0x764e <__vector_29+0x9d6>
						irCommTxPulseState = 1;
    7290:	81 e0       	ldi	r24, 0x01	; 1
    7292:	80 93 b6 17 	sts	0x17B6, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    7296:	80 91 b0 17 	lds	r24, 0x17B0
    729a:	81 11       	cpse	r24, r1
    729c:	17 c2       	rjmp	.+1070   	; 0x76cc <__vector_29+0xa54>
							PORTA = 0xAA;
    729e:	8a ea       	ldi	r24, 0xAA	; 170
    72a0:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    72a2:	80 91 b2 17 	lds	r24, 0x17B2
    72a6:	8f 5f       	subi	r24, 0xFF	; 255
    72a8:	80 93 b2 17 	sts	0x17B2, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    72ac:	90 91 b3 17 	lds	r25, 0x17B3
    72b0:	89 13       	cpse	r24, r25
    72b2:	10 ce       	rjmp	.-992    	; 0x6ed4 <__vector_29+0x25c>
						irCommTxBitCount++;
    72b4:	80 91 b7 17 	lds	r24, 0x17B7
    72b8:	8f 5f       	subi	r24, 0xFF	; 255
    72ba:	80 93 b7 17 	sts	0x17B7, r24
						if(irCommTxBitCount==12) {
    72be:	8c 30       	cpi	r24, 0x0C	; 12
    72c0:	09 f4       	brne	.+2      	; 0x72c4 <__vector_29+0x64c>
    72c2:	84 c2       	rjmp	.+1288   	; 0x77cc <__vector_29+0xb54>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    72c4:	82 e0       	ldi	r24, 0x02	; 2
    72c6:	80 93 eb 17 	sts	0x17EB, r24
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
    72ca:	82 e0       	ldi	r24, 0x02	; 2
    72cc:	80 93 bf 17 	sts	0x17BF, r24
						adcSaveDataTo = SKIP_SAMPLE;
    72d0:	85 e0       	ldi	r24, 0x05	; 5
    72d2:	80 93 be 19 	sts	0x19BE, r24
						break;
    72d6:	7e cd       	rjmp	.-1284   	; 0x6dd4 <__vector_29+0x15c>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    72d8:	10 92 b1 17 	sts	0x17B1, r1
					if(irCommTxPulseState == 0) {
    72dc:	80 91 b6 17 	lds	r24, 0x17B6
    72e0:	81 11       	cpse	r24, r1
    72e2:	b1 c1       	rjmp	.+866    	; 0x7646 <__vector_29+0x9ce>
						irCommTxPulseState = 1;
    72e4:	81 e0       	ldi	r24, 0x01	; 1
    72e6:	80 93 b6 17 	sts	0x17B6, r24
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    72ea:	80 91 b0 17 	lds	r24, 0x17B0
    72ee:	81 11       	cpse	r24, r1
    72f0:	f0 c1       	rjmp	.+992    	; 0x76d2 <__vector_29+0xa5a>
							PORTA = 0xAA;
    72f2:	8a ea       	ldi	r24, 0xAA	; 170
    72f4:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    72f6:	80 91 b2 17 	lds	r24, 0x17B2
    72fa:	8f 5f       	subi	r24, 0xFF	; 255
    72fc:	80 93 b2 17 	sts	0x17B2, r24
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    7300:	90 91 b3 17 	lds	r25, 0x17B3
    7304:	89 13       	cpse	r24, r25
    7306:	80 cf       	rjmp	.-256    	; 0x7208 <__vector_29+0x590>
    7308:	d5 cf       	rjmp	.-86     	; 0x72b4 <__vector_29+0x63c>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    730a:	8f ef       	ldi	r24, 0xFF	; 255
    730c:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximtiy
    7310:	12 b8       	out	0x02, r1	; 2
    7312:	54 cf       	rjmp	.-344    	; 0x71bc <__vector_29+0x544>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
    7314:	8f ef       	ldi	r24, 0xFF	; 255
    7316:	80 93 05 01 	sts	0x0105, r24
					PORTA = 0x00;	// proximity
    731a:	12 b8       	out	0x02, r1	; 2
    731c:	80 91 3c 18 	lds	r24, 0x183C
    7320:	4a cf       	rjmp	.-364    	; 0x71b6 <__vector_29+0x53e>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    7322:	80 91 53 1a 	lds	r24, 0x1A53
    7326:	8f 5f       	subi	r24, 0xFF	; 255
    7328:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    732c:	86 e0       	ldi	r24, 0x06	; 6
    732e:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 7;
    7332:	87 e0       	ldi	r24, 0x07	; 7
    7334:	80 93 e0 17 	sts	0x17E0, r24
				break;
    7338:	4d cd       	rjmp	.-1382   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    733a:	80 91 53 1a 	lds	r24, 0x1A53
    733e:	8f 5f       	subi	r24, 0xFF	; 255
    7340:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    7344:	86 e0       	ldi	r24, 0x06	; 6
    7346:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 6;
    734a:	80 93 e0 17 	sts	0x17E0, r24
				break;
    734e:	42 cd       	rjmp	.-1404   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 4;
				break;

			case 4:
				currentAdChannel = currentProx+1;
    7350:	80 91 53 1a 	lds	r24, 0x1A53
    7354:	8f 5f       	subi	r24, 0xFF	; 255
    7356:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    735a:	86 e0       	ldi	r24, 0x06	; 6
    735c:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 5;
    7360:	85 e0       	ldi	r24, 0x05	; 5
    7362:	80 93 e0 17 	sts	0x17E0, r24
				break;
    7366:	36 cd       	rjmp	.-1428   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    7368:	80 91 53 1a 	lds	r24, 0x1A53
    736c:	8f 5f       	subi	r24, 0xFF	; 255
    736e:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    7372:	86 e0       	ldi	r24, 0x06	; 6
    7374:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 4;
    7378:	84 e0       	ldi	r24, 0x04	; 4
    737a:	80 93 e0 17 	sts	0x17E0, r24
				break;
    737e:	2a cd       	rjmp	.-1452   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    7380:	80 91 53 1a 	lds	r24, 0x1A53
    7384:	8f 5f       	subi	r24, 0xFF	; 255
    7386:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    738a:	86 e0       	ldi	r24, 0x06	; 6
    738c:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 3;
    7390:	83 e0       	ldi	r24, 0x03	; 3
    7392:	80 93 e0 17 	sts	0x17E0, r24
				break;
    7396:	1e cd       	rjmp	.-1476   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    7398:	80 91 53 1a 	lds	r24, 0x1A53
    739c:	8f 5f       	subi	r24, 0xFF	; 255
    739e:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    73a2:	86 e0       	ldi	r24, 0x06	; 6
    73a4:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 2;
    73a8:	82 e0       	ldi	r24, 0x02	; 2
    73aa:	80 93 e0 17 	sts	0x17E0, r24
				break;
    73ae:	12 cd       	rjmp	.-1500   	; 0x6dd4 <__vector_29+0x15c>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    73b0:	10 92 53 1a 	sts	0x1A53, r1
				currentAdChannel = currentProx+1;				
    73b4:	81 e0       	ldi	r24, 0x01	; 1
    73b6:	80 93 54 1a 	sts	0x1A54, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    73ba:	96 e0       	ldi	r25, 0x06	; 6
    73bc:	90 93 be 19 	sts	0x19BE, r25
				irCommAdcRxState = 1;
    73c0:	80 93 e0 17 	sts	0x17E0, r24
				break;
    73c4:	07 cd       	rjmp	.-1522   	; 0x6dd4 <__vector_29+0x15c>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    73c6:	85 e0       	ldi	r24, 0x05	; 5
    73c8:	80 93 be 19 	sts	0x19BE, r24
				break;
    73cc:	03 cd       	rjmp	.-1530   	; 0x6dd4 <__vector_29+0x15c>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    73ce:	80 91 51 1a 	lds	r24, 0x1A51
    73d2:	80 93 54 1a 	sts	0x1A54, r24
				rightChannelPhase = rightMotorPhase;
    73d6:	80 91 50 1a 	lds	r24, 0x1A50
    73da:	80 93 bc 19 	sts	0x19BC, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    73de:	80 91 bb 19 	lds	r24, 0x19BB
    73e2:	81 11       	cpse	r24, r1
    73e4:	3f c1       	rjmp	.+638    	; 0x7664 <__vector_29+0x9ec>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    73e6:	83 e0       	ldi	r24, 0x03	; 3
    73e8:	80 93 be 19 	sts	0x19BE, r24
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    73ec:	90 91 c8 17 	lds	r25, 0x17C8
    73f0:	9e 3f       	cpi	r25, 0xFE	; 254
    73f2:	18 f4       	brcc	.+6      	; 0x73fa <__vector_29+0x782>
					irCommRxBitSkipped++;
    73f4:	9f 5f       	subi	r25, 0xFF	; 255
    73f6:	90 93 c8 17 	sts	0x17C8, r25
				}
				irCommRxWindowSamples++;
    73fa:	80 91 df 17 	lds	r24, 0x17DF
    73fe:	8f 5f       	subi	r24, 0xFF	; 255
    7400:	80 93 df 17 	sts	0x17DF, r24
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    7404:	20 91 eb 17 	lds	r18, 0x17EB
    7408:	24 30       	cpi	r18, 0x04	; 4
    740a:	09 f4       	brne	.+2      	; 0x740e <__vector_29+0x796>
    740c:	54 c1       	rjmp	.+680    	; 0x76b6 <__vector_29+0xa3e>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    740e:	84 31       	cpi	r24, 0x14	; 20
    7410:	09 f4       	brne	.+2      	; 0x7414 <__vector_29+0x79c>
    7412:	86 c1       	rjmp	.+780    	; 0x7720 <__vector_29+0xaa8>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    7414:	8b e0       	ldi	r24, 0x0B	; 11
    7416:	80 93 e0 17 	sts	0x17E0, r24
				break;
    741a:	dc cc       	rjmp	.-1608   	; 0x6dd4 <__vector_29+0x15c>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    741c:	80 91 52 1a 	lds	r24, 0x1A52
    7420:	80 93 54 1a 	sts	0x1A54, r24
				leftChannelPhase = leftMotorPhase;
    7424:	80 91 4f 1a 	lds	r24, 0x1A4F
    7428:	80 93 bb 19 	sts	0x19BB, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    742c:	80 91 bc 19 	lds	r24, 0x19BC
    7430:	81 11       	cpse	r24, r1
    7432:	23 c1       	rjmp	.+582    	; 0x767a <__vector_29+0xa02>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    7434:	81 e0       	ldi	r24, 0x01	; 1
    7436:	80 93 be 19 	sts	0x19BE, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    743a:	8a e0       	ldi	r24, 0x0A	; 10
    743c:	80 93 e0 17 	sts	0x17E0, r24
				break;
    7440:	c9 cc       	rjmp	.-1646   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    7442:	80 91 51 1a 	lds	r24, 0x1A51
    7446:	80 93 54 1a 	sts	0x1A54, r24
				rightChannelPhase = rightMotorPhase;
    744a:	80 91 50 1a 	lds	r24, 0x1A50
    744e:	80 93 bc 19 	sts	0x19BC, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    7452:	80 91 bb 19 	lds	r24, 0x19BB
    7456:	81 11       	cpse	r24, r1
    7458:	17 c1       	rjmp	.+558    	; 0x7688 <__vector_29+0xa10>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    745a:	83 e0       	ldi	r24, 0x03	; 3
    745c:	80 93 be 19 	sts	0x19BE, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    7460:	89 e0       	ldi	r24, 0x09	; 9
    7462:	80 93 e0 17 	sts	0x17E0, r24
				break;
    7466:	b6 cc       	rjmp	.-1684   	; 0x6dd4 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    7468:	80 91 52 1a 	lds	r24, 0x1A52
    746c:	80 93 54 1a 	sts	0x1A54, r24
				leftChannelPhase = leftMotorPhase;
    7470:	80 91 4f 1a 	lds	r24, 0x1A4F
    7474:	80 93 bb 19 	sts	0x19BB, r24
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    7478:	86 e0       	ldi	r24, 0x06	; 6
    747a:	80 93 be 19 	sts	0x19BE, r24
				irCommAdcRxState = 8;
    747e:	88 e0       	ldi	r24, 0x08	; 8
    7480:	80 93 e0 17 	sts	0x17E0, r24
				break;
    7484:	a7 cc       	rjmp	.-1714   	; 0x6dd4 <__vector_29+0x15c>
				*/
				irCommAdcRxState = 11;
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    7486:	10 92 54 1a 	sts	0x1A54, r1
				if(rightChannelPhase == ACTIVE_PHASE) {
    748a:	80 91 bc 19 	lds	r24, 0x19BC
    748e:	81 11       	cpse	r24, r1
    7490:	e2 c0       	rjmp	.+452    	; 0x7656 <__vector_29+0x9de>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    7492:	81 e0       	ldi	r24, 0x01	; 1
    7494:	80 93 be 19 	sts	0x19BE, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    7498:	10 92 e0 17 	sts	0x17E0, r1
				break;
    749c:	9b cc       	rjmp	.-1738   	; 0x6dd4 <__vector_29+0x15c>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    749e:	80 91 52 1a 	lds	r24, 0x1A52
    74a2:	80 93 54 1a 	sts	0x1A54, r24
				leftChannelPhase = leftMotorPhase;
    74a6:	80 91 4f 1a 	lds	r24, 0x1A4F
    74aa:	80 93 bb 19 	sts	0x19BB, r24
				if(rightChannelPhase == ACTIVE_PHASE) {
    74ae:	80 91 bc 19 	lds	r24, 0x19BC
    74b2:	81 11       	cpse	r24, r1
    74b4:	3c c0       	rjmp	.+120    	; 0x752e <__vector_29+0x8b6>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    74b6:	81 e0       	ldi	r24, 0x01	; 1
    74b8:	80 93 be 19 	sts	0x19BE, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    74bc:	84 e0       	ldi	r24, 0x04	; 4
    74be:	80 93 bd 19 	sts	0x19BD, r24
				break;
    74c2:	88 cc       	rjmp	.-1776   	; 0x6dd4 <__vector_29+0x15c>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    74c4:	80 91 51 1a 	lds	r24, 0x1A51
    74c8:	80 93 54 1a 	sts	0x1A54, r24
				rightChannelPhase = rightMotorPhase;
    74cc:	80 91 50 1a 	lds	r24, 0x1A50
    74d0:	80 93 bc 19 	sts	0x19BC, r24
				if(leftChannelPhase == ACTIVE_PHASE) {
    74d4:	80 91 bb 19 	lds	r24, 0x19BB
    74d8:	81 11       	cpse	r24, r1
    74da:	3d c0       	rjmp	.+122    	; 0x7556 <__vector_29+0x8de>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    74dc:	83 e0       	ldi	r24, 0x03	; 3
    74de:	80 93 be 19 	sts	0x19BE, r24
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    74e2:	83 e0       	ldi	r24, 0x03	; 3
    74e4:	80 93 bd 19 	sts	0x19BD, r24
				break;
    74e8:	75 cc       	rjmp	.-1814   	; 0x6dd4 <__vector_29+0x15c>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    74ea:	80 91 53 1a 	lds	r24, 0x1A53
    74ee:	86 95       	lsr	r24
    74f0:	80 93 54 1a 	sts	0x1A54, r24
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    74f4:	80 91 bc 19 	lds	r24, 0x19BC
    74f8:	81 11       	cpse	r24, r1
    74fa:	20 c0       	rjmp	.+64     	; 0x753c <__vector_29+0x8c4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    74fc:	81 e0       	ldi	r24, 0x01	; 1
    74fe:	80 93 be 19 	sts	0x19BE, r24
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    7502:	81 e0       	ldi	r24, 0x01	; 1
    7504:	80 93 bd 19 	sts	0x19BD, r24
				break;
    7508:	65 cc       	rjmp	.-1846   	; 0x6dd4 <__vector_29+0x15c>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    750a:	30 91 b8 19 	lds	r19, 0x19B8
    750e:	32 30       	cpi	r19, 0x02	; 2
    7510:	09 f0       	breq	.+2      	; 0x7514 <__vector_29+0x89c>
    7512:	7b cd       	rjmp	.-1290   	; 0x700a <__vector_29+0x392>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    7514:	90 93 ba 19 	sts	0x19BA, r25
    7518:	80 93 b9 19 	sts	0x19B9, r24
				measBattery = 0;
    751c:	10 92 b8 19 	sts	0x19B8, r1
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    7520:	46 98       	cbi	0x08, 6	; 8
    7522:	20 91 53 1a 	lds	r18, 0x1A53
    7526:	79 cd       	rjmp	.-1294   	; 0x701a <__vector_29+0x3a2>
						// right motor
						pwm_right = 0;
						OCR3A = 0;
						OCR3B = 0;
					} else {
						cliffDetectedFlag = 0;
    7528:	10 92 2c 18 	sts	0x182C, r1
    752c:	f4 cd       	rjmp	.-1048   	; 0x7116 <__vector_29+0x49e>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    752e:	81 30       	cpi	r24, 0x01	; 1
    7530:	09 f4       	brne	.+2      	; 0x7534 <__vector_29+0x8bc>
    7532:	b9 c0       	rjmp	.+370    	; 0x76a6 <__vector_29+0xa2e>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    7534:	85 e0       	ldi	r24, 0x05	; 5
    7536:	80 93 be 19 	sts	0x19BE, r24
    753a:	c0 cf       	rjmp	.-128    	; 0x74bc <__vector_29+0x844>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    753c:	81 30       	cpi	r24, 0x01	; 1
    753e:	09 f4       	brne	.+2      	; 0x7542 <__vector_29+0x8ca>
    7540:	ae c0       	rjmp	.+348    	; 0x769e <__vector_29+0xa26>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    7542:	85 e0       	ldi	r24, 0x05	; 5
    7544:	80 93 be 19 	sts	0x19BE, r24
    7548:	dc cf       	rjmp	.-72     	; 0x7502 <__vector_29+0x88a>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    754a:	91 30       	cpi	r25, 0x01	; 1
    754c:	09 f0       	breq	.+2      	; 0x7550 <__vector_29+0x8d8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    754e:	85 e0       	ldi	r24, 0x05	; 5
    7550:	80 93 be 19 	sts	0x19BE, r24
    7554:	2e cd       	rjmp	.-1444   	; 0x6fb2 <__vector_29+0x33a>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    7556:	81 30       	cpi	r24, 0x01	; 1
    7558:	09 f4       	brne	.+2      	; 0x755c <__vector_29+0x8e4>
    755a:	a9 c0       	rjmp	.+338    	; 0x76ae <__vector_29+0xa36>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    755c:	85 e0       	ldi	r24, 0x05	; 5
    755e:	80 93 be 19 	sts	0x19BE, r24
    7562:	bf cf       	rjmp	.-130    	; 0x74e2 <__vector_29+0x86a>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    7564:	fa 01       	movw	r30, r20
    7566:	e9 5f       	subi	r30, 0xF9	; 249
    7568:	f5 4e       	sbci	r31, 0xE5	; 229
    756a:	11 82       	std	Z+1, r1	; 0x01
    756c:	10 82       	st	Z, r1
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    756e:	20 31       	cpi	r18, 0x10	; 16
    7570:	08 f0       	brcs	.+2      	; 0x7574 <__vector_29+0x8fc>
    7572:	94 cd       	rjmp	.-1240   	; 0x709c <__vector_29+0x424>
    7574:	80 e0       	ldi	r24, 0x00	; 0
    7576:	90 e0       	ldi	r25, 0x00	; 0
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    7578:	fa 01       	movw	r30, r20
    757a:	e9 55       	subi	r30, 0x59	; 89
    757c:	f6 4e       	sbci	r31, 0xE6	; 230
    757e:	91 83       	std	Z+1, r25	; 0x01
    7580:	80 83       	st	Z, r24
    7582:	8c cd       	rjmp	.-1256   	; 0x709c <__vector_29+0x424>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    7584:	80 91 b8 19 	lds	r24, 0x19B8
    7588:	81 30       	cpi	r24, 0x01	; 1
    758a:	09 f0       	breq	.+2      	; 0x758e <__vector_29+0x916>
    758c:	23 cc       	rjmp	.-1978   	; 0x6dd4 <__vector_29+0x15c>
					measBattery=2;
    758e:	82 e0       	ldi	r24, 0x02	; 2
    7590:	80 93 b8 19 	sts	0x19B8, r24
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    7594:	46 9a       	sbi	0x08, 6	; 8
    7596:	80 91 53 1a 	lds	r24, 0x1A53
    759a:	12 cd       	rjmp	.-1500   	; 0x6fc0 <__vector_29+0x348>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    759c:	80 91 53 1a 	lds	r24, 0x1A53
    75a0:	87 31       	cpi	r24, 0x17	; 23
    75a2:	09 f0       	breq	.+2      	; 0x75a6 <__vector_29+0x92e>
    75a4:	17 cc       	rjmp	.-2002   	; 0x6dd4 <__vector_29+0x15c>
					currentAdChannel = 0;	// prox0					
    75a6:	10 92 54 1a 	sts	0x1A54, r1
					measBattery = 0;
    75aa:	10 92 b8 19 	sts	0x19B8, r1
					irCommAdcRxState = 0;					
    75ae:	10 92 e0 17 	sts	0x17E0, r1
					irCommRxWindowSamples = 0;
    75b2:	10 92 df 17 	sts	0x17DF, r1
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    75b6:	e0 91 75 21 	lds	r30, 0x2175
    75ba:	f0 91 76 21 	lds	r31, 0x2176
    75be:	80 e1       	ldi	r24, 0x10	; 16
    75c0:	df 01       	movw	r26, r30
    75c2:	1d 92       	st	X+, r1
    75c4:	8a 95       	dec	r24
    75c6:	e9 f7       	brne	.-6      	; 0x75c2 <__vector_29+0x94a>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    75c8:	40 e1       	ldi	r20, 0x10	; 16
    75ca:	50 e0       	ldi	r21, 0x00	; 0
    75cc:	6f ef       	ldi	r22, 0xFF	; 255
    75ce:	70 e0       	ldi	r23, 0x00	; 0
    75d0:	80 91 01 1e 	lds	r24, 0x1E01
    75d4:	90 91 02 1e 	lds	r25, 0x1E02
    75d8:	0e 94 f0 59 	call	0xb3e0	; 0xb3e0 <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    75dc:	c0 93 ec 17 	sts	0x17EC, r28
    75e0:	c0 91 ee 17 	lds	r28, 0x17EE
    75e4:	e8 cb       	rjmp	.-2096   	; 0x6db6 <__vector_29+0x13e>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    75e6:	90 91 3c 18 	lds	r25, 0x183C
    75ea:	91 11       	cpse	r25, r1
    75ec:	10 c0       	rjmp	.+32     	; 0x760e <__vector_29+0x996>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    75ee:	90 e0       	ldi	r25, 0x00	; 0
    75f0:	40 97       	sbiw	r24, 0x10	; 16
    75f2:	95 95       	asr	r25
    75f4:	87 95       	ror	r24
    75f6:	21 e0       	ldi	r18, 0x01	; 1
    75f8:	30 e0       	ldi	r19, 0x00	; 0
    75fa:	b9 01       	movw	r22, r18
    75fc:	02 c0       	rjmp	.+4      	; 0x7602 <__vector_29+0x98a>
    75fe:	66 0f       	add	r22, r22
    7600:	77 1f       	adc	r23, r23
    7602:	8a 95       	dec	r24
    7604:	e2 f7       	brpl	.-8      	; 0x75fe <__vector_29+0x986>
    7606:	60 93 05 01 	sts	0x0105, r22
    760a:	90 91 3c 18 	lds	r25, 0x183C
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    760e:	91 30       	cpi	r25, 0x01	; 1
    7610:	09 f4       	brne	.+2      	; 0x7614 <__vector_29+0x99c>
    7612:	62 c0       	rjmp	.+196    	; 0x76d8 <__vector_29+0xa60>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    7614:	92 30       	cpi	r25, 0x02	; 2
    7616:	09 f0       	breq	.+2      	; 0x761a <__vector_29+0x9a2>
    7618:	dd cb       	rjmp	.-2118   	; 0x6dd4 <__vector_29+0x15c>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    761a:	40 91 05 01 	lds	r20, 0x0105
    761e:	80 91 53 1a 	lds	r24, 0x1A53
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	40 97       	sbiw	r24, 0x10	; 16
    7626:	95 95       	asr	r25
    7628:	87 95       	ror	r24
    762a:	21 e0       	ldi	r18, 0x01	; 1
    762c:	30 e0       	ldi	r19, 0x00	; 0
    762e:	b9 01       	movw	r22, r18
    7630:	02 c0       	rjmp	.+4      	; 0x7636 <__vector_29+0x9be>
    7632:	66 0f       	add	r22, r22
    7634:	77 1f       	adc	r23, r23
    7636:	8a 95       	dec	r24
    7638:	e2 f7       	brpl	.-8      	; 0x7632 <__vector_29+0x9ba>
    763a:	cb 01       	movw	r24, r22
    763c:	80 95       	com	r24
    763e:	84 23       	and	r24, r20
    7640:	80 93 05 01 	sts	0x0105, r24
    7644:	c7 cb       	rjmp	.-2162   	; 0x6dd4 <__vector_29+0x15c>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    7646:	10 92 b6 17 	sts	0x17B6, r1
						PORTA = 0x00;
    764a:	12 b8       	out	0x02, r1	; 2
    764c:	54 ce       	rjmp	.-856    	; 0x72f6 <__vector_29+0x67e>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    764e:	10 92 b6 17 	sts	0x17B6, r1
						PORTA = 0x00;
    7652:	12 b8       	out	0x02, r1	; 2
    7654:	26 ce       	rjmp	.-948    	; 0x72a2 <__vector_29+0x62a>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    7656:	81 30       	cpi	r24, 0x01	; 1
    7658:	09 f4       	brne	.+2      	; 0x765c <__vector_29+0x9e4>
    765a:	5e c0       	rjmp	.+188    	; 0x7718 <__vector_29+0xaa0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    765c:	85 e0       	ldi	r24, 0x05	; 5
    765e:	80 93 be 19 	sts	0x19BE, r24
    7662:	1a cf       	rjmp	.-460    	; 0x7498 <__vector_29+0x820>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    7664:	81 30       	cpi	r24, 0x01	; 1
    7666:	09 f4       	brne	.+2      	; 0x766a <__vector_29+0x9f2>
    7668:	4f c0       	rjmp	.+158    	; 0x7708 <__vector_29+0xa90>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    766a:	85 e0       	ldi	r24, 0x05	; 5
    766c:	80 93 be 19 	sts	0x19BE, r24
    7670:	bd ce       	rjmp	.-646    	; 0x73ec <__vector_29+0x774>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    7672:	84 e0       	ldi	r24, 0x04	; 4
    7674:	80 93 be 19 	sts	0x19BE, r24
    7678:	d6 cd       	rjmp	.-1108   	; 0x7226 <__vector_29+0x5ae>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    767a:	81 30       	cpi	r24, 0x01	; 1
    767c:	09 f4       	brne	.+2      	; 0x7680 <__vector_29+0xa08>
    767e:	a2 c0       	rjmp	.+324    	; 0x77c4 <__vector_29+0xb4c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    7680:	85 e0       	ldi	r24, 0x05	; 5
    7682:	80 93 be 19 	sts	0x19BE, r24
    7686:	d9 ce       	rjmp	.-590    	; 0x743a <__vector_29+0x7c2>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    7688:	81 30       	cpi	r24, 0x01	; 1
    768a:	09 f4       	brne	.+2      	; 0x768e <__vector_29+0xa16>
    768c:	41 c0       	rjmp	.+130    	; 0x7710 <__vector_29+0xa98>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    768e:	85 e0       	ldi	r24, 0x05	; 5
    7690:	80 93 be 19 	sts	0x19BE, r24
    7694:	e5 ce       	rjmp	.-566    	; 0x7460 <__vector_29+0x7e8>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    7696:	82 e0       	ldi	r24, 0x02	; 2
    7698:	80 93 be 19 	sts	0x19BE, r24
    769c:	2e cc       	rjmp	.-1956   	; 0x6efa <__vector_29+0x282>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    769e:	82 e0       	ldi	r24, 0x02	; 2
    76a0:	80 93 be 19 	sts	0x19BE, r24
    76a4:	2e cf       	rjmp	.-420    	; 0x7502 <__vector_29+0x88a>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    76a6:	82 e0       	ldi	r24, 0x02	; 2
    76a8:	80 93 be 19 	sts	0x19BE, r24
    76ac:	07 cf       	rjmp	.-498    	; 0x74bc <__vector_29+0x844>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    76ae:	84 e0       	ldi	r24, 0x04	; 4
    76b0:	80 93 be 19 	sts	0x19BE, r24
    76b4:	16 cf       	rjmp	.-468    	; 0x74e2 <__vector_29+0x86a>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    76b6:	10 92 df 17 	sts	0x17DF, r1
					if(irCommRxBitSkipped >= irCommShiftCount) {
    76ba:	80 91 d5 17 	lds	r24, 0x17D5
    76be:	98 17       	cp	r25, r24
    76c0:	08 f4       	brcc	.+2      	; 0x76c4 <__vector_29+0xa4c>
    76c2:	a8 ce       	rjmp	.-688    	; 0x7414 <__vector_29+0x79c>
						irCommState = IRCOMM_RX_WAITING_BIT;
    76c4:	85 e0       	ldi	r24, 0x05	; 5
    76c6:	80 93 eb 17 	sts	0x17EB, r24
    76ca:	a4 ce       	rjmp	.-696    	; 0x7414 <__vector_29+0x79c>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    76cc:	85 e5       	ldi	r24, 0x55	; 85
    76ce:	82 b9       	out	0x02, r24	; 2
    76d0:	e8 cd       	rjmp	.-1072   	; 0x72a2 <__vector_29+0x62a>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    76d2:	85 e5       	ldi	r24, 0x55	; 85
    76d4:	82 b9       	out	0x02, r24	; 2
    76d6:	0f ce       	rjmp	.-994    	; 0x72f6 <__vector_29+0x67e>
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    76d8:	40 91 05 01 	lds	r20, 0x0105
    76dc:	80 91 53 1a 	lds	r24, 0x1A53
    76e0:	90 e0       	ldi	r25, 0x00	; 0
    76e2:	40 97       	sbiw	r24, 0x10	; 16
    76e4:	95 95       	asr	r25
    76e6:	87 95       	ror	r24
    76e8:	21 e0       	ldi	r18, 0x01	; 1
    76ea:	30 e0       	ldi	r19, 0x00	; 0
    76ec:	d9 01       	movw	r26, r18
    76ee:	02 c0       	rjmp	.+4      	; 0x76f4 <__vector_29+0xa7c>
    76f0:	aa 0f       	add	r26, r26
    76f2:	bb 1f       	adc	r27, r27
    76f4:	8a 95       	dec	r24
    76f6:	e2 f7       	brpl	.-8      	; 0x76f0 <__vector_29+0xa78>
    76f8:	cd 01       	movw	r24, r26
    76fa:	80 95       	com	r24
    76fc:	84 23       	and	r24, r20
    76fe:	80 93 05 01 	sts	0x0105, r24
    7702:	90 91 3c 18 	lds	r25, 0x183C
    7706:	86 cf       	rjmp	.-244    	; 0x7614 <__vector_29+0x99c>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    7708:	84 e0       	ldi	r24, 0x04	; 4
    770a:	80 93 be 19 	sts	0x19BE, r24
    770e:	6e ce       	rjmp	.-804    	; 0x73ec <__vector_29+0x774>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    7710:	84 e0       	ldi	r24, 0x04	; 4
    7712:	80 93 be 19 	sts	0x19BE, r24
    7716:	a4 ce       	rjmp	.-696    	; 0x7460 <__vector_29+0x7e8>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    7718:	82 e0       	ldi	r24, 0x02	; 2
    771a:	80 93 be 19 	sts	0x19BE, r24
    771e:	bc ce       	rjmp	.-648    	; 0x7498 <__vector_29+0x820>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    7720:	10 92 df 17 	sts	0x17DF, r1
					irCommTempPointer = irCommProxValuesCurr;
    7724:	80 91 83 20 	lds	r24, 0x2083
    7728:	90 91 84 20 	lds	r25, 0x2084
					irCommProxValuesCurr = irCommProxValuesAdc;
    772c:	20 91 95 20 	lds	r18, 0x2095
    7730:	30 91 96 20 	lds	r19, 0x2096
    7734:	30 93 84 20 	sts	0x2084, r19
    7738:	20 93 83 20 	sts	0x2083, r18
					irCommProxValuesAdc = irCommTempPointer;
    773c:	90 93 96 20 	sts	0x2096, r25
    7740:	80 93 95 20 	sts	0x2095, r24
					irCommTempPointer = irCommMaxSensorValueCurr;
    7744:	e0 91 e0 1d 	lds	r30, 0x1DE0
    7748:	f0 91 e1 1d 	lds	r31, 0x1DE1
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    774c:	80 91 75 21 	lds	r24, 0x2175
    7750:	90 91 76 21 	lds	r25, 0x2176
    7754:	90 93 e1 1d 	sts	0x1DE1, r25
    7758:	80 93 e0 1d 	sts	0x1DE0, r24
					irCommMaxSensorValueAdc = irCommTempPointer;
    775c:	f0 93 76 21 	sts	0x2176, r31
    7760:	e0 93 75 21 	sts	0x2175, r30
					irCommTempPointer = irCommMinSensorValueCurr;
    7764:	80 91 de 1d 	lds	r24, 0x1DDE
    7768:	90 91 df 1d 	lds	r25, 0x1DDF
    776c:	90 93 b3 21 	sts	0x21B3, r25
    7770:	80 93 b2 21 	sts	0x21B2, r24
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    7774:	20 91 01 1e 	lds	r18, 0x1E01
    7778:	30 91 02 1e 	lds	r19, 0x1E02
    777c:	30 93 df 1d 	sts	0x1DDF, r19
    7780:	20 93 de 1d 	sts	0x1DDE, r18
					irCommMinSensorValueAdc = irCommTempPointer;
    7784:	90 93 02 1e 	sts	0x1E02, r25
    7788:	80 93 01 1e 	sts	0x1E01, r24
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    778c:	80 e1       	ldi	r24, 0x10	; 16
    778e:	df 01       	movw	r26, r30
    7790:	1d 92       	st	X+, r1
    7792:	8a 95       	dec	r24
    7794:	e9 f7       	brne	.-6      	; 0x7790 <__vector_29+0xb18>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    7796:	40 e1       	ldi	r20, 0x10	; 16
    7798:	50 e0       	ldi	r21, 0x00	; 0
    779a:	6f ef       	ldi	r22, 0xFF	; 255
    779c:	70 e0       	ldi	r23, 0x00	; 0
    779e:	80 91 01 1e 	lds	r24, 0x1E01
    77a2:	90 91 02 1e 	lds	r25, 0x1E02
    77a6:	0e 94 f0 59 	call	0xb3e0	; 0xb3e0 <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    77aa:	80 91 eb 17 	lds	r24, 0x17EB
    77ae:	81 30       	cpi	r24, 0x01	; 1
    77b0:	21 f1       	breq	.+72     	; 0x77fa <__vector_29+0xb82>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    77b2:	80 91 eb 17 	lds	r24, 0x17EB
    77b6:	85 30       	cpi	r24, 0x05	; 5
    77b8:	09 f0       	breq	.+2      	; 0x77bc <__vector_29+0xb44>
    77ba:	2c ce       	rjmp	.-936    	; 0x7414 <__vector_29+0x79c>
						irCommState = IRCOMM_RX_READ_BIT;
    77bc:	86 e0       	ldi	r24, 0x06	; 6
    77be:	80 93 eb 17 	sts	0x17EB, r24
    77c2:	28 ce       	rjmp	.-944    	; 0x7414 <__vector_29+0x79c>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    77c4:	82 e0       	ldi	r24, 0x02	; 2
    77c6:	80 93 be 19 	sts	0x19BE, r24
    77ca:	37 ce       	rjmp	.-914    	; 0x743a <__vector_29+0x7c2>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    77cc:	81 e0       	ldi	r24, 0x01	; 1
    77ce:	80 93 eb 17 	sts	0x17EB, r24
							irCommTxByteEnqueued = 0;
    77d2:	10 92 bd 17 	sts	0x17BD, r1
							adcSamplingState = 0;
    77d6:	10 92 bd 19 	sts	0x19BD, r1
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    77da:	10 92 ec 17 	sts	0x17EC, r1
							irCommInitReceiver();
    77de:	0e 94 79 02 	call	0x4f2	; 0x4f2 <irCommInitReceiver>
							PORTA = 0x00;
    77e2:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    77e4:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    77e8:	60 93 b9 17 	sts	0x17B9, r22
    77ec:	70 93 ba 17 	sts	0x17BA, r23
    77f0:	80 93 bb 17 	sts	0x17BB, r24
    77f4:	90 93 bc 17 	sts	0x17BC, r25
    77f8:	68 cd       	rjmp	.-1328   	; 0x72ca <__vector_29+0x652>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    77fa:	82 e0       	ldi	r24, 0x02	; 2
    77fc:	80 93 eb 17 	sts	0x17EB, r24
						irCommRxBitSkipped = 0;
    7800:	10 92 c8 17 	sts	0x17C8, r1
    7804:	d6 cf       	rjmp	.-84     	; 0x77b2 <__vector_29+0xb3a>

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    7806:	bc 01       	movw	r22, r24
    7808:	64 5d       	subi	r22, 0xD4	; 212
    780a:	7e 4f       	sbci	r23, 0xFE	; 254
    780c:	60 3d       	cpi	r22, 0xD0	; 208
    780e:	72 40       	sbci	r23, 0x02	; 2
    7810:	0c f0       	brlt	.+2      	; 0x7814 <__vector_29+0xb9c>
    7812:	35 cc       	rjmp	.-1942   	; 0x707e <__vector_29+0x406>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    7814:	fa 01       	movw	r30, r20
    7816:	e9 55       	subi	r30, 0x59	; 89
    7818:	f6 4e       	sbci	r31, 0xE6	; 230
    781a:	84 5b       	subi	r24, 0xB4	; 180
    781c:	91 09       	sbc	r25, r1
    781e:	95 95       	asr	r25
    7820:	87 95       	ror	r24
    7822:	95 95       	asr	r25
    7824:	87 95       	ror	r24
    7826:	88 58       	subi	r24, 0x88	; 136
    7828:	9f 4f       	sbci	r25, 0xFF	; 255
    782a:	91 83       	std	Z+1, r25	; 0x01
    782c:	80 83       	st	Z, r24
    782e:	36 cc       	rjmp	.-1940   	; 0x709c <__vector_29+0x424>

00007830 <initAccelerometer>:

void initAccelerometer() {

	unsigned char ret;

	i2c_init();		// init I2C bus
    7830:	0e 94 48 43 	call	0x8690	; 0x8690 <i2c_init>
unsigned char initMMA7455L() {

	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7834:	80 91 21 03 	lds	r24, 0x0321
    7838:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    783c:	81 11       	cpse	r24, r1
    783e:	08 c0       	rjmp	.+16     	; 0x7850 <initAccelerometer+0x20>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x16);	// power register
    7840:	86 e1       	ldi	r24, 0x16	; 22
    7842:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_write(0x45);	// measurement mode; 2g
    7846:	85 e4       	ldi	r24, 0x45	; 69
    7848:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    784c:	0c 94 94 43 	jmp	0x8728	; 0x8728 <i2c_stop>
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    7850:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>
	i2c_init();		// init I2C bus

	ret = initMMA7455L();

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
    7854:	86 ea       	ldi	r24, 0xA6	; 166
    7856:	90 e0       	ldi	r25, 0x00	; 0
    7858:	90 93 22 03 	sts	0x0322, r25
    785c:	80 93 21 03 	sts	0x0321, r24
unsigned char initADXL345() {
	
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7860:	86 ea       	ldi	r24, 0xA6	; 166
    7862:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7866:	81 11       	cpse	r24, r1
    7868:	28 c0       	rjmp	.+80     	; 0x78ba <initAccelerometer+0x8a>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2D);	// power control register
    786a:	8d e2       	ldi	r24, 0x2D	; 45
    786c:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_write(0x08);	// measurement mode
    7870:	88 e0       	ldi	r24, 0x08	; 8
    7872:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7876:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    787a:	80 91 21 03 	lds	r24, 0x0321
    787e:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    7882:	81 11       	cpse	r24, r1
    7884:	1a c0       	rjmp	.+52     	; 0x78ba <initAccelerometer+0x8a>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x31);	// Data format register
    7886:	81 e3       	ldi	r24, 0x31	; 49
    7888:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_write(0x00);	// set to 10-bits resolution; 2g sensitivity
    788c:	80 e0       	ldi	r24, 0x00	; 0
    788e:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    7892:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>
    }

	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    7896:	80 91 21 03 	lds	r24, 0x0321
    789a:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
    if (ret) {				// failed to issue start condition, possibly no device found
    789e:	81 11       	cpse	r24, r1
    78a0:	0c c0       	rjmp	.+24     	; 0x78ba <initAccelerometer+0x8a>
        i2c_stop();
		return 1;
    }else {					// issuing start condition ok, device accessible
        i2c_write(0x2C);	// data rate register
    78a2:	8c e2       	ldi	r24, 0x2C	; 44
    78a4:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_write(0x09);	// set 50 Hz output data rate
    78a8:	89 e0       	ldi	r24, 0x09	; 9
    78aa:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
        i2c_stop();			// set stop conditon = release bus
    78ae:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
		} else {
			useAccel = USE_ADXL345;
    78b2:	81 e0       	ldi	r24, 0x01	; 1
    78b4:	80 93 64 18 	sts	0x1864, r24
    78b8:	08 95       	ret
	unsigned char ret = 0;

	// configure device
	ret = i2c_start(accelAddress+I2C_WRITE);	// set device address and write mode
    if (ret) {				// failed to issue start condition, possibly no device found
        i2c_stop();
    78ba:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>

	if(ret) {		// MMA7455L doesn't respond, try with ADXL345
		accelAddress = ADXL345_ADDR;
		ret = initADXL345();
		if(ret) {	// accelerometer not available
			useAccel = USE_NO_ACCEL;
    78be:	82 e0       	ldi	r24, 0x02	; 2
    78c0:	80 93 64 18 	sts	0x1864, r24
    78c4:	08 95       	ret

000078c6 <readAccelXYZ>:

	}

}

void readAccelXYZ() {
    78c6:	ef 92       	push	r14
    78c8:	ff 92       	push	r15
    78ca:	0f 93       	push	r16
    78cc:	1f 93       	push	r17
    78ce:	cf 93       	push	r28
    78d0:	df 93       	push	r29
    78d2:	cd b7       	in	r28, 0x3d	; 61
    78d4:	de b7       	in	r29, 0x3e	; 62
    78d6:	27 97       	sbiw	r28, 0x07	; 7
    78d8:	0f b6       	in	r0, 0x3f	; 63
    78da:	f8 94       	cli
    78dc:	de bf       	out	0x3e, r29	; 62
    78de:	0f be       	out	0x3f, r0	; 63
    78e0:	cd bf       	out	0x3d, r28	; 61

	int i = 0;
	signed char buff[6];

	if(useAccel == USE_MMAX7455L) {
    78e2:	80 91 64 18 	lds	r24, 0x1864
    78e6:	88 23       	and	r24, r24
    78e8:	e1 f0       	breq	.+56     	; 0x7922 <readAccelXYZ+0x5c>
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    78ea:	81 30       	cpi	r24, 0x01	; 1
    78ec:	09 f4       	brne	.+2      	; 0x78f0 <readAccelXYZ+0x2a>
    78ee:	8b c0       	rjmp	.+278    	; 0x7a06 <readAccelXYZ+0x140>
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
		}

	} else {

		accX = 0;
    78f0:	10 92 63 18 	sts	0x1863, r1
    78f4:	10 92 62 18 	sts	0x1862, r1
		accY = 0;
    78f8:	10 92 61 18 	sts	0x1861, r1
    78fc:	10 92 60 18 	sts	0x1860, r1
		accZ = 0;
    7900:	10 92 5f 18 	sts	0x185F, r1
    7904:	10 92 5e 18 	sts	0x185E, r1

	}

}
    7908:	27 96       	adiw	r28, 0x07	; 7
    790a:	0f b6       	in	r0, 0x3f	; 63
    790c:	f8 94       	cli
    790e:	de bf       	out	0x3e, r29	; 62
    7910:	0f be       	out	0x3f, r0	; 63
    7912:	cd bf       	out	0x3d, r28	; 61
    7914:	df 91       	pop	r29
    7916:	cf 91       	pop	r28
    7918:	1f 91       	pop	r17
    791a:	0f 91       	pop	r16
    791c:	ff 90       	pop	r15
    791e:	ef 90       	pop	r14
    7920:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    7922:	80 91 21 03 	lds	r24, 0x0321
    7926:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    792a:	80 e0       	ldi	r24, 0x00	; 0
    792c:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7930:	80 91 21 03 	lds	r24, 0x0321
    7934:	8f 5f       	subi	r24, 0xFF	; 255
    7936:	0e 94 72 43 	call	0x86e4	; 0x86e4 <i2c_rep_start>
    793a:	8e 01       	movw	r16, r28
    793c:	0f 5f       	subi	r16, 0xFF	; 255
    793e:	1f 4f       	sbci	r17, 0xFF	; 255
    7940:	7e 01       	movw	r14, r28
    7942:	86 e0       	ldi	r24, 0x06	; 6
    7944:	e8 0e       	add	r14, r24
    7946:	f1 1c       	adc	r15, r1

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7948:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    794c:	f8 01       	movw	r30, r16
    794e:	81 93       	st	Z+, r24
    7950:	8f 01       	movw	r16, r30

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
		i2c_write(0x00);											// sends address to read from (X LSB)
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode

		for(i=0; i<5; i++) {
    7952:	ee 15       	cp	r30, r14
    7954:	ff 05       	cpc	r31, r15
    7956:	c1 f7       	brne	.-16     	; 0x7948 <readAccelXYZ+0x82>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
    7958:	0e 94 b8 43 	call	0x8770	; 0x8770 <i2c_readNak>
		i2c_stop();													// set stop conditon = release bus
    795c:	8f 83       	std	Y+7, r24	; 0x07
    795e:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7962:	90 91 b4 21 	lds	r25, 0x21B4
    7966:	8f 81       	ldd	r24, Y+7	; 0x07
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    7968:	2a 81       	ldd	r18, Y+2	; 0x02
    796a:	02 2e       	mov	r0, r18
    796c:	00 0c       	add	r0, r0
    796e:	33 0b       	sbc	r19, r19
    7970:	52 2f       	mov	r21, r18
    7972:	44 27       	eor	r20, r20
    7974:	29 81       	ldd	r18, Y+1	; 0x01
    7976:	02 2e       	mov	r0, r18
    7978:	00 0c       	add	r0, r0
    797a:	33 0b       	sbc	r19, r19
    797c:	24 2b       	or	r18, r20
    797e:	35 2b       	or	r19, r21
			buff[i] = i2c_readAck();								// read one byte at a time
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
    7980:	91 11       	cpse	r25, r1
    7982:	30 c0       	rjmp	.+96     	; 0x79e4 <readAccelXYZ+0x11e>
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
			accZ = ((signed int)buff[5]<<8)|buff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)buff[1]<<8)|buff[0])-accOffsetX;	// X axis
    7984:	40 91 5c 18 	lds	r20, 0x185C
    7988:	50 91 5d 18 	lds	r21, 0x185D
    798c:	24 1b       	sub	r18, r20
    798e:	35 0b       	sbc	r19, r21
    7990:	30 93 63 18 	sts	0x1863, r19
    7994:	20 93 62 18 	sts	0x1862, r18
			accY = (((signed int)buff[3]<<8)|buff[2])-accOffsetY;	// Y axis
    7998:	2c 81       	ldd	r18, Y+4	; 0x04
    799a:	02 2e       	mov	r0, r18
    799c:	00 0c       	add	r0, r0
    799e:	33 0b       	sbc	r19, r19
    79a0:	52 2f       	mov	r21, r18
    79a2:	44 27       	eor	r20, r20
    79a4:	2b 81       	ldd	r18, Y+3	; 0x03
    79a6:	02 2e       	mov	r0, r18
    79a8:	00 0c       	add	r0, r0
    79aa:	33 0b       	sbc	r19, r19
    79ac:	24 2b       	or	r18, r20
    79ae:	35 2b       	or	r19, r21
    79b0:	40 91 5a 18 	lds	r20, 0x185A
    79b4:	50 91 5b 18 	lds	r21, 0x185B
    79b8:	24 1b       	sub	r18, r20
    79ba:	35 0b       	sbc	r19, r21
    79bc:	30 93 61 18 	sts	0x1861, r19
    79c0:	20 93 60 18 	sts	0x1860, r18
			accZ = (((signed int)buff[5]<<8)|buff[4]);				// Z axis
    79c4:	08 2e       	mov	r0, r24
    79c6:	00 0c       	add	r0, r0
    79c8:	99 0b       	sbc	r25, r25
    79ca:	98 2f       	mov	r25, r24
    79cc:	88 27       	eor	r24, r24
    79ce:	2d 81       	ldd	r18, Y+5	; 0x05
    79d0:	02 2e       	mov	r0, r18
    79d2:	00 0c       	add	r0, r0
    79d4:	33 0b       	sbc	r19, r19
    79d6:	82 2b       	or	r24, r18
    79d8:	93 2b       	or	r25, r19
    79da:	90 93 5f 18 	sts	0x185F, r25
    79de:	80 93 5e 18 	sts	0x185E, r24
    79e2:	92 cf       	rjmp	.-220    	; 0x7908 <readAccelXYZ+0x42>
		}
		buff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)buff[1]<<8)|buff[0];    			// X axis
    79e4:	30 93 63 18 	sts	0x1863, r19
    79e8:	20 93 62 18 	sts	0x1862, r18
			accY = ((signed int)buff[3]<<8)|buff[2];    			// Y axis
    79ec:	2c 81       	ldd	r18, Y+4	; 0x04
    79ee:	02 2e       	mov	r0, r18
    79f0:	00 0c       	add	r0, r0
    79f2:	33 0b       	sbc	r19, r19
    79f4:	52 2f       	mov	r21, r18
    79f6:	44 27       	eor	r20, r20
    79f8:	2b 81       	ldd	r18, Y+3	; 0x03
    79fa:	02 2e       	mov	r0, r18
    79fc:	00 0c       	add	r0, r0
    79fe:	33 0b       	sbc	r19, r19
    7a00:	24 2b       	or	r18, r20
    7a02:	35 2b       	or	r19, r21
    7a04:	db cf       	rjmp	.-74     	; 0x79bc <readAccelXYZ+0xf6>
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    7a06:	80 91 21 03 	lds	r24, 0x0321
    7a0a:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    7a0e:	82 e3       	ldi	r24, 0x32	; 50
    7a10:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    7a14:	80 91 21 03 	lds	r24, 0x0321
    7a18:	8f 5f       	subi	r24, 0xFF	; 255
    7a1a:	0e 94 72 43 	call	0x86e4	; 0x86e4 <i2c_rep_start>
    7a1e:	8e 01       	movw	r16, r28
    7a20:	0f 5f       	subi	r16, 0xFF	; 255
    7a22:	1f 4f       	sbci	r17, 0xFF	; 255
    7a24:	7e 01       	movw	r14, r28
    7a26:	f6 e0       	ldi	r31, 0x06	; 6
    7a28:	ef 0e       	add	r14, r31
    7a2a:	f1 1c       	adc	r15, r1

		for(i=0; i<5; i++) {
			buff[i] = i2c_readAck();								// read one byte at a time
    7a2c:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    7a30:	f8 01       	movw	r30, r16
    7a32:	81 93       	st	Z+, r24
    7a34:	8f 01       	movw	r16, r30

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
		i2c_write(0x32);											// sends address to read from (X LSB)
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode

		for(i=0; i<5; i++) {
    7a36:	ee 15       	cp	r30, r14
    7a38:	ff 05       	cpc	r31, r15
    7a3a:	c1 f7       	brne	.-16     	; 0x7a2c <readAccelXYZ+0x166>
    7a3c:	8d cf       	rjmp	.-230    	; 0x7958 <readAccelXYZ+0x92>

00007a3e <calibrateSensors>:

#include "sensors.h"


void calibrateSensors() {
    7a3e:	cf 92       	push	r12
    7a40:	df 92       	push	r13
    7a42:	ef 92       	push	r14
    7a44:	ff 92       	push	r15
    7a46:	0f 93       	push	r16
    7a48:	1f 93       	push	r17
    7a4a:	cf 93       	push	r28
    7a4c:	df 93       	push	r29

	unsigned int i=0;

	pwm_red = 0;
    7a4e:	10 92 26 03 	sts	0x0326, r1
	pwm_green = 0;
    7a52:	10 92 25 03 	sts	0x0325, r1
	pwm_blue = 0;
    7a56:	10 92 24 03 	sts	0x0324, r1
	updateRedLed(pwm_red);
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
	updateGreenLed(pwm_green);
    7a60:	80 91 25 03 	lds	r24, 0x0325
    7a64:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7a68:	80 91 24 03 	lds	r24, 0x0324
    7a6c:	0e 94 c4 1b 	call	0x3788	; 0x3788 <updateBlueLed>

	calibrationCycle = 0;
    7a70:	10 92 3e 18 	sts	0x183E, r1
    7a74:	10 92 3d 18 	sts	0x183D, r1
	startCalibration = 1;
    7a78:	81 e0       	ldi	r24, 0x01	; 1
    7a7a:	80 93 b4 21 	sts	0x21B4, r24


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
    7a7e:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    7a82:	60 93 2f 18 	sts	0x182F, r22
    7a86:	70 93 30 18 	sts	0x1830, r23
    7a8a:	80 93 31 18 	sts	0x1831, r24
    7a8e:	90 93 32 18 	sts	0x1832, r25
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    7a92:	02 c0       	rjmp	.+4      	; 0x7a98 <calibrateSensors+0x5a>
		readAccelXYZ();	// get a fresh value from the accelerometer
    7a94:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <readAccelXYZ>


	// calibrate accelerometer

	lastTick = getTime100MicroSec();
	while((getTime100MicroSec() - lastTick) < PAUSE_100_MSEC) {
    7a98:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    7a9c:	00 91 2f 18 	lds	r16, 0x182F
    7aa0:	10 91 30 18 	lds	r17, 0x1830
    7aa4:	20 91 31 18 	lds	r18, 0x1831
    7aa8:	30 91 32 18 	lds	r19, 0x1832
    7aac:	dc 01       	movw	r26, r24
    7aae:	cb 01       	movw	r24, r22
    7ab0:	80 1b       	sub	r24, r16
    7ab2:	91 0b       	sbc	r25, r17
    7ab4:	a2 0b       	sbc	r26, r18
    7ab6:	b3 0b       	sbc	r27, r19
    7ab8:	81 3c       	cpi	r24, 0xC1	; 193
    7aba:	93 40       	sbci	r25, 0x03	; 3
    7abc:	a1 05       	cpc	r26, r1
    7abe:	b1 05       	cpc	r27, r1
    7ac0:	48 f3       	brcs	.-46     	; 0x7a94 <calibrateSensors+0x56>
		readAccelXYZ();	// get a fresh value from the accelerometer
	}
	
	accXMax = -1023;
    7ac2:	21 e0       	ldi	r18, 0x01	; 1
    7ac4:	3c ef       	ldi	r19, 0xFC	; 252
    7ac6:	30 93 55 18 	sts	0x1855, r19
    7aca:	20 93 54 18 	sts	0x1854, r18
	accXMin = 1023;
    7ace:	8f ef       	ldi	r24, 0xFF	; 255
    7ad0:	93 e0       	ldi	r25, 0x03	; 3
    7ad2:	90 93 53 18 	sts	0x1853, r25
    7ad6:	80 93 52 18 	sts	0x1852, r24
	accYMax = -1023;
    7ada:	30 93 51 18 	sts	0x1851, r19
    7ade:	20 93 50 18 	sts	0x1850, r18
	accYMin = 1023;
    7ae2:	90 93 4f 18 	sts	0x184F, r25
    7ae6:	80 93 4e 18 	sts	0x184E, r24
	accOffsetXSum = 0;
    7aea:	10 92 59 18 	sts	0x1859, r1
    7aee:	10 92 58 18 	sts	0x1858, r1
	accOffsetYSum = 0;
    7af2:	10 92 57 18 	sts	0x1857, r1
    7af6:	10 92 56 18 	sts	0x1856, r1

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    7afa:	80 91 5e 18 	lds	r24, 0x185E
    7afe:	90 91 5f 18 	lds	r25, 0x185F
    7b02:	97 fd       	sbrc	r25, 7
    7b04:	40 c4       	rjmp	.+2176   	; 0x8386 <calibrateSensors+0x948>
    7b06:	8d 97       	sbiw	r24, 0x2d	; 45
    7b08:	0c f4       	brge	.+2      	; 0x7b0c <calibrateSensors+0xce>
    7b0a:	9d c3       	rjmp	.+1850   	; 0x8246 <calibrateSensors+0x808>

		pwm_red = 0;
    7b0c:	10 92 26 03 	sts	0x0326, r1
		pwm_green = 255;
    7b10:	8f ef       	ldi	r24, 0xFF	; 255
    7b12:	80 93 25 03 	sts	0x0325, r24
		pwm_blue = 255;
    7b16:	80 93 24 03 	sts	0x0324, r24
		updateRedLed(pwm_red);
    7b1a:	80 e0       	ldi	r24, 0x00	; 0
    7b1c:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
		updateGreenLed(pwm_green);
    7b20:	80 91 25 03 	lds	r24, 0x0325
    7b24:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
		updateBlueLed(pwm_blue);
    7b28:	80 91 24 03 	lds	r24, 0x0324
    7b2c:	0e 94 c4 1b 	call	0x3788	; 0x3788 <updateBlueLed>

		setLeftSpeed(0);
    7b30:	80 e0       	ldi	r24, 0x00	; 0
    7b32:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <setLeftSpeed>
		setRightSpeed(0);
    7b36:	80 e0       	ldi	r24, 0x00	; 0
    7b38:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <setRightSpeed>
    7b3c:	21 c0       	rjmp	.+66     	; 0x7b80 <calibrateSensors+0x142>
			readAccelXYZ();

			handleMotorsWithNoController();

			if(calibrationCycle < CALIBRATION_CYCLES) {
				accOffsetXSum += accX;
    7b3e:	40 91 58 18 	lds	r20, 0x1858
    7b42:	50 91 59 18 	lds	r21, 0x1859
    7b46:	20 91 62 18 	lds	r18, 0x1862
    7b4a:	30 91 63 18 	lds	r19, 0x1863
    7b4e:	24 0f       	add	r18, r20
    7b50:	35 1f       	adc	r19, r21
    7b52:	30 93 59 18 	sts	0x1859, r19
    7b56:	20 93 58 18 	sts	0x1858, r18
				accOffsetYSum += accY;
    7b5a:	40 91 56 18 	lds	r20, 0x1856
    7b5e:	50 91 57 18 	lds	r21, 0x1857
    7b62:	20 91 60 18 	lds	r18, 0x1860
    7b66:	30 91 61 18 	lds	r19, 0x1861
    7b6a:	24 0f       	add	r18, r20
    7b6c:	35 1f       	adc	r19, r21
    7b6e:	30 93 57 18 	sts	0x1857, r19
    7b72:	20 93 56 18 	sts	0x1856, r18
				calibrationCycle++;
    7b76:	01 96       	adiw	r24, 0x01	; 1
    7b78:	90 93 3e 18 	sts	0x183E, r25
    7b7c:	80 93 3d 18 	sts	0x183D, r24
		setLeftSpeed(0);
		setRightSpeed(0);

		while(1) {

			readAccelXYZ();
    7b80:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <readAccelXYZ>

			handleMotorsWithNoController();
    7b84:	0e 94 cd 1c 	call	0x399a	; 0x399a <handleMotorsWithNoController>

			if(calibrationCycle < CALIBRATION_CYCLES) {
    7b88:	80 91 3d 18 	lds	r24, 0x183D
    7b8c:	90 91 3e 18 	lds	r25, 0x183E
    7b90:	80 31       	cpi	r24, 0x10	; 16
    7b92:	91 05       	cpc	r25, r1
    7b94:	a4 f2       	brlt	.-88     	; 0x7b3e <calibrateSensors+0x100>
				accOffsetXSum += accX;
				accOffsetYSum += accY;
				calibrationCycle++;
			} else {
				accOffsetX = accOffsetXSum>>4;
    7b96:	80 91 58 18 	lds	r24, 0x1858
    7b9a:	90 91 59 18 	lds	r25, 0x1859
    7b9e:	95 95       	asr	r25
    7ba0:	87 95       	ror	r24
    7ba2:	95 95       	asr	r25
    7ba4:	87 95       	ror	r24
    7ba6:	95 95       	asr	r25
    7ba8:	87 95       	ror	r24
    7baa:	95 95       	asr	r25
    7bac:	87 95       	ror	r24
    7bae:	90 93 5d 18 	sts	0x185D, r25
    7bb2:	80 93 5c 18 	sts	0x185C, r24
				accOffsetY = accOffsetYSum>>4;
    7bb6:	80 91 56 18 	lds	r24, 0x1856
    7bba:	90 91 57 18 	lds	r25, 0x1857
    7bbe:	95 95       	asr	r25
    7bc0:	87 95       	ror	r24
    7bc2:	95 95       	asr	r25
    7bc4:	87 95       	ror	r24
    7bc6:	95 95       	asr	r25
    7bc8:	87 95       	ror	r24
    7bca:	95 95       	asr	r25
    7bcc:	87 95       	ror	r24
    7bce:	90 93 5b 18 	sts	0x185B, r25
    7bd2:	80 93 5a 18 	sts	0x185A, r24
		setLeftSpeed(0);
		setRightSpeed(0);

	}	

	startCalibration = 1;
    7bd6:	81 e0       	ldi	r24, 0x01	; 1
    7bd8:	80 93 b4 21 	sts	0x21B4, r24
	calibrationCycle = 0;
    7bdc:	10 92 3e 18 	sts	0x183E, r1
    7be0:	10 92 3d 18 	sts	0x183D, r1
    7be4:	21 e0       	ldi	r18, 0x01	; 1

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    7be6:	1f ef       	ldi	r17, 0xFF	; 255
					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
						proximityOffset[i] = 0;
					}				
					
					calibrationCycle++;
    7be8:	c1 e0       	ldi	r28, 0x01	; 1
    7bea:	d0 e0       	ldi	r29, 0x00	; 0
    7bec:	07 c0       	rjmp	.+14     	; 0x7bfc <calibrateSensors+0x1be>
	// calibrate prox and ground sensors
	while(startCalibration) {

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {
    7bee:	80 91 b7 19 	lds	r24, 0x19B7
    7bf2:	81 11       	cpse	r24, r1
    7bf4:	1f c1       	rjmp	.+574    	; 0x7e34 <calibrateSensors+0x3f6>

	startCalibration = 1;
	calibrationCycle = 0;

	// calibrate prox and ground sensors
	while(startCalibration) {
    7bf6:	22 23       	and	r18, r18
    7bf8:	09 f4       	brne	.+2      	; 0x7bfc <calibrateSensors+0x1be>
    7bfa:	03 c1       	rjmp	.+518    	; 0x7e02 <calibrateSensors+0x3c4>

		if(calibrationCycle<=CALIBRATION_CYCLES) {
    7bfc:	80 91 3d 18 	lds	r24, 0x183D
    7c00:	90 91 3e 18 	lds	r25, 0x183E
    7c04:	41 97       	sbiw	r24, 0x11	; 17
    7c06:	9c f3       	brlt	.-26     	; 0x7bee <calibrateSensors+0x1b0>

			}

		} else {

			pwm_red = 0;
    7c08:	10 92 26 03 	sts	0x0326, r1
			pwm_green = 0;
    7c0c:	10 92 25 03 	sts	0x0325, r1
			pwm_blue = 255;
    7c10:	8f ef       	ldi	r24, 0xFF	; 255
    7c12:	80 93 24 03 	sts	0x0324, r24
			updateRedLed(pwm_red);
    7c16:	80 e0       	ldi	r24, 0x00	; 0
    7c18:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
			updateGreenLed(pwm_green);
    7c1c:	80 91 25 03 	lds	r24, 0x0325
    7c20:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
			updateBlueLed(pwm_blue);
    7c24:	80 91 24 03 	lds	r24, 0x0324
    7c28:	0e 94 c4 1b 	call	0x3788	; 0x3788 <updateBlueLed>

			for(i=0;i<12;i++) {
				proximityOffset[i] = proximitySum[i]>>4;
    7c2c:	80 91 bf 19 	lds	r24, 0x19BF
    7c30:	90 91 c0 19 	lds	r25, 0x19C0
    7c34:	a0 91 c1 19 	lds	r26, 0x19C1
    7c38:	b0 91 c2 19 	lds	r27, 0x19C2
    7c3c:	24 e0       	ldi	r18, 0x04	; 4
    7c3e:	b6 95       	lsr	r27
    7c40:	a7 95       	ror	r26
    7c42:	97 95       	ror	r25
    7c44:	87 95       	ror	r24
    7c46:	2a 95       	dec	r18
    7c48:	d1 f7       	brne	.-12     	; 0x7c3e <calibrateSensors+0x200>
    7c4a:	90 93 f0 19 	sts	0x19F0, r25
    7c4e:	80 93 ef 19 	sts	0x19EF, r24
    7c52:	80 91 c3 19 	lds	r24, 0x19C3
    7c56:	90 91 c4 19 	lds	r25, 0x19C4
    7c5a:	a0 91 c5 19 	lds	r26, 0x19C5
    7c5e:	b0 91 c6 19 	lds	r27, 0x19C6
    7c62:	34 e0       	ldi	r19, 0x04	; 4
    7c64:	b6 95       	lsr	r27
    7c66:	a7 95       	ror	r26
    7c68:	97 95       	ror	r25
    7c6a:	87 95       	ror	r24
    7c6c:	3a 95       	dec	r19
    7c6e:	d1 f7       	brne	.-12     	; 0x7c64 <calibrateSensors+0x226>
    7c70:	90 93 f2 19 	sts	0x19F2, r25
    7c74:	80 93 f1 19 	sts	0x19F1, r24
    7c78:	80 91 c7 19 	lds	r24, 0x19C7
    7c7c:	90 91 c8 19 	lds	r25, 0x19C8
    7c80:	a0 91 c9 19 	lds	r26, 0x19C9
    7c84:	b0 91 ca 19 	lds	r27, 0x19CA
    7c88:	44 e0       	ldi	r20, 0x04	; 4
    7c8a:	b6 95       	lsr	r27
    7c8c:	a7 95       	ror	r26
    7c8e:	97 95       	ror	r25
    7c90:	87 95       	ror	r24
    7c92:	4a 95       	dec	r20
    7c94:	d1 f7       	brne	.-12     	; 0x7c8a <calibrateSensors+0x24c>
    7c96:	90 93 f4 19 	sts	0x19F4, r25
    7c9a:	80 93 f3 19 	sts	0x19F3, r24
    7c9e:	80 91 cb 19 	lds	r24, 0x19CB
    7ca2:	90 91 cc 19 	lds	r25, 0x19CC
    7ca6:	a0 91 cd 19 	lds	r26, 0x19CD
    7caa:	b0 91 ce 19 	lds	r27, 0x19CE
    7cae:	54 e0       	ldi	r21, 0x04	; 4
    7cb0:	b6 95       	lsr	r27
    7cb2:	a7 95       	ror	r26
    7cb4:	97 95       	ror	r25
    7cb6:	87 95       	ror	r24
    7cb8:	5a 95       	dec	r21
    7cba:	d1 f7       	brne	.-12     	; 0x7cb0 <calibrateSensors+0x272>
    7cbc:	90 93 f6 19 	sts	0x19F6, r25
    7cc0:	80 93 f5 19 	sts	0x19F5, r24
    7cc4:	80 91 cf 19 	lds	r24, 0x19CF
    7cc8:	90 91 d0 19 	lds	r25, 0x19D0
    7ccc:	a0 91 d1 19 	lds	r26, 0x19D1
    7cd0:	b0 91 d2 19 	lds	r27, 0x19D2
    7cd4:	64 e0       	ldi	r22, 0x04	; 4
    7cd6:	b6 95       	lsr	r27
    7cd8:	a7 95       	ror	r26
    7cda:	97 95       	ror	r25
    7cdc:	87 95       	ror	r24
    7cde:	6a 95       	dec	r22
    7ce0:	d1 f7       	brne	.-12     	; 0x7cd6 <calibrateSensors+0x298>
    7ce2:	90 93 f8 19 	sts	0x19F8, r25
    7ce6:	80 93 f7 19 	sts	0x19F7, r24
    7cea:	80 91 d3 19 	lds	r24, 0x19D3
    7cee:	90 91 d4 19 	lds	r25, 0x19D4
    7cf2:	a0 91 d5 19 	lds	r26, 0x19D5
    7cf6:	b0 91 d6 19 	lds	r27, 0x19D6
    7cfa:	74 e0       	ldi	r23, 0x04	; 4
    7cfc:	b6 95       	lsr	r27
    7cfe:	a7 95       	ror	r26
    7d00:	97 95       	ror	r25
    7d02:	87 95       	ror	r24
    7d04:	7a 95       	dec	r23
    7d06:	d1 f7       	brne	.-12     	; 0x7cfc <calibrateSensors+0x2be>
    7d08:	90 93 fa 19 	sts	0x19FA, r25
    7d0c:	80 93 f9 19 	sts	0x19F9, r24
    7d10:	80 91 d7 19 	lds	r24, 0x19D7
    7d14:	90 91 d8 19 	lds	r25, 0x19D8
    7d18:	a0 91 d9 19 	lds	r26, 0x19D9
    7d1c:	b0 91 da 19 	lds	r27, 0x19DA
    7d20:	e4 e0       	ldi	r30, 0x04	; 4
    7d22:	b6 95       	lsr	r27
    7d24:	a7 95       	ror	r26
    7d26:	97 95       	ror	r25
    7d28:	87 95       	ror	r24
    7d2a:	ea 95       	dec	r30
    7d2c:	d1 f7       	brne	.-12     	; 0x7d22 <calibrateSensors+0x2e4>
    7d2e:	90 93 fc 19 	sts	0x19FC, r25
    7d32:	80 93 fb 19 	sts	0x19FB, r24
    7d36:	80 91 db 19 	lds	r24, 0x19DB
    7d3a:	90 91 dc 19 	lds	r25, 0x19DC
    7d3e:	a0 91 dd 19 	lds	r26, 0x19DD
    7d42:	b0 91 de 19 	lds	r27, 0x19DE
    7d46:	f4 e0       	ldi	r31, 0x04	; 4
    7d48:	b6 95       	lsr	r27
    7d4a:	a7 95       	ror	r26
    7d4c:	97 95       	ror	r25
    7d4e:	87 95       	ror	r24
    7d50:	fa 95       	dec	r31
    7d52:	d1 f7       	brne	.-12     	; 0x7d48 <calibrateSensors+0x30a>
    7d54:	90 93 fe 19 	sts	0x19FE, r25
    7d58:	80 93 fd 19 	sts	0x19FD, r24
    7d5c:	00 91 e3 19 	lds	r16, 0x19E3
    7d60:	10 91 e4 19 	lds	r17, 0x19E4
    7d64:	20 91 e5 19 	lds	r18, 0x19E5
    7d68:	30 91 e6 19 	lds	r19, 0x19E6
    7d6c:	a4 e0       	ldi	r26, 0x04	; 4
    7d6e:	36 95       	lsr	r19
    7d70:	27 95       	ror	r18
    7d72:	17 95       	ror	r17
    7d74:	07 95       	ror	r16
    7d76:	aa 95       	dec	r26
    7d78:	d1 f7       	brne	.-12     	; 0x7d6e <calibrateSensors+0x330>
    7d7a:	40 91 e7 19 	lds	r20, 0x19E7
    7d7e:	50 91 e8 19 	lds	r21, 0x19E8
    7d82:	60 91 e9 19 	lds	r22, 0x19E9
    7d86:	70 91 ea 19 	lds	r23, 0x19EA
    7d8a:	b4 e0       	ldi	r27, 0x04	; 4
    7d8c:	76 95       	lsr	r23
    7d8e:	67 95       	ror	r22
    7d90:	57 95       	ror	r21
    7d92:	47 95       	ror	r20
    7d94:	ba 95       	dec	r27
    7d96:	d1 f7       	brne	.-12     	; 0x7d8c <calibrateSensors+0x34e>
    7d98:	80 91 eb 19 	lds	r24, 0x19EB
    7d9c:	90 91 ec 19 	lds	r25, 0x19EC
    7da0:	a0 91 ed 19 	lds	r26, 0x19ED
    7da4:	b0 91 ee 19 	lds	r27, 0x19EE
    7da8:	c4 e0       	ldi	r28, 0x04	; 4
    7daa:	b6 95       	lsr	r27
    7dac:	a7 95       	ror	r26
    7dae:	97 95       	ror	r25
    7db0:	87 95       	ror	r24
    7db2:	ca 95       	dec	r28
    7db4:	d1 f7       	brne	.-12     	; 0x7daa <calibrateSensors+0x36c>
    7db6:	c0 90 df 19 	lds	r12, 0x19DF
    7dba:	d0 90 e0 19 	lds	r13, 0x19E0
    7dbe:	e0 90 e1 19 	lds	r14, 0x19E1
    7dc2:	f0 90 e2 19 	lds	r15, 0x19E2
    7dc6:	d4 e0       	ldi	r29, 0x04	; 4
    7dc8:	f6 94       	lsr	r15
    7dca:	e7 94       	ror	r14
    7dcc:	d7 94       	ror	r13
    7dce:	c7 94       	ror	r12
    7dd0:	da 95       	dec	r29
    7dd2:	d1 f7       	brne	.-12     	; 0x7dc8 <calibrateSensors+0x38a>
			}

			for(i=8; i<12; i++) {
				proximityOffset[i] -= 512;	// move the "0" to 512 (values around 512)
    7dd4:	e2 e0       	ldi	r30, 0x02	; 2
    7dd6:	de 1a       	sub	r13, r30
    7dd8:	d0 92 00 1a 	sts	0x1A00, r13
    7ddc:	c0 92 ff 19 	sts	0x19FF, r12
    7de0:	12 50       	subi	r17, 0x02	; 2
    7de2:	10 93 02 1a 	sts	0x1A02, r17
    7de6:	00 93 01 1a 	sts	0x1A01, r16
    7dea:	52 50       	subi	r21, 0x02	; 2
    7dec:	50 93 04 1a 	sts	0x1A04, r21
    7df0:	40 93 03 1a 	sts	0x1A03, r20
    7df4:	92 50       	subi	r25, 0x02	; 2
    7df6:	90 93 06 1a 	sts	0x1A06, r25
    7dfa:	80 93 05 1a 	sts	0x1A05, r24
			}

			//proxUpdated = 0;
			//if(proxUpdated) {	
				startCalibration = 0;					
    7dfe:	10 92 b4 21 	sts	0x21B4, r1

		}

	}

	pwm_red = 255;
    7e02:	8f ef       	ldi	r24, 0xFF	; 255
    7e04:	80 93 26 03 	sts	0x0326, r24
	pwm_green = 255;
    7e08:	80 93 25 03 	sts	0x0325, r24
	pwm_blue = 255;
    7e0c:	80 93 24 03 	sts	0x0324, r24
	updateRedLed(pwm_red);
    7e10:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
	updateGreenLed(pwm_green);
    7e14:	80 91 25 03 	lds	r24, 0x0325
    7e18:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
	updateBlueLed(pwm_blue);
    7e1c:	80 91 24 03 	lds	r24, 0x0324

}
    7e20:	df 91       	pop	r29
    7e22:	cf 91       	pop	r28
    7e24:	1f 91       	pop	r17
    7e26:	0f 91       	pop	r16
    7e28:	ff 90       	pop	r15
    7e2a:	ef 90       	pop	r14
    7e2c:	df 90       	pop	r13
    7e2e:	cf 90       	pop	r12
	pwm_red = 255;
	pwm_green = 255;
	pwm_blue = 255;
	updateRedLed(pwm_red);
	updateGreenLed(pwm_green);
	updateBlueLed(pwm_blue);
    7e30:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <updateBlueLed>

		if(calibrationCycle<=CALIBRATION_CYCLES) {

			if(proxUpdated) {

				pwm_red = 255;
    7e34:	10 93 26 03 	sts	0x0326, r17
				pwm_green = 255;
    7e38:	10 93 25 03 	sts	0x0325, r17
				pwm_blue = 0;
    7e3c:	10 92 24 03 	sts	0x0324, r1
				updateRedLed(pwm_red);
    7e40:	8f ef       	ldi	r24, 0xFF	; 255
    7e42:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
				updateGreenLed(pwm_green);
    7e46:	80 91 25 03 	lds	r24, 0x0325
    7e4a:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
				updateBlueLed(pwm_blue);
    7e4e:	80 91 24 03 	lds	r24, 0x0324
    7e52:	0e 94 c4 1b 	call	0x3788	; 0x3788 <updateBlueLed>

				proxUpdated = 0;
    7e56:	10 92 b7 19 	sts	0x19B7, r1

				if(calibrationCycle==0) {		// reset all variables
    7e5a:	80 91 3d 18 	lds	r24, 0x183D
    7e5e:	90 91 3e 18 	lds	r25, 0x183E
    7e62:	00 97       	sbiw	r24, 0x00	; 0
    7e64:	09 f4       	brne	.+2      	; 0x7e68 <calibrateSensors+0x42a>
    7e66:	58 c1       	rjmp	.+688    	; 0x8118 <calibrateSensors+0x6da>
												// "proximityResult" hasn't the offset reset to 0. so we start the actual calibration
												// the next time
				}

				for (i=0;i<12;i++) {
					proximitySum[i] += proximityResult[i];
    7e68:	40 91 07 1a 	lds	r20, 0x1A07
    7e6c:	50 91 08 1a 	lds	r21, 0x1A08
    7e70:	05 2e       	mov	r0, r21
    7e72:	00 0c       	add	r0, r0
    7e74:	66 0b       	sbc	r22, r22
    7e76:	77 0b       	sbc	r23, r23
    7e78:	c0 90 bf 19 	lds	r12, 0x19BF
    7e7c:	d0 90 c0 19 	lds	r13, 0x19C0
    7e80:	e0 90 c1 19 	lds	r14, 0x19C1
    7e84:	f0 90 c2 19 	lds	r15, 0x19C2
    7e88:	4c 0d       	add	r20, r12
    7e8a:	5d 1d       	adc	r21, r13
    7e8c:	6e 1d       	adc	r22, r14
    7e8e:	7f 1d       	adc	r23, r15
    7e90:	40 93 bf 19 	sts	0x19BF, r20
    7e94:	50 93 c0 19 	sts	0x19C0, r21
    7e98:	60 93 c1 19 	sts	0x19C1, r22
    7e9c:	70 93 c2 19 	sts	0x19C2, r23
    7ea0:	40 91 09 1a 	lds	r20, 0x1A09
    7ea4:	50 91 0a 1a 	lds	r21, 0x1A0A
    7ea8:	05 2e       	mov	r0, r21
    7eaa:	00 0c       	add	r0, r0
    7eac:	66 0b       	sbc	r22, r22
    7eae:	77 0b       	sbc	r23, r23
    7eb0:	c0 90 c3 19 	lds	r12, 0x19C3
    7eb4:	d0 90 c4 19 	lds	r13, 0x19C4
    7eb8:	e0 90 c5 19 	lds	r14, 0x19C5
    7ebc:	f0 90 c6 19 	lds	r15, 0x19C6
    7ec0:	4c 0d       	add	r20, r12
    7ec2:	5d 1d       	adc	r21, r13
    7ec4:	6e 1d       	adc	r22, r14
    7ec6:	7f 1d       	adc	r23, r15
    7ec8:	40 93 c3 19 	sts	0x19C3, r20
    7ecc:	50 93 c4 19 	sts	0x19C4, r21
    7ed0:	60 93 c5 19 	sts	0x19C5, r22
    7ed4:	70 93 c6 19 	sts	0x19C6, r23
    7ed8:	40 91 0b 1a 	lds	r20, 0x1A0B
    7edc:	50 91 0c 1a 	lds	r21, 0x1A0C
    7ee0:	05 2e       	mov	r0, r21
    7ee2:	00 0c       	add	r0, r0
    7ee4:	66 0b       	sbc	r22, r22
    7ee6:	77 0b       	sbc	r23, r23
    7ee8:	c0 90 c7 19 	lds	r12, 0x19C7
    7eec:	d0 90 c8 19 	lds	r13, 0x19C8
    7ef0:	e0 90 c9 19 	lds	r14, 0x19C9
    7ef4:	f0 90 ca 19 	lds	r15, 0x19CA
    7ef8:	4c 0d       	add	r20, r12
    7efa:	5d 1d       	adc	r21, r13
    7efc:	6e 1d       	adc	r22, r14
    7efe:	7f 1d       	adc	r23, r15
    7f00:	40 93 c7 19 	sts	0x19C7, r20
    7f04:	50 93 c8 19 	sts	0x19C8, r21
    7f08:	60 93 c9 19 	sts	0x19C9, r22
    7f0c:	70 93 ca 19 	sts	0x19CA, r23
    7f10:	40 91 0d 1a 	lds	r20, 0x1A0D
    7f14:	50 91 0e 1a 	lds	r21, 0x1A0E
    7f18:	05 2e       	mov	r0, r21
    7f1a:	00 0c       	add	r0, r0
    7f1c:	66 0b       	sbc	r22, r22
    7f1e:	77 0b       	sbc	r23, r23
    7f20:	c0 90 cb 19 	lds	r12, 0x19CB
    7f24:	d0 90 cc 19 	lds	r13, 0x19CC
    7f28:	e0 90 cd 19 	lds	r14, 0x19CD
    7f2c:	f0 90 ce 19 	lds	r15, 0x19CE
    7f30:	4c 0d       	add	r20, r12
    7f32:	5d 1d       	adc	r21, r13
    7f34:	6e 1d       	adc	r22, r14
    7f36:	7f 1d       	adc	r23, r15
    7f38:	40 93 cb 19 	sts	0x19CB, r20
    7f3c:	50 93 cc 19 	sts	0x19CC, r21
    7f40:	60 93 cd 19 	sts	0x19CD, r22
    7f44:	70 93 ce 19 	sts	0x19CE, r23
    7f48:	40 91 0f 1a 	lds	r20, 0x1A0F
    7f4c:	50 91 10 1a 	lds	r21, 0x1A10
    7f50:	05 2e       	mov	r0, r21
    7f52:	00 0c       	add	r0, r0
    7f54:	66 0b       	sbc	r22, r22
    7f56:	77 0b       	sbc	r23, r23
    7f58:	c0 90 cf 19 	lds	r12, 0x19CF
    7f5c:	d0 90 d0 19 	lds	r13, 0x19D0
    7f60:	e0 90 d1 19 	lds	r14, 0x19D1
    7f64:	f0 90 d2 19 	lds	r15, 0x19D2
    7f68:	4c 0d       	add	r20, r12
    7f6a:	5d 1d       	adc	r21, r13
    7f6c:	6e 1d       	adc	r22, r14
    7f6e:	7f 1d       	adc	r23, r15
    7f70:	40 93 cf 19 	sts	0x19CF, r20
    7f74:	50 93 d0 19 	sts	0x19D0, r21
    7f78:	60 93 d1 19 	sts	0x19D1, r22
    7f7c:	70 93 d2 19 	sts	0x19D2, r23
    7f80:	40 91 11 1a 	lds	r20, 0x1A11
    7f84:	50 91 12 1a 	lds	r21, 0x1A12
    7f88:	05 2e       	mov	r0, r21
    7f8a:	00 0c       	add	r0, r0
    7f8c:	66 0b       	sbc	r22, r22
    7f8e:	77 0b       	sbc	r23, r23
    7f90:	c0 90 d3 19 	lds	r12, 0x19D3
    7f94:	d0 90 d4 19 	lds	r13, 0x19D4
    7f98:	e0 90 d5 19 	lds	r14, 0x19D5
    7f9c:	f0 90 d6 19 	lds	r15, 0x19D6
    7fa0:	4c 0d       	add	r20, r12
    7fa2:	5d 1d       	adc	r21, r13
    7fa4:	6e 1d       	adc	r22, r14
    7fa6:	7f 1d       	adc	r23, r15
    7fa8:	40 93 d3 19 	sts	0x19D3, r20
    7fac:	50 93 d4 19 	sts	0x19D4, r21
    7fb0:	60 93 d5 19 	sts	0x19D5, r22
    7fb4:	70 93 d6 19 	sts	0x19D6, r23
    7fb8:	40 91 13 1a 	lds	r20, 0x1A13
    7fbc:	50 91 14 1a 	lds	r21, 0x1A14
    7fc0:	05 2e       	mov	r0, r21
    7fc2:	00 0c       	add	r0, r0
    7fc4:	66 0b       	sbc	r22, r22
    7fc6:	77 0b       	sbc	r23, r23
    7fc8:	c0 90 d7 19 	lds	r12, 0x19D7
    7fcc:	d0 90 d8 19 	lds	r13, 0x19D8
    7fd0:	e0 90 d9 19 	lds	r14, 0x19D9
    7fd4:	f0 90 da 19 	lds	r15, 0x19DA
    7fd8:	4c 0d       	add	r20, r12
    7fda:	5d 1d       	adc	r21, r13
    7fdc:	6e 1d       	adc	r22, r14
    7fde:	7f 1d       	adc	r23, r15
    7fe0:	40 93 d7 19 	sts	0x19D7, r20
    7fe4:	50 93 d8 19 	sts	0x19D8, r21
    7fe8:	60 93 d9 19 	sts	0x19D9, r22
    7fec:	70 93 da 19 	sts	0x19DA, r23
    7ff0:	40 91 15 1a 	lds	r20, 0x1A15
    7ff4:	50 91 16 1a 	lds	r21, 0x1A16
    7ff8:	05 2e       	mov	r0, r21
    7ffa:	00 0c       	add	r0, r0
    7ffc:	66 0b       	sbc	r22, r22
    7ffe:	77 0b       	sbc	r23, r23
    8000:	c0 90 db 19 	lds	r12, 0x19DB
    8004:	d0 90 dc 19 	lds	r13, 0x19DC
    8008:	e0 90 dd 19 	lds	r14, 0x19DD
    800c:	f0 90 de 19 	lds	r15, 0x19DE
    8010:	4c 0d       	add	r20, r12
    8012:	5d 1d       	adc	r21, r13
    8014:	6e 1d       	adc	r22, r14
    8016:	7f 1d       	adc	r23, r15
    8018:	40 93 db 19 	sts	0x19DB, r20
    801c:	50 93 dc 19 	sts	0x19DC, r21
    8020:	60 93 dd 19 	sts	0x19DD, r22
    8024:	70 93 de 19 	sts	0x19DE, r23
    8028:	40 91 17 1a 	lds	r20, 0x1A17
    802c:	50 91 18 1a 	lds	r21, 0x1A18
    8030:	05 2e       	mov	r0, r21
    8032:	00 0c       	add	r0, r0
    8034:	66 0b       	sbc	r22, r22
    8036:	77 0b       	sbc	r23, r23
    8038:	c0 90 df 19 	lds	r12, 0x19DF
    803c:	d0 90 e0 19 	lds	r13, 0x19E0
    8040:	e0 90 e1 19 	lds	r14, 0x19E1
    8044:	f0 90 e2 19 	lds	r15, 0x19E2
    8048:	4c 0d       	add	r20, r12
    804a:	5d 1d       	adc	r21, r13
    804c:	6e 1d       	adc	r22, r14
    804e:	7f 1d       	adc	r23, r15
    8050:	40 93 df 19 	sts	0x19DF, r20
    8054:	50 93 e0 19 	sts	0x19E0, r21
    8058:	60 93 e1 19 	sts	0x19E1, r22
    805c:	70 93 e2 19 	sts	0x19E2, r23
    8060:	40 91 19 1a 	lds	r20, 0x1A19
    8064:	50 91 1a 1a 	lds	r21, 0x1A1A
    8068:	05 2e       	mov	r0, r21
    806a:	00 0c       	add	r0, r0
    806c:	66 0b       	sbc	r22, r22
    806e:	77 0b       	sbc	r23, r23
    8070:	c0 90 e3 19 	lds	r12, 0x19E3
    8074:	d0 90 e4 19 	lds	r13, 0x19E4
    8078:	e0 90 e5 19 	lds	r14, 0x19E5
    807c:	f0 90 e6 19 	lds	r15, 0x19E6
    8080:	4c 0d       	add	r20, r12
    8082:	5d 1d       	adc	r21, r13
    8084:	6e 1d       	adc	r22, r14
    8086:	7f 1d       	adc	r23, r15
    8088:	40 93 e3 19 	sts	0x19E3, r20
    808c:	50 93 e4 19 	sts	0x19E4, r21
    8090:	60 93 e5 19 	sts	0x19E5, r22
    8094:	70 93 e6 19 	sts	0x19E6, r23
    8098:	40 91 1b 1a 	lds	r20, 0x1A1B
    809c:	50 91 1c 1a 	lds	r21, 0x1A1C
    80a0:	05 2e       	mov	r0, r21
    80a2:	00 0c       	add	r0, r0
    80a4:	66 0b       	sbc	r22, r22
    80a6:	77 0b       	sbc	r23, r23
    80a8:	c0 90 e7 19 	lds	r12, 0x19E7
    80ac:	d0 90 e8 19 	lds	r13, 0x19E8
    80b0:	e0 90 e9 19 	lds	r14, 0x19E9
    80b4:	f0 90 ea 19 	lds	r15, 0x19EA
    80b8:	4c 0d       	add	r20, r12
    80ba:	5d 1d       	adc	r21, r13
    80bc:	6e 1d       	adc	r22, r14
    80be:	7f 1d       	adc	r23, r15
    80c0:	40 93 e7 19 	sts	0x19E7, r20
    80c4:	50 93 e8 19 	sts	0x19E8, r21
    80c8:	60 93 e9 19 	sts	0x19E9, r22
    80cc:	70 93 ea 19 	sts	0x19EA, r23
    80d0:	40 91 1d 1a 	lds	r20, 0x1A1D
    80d4:	50 91 1e 1a 	lds	r21, 0x1A1E
    80d8:	05 2e       	mov	r0, r21
    80da:	00 0c       	add	r0, r0
    80dc:	66 0b       	sbc	r22, r22
    80de:	77 0b       	sbc	r23, r23
    80e0:	c0 90 eb 19 	lds	r12, 0x19EB
    80e4:	d0 90 ec 19 	lds	r13, 0x19EC
    80e8:	e0 90 ed 19 	lds	r14, 0x19ED
    80ec:	f0 90 ee 19 	lds	r15, 0x19EE
    80f0:	4c 0d       	add	r20, r12
    80f2:	5d 1d       	adc	r21, r13
    80f4:	6e 1d       	adc	r22, r14
    80f6:	7f 1d       	adc	r23, r15
    80f8:	40 93 eb 19 	sts	0x19EB, r20
    80fc:	50 93 ec 19 	sts	0x19EC, r21
    8100:	60 93 ed 19 	sts	0x19ED, r22
    8104:	70 93 ee 19 	sts	0x19EE, r23
				}

				calibrationCycle++;
    8108:	01 96       	adiw	r24, 0x01	; 1
    810a:	90 93 3e 18 	sts	0x183E, r25
    810e:	80 93 3d 18 	sts	0x183D, r24
    8112:	20 91 b4 21 	lds	r18, 0x21B4
    8116:	6f cd       	rjmp	.-1314   	; 0x7bf6 <calibrateSensors+0x1b8>
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8118:	10 92 bf 19 	sts	0x19BF, r1
    811c:	10 92 c0 19 	sts	0x19C0, r1
    8120:	10 92 c1 19 	sts	0x19C1, r1
    8124:	10 92 c2 19 	sts	0x19C2, r1
						proximityOffset[i] = 0;
    8128:	10 92 f0 19 	sts	0x19F0, r1
    812c:	10 92 ef 19 	sts	0x19EF, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8130:	10 92 c3 19 	sts	0x19C3, r1
    8134:	10 92 c4 19 	sts	0x19C4, r1
    8138:	10 92 c5 19 	sts	0x19C5, r1
    813c:	10 92 c6 19 	sts	0x19C6, r1
						proximityOffset[i] = 0;
    8140:	10 92 f2 19 	sts	0x19F2, r1
    8144:	10 92 f1 19 	sts	0x19F1, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8148:	10 92 c7 19 	sts	0x19C7, r1
    814c:	10 92 c8 19 	sts	0x19C8, r1
    8150:	10 92 c9 19 	sts	0x19C9, r1
    8154:	10 92 ca 19 	sts	0x19CA, r1
						proximityOffset[i] = 0;
    8158:	10 92 f4 19 	sts	0x19F4, r1
    815c:	10 92 f3 19 	sts	0x19F3, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8160:	10 92 cb 19 	sts	0x19CB, r1
    8164:	10 92 cc 19 	sts	0x19CC, r1
    8168:	10 92 cd 19 	sts	0x19CD, r1
    816c:	10 92 ce 19 	sts	0x19CE, r1
						proximityOffset[i] = 0;
    8170:	10 92 f6 19 	sts	0x19F6, r1
    8174:	10 92 f5 19 	sts	0x19F5, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8178:	10 92 cf 19 	sts	0x19CF, r1
    817c:	10 92 d0 19 	sts	0x19D0, r1
    8180:	10 92 d1 19 	sts	0x19D1, r1
    8184:	10 92 d2 19 	sts	0x19D2, r1
						proximityOffset[i] = 0;
    8188:	10 92 f8 19 	sts	0x19F8, r1
    818c:	10 92 f7 19 	sts	0x19F7, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8190:	10 92 d3 19 	sts	0x19D3, r1
    8194:	10 92 d4 19 	sts	0x19D4, r1
    8198:	10 92 d5 19 	sts	0x19D5, r1
    819c:	10 92 d6 19 	sts	0x19D6, r1
						proximityOffset[i] = 0;
    81a0:	10 92 fa 19 	sts	0x19FA, r1
    81a4:	10 92 f9 19 	sts	0x19F9, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81a8:	10 92 d7 19 	sts	0x19D7, r1
    81ac:	10 92 d8 19 	sts	0x19D8, r1
    81b0:	10 92 d9 19 	sts	0x19D9, r1
    81b4:	10 92 da 19 	sts	0x19DA, r1
						proximityOffset[i] = 0;
    81b8:	10 92 fc 19 	sts	0x19FC, r1
    81bc:	10 92 fb 19 	sts	0x19FB, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81c0:	10 92 db 19 	sts	0x19DB, r1
    81c4:	10 92 dc 19 	sts	0x19DC, r1
    81c8:	10 92 dd 19 	sts	0x19DD, r1
    81cc:	10 92 de 19 	sts	0x19DE, r1
						proximityOffset[i] = 0;
    81d0:	10 92 fe 19 	sts	0x19FE, r1
    81d4:	10 92 fd 19 	sts	0x19FD, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81d8:	10 92 df 19 	sts	0x19DF, r1
    81dc:	10 92 e0 19 	sts	0x19E0, r1
    81e0:	10 92 e1 19 	sts	0x19E1, r1
    81e4:	10 92 e2 19 	sts	0x19E2, r1
						proximityOffset[i] = 0;
    81e8:	10 92 00 1a 	sts	0x1A00, r1
    81ec:	10 92 ff 19 	sts	0x19FF, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    81f0:	10 92 e3 19 	sts	0x19E3, r1
    81f4:	10 92 e4 19 	sts	0x19E4, r1
    81f8:	10 92 e5 19 	sts	0x19E5, r1
    81fc:	10 92 e6 19 	sts	0x19E6, r1
						proximityOffset[i] = 0;
    8200:	10 92 02 1a 	sts	0x1A02, r1
    8204:	10 92 01 1a 	sts	0x1A01, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8208:	10 92 e7 19 	sts	0x19E7, r1
    820c:	10 92 e8 19 	sts	0x19E8, r1
    8210:	10 92 e9 19 	sts	0x19E9, r1
    8214:	10 92 ea 19 	sts	0x19EA, r1
						proximityOffset[i] = 0;
    8218:	10 92 04 1a 	sts	0x1A04, r1
    821c:	10 92 03 1a 	sts	0x1A03, r1
				proxUpdated = 0;

				if(calibrationCycle==0) {		// reset all variables

					for(i=0; i<12; i++) {
						proximitySum[i] = 0;
    8220:	10 92 eb 19 	sts	0x19EB, r1
    8224:	10 92 ec 19 	sts	0x19EC, r1
    8228:	10 92 ed 19 	sts	0x19ED, r1
    822c:	10 92 ee 19 	sts	0x19EE, r1
						proximityOffset[i] = 0;
    8230:	10 92 06 1a 	sts	0x1A06, r1
    8234:	10 92 05 1a 	sts	0x1A05, r1
					}				
					
					calibrationCycle++;
    8238:	d0 93 3e 18 	sts	0x183E, r29
    823c:	c0 93 3d 18 	sts	0x183D, r28
    8240:	20 91 b4 21 	lds	r18, 0x21B4

					continue;					// the first time "proxUpdated" is set, all the proximity values saved in the array 
    8244:	d8 cc       	rjmp	.-1616   	; 0x7bf6 <calibrateSensors+0x1b8>

		}

	} else {

		pwm_red = 255;
    8246:	8f ef       	ldi	r24, 0xFF	; 255
    8248:	80 93 26 03 	sts	0x0326, r24
		pwm_green = 0;
    824c:	10 92 25 03 	sts	0x0325, r1
		pwm_blue = 255;
    8250:	80 93 24 03 	sts	0x0324, r24
		updateRedLed(pwm_red);
    8254:	0e 94 9c 1b 	call	0x3738	; 0x3738 <updateRedLed>
		updateGreenLed(pwm_green);
    8258:	80 91 25 03 	lds	r24, 0x0325
    825c:	0e 94 b0 1b 	call	0x3760	; 0x3760 <updateGreenLed>
		updateBlueLed(pwm_blue);
    8260:	80 91 24 03 	lds	r24, 0x0324
    8264:	0e 94 c4 1b 	call	0x3788	; 0x3788 <updateBlueLed>

		setLeftSpeed(-10);
    8268:	86 ef       	ldi	r24, 0xF6	; 246
    826a:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <setLeftSpeed>
		setRightSpeed(10);
    826e:	8a e0       	ldi	r24, 0x0A	; 10
    8270:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <setRightSpeed>

		lastTick = getTime100MicroSec();
    8274:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    8278:	60 93 2f 18 	sts	0x182F, r22
    827c:	70 93 30 18 	sts	0x1830, r23
    8280:	80 93 31 18 	sts	0x1831, r24
    8284:	90 93 32 18 	sts	0x1832, r25
    8288:	3d c0       	rjmp	.+122    	; 0x8304 <calibrateSensors+0x8c6>
			readAccelXYZ();

			handleMotorsWithSpeedController();

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
				if(accXMax < accX) {
    828a:	80 91 62 18 	lds	r24, 0x1862
    828e:	90 91 63 18 	lds	r25, 0x1863
    8292:	20 91 54 18 	lds	r18, 0x1854
    8296:	30 91 55 18 	lds	r19, 0x1855
    829a:	28 17       	cp	r18, r24
    829c:	39 07       	cpc	r19, r25
    829e:	24 f4       	brge	.+8      	; 0x82a8 <calibrateSensors+0x86a>
					accXMax = accX;
    82a0:	90 93 55 18 	sts	0x1855, r25
    82a4:	80 93 54 18 	sts	0x1854, r24
				}
				if(accXMin > accX) {
    82a8:	20 91 52 18 	lds	r18, 0x1852
    82ac:	30 91 53 18 	lds	r19, 0x1853
    82b0:	82 17       	cp	r24, r18
    82b2:	93 07       	cpc	r25, r19
    82b4:	24 f4       	brge	.+8      	; 0x82be <calibrateSensors+0x880>
					accXMin = accX;
    82b6:	90 93 53 18 	sts	0x1853, r25
    82ba:	80 93 52 18 	sts	0x1852, r24
				}
				if(accYMax < accY) {
    82be:	80 91 60 18 	lds	r24, 0x1860
    82c2:	90 91 61 18 	lds	r25, 0x1861
    82c6:	20 91 50 18 	lds	r18, 0x1850
    82ca:	30 91 51 18 	lds	r19, 0x1851
    82ce:	28 17       	cp	r18, r24
    82d0:	39 07       	cpc	r19, r25
    82d2:	24 f4       	brge	.+8      	; 0x82dc <calibrateSensors+0x89e>
					accYMax = accY;
    82d4:	90 93 51 18 	sts	0x1851, r25
    82d8:	80 93 50 18 	sts	0x1850, r24
				}
				if(accYMin > accY) {
    82dc:	20 91 4e 18 	lds	r18, 0x184E
    82e0:	30 91 4f 18 	lds	r19, 0x184F
    82e4:	82 17       	cp	r24, r18
    82e6:	93 07       	cpc	r25, r19
    82e8:	24 f4       	brge	.+8      	; 0x82f2 <calibrateSensors+0x8b4>
					accYMin = accY;
    82ea:	90 93 4f 18 	sts	0x184F, r25
    82ee:	80 93 4e 18 	sts	0x184E, r24
				}
				calibrationCycle++;
    82f2:	80 91 3d 18 	lds	r24, 0x183D
    82f6:	90 91 3e 18 	lds	r25, 0x183E
    82fa:	01 96       	adiw	r24, 0x01	; 1
    82fc:	90 93 3e 18 	sts	0x183E, r25
    8300:	80 93 3d 18 	sts	0x183D, r24

		lastTick = getTime100MicroSec();

		while(1) {

			readAccelXYZ();
    8304:	0e 94 63 3c 	call	0x78c6	; 0x78c6 <readAccelXYZ>

			handleMotorsWithSpeedController();
    8308:	0e 94 cc 2a 	call	0x5598	; 0x5598 <handleMotorsWithSpeedController>

			if((getTime100MicroSec()-lastTick) < PAUSE_4_SEC) {
    830c:	0e 94 40 44 	call	0x8880	; 0x8880 <getTime100MicroSec>
    8310:	00 91 2f 18 	lds	r16, 0x182F
    8314:	10 91 30 18 	lds	r17, 0x1830
    8318:	20 91 31 18 	lds	r18, 0x1831
    831c:	30 91 32 18 	lds	r19, 0x1832
    8320:	dc 01       	movw	r26, r24
    8322:	cb 01       	movw	r24, r22
    8324:	80 1b       	sub	r24, r16
    8326:	91 0b       	sbc	r25, r17
    8328:	a2 0b       	sbc	r26, r18
    832a:	b3 0b       	sbc	r27, r19
    832c:	8e 33       	cpi	r24, 0x3E	; 62
    832e:	96 49       	sbci	r25, 0x96	; 150
    8330:	a1 05       	cpc	r26, r1
    8332:	b1 05       	cpc	r27, r1
    8334:	08 f4       	brcc	.+2      	; 0x8338 <calibrateSensors+0x8fa>
    8336:	a9 cf       	rjmp	.-174    	; 0x828a <calibrateSensors+0x84c>
				if(accYMin > accY) {
					accYMin = accY;
				}
				calibrationCycle++;
			} else {
				accOffsetX = (accXMax + accXMin)>>1;
    8338:	20 91 54 18 	lds	r18, 0x1854
    833c:	30 91 55 18 	lds	r19, 0x1855
    8340:	80 91 52 18 	lds	r24, 0x1852
    8344:	90 91 53 18 	lds	r25, 0x1853
    8348:	82 0f       	add	r24, r18
    834a:	93 1f       	adc	r25, r19
    834c:	95 95       	asr	r25
    834e:	87 95       	ror	r24
    8350:	90 93 5d 18 	sts	0x185D, r25
    8354:	80 93 5c 18 	sts	0x185C, r24
				accOffsetY = (accYMax + accYMin)>>1;
    8358:	20 91 50 18 	lds	r18, 0x1850
    835c:	30 91 51 18 	lds	r19, 0x1851
    8360:	80 91 4e 18 	lds	r24, 0x184E
    8364:	90 91 4f 18 	lds	r25, 0x184F
    8368:	82 0f       	add	r24, r18
    836a:	93 1f       	adc	r25, r19
    836c:	95 95       	asr	r25
    836e:	87 95       	ror	r24
    8370:	90 93 5b 18 	sts	0x185B, r25
    8374:	80 93 5a 18 	sts	0x185A, r24
				break;
			}

		}

		setLeftSpeed(0);
    8378:	80 e0       	ldi	r24, 0x00	; 0
    837a:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <setLeftSpeed>
		setRightSpeed(0);
    837e:	80 e0       	ldi	r24, 0x00	; 0
    8380:	0e 94 1d 1f 	call	0x3e3a	; 0x3e3a <setRightSpeed>
    8384:	28 cc       	rjmp	.-1968   	; 0x7bd6 <calibrateSensors+0x198>
	accYMax = -1023;
	accYMin = 1023;
	accOffsetXSum = 0;
	accOffsetYSum = 0;

	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8386:	91 95       	neg	r25
    8388:	81 95       	neg	r24
    838a:	91 09       	sbc	r25, r1
    838c:	bc cb       	rjmp	.-2184   	; 0x7b06 <calibrateSensors+0xc8>

0000838e <readAccelXYZ_1>:

void readAccelXYZ_1() {

	int i = 0;

	if(useAccel == USE_MMAX7455L) {
    838e:	80 91 64 18 	lds	r24, 0x1864
    8392:	88 23       	and	r24, r24
    8394:	79 f0       	breq	.+30     	; 0x83b4 <readAccelXYZ_1+0x26>
		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
		}
		return;

	} else if(useAccel == USE_ADXL345) {							
    8396:	81 30       	cpi	r24, 0x01	; 1
    8398:	11 f1       	breq	.+68     	; 0x83de <readAccelXYZ_1+0x50>
		}
		return;

	} else {

		accX = 0;
    839a:	10 92 63 18 	sts	0x1863, r1
    839e:	10 92 62 18 	sts	0x1862, r1
		accY = 0;
    83a2:	10 92 61 18 	sts	0x1861, r1
    83a6:	10 92 60 18 	sts	0x1860, r1
		accZ = 0;
    83aa:	10 92 5f 18 	sts	0x185F, r1
    83ae:	10 92 5e 18 	sts	0x185E, r1
    83b2:	08 95       	ret
		// reg 0x02: 10 bits output value Y LSB
		// reg 0x03: 10 bits output value Y MSB
		// reg 0x04: 10 bits output value Z LSB
		// reg 0x05: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode
    83b4:	80 91 21 03 	lds	r24, 0x0321
    83b8:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
		i2c_write(0x00);											// sends address to read from (X LSB)
    83bc:	80 e0       	ldi	r24, 0x00	; 0
    83be:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    83c2:	80 91 21 03 	lds	r24, 0x0321
    83c6:	8f 5f       	subi	r24, 0xFF	; 255
    83c8:	0e 94 72 43 	call	0x86e4	; 0x86e4 <i2c_rep_start>

		for(i=0; i<2; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83cc:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    83d0:	80 93 44 18 	sts	0x1844, r24
    83d4:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    83d8:	80 93 45 18 	sts	0x1845, r24
    83dc:	08 95       	ret
		// reg 0x34: 10 bits output value Y LSB
		// reg 0x35: 10 bits output value Y MSB
		// reg 0x36: 10 bits output value Z LSB
		// reg 0x37: 10 bits output value Z MSB

		i2c_start(accelAddress+I2C_WRITE);							// set device address and write mode	
    83de:	80 91 21 03 	lds	r24, 0x0321
    83e2:	0e 94 50 43 	call	0x86a0	; 0x86a0 <i2c_start>
		i2c_write(0x32);											// sends address to read from (X LSB)
    83e6:	82 e3       	ldi	r24, 0x32	; 50
    83e8:	0e 94 9c 43 	call	0x8738	; 0x8738 <i2c_write>
		i2c_rep_start(accelAddress+I2C_READ);						// set device address and read mode
    83ec:	80 91 21 03 	lds	r24, 0x0321
    83f0:	8f 5f       	subi	r24, 0xFF	; 255
    83f2:	0e 94 72 43 	call	0x86e4	; 0x86e4 <i2c_rep_start>

		for(i=0; i<3; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    83f6:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    83fa:	80 93 44 18 	sts	0x1844, r24
    83fe:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    8402:	80 93 45 18 	sts	0x1845, r24
    8406:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    840a:	80 93 46 18 	sts	0x1846, r24
    840e:	08 95       	ret

00008410 <readAccelXYZ_2>:

void readAccelXYZ_2() {

	int i = 2;

	if(useAccel == USE_MMAX7455L) {
    8410:	80 91 64 18 	lds	r24, 0x1864
    8414:	81 11       	cpse	r24, r1
    8416:	4e c0       	rjmp	.+156    	; 0x84b4 <readAccelXYZ_2+0xa4>

		for(i=2; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    8418:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    841c:	80 93 46 18 	sts	0x1846, r24
    8420:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    8424:	80 93 47 18 	sts	0x1847, r24
    8428:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    842c:	80 93 48 18 	sts	0x1848, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    8430:	0e 94 b8 43 	call	0x8770	; 0x8770 <i2c_readNak>
    8434:	80 93 49 18 	sts	0x1849, r24
		i2c_stop();													// set stop conditon = release bus
    8438:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    843c:	80 91 b4 21 	lds	r24, 0x21B4
    8440:	88 23       	and	r24, r24
    8442:	09 f4       	brne	.+2      	; 0x8446 <readAccelXYZ_2+0x36>
    8444:	46 c0       	rjmp	.+140    	; 0x84d2 <readAccelXYZ_2+0xc2>
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
		i2c_stop();													// set stop conditon = release bus

		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
    8446:	80 91 45 18 	lds	r24, 0x1845
    844a:	08 2e       	mov	r0, r24
    844c:	00 0c       	add	r0, r0
    844e:	99 0b       	sbc	r25, r25
    8450:	38 2f       	mov	r19, r24
    8452:	22 27       	eor	r18, r18
    8454:	80 91 44 18 	lds	r24, 0x1844
    8458:	08 2e       	mov	r0, r24
    845a:	00 0c       	add	r0, r0
    845c:	99 0b       	sbc	r25, r25
    845e:	82 2b       	or	r24, r18
    8460:	93 2b       	or	r25, r19
    8462:	90 93 63 18 	sts	0x1863, r25
    8466:	80 93 62 18 	sts	0x1862, r24
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
    846a:	80 91 47 18 	lds	r24, 0x1847
    846e:	08 2e       	mov	r0, r24
    8470:	00 0c       	add	r0, r0
    8472:	99 0b       	sbc	r25, r25
    8474:	38 2f       	mov	r19, r24
    8476:	22 27       	eor	r18, r18
    8478:	80 91 46 18 	lds	r24, 0x1846
    847c:	08 2e       	mov	r0, r24
    847e:	00 0c       	add	r0, r0
    8480:	99 0b       	sbc	r25, r25
    8482:	82 2b       	or	r24, r18
    8484:	93 2b       	or	r25, r19
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8486:	90 93 61 18 	sts	0x1861, r25
    848a:	80 93 60 18 	sts	0x1860, r24
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
    848e:	80 91 49 18 	lds	r24, 0x1849
    8492:	08 2e       	mov	r0, r24
    8494:	00 0c       	add	r0, r0
    8496:	99 0b       	sbc	r25, r25
    8498:	38 2f       	mov	r19, r24
    849a:	22 27       	eor	r18, r18
    849c:	80 91 48 18 	lds	r24, 0x1848
    84a0:	08 2e       	mov	r0, r24
    84a2:	00 0c       	add	r0, r0
    84a4:	99 0b       	sbc	r25, r25
    84a6:	82 2b       	or	r24, r18
    84a8:	93 2b       	or	r25, r19
    84aa:	90 93 5f 18 	sts	0x185F, r25
    84ae:	80 93 5e 18 	sts	0x185E, r24
    84b2:	08 95       	ret
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else if(useAccel == USE_ADXL345) {							
    84b4:	81 30       	cpi	r24, 0x01	; 1
    84b6:	d1 f1       	breq	.+116    	; 0x852c <readAccelXYZ_2+0x11c>
			accZ = (((signed int)accBuff[5]<<8)|accBuff[4]);			// Z axis
		}

	} else {

		accX = 0;
    84b8:	10 92 63 18 	sts	0x1863, r1
    84bc:	10 92 62 18 	sts	0x1862, r1
		accY = 0;
    84c0:	10 92 61 18 	sts	0x1861, r1
    84c4:	10 92 60 18 	sts	0x1860, r1
		accZ = 0;
    84c8:	10 92 5f 18 	sts	0x185F, r1
    84cc:	10 92 5e 18 	sts	0x185E, r1
    84d0:	08 95       	ret
		if(startCalibration) {										// if performing the calibration, then return the raw values
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    84d2:	80 91 45 18 	lds	r24, 0x1845
    84d6:	08 2e       	mov	r0, r24
    84d8:	00 0c       	add	r0, r0
    84da:	99 0b       	sbc	r25, r25
    84dc:	98 2f       	mov	r25, r24
    84de:	88 27       	eor	r24, r24
    84e0:	20 91 44 18 	lds	r18, 0x1844
    84e4:	02 2e       	mov	r0, r18
    84e6:	00 0c       	add	r0, r0
    84e8:	33 0b       	sbc	r19, r19
    84ea:	82 2b       	or	r24, r18
    84ec:	93 2b       	or	r25, r19
    84ee:	20 91 5c 18 	lds	r18, 0x185C
    84f2:	30 91 5d 18 	lds	r19, 0x185D
    84f6:	82 1b       	sub	r24, r18
    84f8:	93 0b       	sbc	r25, r19
    84fa:	90 93 63 18 	sts	0x1863, r25
    84fe:	80 93 62 18 	sts	0x1862, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8502:	80 91 47 18 	lds	r24, 0x1847
    8506:	08 2e       	mov	r0, r24
    8508:	00 0c       	add	r0, r0
    850a:	99 0b       	sbc	r25, r25
    850c:	98 2f       	mov	r25, r24
    850e:	88 27       	eor	r24, r24
    8510:	20 91 46 18 	lds	r18, 0x1846
    8514:	02 2e       	mov	r0, r18
    8516:	00 0c       	add	r0, r0
    8518:	33 0b       	sbc	r19, r19
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    851a:	82 2b       	or	r24, r18
    851c:	93 2b       	or	r25, r19
    851e:	20 91 5a 18 	lds	r18, 0x185A
    8522:	30 91 5b 18 	lds	r19, 0x185B
    8526:	82 1b       	sub	r24, r18
    8528:	93 0b       	sbc	r25, r19
    852a:	ad cf       	rjmp	.-166    	; 0x8486 <readAccelXYZ_2+0x76>
		}

	} else if(useAccel == USE_ADXL345) {							

		for(i=3; i<5; i++) {
			accBuff[i] = i2c_readAck();								// read one byte at a time
    852c:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    8530:	80 93 47 18 	sts	0x1847, r24
    8534:	0e 94 ae 43 	call	0x875c	; 0x875c <i2c_readAck>
    8538:	80 93 48 18 	sts	0x1848, r24
		}
		accBuff[i] = i2c_readNak();									// read last byte sending NACK
    853c:	0e 94 b8 43 	call	0x8770	; 0x8770 <i2c_readNak>
    8540:	80 93 49 18 	sts	0x1849, r24
		i2c_stop();													// set stop conditon = release bus
    8544:	0e 94 94 43 	call	0x8728	; 0x8728 <i2c_stop>

		if(startCalibration) {										// if performing the calibration, then return the raw values
    8548:	80 91 b4 21 	lds	r24, 0x21B4
    854c:	81 11       	cpse	r24, r1
    854e:	7b cf       	rjmp	.-266    	; 0x8446 <readAccelXYZ_2+0x36>
			accX = ((signed int)accBuff[1]<<8)|accBuff[0];    			// X axis
			accY = ((signed int)accBuff[3]<<8)|accBuff[2];    			// Y axis
			accZ = ((signed int)accBuff[5]<<8)|accBuff[4];    			// Z axis
		} else {													// else return the calibrated values
			accX = (((signed int)accBuff[1]<<8)|accBuff[0])-accOffsetX;	// X axis
    8550:	80 91 45 18 	lds	r24, 0x1845
    8554:	08 2e       	mov	r0, r24
    8556:	00 0c       	add	r0, r0
    8558:	99 0b       	sbc	r25, r25
    855a:	38 2f       	mov	r19, r24
    855c:	22 27       	eor	r18, r18
    855e:	80 91 44 18 	lds	r24, 0x1844
    8562:	08 2e       	mov	r0, r24
    8564:	00 0c       	add	r0, r0
    8566:	99 0b       	sbc	r25, r25
    8568:	82 2b       	or	r24, r18
    856a:	93 2b       	or	r25, r19
    856c:	20 91 5c 18 	lds	r18, 0x185C
    8570:	30 91 5d 18 	lds	r19, 0x185D
    8574:	82 1b       	sub	r24, r18
    8576:	93 0b       	sbc	r25, r19
    8578:	90 93 63 18 	sts	0x1863, r25
    857c:	80 93 62 18 	sts	0x1862, r24
			accY = (((signed int)accBuff[3]<<8)|accBuff[2])-accOffsetY;	// Y axis
    8580:	80 91 47 18 	lds	r24, 0x1847
    8584:	08 2e       	mov	r0, r24
    8586:	00 0c       	add	r0, r0
    8588:	99 0b       	sbc	r25, r25
    858a:	38 2f       	mov	r19, r24
    858c:	22 27       	eor	r18, r18
    858e:	80 91 46 18 	lds	r24, 0x1846
    8592:	08 2e       	mov	r0, r24
    8594:	00 0c       	add	r0, r0
    8596:	99 0b       	sbc	r25, r25
    8598:	c0 cf       	rjmp	.-128    	; 0x851a <readAccelXYZ_2+0x10a>

0000859a <computeAngle>:

	}

}

void computeAngle() {
    859a:	cf 93       	push	r28
    859c:	df 93       	push	r29
    859e:	00 d0       	rcall	.+0      	; 0x85a0 <computeAngle+0x6>
    85a0:	1f 92       	push	r1
    85a2:	cd b7       	in	r28, 0x3d	; 61
    85a4:	de b7       	in	r29, 0x3e	; 62

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    85a6:	80 91 5e 18 	lds	r24, 0x185E
    85aa:	90 91 5f 18 	lds	r25, 0x185F
    85ae:	97 fd       	sbrc	r25, 7
    85b0:	6b c0       	rjmp	.+214    	; 0x8688 <computeAngle+0xee>
    85b2:	8d 97       	sbiw	r24, 0x2d	; 45
    85b4:	0c f4       	brge	.+2      	; 0x85b8 <computeAngle+0x1e>
    85b6:	55 c0       	rjmp	.+170    	; 0x8662 <computeAngle+0xc8>
		currPosition = HORIZONTAL_POS;
    85b8:	81 e0       	ldi	r24, 0x01	; 1
    85ba:	80 93 20 03 	sts	0x0320, r24
    85be:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    85c0:	80 91 1f 03 	lds	r24, 0x031F
    85c4:	82 17       	cp	r24, r18
    85c6:	09 f4       	brne	.+2      	; 0x85ca <computeAngle+0x30>
    85c8:	53 c0       	rjmp	.+166    	; 0x8670 <computeAngle+0xd6>
		timesInSamePos++;
    85ca:	80 91 4a 18 	lds	r24, 0x184A
    85ce:	90 91 4b 18 	lds	r25, 0x184B
    85d2:	01 96       	adiw	r24, 0x01	; 1
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    85d4:	88 3c       	cpi	r24, 0xC8	; 200
    85d6:	91 05       	cpc	r25, r1
    85d8:	08 f0       	brcs	.+2      	; 0x85dc <computeAngle+0x42>
    85da:	4f c0       	rjmp	.+158    	; 0x867a <computeAngle+0xe0>
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
    85dc:	90 93 4b 18 	sts	0x184B, r25
    85e0:	80 93 4a 18 	sts	0x184A, r24
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    85e4:	60 91 60 18 	lds	r22, 0x1860
    85e8:	70 91 61 18 	lds	r23, 0x1861
    85ec:	07 2e       	mov	r0, r23
    85ee:	00 0c       	add	r0, r0
    85f0:	88 0b       	sbc	r24, r24
    85f2:	99 0b       	sbc	r25, r25
    85f4:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    85f8:	9b 01       	movw	r18, r22
    85fa:	ac 01       	movw	r20, r24
    85fc:	80 91 62 18 	lds	r24, 0x1862
    8600:	90 91 63 18 	lds	r25, 0x1863
    8604:	bc 01       	movw	r22, r24
    8606:	99 0f       	add	r25, r25
    8608:	88 0b       	sbc	r24, r24
    860a:	99 0b       	sbc	r25, r25
    860c:	29 83       	std	Y+1, r18	; 0x01
    860e:	3a 83       	std	Y+2, r19	; 0x02
    8610:	4b 83       	std	Y+3, r20	; 0x03
    8612:	5c 83       	std	Y+4, r21	; 0x04
    8614:	0e 94 e6 57 	call	0xafcc	; 0xafcc <__floatsisf>
    8618:	29 81       	ldd	r18, Y+1	; 0x01
    861a:	3a 81       	ldd	r19, Y+2	; 0x02
    861c:	4b 81       	ldd	r20, Y+3	; 0x03
    861e:	5c 81       	ldd	r21, Y+4	; 0x04
    8620:	0e 94 d8 56 	call	0xadb0	; 0xadb0 <atan2>
    8624:	60 93 07 18 	sts	0x1807, r22
    8628:	70 93 08 18 	sts	0x1808, r23
    862c:	80 93 09 18 	sts	0x1809, r24
    8630:	90 93 0a 18 	sts	0x180A, r25
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    8634:	21 ee       	ldi	r18, 0xE1	; 225
    8636:	3e e2       	ldi	r19, 0x2E	; 46
    8638:	45 e6       	ldi	r20, 0x65	; 101
    863a:	52 e4       	ldi	r21, 0x42	; 66
    863c:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    8640:	0e 94 ae 57 	call	0xaf5c	; 0xaf5c <__fixsfsi>

	if(currentAngle < 0) {
    8644:	77 ff       	sbrs	r23, 7
    8646:	02 c0       	rjmp	.+4      	; 0x864c <computeAngle+0xb2>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    8648:	68 59       	subi	r22, 0x98	; 152
    864a:	7e 4f       	sbci	r23, 0xFE	; 254
    864c:	70 93 4d 18 	sts	0x184D, r23
    8650:	60 93 4c 18 	sts	0x184C, r22
	}

}
    8654:	0f 90       	pop	r0
    8656:	0f 90       	pop	r0
    8658:	0f 90       	pop	r0
    865a:	0f 90       	pop	r0
    865c:	df 91       	pop	r29
    865e:	cf 91       	pop	r28
    8660:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    8662:	10 92 20 03 	sts	0x0320, r1
    8666:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    8668:	80 91 1f 03 	lds	r24, 0x031F
    866c:	82 13       	cpse	r24, r18
    866e:	ad cf       	rjmp	.-166    	; 0x85ca <computeAngle+0x30>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    8670:	10 92 4b 18 	sts	0x184B, r1
    8674:	10 92 4a 18 	sts	0x184A, r1
    8678:	b5 cf       	rjmp	.-150    	; 0x85e4 <computeAngle+0x4a>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    867a:	10 92 4b 18 	sts	0x184B, r1
    867e:	10 92 4a 18 	sts	0x184A, r1
			robotPosition = currPosition;
    8682:	20 93 1f 03 	sts	0x031F, r18
    8686:	ae cf       	rjmp	.-164    	; 0x85e4 <computeAngle+0x4a>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    8688:	91 95       	neg	r25
    868a:	81 95       	neg	r24
    868c:	91 09       	sbc	r25, r1
    868e:	91 cf       	rjmp	.-222    	; 0x85b2 <computeAngle+0x18>

00008690 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
    sbi(PORTD, 0);
    8690:	58 9a       	sbi	0x0b, 0	; 11
    sbi(PORTD, 1);
    8692:	59 9a       	sbi	0x0b, 1	; 11

  TWSR = 0;                         /* no prescaler */
    8694:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
    8698:	81 e0       	ldi	r24, 0x01	; 1
    869a:	80 93 b8 00 	sts	0x00B8, r24
    869e:	08 95       	ret

000086a0 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    86a0:	94 ea       	ldi	r25, 0xA4	; 164
    86a2:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    86a6:	90 91 bc 00 	lds	r25, 0x00BC
    86aa:	97 ff       	sbrs	r25, 7
    86ac:	fc cf       	rjmp	.-8      	; 0x86a6 <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    86ae:	90 91 b9 00 	lds	r25, 0x00B9
    86b2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    86b4:	98 30       	cpi	r25, 0x08	; 8
    86b6:	21 f0       	breq	.+8      	; 0x86c0 <i2c_start+0x20>
    86b8:	90 31       	cpi	r25, 0x10	; 16
    86ba:	11 f0       	breq	.+4      	; 0x86c0 <i2c_start+0x20>
		//usartTransmit(twst);
		return 1;
    86bc:	81 e0       	ldi	r24, 0x01	; 1
    86be:	08 95       	ret
	}

	// send device address
	TWDR = address;
    86c0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    86c4:	84 e8       	ldi	r24, 0x84	; 132
    86c6:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    86ca:	80 91 bc 00 	lds	r24, 0x00BC
    86ce:	87 ff       	sbrs	r24, 7
    86d0:	fc cf       	rjmp	.-8      	; 0x86ca <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    86d2:	80 91 b9 00 	lds	r24, 0x00B9
    86d6:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    86d8:	88 31       	cpi	r24, 0x18	; 24
    86da:	11 f0       	breq	.+4      	; 0x86e0 <i2c_start+0x40>
    86dc:	80 34       	cpi	r24, 0x40	; 64
    86de:	71 f7       	brne	.-36     	; 0x86bc <i2c_start+0x1c>
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    86e0:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
    86e2:	08 95       	ret

000086e4 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    86e4:	94 ea       	ldi	r25, 0xA4	; 164
    86e6:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    86ea:	90 91 bc 00 	lds	r25, 0x00BC
    86ee:	97 ff       	sbrs	r25, 7
    86f0:	fc cf       	rjmp	.-8      	; 0x86ea <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    86f2:	90 91 b9 00 	lds	r25, 0x00B9
    86f6:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    86f8:	98 30       	cpi	r25, 0x08	; 8
    86fa:	21 f0       	breq	.+8      	; 0x8704 <i2c_rep_start+0x20>
    86fc:	90 31       	cpi	r25, 0x10	; 16
    86fe:	11 f0       	breq	.+4      	; 0x8704 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    8700:	81 e0       	ldi	r24, 0x01	; 1
    8702:	08 95       	ret
	}

	// send device address
	TWDR = address;
    8704:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    8708:	84 e8       	ldi	r24, 0x84	; 132
    870a:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    870e:	80 91 bc 00 	lds	r24, 0x00BC
    8712:	87 ff       	sbrs	r24, 7
    8714:	fc cf       	rjmp	.-8      	; 0x870e <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    8716:	80 91 b9 00 	lds	r24, 0x00B9
    871a:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    871c:	88 31       	cpi	r24, 0x18	; 24
    871e:	11 f0       	breq	.+4      	; 0x8724 <i2c_rep_start+0x40>
    8720:	80 34       	cpi	r24, 0x40	; 64
    8722:	71 f7       	brne	.-36     	; 0x8700 <i2c_rep_start+0x1c>
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    8724:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    8726:	08 95       	ret

00008728 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    8728:	84 e9       	ldi	r24, 0x94	; 148
    872a:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    872e:	80 91 bc 00 	lds	r24, 0x00BC
    8732:	84 fd       	sbrc	r24, 4
    8734:	fc cf       	rjmp	.-8      	; 0x872e <i2c_stop+0x6>

}/* i2c_stop */
    8736:	08 95       	ret

00008738 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    8738:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    873c:	84 e8       	ldi	r24, 0x84	; 132
    873e:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    8742:	80 91 bc 00 	lds	r24, 0x00BC
    8746:	87 ff       	sbrs	r24, 7
    8748:	fc cf       	rjmp	.-8      	; 0x8742 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    874a:	90 91 b9 00 	lds	r25, 0x00B9
    874e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
    8750:	81 e0       	ldi	r24, 0x01	; 1
    8752:	98 32       	cpi	r25, 0x28	; 40
    8754:	09 f0       	breq	.+2      	; 0x8758 <i2c_write+0x20>
	return 0;

}/* i2c_write */
    8756:	08 95       	ret
	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
    8758:	80 e0       	ldi	r24, 0x00	; 0
	return 0;

}/* i2c_write */
    875a:	08 95       	ret

0000875c <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    875c:	84 ec       	ldi	r24, 0xC4	; 196
    875e:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));    
    8762:	80 91 bc 00 	lds	r24, 0x00BC
    8766:	87 ff       	sbrs	r24, 7
    8768:	fc cf       	rjmp	.-8      	; 0x8762 <i2c_readAck+0x6>

    return TWDR;
    876a:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readAck */
    876e:	08 95       	ret

00008770 <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    8770:	84 e8       	ldi	r24, 0x84	; 132
    8772:	80 93 bc 00 	sts	0x00BC, r24
	while(!(TWCR & (1<<TWINT)));
    8776:	80 91 bc 00 	lds	r24, 0x00BC
    877a:	87 ff       	sbrs	r24, 7
    877c:	fc cf       	rjmp	.-8      	; 0x8776 <i2c_readNak+0x6>
	
    return TWDR;
    877e:	80 91 bb 00 	lds	r24, 0x00BB

}/* i2c_readNak */
    8782:	08 95       	ret

00008784 <getSelector>:

#include "utility.h"

unsigned char getSelector() {
   return (SEL0) + 2*(SEL1) + 4*(SEL2) + 8*(SEL3);
    8784:	86 b1       	in	r24, 0x06	; 6
    8786:	36 b1       	in	r19, 0x06	; 6
    8788:	96 b1       	in	r25, 0x06	; 6
    878a:	26 b1       	in	r18, 0x06	; 6
    878c:	93 fb       	bst	r25, 3
    878e:	99 27       	eor	r25, r25
    8790:	90 f9       	bld	r25, 0
    8792:	99 0f       	add	r25, r25
    8794:	32 fb       	bst	r19, 2
    8796:	33 27       	eor	r19, r19
    8798:	30 f9       	bld	r19, 0
    879a:	93 0f       	add	r25, r19
    879c:	99 0f       	add	r25, r25
    879e:	26 95       	lsr	r18
    87a0:	21 70       	andi	r18, 0x01	; 1
    87a2:	92 0f       	add	r25, r18
    87a4:	99 0f       	add	r25, r25
    87a6:	81 70       	andi	r24, 0x01	; 1
}
    87a8:	89 0f       	add	r24, r25
    87aa:	08 95       	ret

000087ac <initPeripherals>:
    

void initPeripherals(void) {

	cli();			// disable global interrupts (by default it should already be disabled)
    87ac:	f8 94       	cli
	
	// reset all registers touched by arduino in the "init()" functions (wiring.c) not used by the robot
	TCCR0A = 0;
    87ae:	14 bc       	out	0x24, r1	; 36
	TCCR0B = 0;
    87b0:	15 bc       	out	0x25, r1	; 37
	TIMSK0 = 0;
    87b2:	10 92 6e 00 	sts	0x006E, r1
	TCCR5A = 0;
    87b6:	10 92 20 01 	sts	0x0120, r1
	TCCR5B = 0;
    87ba:	10 92 21 01 	sts	0x0121, r1

	rfAddress = eeprom_read_word((uint16_t*)4094);
    87be:	8e ef       	ldi	r24, 0xFE	; 254
    87c0:	9f e0       	ldi	r25, 0x0F	; 15
    87c2:	0e 94 0f 5a 	call	0xb41e	; 0xb41e <eeprom_read_word>
    87c6:	90 93 6e 19 	sts	0x196E, r25
    87ca:	80 93 6d 19 	sts	0x196D, r24
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
    87ce:	8d ef       	ldi	r24, 0xFD	; 253
    87d0:	9f e0       	ldi	r25, 0x0F	; 15
    87d2:	0e 94 07 5a 	call	0xb40e	; 0xb40e <eeprom_read_byte>
    87d6:	80 93 e6 1d 	sts	0x1DE6, r24
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
    87da:	9f ef       	ldi	r25, 0xFF	; 255
    87dc:	98 0f       	add	r25, r24
    87de:	9e 3f       	cpi	r25, 0xFE	; 254
    87e0:	e0 f5       	brcc	.+120    	; 0x885a <initPeripherals+0xae>
		OSCCAL = currentOsccal;
    87e2:	80 93 66 00 	sts	0x0066, r24
		currentOsccal = OSCCAL;
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
	}
	
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
    87e6:	80 91 6d 19 	lds	r24, 0x196D
    87ea:	90 91 6e 19 	lds	r25, 0x196E
    87ee:	9c 01       	movw	r18, r24
    87f0:	21 58       	subi	r18, 0x81	; 129
    87f2:	3c 40       	sbci	r19, 0x0C	; 12
    87f4:	23 30       	cpi	r18, 0x03	; 3
    87f6:	31 05       	cpc	r19, r1
    87f8:	08 f5       	brcc	.+66     	; 0x883c <initPeripherals+0x90>
		hardwareRevision = HW_REV_3_0;
    87fa:	10 92 3c 18 	sts	0x183C, r1

	if(rfAddress > 3203) {
		hardwareRevision = HW_REV_3_1;
	}

	initCalibration();
    87fe:	0e 94 ef 29 	call	0x53de	; 0x53de <initCalibration>
	initPortsIO();
    8802:	0e 94 0c 31 	call	0x6218	; 0x6218 <initPortsIO>
	initAdc();
    8806:	0e 94 19 36 	call	0x6c32	; 0x6c32 <initAdc>
	initMotors();
    880a:	0e 94 6f 1c 	call	0x38de	; 0x38de <initMotors>
	initRGBleds();
    880e:	0e 94 7a 1b 	call	0x36f4	; 0x36f4 <initRGBleds>
	initSPI();
    8812:	0e 94 69 46 	call	0x8cd2	; 0x8cd2 <initSPI>
	mirf_init();
    8816:	0e 94 65 46 	call	0x8cca	; 0x8cca <mirf_init>
	if(spiCommError==0) {
    881a:	80 91 6b 19 	lds	r24, 0x196B
    881e:	81 11       	cpse	r24, r1
    8820:	05 c0       	rjmp	.+10     	; 0x882c <initPeripherals+0x80>
		rfFlags |= 1;
    8822:	80 91 6c 19 	lds	r24, 0x196C
    8826:	81 60       	ori	r24, 0x01	; 1
    8828:	80 93 6c 19 	sts	0x196C, r24
	}
	initUsart0();
    882c:	0e 94 70 31 	call	0x62e0	; 0x62e0 <initUsart0>
	initAccelerometer();
    8830:	0e 94 18 3c 	call	0x7830	; 0x7830 <initAccelerometer>
	init_ir_remote_control();
    8834:	0e 94 86 44 	call	0x890c	; 0x890c <init_ir_remote_control>

	sei();			// enable global interrupts
    8838:	78 94       	sei
    883a:	08 95       	ret
	// some code parts change based on hardware revision
	if(rfAddress >= 3201 && rfAddress <= 3203) {
		hardwareRevision = HW_REV_3_0;
	}

	if(rfAddress == 3200) {
    883c:	80 38       	cpi	r24, 0x80	; 128
    883e:	2c e0       	ldi	r18, 0x0C	; 12
    8840:	92 07       	cpc	r25, r18
    8842:	21 f4       	brne	.+8      	; 0x884c <initPeripherals+0xa0>
		hardwareRevision = HW_REV_3_0_1;
    8844:	81 e0       	ldi	r24, 0x01	; 1
    8846:	80 93 3c 18 	sts	0x183C, r24
    884a:	d9 cf       	rjmp	.-78     	; 0x87fe <initPeripherals+0x52>
	}

	if(rfAddress > 3203) {
    884c:	84 38       	cpi	r24, 0x84	; 132
    884e:	9c 40       	sbci	r25, 0x0C	; 12
    8850:	b0 f2       	brcs	.-84     	; 0x87fe <initPeripherals+0x52>
		hardwareRevision = HW_REV_3_1;
    8852:	82 e0       	ldi	r24, 0x02	; 2
    8854:	80 93 3c 18 	sts	0x183C, r24
    8858:	d2 cf       	rjmp	.-92     	; 0x87fe <initPeripherals+0x52>
	rfAddress = eeprom_read_word((uint16_t*)4094);
	currentOsccal = eeprom_read_byte((uint8_t*)4093);
	if(currentOsccal!=0 && currentOsccal!=255) { // clear memory
		OSCCAL = currentOsccal;
	} else {
		currentOsccal = OSCCAL;
    885a:	60 91 66 00 	lds	r22, 0x0066
    885e:	60 93 e6 1d 	sts	0x1DE6, r22
		eeprom_write_byte((uint8_t*) 4093, currentOsccal);
    8862:	8d ef       	ldi	r24, 0xFD	; 253
    8864:	9f e0       	ldi	r25, 0x0F	; 15
    8866:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <eeprom_write_byte>
    886a:	bd cf       	rjmp	.-134    	; 0x87e6 <initPeripherals+0x3a>

0000886c <__vector_15>:

	
}

// used only for wake-up from sleep
ISR(TIMER2_OVF_vect) {
    886c:	1f 92       	push	r1
    886e:	0f 92       	push	r0
    8870:	0f b6       	in	r0, 0x3f	; 63
    8872:	0f 92       	push	r0
    8874:	11 24       	eor	r1, r1

}
    8876:	0f 90       	pop	r0
    8878:	0f be       	out	0x3f, r0	; 63
    887a:	0f 90       	pop	r0
    887c:	1f 90       	pop	r1
    887e:	18 95       	reti

00008880 <getTime100MicroSec>:
	initPeripherals();

}

unsigned long int getTime100MicroSec() {
	return clockTick;
    8880:	60 91 40 18 	lds	r22, 0x1840
    8884:	70 91 41 18 	lds	r23, 0x1841
    8888:	80 91 42 18 	lds	r24, 0x1842
    888c:	90 91 43 18 	lds	r25, 0x1843
}
    8890:	08 95       	ret

00008892 <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    8892:	81 e0       	ldi	r24, 0x01	; 1
    8894:	80 93 b8 19 	sts	0x19B8, r24
    8898:	08 95       	ret

0000889a <resetOdometry>:
}

void resetOdometry() {
	leftMotSteps = 0;
    889a:	10 92 9f 19 	sts	0x199F, r1
    889e:	10 92 a0 19 	sts	0x19A0, r1
    88a2:	10 92 a1 19 	sts	0x19A1, r1
    88a6:	10 92 a2 19 	sts	0x19A2, r1
	rightMotSteps = 0;
    88aa:	10 92 a3 19 	sts	0x19A3, r1
    88ae:	10 92 a4 19 	sts	0x19A4, r1
    88b2:	10 92 a5 19 	sts	0x19A5, r1
    88b6:	10 92 a6 19 	sts	0x19A6, r1
	theta = 0;
    88ba:	10 92 28 18 	sts	0x1828, r1
    88be:	10 92 29 18 	sts	0x1829, r1
    88c2:	10 92 2a 18 	sts	0x182A, r1
    88c6:	10 92 2b 18 	sts	0x182B, r1
	xPos = 0;
    88ca:	10 92 24 18 	sts	0x1824, r1
    88ce:	10 92 25 18 	sts	0x1825, r1
    88d2:	10 92 26 18 	sts	0x1826, r1
    88d6:	10 92 27 18 	sts	0x1827, r1
	yPos = 0;
    88da:	10 92 20 18 	sts	0x1820, r1
    88de:	10 92 21 18 	sts	0x1821, r1
    88e2:	10 92 22 18 	sts	0x1822, r1
    88e6:	10 92 23 18 	sts	0x1823, r1
	rightDist = 0;
    88ea:	10 92 14 18 	sts	0x1814, r1
    88ee:	10 92 15 18 	sts	0x1815, r1
    88f2:	10 92 16 18 	sts	0x1816, r1
    88f6:	10 92 17 18 	sts	0x1817, r1
	leftDist = 0;
    88fa:	10 92 18 18 	sts	0x1818, r1
    88fe:	10 92 19 18 	sts	0x1819, r1
    8902:	10 92 1a 18 	sts	0x181A, r1
    8906:	10 92 1b 18 	sts	0x181B, r1
    890a:	08 95       	ret

0000890c <init_ir_remote_control>:
static unsigned char check_temp = 0;
unsigned char address = 0;
unsigned char data_ir = 0;
unsigned char check = 2;

void init_ir_remote_control(void) { 	
    890c:	cf 93       	push	r28
    890e:	df 93       	push	r29

	PCICR = 0;
    8910:	c8 e6       	ldi	r28, 0x68	; 104
    8912:	d0 e0       	ldi	r29, 0x00	; 0
    8914:	18 82       	st	Y, r1
	PCMSK1 = 0;
    8916:	ac e6       	ldi	r26, 0x6C	; 108
    8918:	b0 e0       	ldi	r27, 0x00	; 0
    891a:	1c 92       	st	X, r1
	TCCR2A = 0;
    891c:	e0 eb       	ldi	r30, 0xB0	; 176
    891e:	f0 e0       	ldi	r31, 0x00	; 0
    8920:	10 82       	st	Z, r1
	TCCR2B = 0;
    8922:	10 92 b1 00 	sts	0x00B1, r1
	TIMSK2 = 0;
    8926:	10 92 70 00 	sts	0x0070, r1

	PCICR |= (1 << PCIE1);			// enable interrupt on change of PCINT15:8 pins
    892a:	88 81       	ld	r24, Y
    892c:	82 60       	ori	r24, 0x02	; 2
    892e:	88 83       	st	Y, r24
	PCMSK1 |= (1 << PCINT15);		// enable PCINT15
    8930:	8c 91       	ld	r24, X
    8932:	80 68       	ori	r24, 0x80	; 128
    8934:	8c 93       	st	X, r24
	TCCR2A |= (1 << WGM21); 		// mode 2 => CTC mode
    8936:	80 81       	ld	r24, Z
    8938:	82 60       	ori	r24, 0x02	; 2
    893a:	80 83       	st	Z, r24

}
    893c:	df 91       	pop	r29
    893e:	cf 91       	pop	r28
    8940:	08 95       	ret

00008942 <__vector_10>:

// external interrupt service routine
ISR(PCINT1_vect) {
    8942:	1f 92       	push	r1
    8944:	0f 92       	push	r0
    8946:	0f b6       	in	r0, 0x3f	; 63
    8948:	0f 92       	push	r0
    894a:	11 24       	eor	r1, r1
    894c:	8f 93       	push	r24

	if(irEnabled) {						// if the robot is configured to accept TV remote commands
    894e:	80 91 23 03 	lds	r24, 0x0323
    8952:	88 23       	and	r24, r24
    8954:	21 f1       	breq	.+72     	; 0x899e <__vector_10+0x5c>

		if(bit_is_clear(PINJ, 6)) {		// the interrupt is generated at every pin state change; we only look
    8956:	80 91 03 01 	lds	r24, 0x0103
    895a:	86 fd       	sbrc	r24, 6
    895c:	20 c0       	rjmp	.+64     	; 0x899e <__vector_10+0x5c>
										// for the falling edge
			PCICR &= ~(1 << PCIE1);		// disable external interrupt
    895e:	80 91 68 00 	lds	r24, 0x0068
    8962:	8d 7f       	andi	r24, 0xFD	; 253
    8964:	80 93 68 00 	sts	0x0068, r24
			PCMSK1 &= ~(1 << PCINT15);
    8968:	80 91 6c 00 	lds	r24, 0x006C
    896c:	8f 77       	andi	r24, 0x7F	; 127
    896e:	80 93 6c 00 	sts	0x006C, r24
		
			// check the pin change isn't due to a glitch; to check this verify that
			// the pin remain low for at least 400 us (the giltches last about 200 us)
			// 0.4 / 0.032 = 13 => 0.416 us
			checkGlitch = 1;							// we're checking if this is a glitch
    8972:	81 e0       	ldi	r24, 0x01	; 1
    8974:	80 93 22 03 	sts	0x0322, r24
			OCR2A = 13;									// output compare register
    8978:	8d e0       	ldi	r24, 0x0D	; 13
    897a:	80 93 b3 00 	sts	0x00B3, r24
			TCCR2B |= (1 << CS22) | (1 << CS21);		// 1/256 prescaler => 8 MHz / 256 = 31.25 KHz (32 us resolution)
    897e:	80 91 b1 00 	lds	r24, 0x00B1
    8982:	86 60       	ori	r24, 0x06	; 6
    8984:	80 93 b1 00 	sts	0x00B1, r24
			TIMSK2 |= (1 << OCIE2A);					// enable output compare interrupt
    8988:	80 91 70 00 	lds	r24, 0x0070
    898c:	82 60       	ori	r24, 0x02	; 2
    898e:	80 93 70 00 	sts	0x0070, r24

			check_temp = address_temp = data_temp = 0;
    8992:	10 92 58 1a 	sts	0x1A58, r1
    8996:	10 92 59 1a 	sts	0x1A59, r1
    899a:	10 92 57 1a 	sts	0x1A57, r1

		}

	}
	
}
    899e:	8f 91       	pop	r24
    89a0:	0f 90       	pop	r0
    89a2:	0f be       	out	0x3f, r0	; 63
    89a4:	0f 90       	pop	r0
    89a6:	1f 90       	pop	r1
    89a8:	18 95       	reti

000089aa <__vector_13>:

ISR(TIMER2_COMPA_vect) {
    89aa:	1f 92       	push	r1
    89ac:	0f 92       	push	r0
    89ae:	0f b6       	in	r0, 0x3f	; 63
    89b0:	0f 92       	push	r0
    89b2:	11 24       	eor	r1, r1
    89b4:	2f 93       	push	r18
    89b6:	3f 93       	push	r19
    89b8:	4f 93       	push	r20
    89ba:	5f 93       	push	r21
    89bc:	6f 93       	push	r22
    89be:	7f 93       	push	r23
    89c0:	8f 93       	push	r24
    89c2:	9f 93       	push	r25

	static int i = -1;

	//PORTB ^= (1 << 5);	// toggle red led

	TCCR2B &= ~(1 << CS22) &~(1 << CS21) &~(1 << CS20);		// stop timer2
    89c4:	80 91 b1 00 	lds	r24, 0x00B1
    89c8:	88 7f       	andi	r24, 0xF8	; 248
    89ca:	80 93 b1 00 	sts	0x00B1, r24
	
		if(checkGlitch) {					// if checking this is a glitch
    89ce:	80 91 22 03 	lds	r24, 0x0322
    89d2:	88 23       	and	r24, r24
    89d4:	69 f1       	breq	.+90     	; 0x8a30 <__vector_13+0x86>

			if(REMOTE) {					// if high it is a glitch
    89d6:	80 91 03 01 	lds	r24, 0x0103
    89da:	86 fd       	sbrc	r24, 6
    89dc:	68 c0       	rjmp	.+208    	; 0x8aae <__vector_13+0x104>
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
				i = -1;			

			} else {						// not a glitch => real command received

				checkGlitch = 0;
    89de:	10 92 22 03 	sts	0x0322, r1

				// activate the IR Receiver with a 2.1 ms cycle value
				// we set the resolution of the timer to be 0.032 ms (prescaler 1/256) so:
				// 2.1 / 0.032 = 64 to be set in the output compare register (=> 2.048 ms)
				// but we already wait 0.416 us => 13, so 64-13=51
				OCR2A = 51;								// output compare register
    89e2:	83 e3       	ldi	r24, 0x33	; 51

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    89e4:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    89e8:	80 91 b1 00 	lds	r24, 0x00B1
    89ec:	86 60       	ori	r24, 0x06	; 6
    89ee:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt
    89f2:	80 91 70 00 	lds	r24, 0x0070
    89f6:	82 60       	ori	r24, 0x02	; 2
    89f8:	80 93 70 00 	sts	0x0070, r24
    89fc:	80 91 2b 03 	lds	r24, 0x032B
    8a00:	90 91 2c 03 	lds	r25, 0x032C

			} 

		}
	
		if(i!=-1) {
    8a04:	8f 3f       	cpi	r24, 0xFF	; 255
    8a06:	2f ef       	ldi	r18, 0xFF	; 255
    8a08:	92 07       	cpc	r25, r18
    8a0a:	29 f0       	breq	.+10     	; 0x8a16 <__vector_13+0x6c>
    8a0c:	01 96       	adiw	r24, 0x01	; 1

			i++;
    8a0e:	90 93 2c 03 	sts	0x032C, r25
    8a12:	80 93 2b 03 	sts	0x032B, r24

		}

}
    8a16:	9f 91       	pop	r25
    8a18:	8f 91       	pop	r24
    8a1a:	7f 91       	pop	r23
    8a1c:	6f 91       	pop	r22
    8a1e:	5f 91       	pop	r21
    8a20:	4f 91       	pop	r20
    8a22:	3f 91       	pop	r19
    8a24:	2f 91       	pop	r18
    8a26:	0f 90       	pop	r0
    8a28:	0f be       	out	0x3f, r0	; 63
    8a2a:	0f 90       	pop	r0
    8a2c:	1f 90       	pop	r1
    8a2e:	18 95       	reti
			}

		} else {


			if (i == -1) { 						// start bit confirmed
    8a30:	80 91 2b 03 	lds	r24, 0x032B
    8a34:	90 91 2c 03 	lds	r25, 0x032C
    8a38:	8f 3f       	cpi	r24, 0xFF	; 255
    8a3a:	4f ef       	ldi	r20, 0xFF	; 255
    8a3c:	94 07       	cpc	r25, r20
    8a3e:	09 f4       	brne	.+2      	; 0x8a42 <__vector_13+0x98>
    8a40:	47 c0       	rjmp	.+142    	; 0x8ad0 <__vector_13+0x126>
					check_temp = address_temp = data_temp = 0;
					i=0;

				}

			} else if (i == 1)	{ 						// check bit read and change timer period
    8a42:	81 30       	cpi	r24, 0x01	; 1
    8a44:	91 05       	cpc	r25, r1
    8a46:	09 f4       	brne	.+2      	; 0x8a4a <__vector_13+0xa0>
    8a48:	7a c0       	rjmp	.+244    	; 0x8b3e <__vector_13+0x194>
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
    8a4a:	ac 01       	movw	r20, r24
    8a4c:	42 50       	subi	r20, 0x02	; 2
    8a4e:	51 09       	sbc	r21, r1
    8a50:	45 30       	cpi	r20, 0x05	; 5
    8a52:	51 05       	cpc	r21, r1
    8a54:	08 f4       	brcc	.+2      	; 0x8a58 <__vector_13+0xae>
    8a56:	4f c0       	rjmp	.+158    	; 0x8af6 <__vector_13+0x14c>

				unsigned char temp = REMOTE;
				temp <<= 6-i;
				address_temp += temp;

			} else if ((i > 6) && (i < 13 )) { 			// we read data
    8a58:	9c 01       	movw	r18, r24
    8a5a:	27 50       	subi	r18, 0x07	; 7
    8a5c:	31 09       	sbc	r19, r1
    8a5e:	26 30       	cpi	r18, 0x06	; 6
    8a60:	31 05       	cpc	r19, r1
    8a62:	08 f0       	brcs	.+2      	; 0x8a66 <__vector_13+0xbc>
    8a64:	8b c0       	rjmp	.+278    	; 0x8b7c <__vector_13+0x1d2>

				OCR2A = 54;
    8a66:	86 e3       	ldi	r24, 0x36	; 54
    8a68:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    8a6c:	80 91 b1 00 	lds	r24, 0x00B1
    8a70:	86 60       	ori	r24, 0x06	; 6
    8a72:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    8a76:	80 91 70 00 	lds	r24, 0x0070
    8a7a:	82 60       	ori	r24, 0x02	; 2
    8a7c:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    8a80:	20 91 03 01 	lds	r18, 0x0103
				temp <<= 6+6-i;
    8a84:	80 91 2b 03 	lds	r24, 0x032B
    8a88:	90 91 2c 03 	lds	r25, 0x032C

				OCR2A = 54;
				TCCR2B |= (1 << CS22) | (1 << CS21);
				TIMSK2 |= (1 << OCIE2A);

				unsigned char temp = REMOTE;
    8a8c:	26 fb       	bst	r18, 6
    8a8e:	66 27       	eor	r22, r22
    8a90:	60 f9       	bld	r22, 0
				temp <<= 6+6-i;
    8a92:	2c e0       	ldi	r18, 0x0C	; 12
    8a94:	30 e0       	ldi	r19, 0x00	; 0
    8a96:	28 1b       	sub	r18, r24
    8a98:	39 0b       	sbc	r19, r25
    8a9a:	01 c0       	rjmp	.+2      	; 0x8a9e <__vector_13+0xf4>
    8a9c:	66 0f       	add	r22, r22
    8a9e:	2a 95       	dec	r18
    8aa0:	ea f7       	brpl	.-6      	; 0x8a9c <__vector_13+0xf2>
				data_temp += temp;
    8aa2:	20 91 58 1a 	lds	r18, 0x1A58
    8aa6:	62 0f       	add	r22, r18
    8aa8:	60 93 58 1a 	sts	0x1A58, r22
    8aac:	ab cf       	rjmp	.-170    	; 0x8a04 <__vector_13+0x5a>
	
		if(checkGlitch) {					// if checking this is a glitch

			if(REMOTE) {					// if high it is a glitch

				PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    8aae:	80 91 68 00 	lds	r24, 0x0068
    8ab2:	82 60       	ori	r24, 0x02	; 2
    8ab4:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    8ab8:	80 91 6c 00 	lds	r24, 0x006C
    8abc:	80 68       	ori	r24, 0x80	; 128
    8abe:	80 93 6c 00 	sts	0x006C, r24
				i = -1;			
    8ac2:	8f ef       	ldi	r24, 0xFF	; 255
    8ac4:	9f ef       	ldi	r25, 0xFF	; 255
    8ac6:	90 93 2c 03 	sts	0x032C, r25
    8aca:	80 93 2b 03 	sts	0x032B, r24
    8ace:	a3 cf       	rjmp	.-186    	; 0x8a16 <__vector_13+0x6c>
		} else {


			if (i == -1) { 						// start bit confirmed

				if(REMOTE) {					// double check => if high it is only a noise
    8ad0:	20 91 03 01 	lds	r18, 0x0103
    8ad4:	26 ff       	sbrs	r18, 6
    8ad6:	3c c0       	rjmp	.+120    	; 0x8b50 <__vector_13+0x1a6>

					PCICR |= (1 << PCIE1);		// re-enable external interrupt to receive the next command
    8ad8:	20 91 68 00 	lds	r18, 0x0068
    8adc:	22 60       	ori	r18, 0x02	; 2
    8ade:	20 93 68 00 	sts	0x0068, r18
					PCMSK1 |= (1 << PCINT15);	// clear interrupt flag
    8ae2:	20 91 6c 00 	lds	r18, 0x006C
    8ae6:	20 68       	ori	r18, 0x80	; 128
    8ae8:	20 93 6c 00 	sts	0x006C, r18
					i = -1;
    8aec:	90 93 2c 03 	sts	0x032C, r25
    8af0:	80 93 2b 03 	sts	0x032B, r24
    8af4:	90 cf       	rjmp	.-224    	; 0x8a16 <__vector_13+0x6c>
				TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
				TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt

			} else if ((i > 1) && (i < 7)) {			// we read address
		
				OCR2A = 54;
    8af6:	86 e3       	ldi	r24, 0x36	; 54
    8af8:	80 93 b3 00 	sts	0x00B3, r24
				TCCR2B |= (1 << CS22) | (1 << CS21);
    8afc:	80 91 b1 00 	lds	r24, 0x00B1
    8b00:	86 60       	ori	r24, 0x06	; 6
    8b02:	80 93 b1 00 	sts	0x00B1, r24
				TIMSK2 |= (1 << OCIE2A);
    8b06:	80 91 70 00 	lds	r24, 0x0070
    8b0a:	82 60       	ori	r24, 0x02	; 2
    8b0c:	80 93 70 00 	sts	0x0070, r24

				unsigned char temp = REMOTE;
    8b10:	40 91 03 01 	lds	r20, 0x0103
				temp <<= 6-i;
    8b14:	80 91 2b 03 	lds	r24, 0x032B
    8b18:	90 91 2c 03 	lds	r25, 0x032C
		
				OCR2A = 54;
				TCCR2B |= (1 << CS22) | (1 << CS21);
				TIMSK2 |= (1 << OCIE2A);

				unsigned char temp = REMOTE;
    8b1c:	46 fb       	bst	r20, 6
    8b1e:	22 27       	eor	r18, r18
    8b20:	20 f9       	bld	r18, 0
				temp <<= 6-i;
    8b22:	46 e0       	ldi	r20, 0x06	; 6
    8b24:	50 e0       	ldi	r21, 0x00	; 0
    8b26:	48 1b       	sub	r20, r24
    8b28:	59 0b       	sbc	r21, r25
    8b2a:	01 c0       	rjmp	.+2      	; 0x8b2e <__vector_13+0x184>
    8b2c:	22 0f       	add	r18, r18
    8b2e:	4a 95       	dec	r20
    8b30:	ea f7       	brpl	.-6      	; 0x8b2c <__vector_13+0x182>
				address_temp += temp;
    8b32:	30 91 59 1a 	lds	r19, 0x1A59
    8b36:	23 0f       	add	r18, r19
    8b38:	20 93 59 1a 	sts	0x1A59, r18
    8b3c:	63 cf       	rjmp	.-314    	; 0x8a04 <__vector_13+0x5a>

				}

			} else if (i == 1)	{ 						// check bit read and change timer period

				check_temp = REMOTE;	   				// read the check bit
    8b3e:	80 91 03 01 	lds	r24, 0x0103
    8b42:	86 fb       	bst	r24, 6
    8b44:	88 27       	eor	r24, r24
    8b46:	80 f9       	bld	r24, 0
    8b48:	80 93 57 1a 	sts	0x1A57, r24
				//cycle value is 1.778 ms => 1.778 / 0.032 = 54 (=> 1.728 ms)
				OCR2A = 54;								// output compare register
    8b4c:	86 e3       	ldi	r24, 0x36	; 54
    8b4e:	4a cf       	rjmp	.-364    	; 0x89e4 <__vector_13+0x3a>

				} else {	// read the check bit
			
					//cycle value is 0.9 ms to go to check bit so:
					// 0.9 / 0.032 = 28 => 0.896
					OCR2A = 28;								// output compare register
    8b50:	8c e1       	ldi	r24, 0x1C	; 28
    8b52:	80 93 b3 00 	sts	0x00B3, r24
					TCCR2B |= (1 << CS22) | (1 << CS21);	// 1/256 prescaler
    8b56:	80 91 b1 00 	lds	r24, 0x00B1
    8b5a:	86 60       	ori	r24, 0x06	; 6
    8b5c:	80 93 b1 00 	sts	0x00B1, r24
					TIMSK2 |= (1 << OCIE2A);				// enable output compare interrupt					
    8b60:	80 91 70 00 	lds	r24, 0x0070
    8b64:	82 60       	ori	r24, 0x02	; 2
    8b66:	80 93 70 00 	sts	0x0070, r24

					check_temp = address_temp = data_temp = 0;
    8b6a:	10 92 58 1a 	sts	0x1A58, r1
    8b6e:	10 92 59 1a 	sts	0x1A59, r1
    8b72:	10 92 57 1a 	sts	0x1A57, r1
    8b76:	81 e0       	ldi	r24, 0x01	; 1
    8b78:	90 e0       	ldi	r25, 0x00	; 0
    8b7a:	49 cf       	rjmp	.-366    	; 0x8a0e <__vector_13+0x64>

				unsigned char temp = REMOTE;
				temp <<= 6+6-i;
				data_temp += temp;

			} else if (i == 13) { 						// last bit read
    8b7c:	8d 30       	cpi	r24, 0x0D	; 13
    8b7e:	91 05       	cpc	r25, r1
    8b80:	09 f0       	breq	.+2      	; 0x8b84 <__vector_13+0x1da>
    8b82:	44 cf       	rjmp	.-376    	; 0x8a0c <__vector_13+0x62>
				
				TIMSK2 = 0;								// disable all interrupt for timer2
    8b84:	10 92 70 00 	sts	0x0070, r1
				PCICR |= (1 << PCIE1);					// enable external interrupt to receive next command
    8b88:	80 91 68 00 	lds	r24, 0x0068
    8b8c:	82 60       	ori	r24, 0x02	; 2
    8b8e:	80 93 68 00 	sts	0x0068, r24
				PCMSK1 |= (1 << PCINT15);				// clear interrupt flag
    8b92:	80 91 6c 00 	lds	r24, 0x006C
    8b96:	80 68       	ori	r24, 0x80	; 128
    8b98:	80 93 6c 00 	sts	0x006C, r24

				i = -1;
    8b9c:	8f ef       	ldi	r24, 0xFF	; 255
    8b9e:	9f ef       	ldi	r25, 0xFF	; 255
    8ba0:	90 93 2c 03 	sts	0x032C, r25
    8ba4:	80 93 2b 03 	sts	0x032B, r24
				check = check_temp;
    8ba8:	80 91 57 1a 	lds	r24, 0x1A57
    8bac:	80 93 2d 03 	sts	0x032D, r24
				address = address_temp;
    8bb0:	80 91 59 1a 	lds	r24, 0x1A59
    8bb4:	80 93 56 1a 	sts	0x1A56, r24
				data_ir = data_temp;
    8bb8:	80 91 58 1a 	lds	r24, 0x1A58
    8bbc:	80 93 55 1a 	sts	0x1A55, r24
				command_received=1;
    8bc0:	81 e0       	ldi	r24, 0x01	; 1
    8bc2:	80 93 65 18 	sts	0x1865, r24
    8bc6:	27 cf       	rjmp	.-434    	; 0x8a16 <__vector_13+0x6c>

00008bc8 <ir_remote_get_data>:
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    8bc8:	80 91 55 1a 	lds	r24, 0x1A55
    8bcc:	08 95       	ret

00008bce <mirf_config>:


void mirf_config() 
// Sets the important registers in the MiRF module and powers the module
// in receiving mode
{
    8bce:	cf 93       	push	r28
    8bd0:	df 93       	push	r29
    8bd2:	00 d0       	rcall	.+0      	; 0x8bd4 <mirf_config+0x6>
    8bd4:	cd b7       	in	r28, 0x3d	; 61
    8bd6:	de b7       	in	r29, 0x3e	; 62
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8bd8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8bda:	80 e2       	ldi	r24, 0x20	; 32
    8bdc:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8be0:	8d e0       	ldi	r24, 0x0D	; 13
    8be2:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8be6:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8be8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8bea:	83 e2       	ldi	r24, 0x23	; 35
    8bec:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8bf0:	81 e0       	ldi	r24, 0x01	; 1
    8bf2:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8bf6:	28 9a       	sbi	0x05, 0	; 5

	// address width
	mirf_config_register(SETUP_AW, 0x01);

	// tx address
	temp[0] = (rfAddress>>8)&0xFF;
    8bf8:	80 91 6d 19 	lds	r24, 0x196D
    8bfc:	90 91 6e 19 	lds	r25, 0x196E
    8c00:	99 83       	std	Y+1, r25	; 0x01
	temp[1] = rfAddress & 0xFF;
    8c02:	8a 83       	std	Y+2, r24	; 0x02
	temp[2] = 0x00;
    8c04:	1b 82       	std	Y+3, r1	; 0x03
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    8c06:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c08:	80 e3       	ldi	r24, 0x30	; 48
    8c0a:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    8c0e:	63 e0       	ldi	r22, 0x03	; 3
    8c10:	ce 01       	movw	r24, r28
    8c12:	01 96       	adiw	r24, 0x01	; 1
    8c14:	0e 94 75 46 	call	0x8cea	; 0x8cea <SPI_Write_Block>
    mirf_CSN_hi;
    8c18:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_write_register(uint8_t reg, uint8_t * value, uint8_t len) 
// Writes an array of bytes into inte the MiRF registers.
{
    mirf_CSN_lo;
    8c1a:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c1c:	8a e2       	ldi	r24, 0x2A	; 42
    8c1e:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Block(value,len);
    8c22:	63 e0       	ldi	r22, 0x03	; 3
    8c24:	ce 01       	movw	r24, r28
    8c26:	01 96       	adiw	r24, 0x01	; 1
    8c28:	0e 94 75 46 	call	0x8cea	; 0x8cea <SPI_Write_Block>
    mirf_CSN_hi;
    8c2c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c30:	81 e2       	ldi	r24, 0x21	; 33
    8c32:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8c36:	81 e0       	ldi	r24, 0x01	; 1
    8c38:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c3c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c3e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c40:	82 e2       	ldi	r24, 0x22	; 34
    8c42:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8c46:	81 e0       	ldi	r24, 0x01	; 1
    8c48:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c4c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c4e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c50:	84 e2       	ldi	r24, 0x24	; 36
    8c52:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8c56:	82 e1       	ldi	r24, 0x12	; 18
    8c58:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c5c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c5e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c60:	85 e2       	ldi	r24, 0x25	; 37
    8c62:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8c66:	88 e2       	ldi	r24, 0x28	; 40
    8c68:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c6c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c6e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c70:	81 e3       	ldi	r24, 0x31	; 49
    8c72:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8c76:	8d e0       	ldi	r24, 0x0D	; 13
    8c78:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c7c:	28 9a       	sbi	0x05, 0	; 5

	// RX payload size; it isn't needed because the dynamic payload length is activated for ACK+PAYLOAD feature
    mirf_config_register(RX_PW_P0, PAYLOAD_SIZE);

	// enable extra features
    mirf_CSN_lo;
    8c7e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(NRF_ACTIVATE);
    8c80:	80 e5       	ldi	r24, 0x50	; 80
    8c82:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(0x73);
    8c86:	83 e7       	ldi	r24, 0x73	; 115
    8c88:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c8c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c8e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8c90:	8c e3       	ldi	r24, 0x3C	; 60
    8c92:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8c96:	81 e0       	ldi	r24, 0x01	; 1
    8c98:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8c9c:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8c9e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8ca0:	8d e3       	ldi	r24, 0x3D	; 61
    8ca2:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8ca6:	86 e0       	ldi	r24, 0x06	; 6
    8ca8:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8cac:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    8cae:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    8cb0:	80 e2       	ldi	r24, 0x20	; 32
    8cb2:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    SPI_Write_Byte(value);
    8cb6:	8f e0       	ldi	r24, 0x0F	; 15
    8cb8:	0e 94 9a 46 	call	0x8d34	; 0x8d34 <SPI_Write_Byte>
    mirf_CSN_hi;
    8cbc:	28 9a       	sbi	0x05, 0	; 5

    // Start receiver 
    //PTX = 0;        // Start in receiving mode
    //RX_POWERUP;     // Power up in receiving mode
    //mirf_CE_hi;     // Listening for pakets
}
    8cbe:	0f 90       	pop	r0
    8cc0:	0f 90       	pop	r0
    8cc2:	0f 90       	pop	r0
    8cc4:	df 91       	pop	r29
    8cc6:	cf 91       	pop	r28
    8cc8:	08 95       	ret

00008cca <mirf_init>:
// Initializes pins as interrupt to communicate with the MiRF module
// Should be called in the early initializing phase at startup.
{
    // Define CSN and CE as Output and set them to default
    //DDRB |= ((1<<CSN)|(1<<CE));
    mirf_CE_hi;
    8cca:	2c 9a       	sbi	0x05, 4	; 5
    mirf_CSN_hi;
    8ccc:	28 9a       	sbi	0x05, 0	; 5

	mirf_config();
    8cce:	0c 94 e7 45 	jmp	0x8bce	; 0x8bce <mirf_config>

00008cd2 <initSPI>:
	}
}

void initSPI() {

    SPI_DDR &= ~((1<<SPI_MOSI)|(1<<SPI_MISO)|(1<<SPI_SS)|(1<<SPI_SCK));
    8cd2:	84 b1       	in	r24, 0x04	; 4
    8cd4:	80 7f       	andi	r24, 0xF0	; 240
    8cd6:	84 b9       	out	0x04, r24	; 4
    // Define the following pins as output
    SPI_DDR |= ((1<<SPI_MOSI)|(1<<SPI_SS)|(1<<SPI_SCK));
    8cd8:	84 b1       	in	r24, 0x04	; 4
    8cda:	87 60       	ori	r24, 0x07	; 7
    8cdc:	84 b9       	out	0x04, r24	; 4

    
    SPCR = ((1<<SPE)|               // SPI Enable
    8cde:	80 e5       	ldi	r24, 0x50	; 80
    8ce0:	8c bd       	out	0x2c, r24	; 44
            (1<<MSTR)|              // 1:Master/ 0:Slave
            (0<<SPR1)|(0<<SPR0)|    // SPI Clock Rate => default 1/4 => 2 MHz
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR |= (1<<SPI2X);              // Double Clock Rate
    8ce2:	8d b5       	in	r24, 0x2d	; 45
    8ce4:	81 60       	ori	r24, 0x01	; 1
    8ce6:	8d bd       	out	0x2d, r24	; 45
    8ce8:	08 95       	ret

00008cea <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    8cea:	66 23       	and	r22, r22
    8cec:	e1 f0       	breq	.+56     	; 0x8d26 <SPI_Write_Block+0x3c>
    8cee:	fc 01       	movw	r30, r24
    8cf0:	61 50       	subi	r22, 0x01	; 1
    8cf2:	26 2f       	mov	r18, r22
    8cf4:	30 e0       	ldi	r19, 0x00	; 0
    8cf6:	2f 5f       	subi	r18, 0xFF	; 255
    8cf8:	3f 4f       	sbci	r19, 0xFF	; 255
    8cfa:	28 0f       	add	r18, r24
    8cfc:	39 1f       	adc	r19, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    8cfe:	41 e0       	ldi	r20, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    8d00:	81 91       	ld	r24, Z+
    8d02:	8e bd       	out	0x2e, r24	; 46
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
    8d04:	80 e0       	ldi	r24, 0x00	; 0
    8d06:	90 e0       	ldi	r25, 0x00	; 0
	while (1) {
		timeout++;
    8d08:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    8d0a:	80 31       	cpi	r24, 0x10	; 16
    8d0c:	57 e2       	ldi	r21, 0x27	; 39
    8d0e:	95 07       	cpc	r25, r21
    8d10:	58 f4       	brcc	.+22     	; 0x8d28 <SPI_Write_Block+0x3e>
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    8d12:	0d b4       	in	r0, 0x2d	; 45
    8d14:	07 fe       	sbrs	r0, 7
    8d16:	f8 cf       	rjmp	.-16     	; 0x8d08 <SPI_Write_Block+0x1e>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    8d18:	80 91 6b 19 	lds	r24, 0x196B
    8d1c:	81 11       	cpse	r24, r1
    8d1e:	03 c0       	rjmp	.+6      	; 0x8d26 <SPI_Write_Block+0x3c>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    8d20:	e2 17       	cp	r30, r18
    8d22:	f3 07       	cpc	r31, r19
    8d24:	69 f7       	brne	.-38     	; 0x8d00 <SPI_Write_Block+0x16>
    8d26:	08 95       	ret
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    8d28:	40 93 6b 19 	sts	0x196B, r20
		}
	
		if(SPSR & _BV(SPIF)) {
    8d2c:	0d b4       	in	r0, 0x2d	; 45
    8d2e:	07 fe       	sbrs	r0, 7
    8d30:	eb cf       	rjmp	.-42     	; 0x8d08 <SPI_Write_Block+0x1e>
    8d32:	08 95       	ret

00008d34 <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    8d34:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    8d36:	81 e0       	ldi	r24, 0x01	; 1
    8d38:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    8d3a:	21 e0       	ldi	r18, 0x01	; 1
    8d3c:	05 c0       	rjmp	.+10     	; 0x8d48 <SPI_Write_Byte+0x14>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    8d3e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    8d40:	80 31       	cpi	r24, 0x10	; 16
    8d42:	37 e2       	ldi	r19, 0x27	; 39
    8d44:	93 07       	cpc	r25, r19
    8d46:	28 f4       	brcc	.+10     	; 0x8d52 <SPI_Write_Byte+0x1e>
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    8d48:	0d b4       	in	r0, 0x2d	; 45
    8d4a:	07 fe       	sbrs	r0, 7
    8d4c:	f8 cf       	rjmp	.-16     	; 0x8d3e <SPI_Write_Byte+0xa>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    8d4e:	8e b5       	in	r24, 0x2e	; 46
}
    8d50:	08 95       	ret
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    8d52:	20 93 6b 19 	sts	0x196B, r18
    8d56:	f8 cf       	rjmp	.-16     	; 0x8d48 <SPI_Write_Byte+0x14>

00008d58 <AsebaSendMessage>:
}

/* implementation of vm hooks */

void AsebaSendMessage(AsebaVMState *vm, uint16 type, const void *data, uint16 size)
{
    8d58:	0f 93       	push	r16
    8d5a:	1f 93       	push	r17
    8d5c:	cf 93       	push	r28
    8d5e:	df 93       	push	r29
    8d60:	1f 92       	push	r1
    8d62:	1f 92       	push	r1
    8d64:	cd b7       	in	r28, 0x3d	; 61
    8d66:	de b7       	in	r29, 0x3e	; 62
    8d68:	8c 01       	movw	r16, r24
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8d6a:	69 83       	std	Y+1, r22	; 0x01
    8d6c:	7a 83       	std	Y+2, r23	; 0x02
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8d6e:	60 93 5c 1a 	sts	0x1A5C, r22
    8d72:	82 e0       	ldi	r24, 0x02	; 2
    8d74:	90 e0       	ldi	r25, 0x00	; 0
    8d76:	90 93 5b 1a 	sts	0x1A5B, r25
    8d7a:	80 93 5a 1a 	sts	0x1A5A, r24
    8d7e:	70 93 5d 1a 	sts	0x1A5D, r23
{
	uint16 i;

	buffer_pos = 0;
	buffer_add_uint16(type);
	for (i = 0; i < size; i++)
    8d82:	21 15       	cp	r18, r1
    8d84:	31 05       	cpc	r19, r1
    8d86:	e9 f0       	breq	.+58     	; 0x8dc2 <AsebaSendMessage+0x6a>
    8d88:	da 01       	movw	r26, r20
    8d8a:	ee e5       	ldi	r30, 0x5E	; 94
    8d8c:	fa e1       	ldi	r31, 0x1A	; 26
    8d8e:	2e 5f       	subi	r18, 0xFE	; 254
    8d90:	3f 4f       	sbci	r19, 0xFF	; 255
    8d92:	a9 01       	movw	r20, r18
    8d94:	44 5a       	subi	r20, 0xA4	; 164
    8d96:	55 4e       	sbci	r21, 0xE5	; 229
		buffer_add_uint8(((const unsigned char*)data)[i]);
    8d98:	9d 91       	ld	r25, X+
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8d9a:	91 93       	st	Z+, r25
{
	uint16 i;

	buffer_pos = 0;
	buffer_add_uint16(type);
	for (i = 0; i < size; i++)
    8d9c:	e4 17       	cp	r30, r20
    8d9e:	f5 07       	cpc	r31, r21
    8da0:	d9 f7       	brne	.-10     	; 0x8d98 <AsebaSendMessage+0x40>
    8da2:	30 93 5b 1a 	sts	0x1A5B, r19
    8da6:	20 93 5a 1a 	sts	0x1A5A, r18
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8daa:	a9 01       	movw	r20, r18
	buffer_pos = 0;
	buffer_add_uint16(type);
	for (i = 0; i < size; i++)
		buffer_add_uint8(((const unsigned char*)data)[i]);

	AsebaSendBuffer(vm, buffer, buffer_pos);
    8dac:	6c e5       	ldi	r22, 0x5C	; 92
    8dae:	7a e1       	ldi	r23, 0x1A	; 26
    8db0:	c8 01       	movw	r24, r16
}
    8db2:	0f 90       	pop	r0
    8db4:	0f 90       	pop	r0
    8db6:	df 91       	pop	r29
    8db8:	cf 91       	pop	r28
    8dba:	1f 91       	pop	r17
    8dbc:	0f 91       	pop	r16
	buffer_pos = 0;
	buffer_add_uint16(type);
	for (i = 0; i < size; i++)
		buffer_add_uint8(((const unsigned char*)data)[i]);

	AsebaSendBuffer(vm, buffer, buffer_pos);
    8dbe:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <AsebaSendBuffer>
{
	uint16 i;

	buffer_pos = 0;
	buffer_add_uint16(type);
	for (i = 0; i < size; i++)
    8dc2:	42 e0       	ldi	r20, 0x02	; 2
    8dc4:	50 e0       	ldi	r21, 0x00	; 0
    8dc6:	f2 cf       	rjmp	.-28     	; 0x8dac <AsebaSendMessage+0x54>

00008dc8 <AsebaSendVariables>:
	AsebaSendBuffer(vm, buffer, buffer_pos);
}
#endif

void AsebaSendVariables(AsebaVMState *vm, uint16 start, uint16 length)
{
    8dc8:	cf 92       	push	r12
    8dca:	df 92       	push	r13
    8dcc:	ef 92       	push	r14
    8dce:	ff 92       	push	r15
    8dd0:	0f 93       	push	r16
    8dd2:	1f 93       	push	r17
    8dd4:	cf 93       	push	r28
    8dd6:	df 93       	push	r29
    8dd8:	1f 92       	push	r1
    8dda:	1f 92       	push	r1
    8ddc:	cd b7       	in	r28, 0x3d	; 61
    8dde:	de b7       	in	r29, 0x3e	; 62
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8de0:	25 e0       	ldi	r18, 0x05	; 5
    8de2:	20 93 5c 1a 	sts	0x1A5C, r18
    8de6:	20 e9       	ldi	r18, 0x90	; 144
    8de8:	20 93 5d 1a 	sts	0x1A5D, r18
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8dec:	7a 83       	std	Y+2, r23	; 0x02
    8dee:	69 83       	std	Y+1, r22	; 0x01
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8df0:	60 93 5e 1a 	sts	0x1A5E, r22
    8df4:	24 e0       	ldi	r18, 0x04	; 4
    8df6:	30 e0       	ldi	r19, 0x00	; 0
    8df8:	30 93 5b 1a 	sts	0x1A5B, r19
    8dfc:	20 93 5a 1a 	sts	0x1A5A, r18
    8e00:	2a 81       	ldd	r18, Y+2	; 0x02
    8e02:	20 93 5f 1a 	sts	0x1A5F, r18
	uint16 i;
#ifndef ASEBA_LIMITED_MESSAGE_SIZE  //This is usefull with device that cannot send big packets like Thymio Wireless module.
	buffer_pos = 0;
	buffer_add_uint16(ASEBA_MESSAGE_VARIABLES);
	buffer_add_uint16(start);
	for (i = start; i < start + length; i++)
    8e06:	9b 01       	movw	r18, r22
    8e08:	24 0f       	add	r18, r20
    8e0a:	35 1f       	adc	r19, r21
    8e0c:	62 17       	cp	r22, r18
    8e0e:	73 07       	cpc	r23, r19
    8e10:	08 f0       	brcs	.+2      	; 0x8e14 <AsebaSendVariables+0x4c>
    8e12:	43 c0       	rjmp	.+134    	; 0x8e9a <AsebaSendVariables+0xd2>
    8e14:	a1 e6       	ldi	r26, 0x61	; 97
    8e16:	ba e1       	ldi	r27, 0x1A	; 26
    8e18:	9a 01       	movw	r18, r20
    8e1a:	22 0f       	add	r18, r18
    8e1c:	33 1f       	adc	r19, r19
    8e1e:	f9 01       	movw	r30, r18
    8e20:	ef 59       	subi	r30, 0x9F	; 159
    8e22:	f5 4e       	sbci	r31, 0xE5	; 229
    8e24:	7f 01       	movw	r14, r30
    8e26:	66 0f       	add	r22, r22
    8e28:	77 1f       	adc	r23, r23
    8e2a:	0b ef       	ldi	r16, 0xFB	; 251
    8e2c:	1f ef       	ldi	r17, 0xFF	; 255
    8e2e:	0c 55       	subi	r16, 0x5C	; 92
    8e30:	1a 41       	sbci	r17, 0x1A	; 26
    8e32:	21 e0       	ldi	r18, 0x01	; 1
    8e34:	30 e0       	ldi	r19, 0x00	; 0
    8e36:	2c 55       	subi	r18, 0x5C	; 92
    8e38:	3a 41       	sbci	r19, 0x1A	; 26
		buffer_add_uint16(vm->variables[i]);
    8e3a:	fc 01       	movw	r30, r24
    8e3c:	c0 84       	ldd	r12, Z+8	; 0x08
    8e3e:	d1 84       	ldd	r13, Z+9	; 0x09
    8e40:	f6 01       	movw	r30, r12
    8e42:	e6 0f       	add	r30, r22
    8e44:	f7 1f       	adc	r31, r23
    8e46:	ea 0f       	add	r30, r26
    8e48:	fb 1f       	adc	r31, r27
    8e4a:	e0 0f       	add	r30, r16
    8e4c:	f1 1f       	adc	r31, r17
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8e4e:	d0 80       	ld	r13, Z
    8e50:	e1 81       	ldd	r30, Z+1	; 0x01
    8e52:	d9 82       	std	Y+1, r13	; 0x01
    8e54:	ea 83       	std	Y+2, r30	; 0x02
    8e56:	fd 01       	movw	r30, r26
    8e58:	31 97       	sbiw	r30, 0x01	; 1
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8e5a:	d0 82       	st	Z, r13
    8e5c:	f9 01       	movw	r30, r18
    8e5e:	ea 0f       	add	r30, r26
    8e60:	fb 1f       	adc	r31, r27
    8e62:	f0 93 5b 1a 	sts	0x1A5B, r31
    8e66:	e0 93 5a 1a 	sts	0x1A5A, r30
    8e6a:	ea 81       	ldd	r30, Y+2	; 0x02
    8e6c:	ec 93       	st	X, r30
    8e6e:	12 96       	adiw	r26, 0x02	; 2
	uint16 i;
#ifndef ASEBA_LIMITED_MESSAGE_SIZE  //This is usefull with device that cannot send big packets like Thymio Wireless module.
	buffer_pos = 0;
	buffer_add_uint16(ASEBA_MESSAGE_VARIABLES);
	buffer_add_uint16(start);
	for (i = start; i < start + length; i++)
    8e70:	ae 15       	cp	r26, r14
    8e72:	bf 05       	cpc	r27, r15
    8e74:	11 f7       	brne	.-60     	; 0x8e3a <AsebaSendVariables+0x72>
    8e76:	4e 5f       	subi	r20, 0xFE	; 254
    8e78:	5f 4f       	sbci	r21, 0xFF	; 255
    8e7a:	44 0f       	add	r20, r20
    8e7c:	55 1f       	adc	r21, r21
		buffer_add_uint16(vm->variables[i]);

	AsebaSendBuffer(vm, buffer, buffer_pos);
    8e7e:	6c e5       	ldi	r22, 0x5C	; 92
    8e80:	7a e1       	ldi	r23, 0x1A	; 26

		start += size;
		length -= size;
	} while(length);
#endif
}
    8e82:	0f 90       	pop	r0
    8e84:	0f 90       	pop	r0
    8e86:	df 91       	pop	r29
    8e88:	cf 91       	pop	r28
    8e8a:	1f 91       	pop	r17
    8e8c:	0f 91       	pop	r16
    8e8e:	ff 90       	pop	r15
    8e90:	ef 90       	pop	r14
    8e92:	df 90       	pop	r13
    8e94:	cf 90       	pop	r12
	buffer_add_uint16(ASEBA_MESSAGE_VARIABLES);
	buffer_add_uint16(start);
	for (i = start; i < start + length; i++)
		buffer_add_uint16(vm->variables[i]);

	AsebaSendBuffer(vm, buffer, buffer_pos);
    8e96:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <AsebaSendBuffer>
	uint16 i;
#ifndef ASEBA_LIMITED_MESSAGE_SIZE  //This is usefull with device that cannot send big packets like Thymio Wireless module.
	buffer_pos = 0;
	buffer_add_uint16(ASEBA_MESSAGE_VARIABLES);
	buffer_add_uint16(start);
	for (i = start; i < start + length; i++)
    8e9a:	44 e0       	ldi	r20, 0x04	; 4
    8e9c:	50 e0       	ldi	r21, 0x00	; 0
    8e9e:	ef cf       	rjmp	.-34     	; 0x8e7e <AsebaSendVariables+0xb6>

00008ea0 <AsebaSendDescription>:
	} while(length);
#endif
}

void AsebaSendDescription(AsebaVMState *vm)
{
    8ea0:	6f 92       	push	r6
    8ea2:	7f 92       	push	r7
    8ea4:	8f 92       	push	r8
    8ea6:	9f 92       	push	r9
    8ea8:	af 92       	push	r10
    8eaa:	bf 92       	push	r11
    8eac:	cf 92       	push	r12
    8eae:	df 92       	push	r13
    8eb0:	ef 92       	push	r14
    8eb2:	ff 92       	push	r15
    8eb4:	0f 93       	push	r16
    8eb6:	1f 93       	push	r17
    8eb8:	cf 93       	push	r28
    8eba:	df 93       	push	r29
    8ebc:	1f 92       	push	r1
    8ebe:	1f 92       	push	r1
    8ec0:	cd b7       	in	r28, 0x3d	; 61
    8ec2:	de b7       	in	r29, 0x3e	; 62
    8ec4:	6c 01       	movw	r12, r24
	const AsebaVMDescription *vmDescription = AsebaGetVMDescription(vm);
    8ec6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <AsebaGetVMDescription>
    8eca:	5c 01       	movw	r10, r24
	const AsebaVariableDescription* namedVariables = vmDescription->variables;
    8ecc:	4c 01       	movw	r8, r24
    8ece:	82 e0       	ldi	r24, 0x02	; 2
    8ed0:	88 0e       	add	r8, r24
    8ed2:	91 1c       	adc	r9, r1
	const AsebaNativeFunctionDescription* const * nativeFunctionsDescription = AsebaGetNativeFunctionsDescriptions(vm);
    8ed4:	c6 01       	movw	r24, r12
    8ed6:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <AsebaGetNativeFunctionsDescriptions>
    8eda:	8c 01       	movw	r16, r24
	const AsebaLocalEventDescription* localEvents = AsebaGetLocalEventsDescriptions(vm);
    8edc:	c6 01       	movw	r24, r12
    8ede:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <AsebaGetLocalEventsDescriptions>
    8ee2:	7c 01       	movw	r14, r24
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8ee4:	10 92 5c 1a 	sts	0x1A5C, r1
    8ee8:	80 e9       	ldi	r24, 0x90	; 144
    8eea:	80 93 5d 1a 	sts	0x1A5D, r24
	uint16 i = 0;
	buffer_pos = 0;
	
	buffer_add_uint16(ASEBA_MESSAGE_DESCRIPTION);

	buffer_add_string(vmDescription->name);
    8eee:	d5 01       	movw	r26, r10
    8ef0:	ed 91       	ld	r30, X+
    8ef2:	fc 91       	ld	r31, X
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    8ef4:	df 01       	movw	r26, r30
    8ef6:	0d 90       	ld	r0, X+
    8ef8:	00 20       	and	r0, r0
    8efa:	e9 f7       	brne	.-6      	; 0x8ef6 <AsebaSendDescription+0x56>
    8efc:	11 97       	sbiw	r26, 0x01	; 1
    8efe:	ae 1b       	sub	r26, r30
    8f00:	bf 0b       	sbc	r27, r31
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f02:	83 e0       	ldi	r24, 0x03	; 3
    8f04:	90 e0       	ldi	r25, 0x00	; 0
    8f06:	90 93 5b 1a 	sts	0x1A5B, r25
    8f0a:	80 93 5a 1a 	sts	0x1A5A, r24
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    8f0e:	a0 93 5e 1a 	sts	0x1A5E, r26
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f12:	af e5       	ldi	r26, 0x5F	; 95
    8f14:	ba e1       	ldi	r27, 0x1A	; 26
    8f16:	23 e0       	ldi	r18, 0x03	; 3
    8f18:	30 e0       	ldi	r19, 0x00	; 0
    8f1a:	03 c0       	rjmp	.+6      	; 0x8f22 <AsebaSendDescription+0x82>
    8f1c:	2f 5f       	subi	r18, 0xFF	; 255
    8f1e:	3f 4f       	sbci	r19, 0xFF	; 255
    8f20:	8d 93       	st	X+, r24

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    8f22:	81 91       	ld	r24, Z+
    8f24:	81 11       	cpse	r24, r1
    8f26:	fa cf       	rjmp	.-12     	; 0x8f1c <AsebaSendDescription+0x7c>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f28:	d9 01       	movw	r26, r18
    8f2a:	a4 5a       	subi	r26, 0xA4	; 164
    8f2c:	b5 4e       	sbci	r27, 0xE5	; 229
    8f2e:	85 e0       	ldi	r24, 0x05	; 5
    8f30:	8c 93       	st	X, r24
    8f32:	11 96       	adiw	r26, 0x01	; 1
    8f34:	1c 92       	st	X, r1
    8f36:	11 97       	sbiw	r26, 0x01	; 1
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8f38:	f6 01       	movw	r30, r12
    8f3a:	82 81       	ldd	r24, Z+2	; 0x02
    8f3c:	93 81       	ldd	r25, Z+3	; 0x03
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f3e:	12 96       	adiw	r26, 0x02	; 2
    8f40:	8c 93       	st	X, r24
    8f42:	12 97       	sbiw	r26, 0x02	; 2
    8f44:	13 96       	adiw	r26, 0x03	; 3
    8f46:	9c 93       	st	X, r25
    8f48:	13 97       	sbiw	r26, 0x03	; 3
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8f4a:	82 85       	ldd	r24, Z+10	; 0x0a
    8f4c:	93 85       	ldd	r25, Z+11	; 0x0b
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f4e:	14 96       	adiw	r26, 0x04	; 4
    8f50:	8c 93       	st	X, r24
    8f52:	14 97       	sbiw	r26, 0x04	; 4
    8f54:	15 96       	adiw	r26, 0x05	; 5
    8f56:	9c 93       	st	X, r25
    8f58:	15 97       	sbiw	r26, 0x05	; 5
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8f5a:	86 81       	ldd	r24, Z+6	; 0x06
    8f5c:	97 81       	ldd	r25, Z+7	; 0x07
    8f5e:	89 83       	std	Y+1, r24	; 0x01
    8f60:	9a 83       	std	Y+2, r25	; 0x02
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f62:	16 96       	adiw	r26, 0x06	; 6
    8f64:	8c 93       	st	X, r24
    8f66:	16 97       	sbiw	r26, 0x06	; 6
    8f68:	b9 01       	movw	r22, r18
    8f6a:	68 5f       	subi	r22, 0xF8	; 248
    8f6c:	7f 4f       	sbci	r23, 0xFF	; 255
    8f6e:	17 96       	adiw	r26, 0x07	; 7
    8f70:	9c 93       	st	X, r25
    8f72:	17 97       	sbiw	r26, 0x07	; 7
	buffer_add_uint16(vm->bytecodeSize);
	buffer_add_uint16(vm->stackSize);
	buffer_add_uint16(vm->variablesSize);

	// compute the number of variables descriptions
	for (i = 0; namedVariables[i].size; i++)
    8f74:	f5 01       	movw	r30, r10
    8f76:	82 81       	ldd	r24, Z+2	; 0x02
    8f78:	93 81       	ldd	r25, Z+3	; 0x03
    8f7a:	89 2b       	or	r24, r25
    8f7c:	09 f4       	brne	.+2      	; 0x8f80 <AsebaSendDescription+0xe0>
    8f7e:	ec c1       	rjmp	.+984    	; 0x9358 <AsebaSendDescription+0x4b8>
    8f80:	f4 01       	movw	r30, r8
    8f82:	80 e0       	ldi	r24, 0x00	; 0
    8f84:	90 e0       	ldi	r25, 0x00	; 0
    8f86:	01 96       	adiw	r24, 0x01	; 1
    8f88:	34 96       	adiw	r30, 0x04	; 4
    8f8a:	40 81       	ld	r20, Z
    8f8c:	51 81       	ldd	r21, Z+1	; 0x01
    8f8e:	45 2b       	or	r20, r21
    8f90:	d1 f7       	brne	.-12     	; 0x8f86 <AsebaSendDescription+0xe6>
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8f92:	9a 83       	std	Y+2, r25	; 0x02
    8f94:	89 83       	std	Y+1, r24	; 0x01
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8f96:	fb 01       	movw	r30, r22
    8f98:	e4 5a       	subi	r30, 0xA4	; 164
    8f9a:	f5 4e       	sbci	r31, 0xE5	; 229
    8f9c:	80 83       	st	Z, r24
    8f9e:	b9 01       	movw	r22, r18
    8fa0:	66 5f       	subi	r22, 0xF6	; 246
    8fa2:	7f 4f       	sbci	r23, 0xFF	; 255
    8fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    8fa6:	19 96       	adiw	r26, 0x09	; 9
    8fa8:	8c 93       	st	X, r24
    8faa:	19 97       	sbiw	r26, 0x09	; 9
	for (i = 0; namedVariables[i].size; i++)
		;
	buffer_add_uint16(i);
	
	// compute the number of local event functions
	for (i = 0; localEvents[i].name; i++)
    8fac:	f7 01       	movw	r30, r14
    8fae:	80 81       	ld	r24, Z
    8fb0:	91 81       	ldd	r25, Z+1	; 0x01
    8fb2:	89 2b       	or	r24, r25
    8fb4:	09 f4       	brne	.+2      	; 0x8fb8 <AsebaSendDescription+0x118>
    8fb6:	d3 c1       	rjmp	.+934    	; 0x935e <AsebaSendDescription+0x4be>
    8fb8:	80 e0       	ldi	r24, 0x00	; 0
    8fba:	90 e0       	ldi	r25, 0x00	; 0
    8fbc:	01 96       	adiw	r24, 0x01	; 1
    8fbe:	34 96       	adiw	r30, 0x04	; 4
    8fc0:	40 81       	ld	r20, Z
    8fc2:	51 81       	ldd	r21, Z+1	; 0x01
    8fc4:	45 2b       	or	r20, r21
    8fc6:	d1 f7       	brne	.-12     	; 0x8fbc <AsebaSendDescription+0x11c>
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8fc8:	9a 83       	std	Y+2, r25	; 0x02
    8fca:	89 83       	std	Y+1, r24	; 0x01
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    8fcc:	fb 01       	movw	r30, r22
    8fce:	e4 5a       	subi	r30, 0xA4	; 164
    8fd0:	f5 4e       	sbci	r31, 0xE5	; 229
    8fd2:	80 83       	st	Z, r24
    8fd4:	b9 01       	movw	r22, r18
    8fd6:	64 5f       	subi	r22, 0xF4	; 244
    8fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    8fda:	8a 81       	ldd	r24, Y+2	; 0x02
    8fdc:	1b 96       	adiw	r26, 0x0b	; 11
    8fde:	8c 93       	st	X, r24
    8fe0:	1b 97       	sbiw	r26, 0x0b	; 11
	for (i = 0; localEvents[i].name; i++)
		;
	buffer_add_uint16(i);
	
	// compute the number of native functions
	for (i = 0; nativeFunctionsDescription[i]; i++)
    8fe2:	f8 01       	movw	r30, r16
    8fe4:	80 81       	ld	r24, Z
    8fe6:	91 81       	ldd	r25, Z+1	; 0x01
    8fe8:	89 2b       	or	r24, r25
    8fea:	09 f4       	brne	.+2      	; 0x8fee <AsebaSendDescription+0x14e>
    8fec:	bb c1       	rjmp	.+886    	; 0x9364 <AsebaSendDescription+0x4c4>
    8fee:	32 96       	adiw	r30, 0x02	; 2
    8ff0:	80 e0       	ldi	r24, 0x00	; 0
    8ff2:	90 e0       	ldi	r25, 0x00	; 0
    8ff4:	01 96       	adiw	r24, 0x01	; 1
    8ff6:	41 91       	ld	r20, Z+
    8ff8:	51 91       	ld	r21, Z+
    8ffa:	45 2b       	or	r20, r21
    8ffc:	d9 f7       	brne	.-10     	; 0x8ff4 <AsebaSendDescription+0x154>
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    8ffe:	9a 83       	std	Y+2, r25	; 0x02
    9000:	89 83       	std	Y+1, r24	; 0x01
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    9002:	fb 01       	movw	r30, r22
    9004:	e4 5a       	subi	r30, 0xA4	; 164
    9006:	f5 4e       	sbci	r31, 0xE5	; 229
    9008:	80 83       	st	Z, r24
    900a:	a9 01       	movw	r20, r18
    900c:	42 5f       	subi	r20, 0xF2	; 242
    900e:	5f 4f       	sbci	r21, 0xFF	; 255
    9010:	50 93 5b 1a 	sts	0x1A5B, r21
    9014:	40 93 5a 1a 	sts	0x1A5A, r20
    9018:	8a 81       	ldd	r24, Y+2	; 0x02
    901a:	1d 96       	adiw	r26, 0x0d	; 13
    901c:	8c 93       	st	X, r24
	for (i = 0; nativeFunctionsDescription[i]; i++)
		;
	buffer_add_uint16(i);
	
	// send buffer
	AsebaSendBuffer(vm, buffer, buffer_pos);
    901e:	6c e5       	ldi	r22, 0x5C	; 92
    9020:	7a e1       	ldi	r23, 0x1A	; 26
    9022:	c6 01       	movw	r24, r12
    9024:	0e 94 82 16 	call	0x2d04	; 0x2d04 <AsebaSendBuffer>
	
	// send named variables description
	for (i = 0; namedVariables[i].name; i++)
    9028:	d5 01       	movw	r26, r10
    902a:	14 96       	adiw	r26, 0x04	; 4
    902c:	8d 91       	ld	r24, X+
    902e:	9c 91       	ld	r25, X
    9030:	15 97       	sbiw	r26, 0x05	; 5
    9032:	89 2b       	or	r24, r25
    9034:	09 f4       	brne	.+2      	; 0x9038 <AsebaSendDescription+0x198>
    9036:	48 c0       	rjmp	.+144    	; 0x90c8 <AsebaSendDescription+0x228>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    9038:	66 24       	eor	r6, r6
    903a:	63 94       	inc	r6
    903c:	30 e9       	ldi	r19, 0x90	; 144
    903e:	73 2e       	mov	r7, r19
    9040:	45 e0       	ldi	r20, 0x05	; 5
    9042:	a4 2e       	mov	r10, r20
    9044:	b1 2c       	mov	r11, r1
    9046:	60 92 5c 1a 	sts	0x1A5C, r6
    904a:	70 92 5d 1a 	sts	0x1A5D, r7
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    904e:	d4 01       	movw	r26, r8
    9050:	8c 91       	ld	r24, X
    9052:	11 96       	adiw	r26, 0x01	; 1
    9054:	9c 91       	ld	r25, X
    9056:	11 97       	sbiw	r26, 0x01	; 1
    9058:	89 83       	std	Y+1, r24	; 0x01
    905a:	9a 83       	std	Y+2, r25	; 0x02
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    905c:	80 93 5e 1a 	sts	0x1A5E, r24
    9060:	90 93 5f 1a 	sts	0x1A5F, r25
		buffer_pos = 0;
		
		buffer_add_uint16(ASEBA_MESSAGE_NAMED_VARIABLE_DESCRIPTION);
		
		buffer_add_uint16(namedVariables[i].size);
		buffer_add_string(namedVariables[i].name);
    9064:	12 96       	adiw	r26, 0x02	; 2
    9066:	ed 91       	ld	r30, X+
    9068:	fc 91       	ld	r31, X
    906a:	13 97       	sbiw	r26, 0x03	; 3
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    906c:	df 01       	movw	r26, r30
    906e:	0d 90       	ld	r0, X+
    9070:	00 20       	and	r0, r0
    9072:	e9 f7       	brne	.-6      	; 0x906e <AsebaSendDescription+0x1ce>
    9074:	11 97       	sbiw	r26, 0x01	; 1
    9076:	ae 1b       	sub	r26, r30
    9078:	bf 0b       	sbc	r27, r31
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    907a:	b0 92 5b 1a 	sts	0x1A5B, r11
    907e:	a0 92 5a 1a 	sts	0x1A5A, r10
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    9082:	a0 93 60 1a 	sts	0x1A60, r26
    9086:	25 e0       	ldi	r18, 0x05	; 5
    9088:	90 e0       	ldi	r25, 0x00	; 0
    908a:	a1 e6       	ldi	r26, 0x61	; 97
    908c:	ba e1       	ldi	r27, 0x1A	; 26
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    908e:	45 e0       	ldi	r20, 0x05	; 5
    9090:	50 e0       	ldi	r21, 0x00	; 0
    9092:	05 c0       	rjmp	.+10     	; 0x909e <AsebaSendDescription+0x1fe>
    9094:	4f 5f       	subi	r20, 0xFF	; 255
    9096:	5f 4f       	sbci	r21, 0xFF	; 255
    9098:	8d 93       	st	X+, r24
    909a:	24 2f       	mov	r18, r20
    909c:	95 2f       	mov	r25, r21

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    909e:	81 91       	ld	r24, Z+
    90a0:	81 11       	cpse	r24, r1
    90a2:	f8 cf       	rjmp	.-16     	; 0x9094 <AsebaSendDescription+0x1f4>
    90a4:	20 93 5a 1a 	sts	0x1A5A, r18
    90a8:	90 93 5b 1a 	sts	0x1A5B, r25
		
		buffer_add_uint16(namedVariables[i].size);
		buffer_add_string(namedVariables[i].name);
		
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
    90ac:	6c e5       	ldi	r22, 0x5C	; 92
    90ae:	7a e1       	ldi	r23, 0x1A	; 26
    90b0:	c6 01       	movw	r24, r12
    90b2:	0e 94 82 16 	call	0x2d04	; 0x2d04 <AsebaSendBuffer>
    90b6:	b4 e0       	ldi	r27, 0x04	; 4
    90b8:	8b 0e       	add	r8, r27
    90ba:	91 1c       	adc	r9, r1
	
	// send buffer
	AsebaSendBuffer(vm, buffer, buffer_pos);
	
	// send named variables description
	for (i = 0; namedVariables[i].name; i++)
    90bc:	f4 01       	movw	r30, r8
    90be:	82 81       	ldd	r24, Z+2	; 0x02
    90c0:	93 81       	ldd	r25, Z+3	; 0x03
    90c2:	89 2b       	or	r24, r25
    90c4:	09 f0       	breq	.+2      	; 0x90c8 <AsebaSendDescription+0x228>
    90c6:	bf cf       	rjmp	.-130    	; 0x9046 <AsebaSendDescription+0x1a6>
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
	}
	
	// send local events description
	for (i = 0; localEvents[i].name; i++)
    90c8:	f7 01       	movw	r30, r14
    90ca:	80 81       	ld	r24, Z
    90cc:	91 81       	ldd	r25, Z+1	; 0x01
    90ce:	89 2b       	or	r24, r25
    90d0:	09 f4       	brne	.+2      	; 0x90d4 <AsebaSendDescription+0x234>
    90d2:	5c c0       	rjmp	.+184    	; 0x918c <AsebaSendDescription+0x2ec>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    90d4:	82 e0       	ldi	r24, 0x02	; 2
    90d6:	88 2e       	mov	r8, r24
    90d8:	90 e9       	ldi	r25, 0x90	; 144
    90da:	99 2e       	mov	r9, r25
    90dc:	23 e0       	ldi	r18, 0x03	; 3
    90de:	a2 2e       	mov	r10, r18
    90e0:	b1 2c       	mov	r11, r1
    90e2:	80 92 5c 1a 	sts	0x1A5C, r8
    90e6:	90 92 5d 1a 	sts	0x1A5D, r9
	{
		buffer_pos = 0;
		
		buffer_add_uint16(ASEBA_MESSAGE_LOCAL_EVENT_DESCRIPTION);
		
		buffer_add_string(localEvents[i].name);
    90ea:	d7 01       	movw	r26, r14
    90ec:	ed 91       	ld	r30, X+
    90ee:	fc 91       	ld	r31, X
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    90f0:	df 01       	movw	r26, r30
    90f2:	0d 90       	ld	r0, X+
    90f4:	00 20       	and	r0, r0
    90f6:	e9 f7       	brne	.-6      	; 0x90f2 <AsebaSendDescription+0x252>
    90f8:	11 97       	sbiw	r26, 0x01	; 1
    90fa:	ae 1b       	sub	r26, r30
    90fc:	bf 0b       	sbc	r27, r31
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    90fe:	b0 92 5b 1a 	sts	0x1A5B, r11
    9102:	a0 92 5a 1a 	sts	0x1A5A, r10
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    9106:	a0 93 5e 1a 	sts	0x1A5E, r26
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    910a:	af e5       	ldi	r26, 0x5F	; 95
    910c:	ba e1       	ldi	r27, 0x1A	; 26
    910e:	23 e0       	ldi	r18, 0x03	; 3
    9110:	30 e0       	ldi	r19, 0x00	; 0
    9112:	03 c0       	rjmp	.+6      	; 0x911a <AsebaSendDescription+0x27a>
    9114:	2f 5f       	subi	r18, 0xFF	; 255
    9116:	3f 4f       	sbci	r19, 0xFF	; 255
    9118:	8d 93       	st	X+, r24

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    911a:	81 91       	ld	r24, Z+
    911c:	81 11       	cpse	r24, r1
    911e:	fa cf       	rjmp	.-12     	; 0x9114 <AsebaSendDescription+0x274>
		buffer_pos = 0;
		
		buffer_add_uint16(ASEBA_MESSAGE_LOCAL_EVENT_DESCRIPTION);
		
		buffer_add_string(localEvents[i].name);
		buffer_add_string(localEvents[i].doc);
    9120:	d7 01       	movw	r26, r14
    9122:	12 96       	adiw	r26, 0x02	; 2
    9124:	ed 91       	ld	r30, X+
    9126:	fc 91       	ld	r31, X
    9128:	13 97       	sbiw	r26, 0x03	; 3
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    912a:	df 01       	movw	r26, r30
    912c:	0d 90       	ld	r0, X+
    912e:	00 20       	and	r0, r0
    9130:	e9 f7       	brne	.-6      	; 0x912c <AsebaSendDescription+0x28c>
    9132:	11 97       	sbiw	r26, 0x01	; 1
    9134:	cd 01       	movw	r24, r26
    9136:	8e 1b       	sub	r24, r30
    9138:	9f 0b       	sbc	r25, r31
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    913a:	a9 01       	movw	r20, r18
    913c:	4f 5f       	subi	r20, 0xFF	; 255
    913e:	5f 4f       	sbci	r21, 0xFF	; 255
    9140:	50 93 5b 1a 	sts	0x1A5B, r21
    9144:	40 93 5a 1a 	sts	0x1A5A, r20
    9148:	24 5a       	subi	r18, 0xA4	; 164
    914a:	35 4e       	sbci	r19, 0xE5	; 229
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    914c:	d9 01       	movw	r26, r18
    914e:	8c 93       	st	X, r24
    9150:	ca 01       	movw	r24, r20
    9152:	da 01       	movw	r26, r20
    9154:	a4 5a       	subi	r26, 0xA4	; 164
    9156:	b5 4e       	sbci	r27, 0xE5	; 229
    9158:	04 c0       	rjmp	.+8      	; 0x9162 <AsebaSendDescription+0x2c2>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    915a:	ca 01       	movw	r24, r20
    915c:	01 96       	adiw	r24, 0x01	; 1
    915e:	2d 93       	st	X+, r18
    9160:	ac 01       	movw	r20, r24

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    9162:	21 91       	ld	r18, Z+
    9164:	21 11       	cpse	r18, r1
    9166:	f9 cf       	rjmp	.-14     	; 0x915a <AsebaSendDescription+0x2ba>
    9168:	90 93 5b 1a 	sts	0x1A5B, r25
    916c:	80 93 5a 1a 	sts	0x1A5A, r24
		
		buffer_add_string(localEvents[i].name);
		buffer_add_string(localEvents[i].doc);
		
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
    9170:	6c e5       	ldi	r22, 0x5C	; 92
    9172:	7a e1       	ldi	r23, 0x1A	; 26
    9174:	c6 01       	movw	r24, r12
    9176:	0e 94 82 16 	call	0x2d04	; 0x2d04 <AsebaSendBuffer>
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
	}
	
	// send local events description
	for (i = 0; localEvents[i].name; i++)
    917a:	b4 e0       	ldi	r27, 0x04	; 4
    917c:	eb 0e       	add	r14, r27
    917e:	f1 1c       	adc	r15, r1
    9180:	f7 01       	movw	r30, r14
    9182:	80 81       	ld	r24, Z
    9184:	91 81       	ldd	r25, Z+1	; 0x01
    9186:	89 2b       	or	r24, r25
    9188:	09 f0       	breq	.+2      	; 0x918c <AsebaSendDescription+0x2ec>
    918a:	ab cf       	rjmp	.-170    	; 0x90e2 <AsebaSendDescription+0x242>
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
	}
	
	// send native functions description
	for (i = 0; nativeFunctionsDescription[i]; i++)
    918c:	d8 01       	movw	r26, r16
    918e:	8d 91       	ld	r24, X+
    9190:	9c 91       	ld	r25, X
    9192:	89 2b       	or	r24, r25
    9194:	09 f4       	brne	.+2      	; 0x9198 <AsebaSendDescription+0x2f8>
    9196:	cc c0       	rjmp	.+408    	; 0x9330 <AsebaSendDescription+0x490>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    9198:	f3 e0       	ldi	r31, 0x03	; 3
    919a:	af 2e       	mov	r10, r31
    919c:	a0 e9       	ldi	r26, 0x90	; 144
    919e:	ba 2e       	mov	r11, r26
    91a0:	b3 e0       	ldi	r27, 0x03	; 3
    91a2:	eb 2e       	mov	r14, r27
    91a4:	f1 2c       	mov	r15, r1
    91a6:	a0 92 5c 1a 	sts	0x1A5C, r10
    91aa:	b0 92 5d 1a 	sts	0x1A5D, r11
		buffer_pos = 0;
		
		buffer_add_uint16(ASEBA_MESSAGE_NATIVE_FUNCTION_DESCRIPTION);
		
		
		buffer_add_string(nativeFunctionsDescription[i]->name);
    91ae:	d8 01       	movw	r26, r16
    91b0:	ed 91       	ld	r30, X+
    91b2:	fc 91       	ld	r31, X
    91b4:	01 90       	ld	r0, Z+
    91b6:	f0 81       	ld	r31, Z
    91b8:	e0 2d       	mov	r30, r0
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    91ba:	df 01       	movw	r26, r30
    91bc:	0d 90       	ld	r0, X+
    91be:	00 20       	and	r0, r0
    91c0:	e9 f7       	brne	.-6      	; 0x91bc <AsebaSendDescription+0x31c>
    91c2:	11 97       	sbiw	r26, 0x01	; 1
    91c4:	ae 1b       	sub	r26, r30
    91c6:	bf 0b       	sbc	r27, r31
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    91c8:	f0 92 5b 1a 	sts	0x1A5B, r15
    91cc:	e0 92 5a 1a 	sts	0x1A5A, r14
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    91d0:	a0 93 5e 1a 	sts	0x1A5E, r26
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    91d4:	af e5       	ldi	r26, 0x5F	; 95
    91d6:	ba e1       	ldi	r27, 0x1A	; 26
    91d8:	23 e0       	ldi	r18, 0x03	; 3
    91da:	30 e0       	ldi	r19, 0x00	; 0
    91dc:	03 c0       	rjmp	.+6      	; 0x91e4 <AsebaSendDescription+0x344>
    91de:	2f 5f       	subi	r18, 0xFF	; 255
    91e0:	3f 4f       	sbci	r19, 0xFF	; 255
    91e2:	8d 93       	st	X+, r24

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    91e4:	81 91       	ld	r24, Z+
    91e6:	81 11       	cpse	r24, r1
    91e8:	fa cf       	rjmp	.-12     	; 0x91de <AsebaSendDescription+0x33e>
		
		buffer_add_uint16(ASEBA_MESSAGE_NATIVE_FUNCTION_DESCRIPTION);
		
		
		buffer_add_string(nativeFunctionsDescription[i]->name);
		buffer_add_string(nativeFunctionsDescription[i]->doc);
    91ea:	d8 01       	movw	r26, r16
    91ec:	ed 91       	ld	r30, X+
    91ee:	fc 91       	ld	r31, X
    91f0:	02 80       	ldd	r0, Z+2	; 0x02
    91f2:	f3 81       	ldd	r31, Z+3	; 0x03
    91f4:	e0 2d       	mov	r30, r0
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    91f6:	df 01       	movw	r26, r30
    91f8:	0d 90       	ld	r0, X+
    91fa:	00 20       	and	r0, r0
    91fc:	e9 f7       	brne	.-6      	; 0x91f8 <AsebaSendDescription+0x358>
    91fe:	11 97       	sbiw	r26, 0x01	; 1
    9200:	cd 01       	movw	r24, r26
    9202:	8e 1b       	sub	r24, r30
    9204:	9f 0b       	sbc	r25, r31
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    9206:	a9 01       	movw	r20, r18
    9208:	4f 5f       	subi	r20, 0xFF	; 255
    920a:	5f 4f       	sbci	r21, 0xFF	; 255
    920c:	50 93 5b 1a 	sts	0x1A5B, r21
    9210:	40 93 5a 1a 	sts	0x1A5A, r20
    9214:	24 5a       	subi	r18, 0xA4	; 164
    9216:	35 4e       	sbci	r19, 0xE5	; 229
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    9218:	d9 01       	movw	r26, r18
    921a:	8c 93       	st	X, r24
    921c:	da 01       	movw	r26, r20
    921e:	a4 5a       	subi	r26, 0xA4	; 164
    9220:	b5 4e       	sbci	r27, 0xE5	; 229
    9222:	03 c0       	rjmp	.+6      	; 0x922a <AsebaSendDescription+0x38a>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    9224:	4f 5f       	subi	r20, 0xFF	; 255
    9226:	5f 4f       	sbci	r21, 0xFF	; 255
    9228:	8d 93       	st	X+, r24

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    922a:	81 91       	ld	r24, Z+
    922c:	81 11       	cpse	r24, r1
    922e:	fa cf       	rjmp	.-12     	; 0x9224 <AsebaSendDescription+0x384>
		buffer_add_uint16(ASEBA_MESSAGE_NATIVE_FUNCTION_DESCRIPTION);
		
		
		buffer_add_string(nativeFunctionsDescription[i]->name);
		buffer_add_string(nativeFunctionsDescription[i]->doc);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
    9230:	d8 01       	movw	r26, r16
    9232:	ed 91       	ld	r30, X+
    9234:	fc 91       	ld	r31, X
    9236:	84 81       	ldd	r24, Z+4	; 0x04
    9238:	95 81       	ldd	r25, Z+5	; 0x05
    923a:	89 2b       	or	r24, r25
    923c:	09 f4       	brne	.+2      	; 0x9240 <AsebaSendDescription+0x3a0>
    923e:	89 c0       	rjmp	.+274    	; 0x9352 <AsebaSendDescription+0x4b2>
    9240:	80 e0       	ldi	r24, 0x00	; 0
    9242:	90 e0       	ldi	r25, 0x00	; 0
    9244:	01 96       	adiw	r24, 0x01	; 1
    9246:	34 96       	adiw	r30, 0x04	; 4
    9248:	24 81       	ldd	r18, Z+4	; 0x04
    924a:	35 81       	ldd	r19, Z+5	; 0x05
    924c:	23 2b       	or	r18, r19
    924e:	d1 f7       	brne	.-12     	; 0x9244 <AsebaSendDescription+0x3a4>
	buffer_add(&value, 1);
}

static void buffer_add_uint16(const uint16 value)
{
	const uint16 temp = bswap16(value);
    9250:	9a 83       	std	Y+2, r25	; 0x02
    9252:	89 83       	std	Y+1, r24	; 0x01
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    9254:	fa 01       	movw	r30, r20
    9256:	e4 5a       	subi	r30, 0xA4	; 164
    9258:	f5 4e       	sbci	r31, 0xE5	; 229
    925a:	80 83       	st	Z, r24
    925c:	4e 5f       	subi	r20, 0xFE	; 254
    925e:	5f 4f       	sbci	r21, 0xFF	; 255
    9260:	50 93 5b 1a 	sts	0x1A5B, r21
    9264:	40 93 5a 1a 	sts	0x1A5A, r20
    9268:	8a 81       	ldd	r24, Y+2	; 0x02
    926a:	81 83       	std	Z+1, r24	; 0x01
		buffer_add_string(nativeFunctionsDescription[i]->name);
		buffer_add_string(nativeFunctionsDescription[i]->doc);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
			;
		buffer_add_uint16(j);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
    926c:	d8 01       	movw	r26, r16
    926e:	ed 91       	ld	r30, X+
    9270:	fc 91       	ld	r31, X
    9272:	64 81       	ldd	r22, Z+4	; 0x04
    9274:	75 81       	ldd	r23, Z+5	; 0x05
    9276:	61 15       	cp	r22, r1
    9278:	71 05       	cpc	r23, r1
    927a:	09 f4       	brne	.+2      	; 0x927e <AsebaSendDescription+0x3de>
    927c:	4c c0       	rjmp	.+152    	; 0x9316 <AsebaSendDescription+0x476>
    927e:	80 e0       	ldi	r24, 0x00	; 0
    9280:	90 e0       	ldi	r25, 0x00	; 0
    9282:	21 e0       	ldi	r18, 0x01	; 1
    9284:	30 e0       	ldi	r19, 0x00	; 0
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_sint16(const sint16 value)
{
	const uint16 temp = bswap16(value);
    9286:	7a 83       	std	Y+2, r23	; 0x02
    9288:	69 83       	std	Y+1, r22	; 0x01
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    928a:	da 01       	movw	r26, r20
    928c:	a4 5a       	subi	r26, 0xA4	; 164
    928e:	b5 4e       	sbci	r27, 0xE5	; 229
    9290:	6c 93       	st	X, r22
    9292:	6a 81       	ldd	r22, Y+2	; 0x02
    9294:	11 96       	adiw	r26, 0x01	; 1
    9296:	6c 93       	st	X, r22
    9298:	11 97       	sbiw	r26, 0x01	; 1
			;
		buffer_add_uint16(j);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
		{
			buffer_add_sint16(nativeFunctionsDescription[i]->arguments[j].size);
			buffer_add_string(nativeFunctionsDescription[i]->arguments[j].name);
    929a:	f8 01       	movw	r30, r16
    929c:	60 81       	ld	r22, Z
    929e:	71 81       	ldd	r23, Z+1	; 0x01
    92a0:	88 0f       	add	r24, r24
    92a2:	99 1f       	adc	r25, r25
    92a4:	88 0f       	add	r24, r24
    92a6:	99 1f       	adc	r25, r25
    92a8:	fb 01       	movw	r30, r22
    92aa:	e8 0f       	add	r30, r24
    92ac:	f9 1f       	adc	r31, r25
    92ae:	66 81       	ldd	r22, Z+6	; 0x06
    92b0:	77 81       	ldd	r23, Z+7	; 0x07
	buffer_add((const unsigned char *) &temp, 2);
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
    92b2:	fb 01       	movw	r30, r22
    92b4:	01 90       	ld	r0, Z+
    92b6:	00 20       	and	r0, r0
    92b8:	e9 f7       	brne	.-6      	; 0x92b4 <AsebaSendDescription+0x414>
    92ba:	cf 01       	movw	r24, r30
    92bc:	01 97       	sbiw	r24, 0x01	; 1
    92be:	86 1b       	sub	r24, r22
    92c0:	97 0b       	sbc	r25, r23
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    92c2:	4d 5f       	subi	r20, 0xFD	; 253
    92c4:	5f 4f       	sbci	r21, 0xFF	; 255
    92c6:	50 93 5b 1a 	sts	0x1A5B, r21
    92ca:	40 93 5a 1a 	sts	0x1A5A, r20
}

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
    92ce:	12 96       	adiw	r26, 0x02	; 2
    92d0:	8c 93       	st	X, r24
    92d2:	fb 01       	movw	r30, r22
    92d4:	da 01       	movw	r26, r20
    92d6:	a4 5a       	subi	r26, 0xA4	; 164
    92d8:	b5 4e       	sbci	r27, 0xE5	; 229
    92da:	03 c0       	rjmp	.+6      	; 0x92e2 <AsebaSendDescription+0x442>
		if (buffer_pos >= ASEBA_MAX_INNER_PACKET_SIZE)
		{
			printf("buffer pos %d max size %d\n", buffer_pos, ASEBA_MAX_INNER_PACKET_SIZE);
			abort();
		}*/
		buffer[buffer_pos++] = data[i++];
    92dc:	4f 5f       	subi	r20, 0xFF	; 255
    92de:	5f 4f       	sbci	r21, 0xFF	; 255
    92e0:	8d 93       	st	X+, r24

static void buffer_add_string(const char* s)
{
	uint16 len = strlen(s);
	buffer_add_uint8((uint8)len);
	while (*s)
    92e2:	81 91       	ld	r24, Z+
    92e4:	81 11       	cpse	r24, r1
    92e6:	fa cf       	rjmp	.-12     	; 0x92dc <AsebaSendDescription+0x43c>
    92e8:	50 93 5b 1a 	sts	0x1A5B, r21
    92ec:	40 93 5a 1a 	sts	0x1A5A, r20
		buffer_add_string(nativeFunctionsDescription[i]->name);
		buffer_add_string(nativeFunctionsDescription[i]->doc);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
			;
		buffer_add_uint16(j);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
    92f0:	c9 01       	movw	r24, r18
    92f2:	d8 01       	movw	r26, r16
    92f4:	ed 91       	ld	r30, X+
    92f6:	fc 91       	ld	r31, X
    92f8:	2f 5f       	subi	r18, 0xFF	; 255
    92fa:	3f 4f       	sbci	r19, 0xFF	; 255
    92fc:	b9 01       	movw	r22, r18
    92fe:	66 0f       	add	r22, r22
    9300:	77 1f       	adc	r23, r23
    9302:	66 0f       	add	r22, r22
    9304:	77 1f       	adc	r23, r23
    9306:	e6 0f       	add	r30, r22
    9308:	f7 1f       	adc	r31, r23
    930a:	60 81       	ld	r22, Z
    930c:	71 81       	ldd	r23, Z+1	; 0x01
    930e:	61 15       	cp	r22, r1
    9310:	71 05       	cpc	r23, r1
    9312:	09 f0       	breq	.+2      	; 0x9316 <AsebaSendDescription+0x476>
    9314:	b8 cf       	rjmp	.-144    	; 0x9286 <AsebaSendDescription+0x3e6>
			buffer_add_sint16(nativeFunctionsDescription[i]->arguments[j].size);
			buffer_add_string(nativeFunctionsDescription[i]->arguments[j].name);
		}
		
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
    9316:	6c e5       	ldi	r22, 0x5C	; 92
    9318:	7a e1       	ldi	r23, 0x1A	; 26
    931a:	c6 01       	movw	r24, r12
    931c:	0e 94 82 16 	call	0x2d04	; 0x2d04 <AsebaSendBuffer>
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
	}
	
	// send native functions description
	for (i = 0; nativeFunctionsDescription[i]; i++)
    9320:	0e 5f       	subi	r16, 0xFE	; 254
    9322:	1f 4f       	sbci	r17, 0xFF	; 255
    9324:	f8 01       	movw	r30, r16
    9326:	80 81       	ld	r24, Z
    9328:	91 81       	ldd	r25, Z+1	; 0x01
    932a:	89 2b       	or	r24, r25
    932c:	09 f0       	breq	.+2      	; 0x9330 <AsebaSendDescription+0x490>
    932e:	3b cf       	rjmp	.-394    	; 0x91a6 <AsebaSendDescription+0x306>
		}
		
		// send buffer
		AsebaSendBuffer(vm, buffer, buffer_pos);
	}
}
    9330:	0f 90       	pop	r0
    9332:	0f 90       	pop	r0
    9334:	df 91       	pop	r29
    9336:	cf 91       	pop	r28
    9338:	1f 91       	pop	r17
    933a:	0f 91       	pop	r16
    933c:	ff 90       	pop	r15
    933e:	ef 90       	pop	r14
    9340:	df 90       	pop	r13
    9342:	cf 90       	pop	r12
    9344:	bf 90       	pop	r11
    9346:	af 90       	pop	r10
    9348:	9f 90       	pop	r9
    934a:	8f 90       	pop	r8
    934c:	7f 90       	pop	r7
    934e:	6f 90       	pop	r6
    9350:	08 95       	ret
		buffer_add_uint16(ASEBA_MESSAGE_NATIVE_FUNCTION_DESCRIPTION);
		
		
		buffer_add_string(nativeFunctionsDescription[i]->name);
		buffer_add_string(nativeFunctionsDescription[i]->doc);
		for (j = 0; nativeFunctionsDescription[i]->arguments[j].size; j++)
    9352:	80 e0       	ldi	r24, 0x00	; 0
    9354:	90 e0       	ldi	r25, 0x00	; 0
    9356:	7c cf       	rjmp	.-264    	; 0x9250 <AsebaSendDescription+0x3b0>
	buffer_add_uint16(vm->bytecodeSize);
	buffer_add_uint16(vm->stackSize);
	buffer_add_uint16(vm->variablesSize);

	// compute the number of variables descriptions
	for (i = 0; namedVariables[i].size; i++)
    9358:	80 e0       	ldi	r24, 0x00	; 0
    935a:	90 e0       	ldi	r25, 0x00	; 0
    935c:	1a ce       	rjmp	.-972    	; 0x8f92 <AsebaSendDescription+0xf2>
		;
	buffer_add_uint16(i);
	
	// compute the number of local event functions
	for (i = 0; localEvents[i].name; i++)
    935e:	80 e0       	ldi	r24, 0x00	; 0
    9360:	90 e0       	ldi	r25, 0x00	; 0
    9362:	32 ce       	rjmp	.-924    	; 0x8fc8 <AsebaSendDescription+0x128>
		;
	buffer_add_uint16(i);
	
	// compute the number of native functions
	for (i = 0; nativeFunctionsDescription[i]; i++)
    9364:	80 e0       	ldi	r24, 0x00	; 0
    9366:	90 e0       	ldi	r25, 0x00	; 0
    9368:	4a ce       	rjmp	.-876    	; 0x8ffe <AsebaSendDescription+0x15e>

0000936a <AsebaProcessIncomingEvents>:
		AsebaSendBuffer(vm, buffer, buffer_pos);
	}
}

void AsebaProcessIncomingEvents(AsebaVMState *vm)
{
    936a:	cf 92       	push	r12
    936c:	df 92       	push	r13
    936e:	ef 92       	push	r14
    9370:	ff 92       	push	r15
    9372:	0f 93       	push	r16
    9374:	1f 93       	push	r17
    9376:	cf 93       	push	r28
    9378:	df 93       	push	r29
    937a:	1f 92       	push	r1
    937c:	1f 92       	push	r1
    937e:	cd b7       	in	r28, 0x3d	; 61
    9380:	de b7       	in	r29, 0x3e	; 62
    9382:	8c 01       	movw	r16, r24
	uint16 source;
	const AsebaVMDescription *desc = AsebaGetVMDescription(vm);
    9384:	0e 94 6f 16 	call	0x2cde	; 0x2cde <AsebaGetVMDescription>
    9388:	6c 01       	movw	r12, r24
	
	uint16 amount = AsebaGetBuffer(vm, buffer, ASEBA_MAX_INNER_PACKET_SIZE, &source);
    938a:	9e 01       	movw	r18, r28
    938c:	2f 5f       	subi	r18, 0xFF	; 255
    938e:	3f 4f       	sbci	r19, 0xFF	; 255
    9390:	46 e0       	ldi	r20, 0x06	; 6
    9392:	52 e0       	ldi	r21, 0x02	; 2
    9394:	6c e5       	ldi	r22, 0x5C	; 92
    9396:	7a e1       	ldi	r23, 0x1A	; 26
    9398:	c8 01       	movw	r24, r16
    939a:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <AsebaGetBuffer>

	if (amount > 0)
    939e:	00 97       	sbiw	r24, 0x00	; 0
    93a0:	09 f4       	brne	.+2      	; 0x93a4 <AsebaProcessIncomingEvents+0x3a>
    93a2:	42 c0       	rjmp	.+132    	; 0x9428 <AsebaProcessIncomingEvents+0xbe>
	{
		uint16 type = bswap16(((uint16*)buffer)[0]);
    93a4:	60 91 5c 1a 	lds	r22, 0x1A5C
    93a8:	70 91 5d 1a 	lds	r23, 0x1A5D
		uint16* payload = (uint16*)(buffer+2);
		uint16 payloadSize = (amount-2)/2;
    93ac:	9c 01       	movw	r18, r24
    93ae:	22 50       	subi	r18, 0x02	; 2
    93b0:	31 09       	sbc	r19, r1
    93b2:	36 95       	lsr	r19
    93b4:	27 95       	ror	r18
		if (type < 0x8000)
    93b6:	77 fd       	sbrc	r23, 7
    93b8:	42 c0       	rjmp	.+132    	; 0x943e <AsebaProcessIncomingEvents+0xd4>
    93ba:	f8 01       	movw	r30, r16
    93bc:	86 85       	ldd	r24, Z+14	; 0x0e
    93be:	97 85       	ldd	r25, Z+15	; 0x0f
    93c0:	83 70       	andi	r24, 0x03	; 3
    93c2:	99 27       	eor	r25, r25
		{
			// user message, only process if we are not stepping inside an event
			if (AsebaMaskIsClear(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK) || AsebaMaskIsClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
    93c4:	03 97       	sbiw	r24, 0x03	; 3
    93c6:	81 f1       	breq	.+96     	; 0x9428 <AsebaProcessIncomingEvents+0xbe>
			{
				// by convention. the source begin at variables, address 1
				// then it's followed by the args
				uint16 argPos = desc->variables[1].size;
				uint16 argsSize = desc->variables[2].size;
    93c8:	f6 01       	movw	r30, r12
    93ca:	e2 84       	ldd	r14, Z+10	; 0x0a
    93cc:	f3 84       	ldd	r15, Z+11	; 0x0b
				uint16 i;
				vm->variables[argPos++] = source;
    93ce:	f8 01       	movw	r30, r16
    93d0:	80 85       	ldd	r24, Z+8	; 0x08
    93d2:	91 85       	ldd	r25, Z+9	; 0x09
    93d4:	f6 01       	movw	r30, r12
    93d6:	46 81       	ldd	r20, Z+6	; 0x06
    93d8:	57 81       	ldd	r21, Z+7	; 0x07
    93da:	44 0f       	add	r20, r20
    93dc:	55 1f       	adc	r21, r21
    93de:	fc 01       	movw	r30, r24
    93e0:	e4 0f       	add	r30, r20
    93e2:	f5 1f       	adc	r31, r21
    93e4:	a9 81       	ldd	r26, Y+1	; 0x01
    93e6:	ba 81       	ldd	r27, Y+2	; 0x02
    93e8:	b1 83       	std	Z+1, r27	; 0x01
    93ea:	a0 83       	st	Z, r26
				for (i = 0; (i < argsSize) && (i < payloadSize); i++)
    93ec:	e1 14       	cp	r14, r1
    93ee:	f1 04       	cpc	r15, r1
    93f0:	c1 f0       	breq	.+48     	; 0x9422 <AsebaProcessIncomingEvents+0xb8>
    93f2:	21 15       	cp	r18, r1
    93f4:	31 05       	cpc	r19, r1
    93f6:	a9 f0       	breq	.+42     	; 0x9422 <AsebaProcessIncomingEvents+0xb8>
    93f8:	ae e5       	ldi	r26, 0x5E	; 94
    93fa:	ba e1       	ldi	r27, 0x1A	; 26
    93fc:	fa 01       	movw	r30, r20
    93fe:	32 96       	adiw	r30, 0x02	; 2
    9400:	e8 0f       	add	r30, r24
    9402:	f9 1f       	adc	r31, r25
    9404:	40 e0       	ldi	r20, 0x00	; 0
    9406:	50 e0       	ldi	r21, 0x00	; 0
    9408:	03 c0       	rjmp	.+6      	; 0x9410 <AsebaProcessIncomingEvents+0xa6>
    940a:	42 17       	cp	r20, r18
    940c:	53 07       	cpc	r21, r19
    940e:	49 f0       	breq	.+18     	; 0x9422 <AsebaProcessIncomingEvents+0xb8>
					vm->variables[argPos + i] = bswap16(payload[i]);
    9410:	8d 91       	ld	r24, X+
    9412:	9d 91       	ld	r25, X+
    9414:	81 93       	st	Z+, r24
    9416:	91 93       	st	Z+, r25
				// then it's followed by the args
				uint16 argPos = desc->variables[1].size;
				uint16 argsSize = desc->variables[2].size;
				uint16 i;
				vm->variables[argPos++] = source;
				for (i = 0; (i < argsSize) && (i < payloadSize); i++)
    9418:	4f 5f       	subi	r20, 0xFF	; 255
    941a:	5f 4f       	sbci	r21, 0xFF	; 255
    941c:	4e 15       	cp	r20, r14
    941e:	5f 05       	cpc	r21, r15
    9420:	a1 f7       	brne	.-24     	; 0x940a <AsebaProcessIncomingEvents+0xa0>
					vm->variables[argPos + i] = bswap16(payload[i]);
				AsebaVMSetupEvent(vm, type);
    9422:	c8 01       	movw	r24, r16
    9424:	0e 94 e0 4a 	call	0x95c0	; 0x95c0 <AsebaVMSetupEvent>
		{
			// debug message
			AsebaVMDebugMessage(vm, type, payload, payloadSize);
		}
	}
}
    9428:	0f 90       	pop	r0
    942a:	0f 90       	pop	r0
    942c:	df 91       	pop	r29
    942e:	cf 91       	pop	r28
    9430:	1f 91       	pop	r17
    9432:	0f 91       	pop	r16
    9434:	ff 90       	pop	r15
    9436:	ef 90       	pop	r14
    9438:	df 90       	pop	r13
    943a:	cf 90       	pop	r12
    943c:	08 95       	ret
			}
		}
		else
		{
			// debug message
			AsebaVMDebugMessage(vm, type, payload, payloadSize);
    943e:	4e e5       	ldi	r20, 0x5E	; 94
    9440:	5a e1       	ldi	r21, 0x1A	; 26
    9442:	c8 01       	movw	r24, r16
    9444:	0e 94 c2 52 	call	0xa584	; 0xa584 <AsebaVMDebugMessage>
    9448:	ef cf       	rjmp	.-34     	; 0x9428 <AsebaProcessIncomingEvents+0xbe>

0000944a <AsebaVMDoBinaryOperation>:
	}
	return address;
}

static sint16 AsebaVMDoBinaryOperation(AsebaVMState *vm, sint16 valueOne, sint16 valueTwo, uint16 op)
{
    944a:	cf 93       	push	r28
    944c:	df 93       	push	r29
    944e:	ec 01       	movw	r28, r24
	switch (op)
    9450:	22 31       	cpi	r18, 0x12	; 18
    9452:	31 05       	cpc	r19, r1
    9454:	28 f0       	brcs	.+10     	; 0x9460 <AsebaVMDoBinaryOperation+0x16>
		case ASEBA_OP_BIGGER_EQUAL_THAN: return valueOne >= valueTwo;
		case ASEBA_OP_SMALLER_THAN: return valueOne < valueTwo;
		case ASEBA_OP_SMALLER_EQUAL_THAN: return valueOne <= valueTwo;
		
		case ASEBA_OP_OR: return valueOne || valueTwo;
		case ASEBA_OP_AND: return valueOne && valueTwo;
    9456:	80 e0       	ldi	r24, 0x00	; 0
    9458:	90 e0       	ldi	r25, 0x00	; 0
		#ifdef ASEBA_ASSERT
		AsebaAssert(vm, ASEBA_ASSERT_UNKNOWN_BINARY_OPERATOR);
		#endif
		return 0;
	}
}
    945a:	df 91       	pop	r29
    945c:	cf 91       	pop	r28
    945e:	08 95       	ret
	return address;
}

static sint16 AsebaVMDoBinaryOperation(AsebaVMState *vm, sint16 valueOne, sint16 valueTwo, uint16 op)
{
	switch (op)
    9460:	f9 01       	movw	r30, r18
    9462:	88 27       	eor	r24, r24
    9464:	e9 57       	subi	r30, 0x79	; 121
    9466:	ff 4f       	sbci	r31, 0xFF	; 255
    9468:	8f 4f       	sbci	r24, 0xFF	; 255
    946a:	0c 94 1e 56 	jmp	0xac3c	; 0xac3c <__tablejump2__>
		case ASEBA_OP_BIGGER_THAN: return valueOne > valueTwo;
		case ASEBA_OP_BIGGER_EQUAL_THAN: return valueOne >= valueTwo;
		case ASEBA_OP_SMALLER_THAN: return valueOne < valueTwo;
		case ASEBA_OP_SMALLER_EQUAL_THAN: return valueOne <= valueTwo;
		
		case ASEBA_OP_OR: return valueOne || valueTwo;
    946e:	67 2b       	or	r22, r23
    9470:	09 f0       	breq	.+2      	; 0x9474 <AsebaVMDoBinaryOperation+0x2a>
    9472:	8e c0       	rjmp	.+284    	; 0x9590 <AsebaVMDoBinaryOperation+0x146>
		case ASEBA_OP_AND: return valueOne && valueTwo;
    9474:	31 e0       	ldi	r19, 0x01	; 1
    9476:	20 e0       	ldi	r18, 0x00	; 0
    9478:	45 2b       	or	r20, r21
    947a:	51 f0       	breq	.+20     	; 0x9490 <AsebaVMDoBinaryOperation+0x46>

static sint16 AsebaVMDoBinaryOperation(AsebaVMState *vm, sint16 valueOne, sint16 valueTwo, uint16 op)
{
	switch (op)
	{
		case ASEBA_OP_SHIFT_LEFT: return valueOne << valueTwo;
    947c:	83 2f       	mov	r24, r19
    947e:	92 2f       	mov	r25, r18
		#ifdef ASEBA_ASSERT
		AsebaAssert(vm, ASEBA_ASSERT_UNKNOWN_BINARY_OPERATOR);
		#endif
		return 0;
	}
}
    9480:	df 91       	pop	r29
    9482:	cf 91       	pop	r28
    9484:	08 95       	ret
			
		case ASEBA_OP_BIT_OR: return valueOne | valueTwo;
		case ASEBA_OP_BIT_XOR: return valueOne ^ valueTwo;
		case ASEBA_OP_BIT_AND: return valueOne & valueTwo;
		
		case ASEBA_OP_EQUAL: return valueOne == valueTwo;
    9486:	31 e0       	ldi	r19, 0x01	; 1
    9488:	20 e0       	ldi	r18, 0x00	; 0
    948a:	64 17       	cp	r22, r20
    948c:	75 07       	cpc	r23, r21
    948e:	b1 f3       	breq	.-20     	; 0x947c <AsebaVMDoBinaryOperation+0x32>
		case ASEBA_OP_BIGGER_EQUAL_THAN: return valueOne >= valueTwo;
		case ASEBA_OP_SMALLER_THAN: return valueOne < valueTwo;
		case ASEBA_OP_SMALLER_EQUAL_THAN: return valueOne <= valueTwo;
		
		case ASEBA_OP_OR: return valueOne || valueTwo;
		case ASEBA_OP_AND: return valueOne && valueTwo;
    9490:	30 e0       	ldi	r19, 0x00	; 0

static sint16 AsebaVMDoBinaryOperation(AsebaVMState *vm, sint16 valueOne, sint16 valueTwo, uint16 op)
{
	switch (op)
	{
		case ASEBA_OP_SHIFT_LEFT: return valueOne << valueTwo;
    9492:	83 2f       	mov	r24, r19
    9494:	92 2f       	mov	r25, r18
    9496:	f4 cf       	rjmp	.-24     	; 0x9480 <AsebaVMDoBinaryOperation+0x36>
		case ASEBA_OP_BIGGER_EQUAL_THAN: return valueOne >= valueTwo;
		case ASEBA_OP_SMALLER_THAN: return valueOne < valueTwo;
		case ASEBA_OP_SMALLER_EQUAL_THAN: return valueOne <= valueTwo;
		
		case ASEBA_OP_OR: return valueOne || valueTwo;
		case ASEBA_OP_AND: return valueOne && valueTwo;
    9498:	67 2b       	or	r22, r23
    949a:	e9 f2       	breq	.-70     	; 0x9456 <AsebaVMDoBinaryOperation+0xc>
    949c:	eb cf       	rjmp	.-42     	; 0x9474 <AsebaVMDoBinaryOperation+0x2a>

static sint16 AsebaVMDoBinaryOperation(AsebaVMState *vm, sint16 valueOne, sint16 valueTwo, uint16 op)
{
	switch (op)
	{
		case ASEBA_OP_SHIFT_LEFT: return valueOne << valueTwo;
    949e:	cb 01       	movw	r24, r22
    94a0:	02 c0       	rjmp	.+4      	; 0x94a6 <AsebaVMDoBinaryOperation+0x5c>
    94a2:	88 0f       	add	r24, r24
    94a4:	99 1f       	adc	r25, r25
    94a6:	4a 95       	dec	r20
    94a8:	e2 f7       	brpl	.-8      	; 0x94a2 <AsebaVMDoBinaryOperation+0x58>
    94aa:	d7 cf       	rjmp	.-82     	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_SHIFT_RIGHT: return valueOne >> valueTwo;
    94ac:	cb 01       	movw	r24, r22
    94ae:	02 c0       	rjmp	.+4      	; 0x94b4 <AsebaVMDoBinaryOperation+0x6a>
    94b0:	95 95       	asr	r25
    94b2:	87 95       	ror	r24
    94b4:	4a 95       	dec	r20
    94b6:	e2 f7       	brpl	.-8      	; 0x94b0 <AsebaVMDoBinaryOperation+0x66>
    94b8:	d0 cf       	rjmp	.-96     	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_ADD: return valueOne + valueTwo;
    94ba:	cb 01       	movw	r24, r22
    94bc:	84 0f       	add	r24, r20
    94be:	95 1f       	adc	r25, r21
    94c0:	cc cf       	rjmp	.-104    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_SUB: return valueOne - valueTwo;
    94c2:	cb 01       	movw	r24, r22
    94c4:	84 1b       	sub	r24, r20
    94c6:	95 0b       	sbc	r25, r21
    94c8:	c8 cf       	rjmp	.-112    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_MULT: return valueOne * valueTwo;
    94ca:	64 9f       	mul	r22, r20
    94cc:	c0 01       	movw	r24, r0
    94ce:	65 9f       	mul	r22, r21
    94d0:	90 0d       	add	r25, r0
    94d2:	74 9f       	mul	r23, r20
    94d4:	90 0d       	add	r25, r0
    94d6:	11 24       	eor	r1, r1
    94d8:	c0 cf       	rjmp	.-128    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_DIV:
			// check division by zero
			if (valueTwo == 0)
    94da:	41 15       	cp	r20, r1
    94dc:	51 05       	cpc	r21, r1
    94de:	09 f0       	breq	.+2      	; 0x94e2 <AsebaVMDoBinaryOperation+0x98>
    94e0:	51 c0       	rjmp	.+162    	; 0x9584 <AsebaVMDoBinaryOperation+0x13a>
			{
				if(AsebaVMErrorCB)
    94e2:	80 e0       	ldi	r24, 0x00	; 0
    94e4:	90 e0       	ldi	r25, 0x00	; 0
    94e6:	89 2b       	or	r24, r25
    94e8:	29 f0       	breq	.+10     	; 0x94f4 <AsebaVMDoBinaryOperation+0xaa>
					AsebaVMErrorCB(vm,NULL);
    94ea:	60 e0       	ldi	r22, 0x00	; 0
    94ec:	70 e0       	ldi	r23, 0x00	; 0
    94ee:	ce 01       	movw	r24, r28
    94f0:	0e 94 00 00 	call	0	; 0x0 <__vectors>
				vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    94f4:	82 e0       	ldi	r24, 0x02	; 2
    94f6:	90 e0       	ldi	r25, 0x00	; 0
    94f8:	9f 87       	std	Y+15, r25	; 0x0f
    94fa:	8e 87       	std	Y+14, r24	; 0x0e
				AsebaSendMessageWords(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &vm->pc, 1);
    94fc:	ae 01       	movw	r20, r28
    94fe:	40 5f       	subi	r20, 0xF0	; 240
    9500:	5f 4f       	sbci	r21, 0xFF	; 255
    9502:	22 e0       	ldi	r18, 0x02	; 2
    9504:	30 e0       	ldi	r19, 0x00	; 0
    9506:	67 e0       	ldi	r22, 0x07	; 7
    9508:	70 e9       	ldi	r23, 0x90	; 144
    950a:	ce 01       	movw	r24, r28
    950c:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
				return 0;
    9510:	80 e0       	ldi	r24, 0x00	; 0
    9512:	90 e0       	ldi	r25, 0x00	; 0
    9514:	a2 cf       	rjmp	.-188    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
			{
				return valueOne / valueTwo;
			}
		case ASEBA_OP_MOD: 
			// check modulo by zero
			if (valueTwo == 0)
    9516:	41 15       	cp	r20, r1
    9518:	51 05       	cpc	r21, r1
    951a:	19 f3       	breq	.-58     	; 0x94e2 <AsebaVMDoBinaryOperation+0x98>
				AsebaSendMessageWords(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &vm->pc, 1);
				return 0;
			}
			else
			{
				return valueOne % valueTwo;
    951c:	cb 01       	movw	r24, r22
    951e:	ba 01       	movw	r22, r20
    9520:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    9524:	9a cf       	rjmp	.-204    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
			}
			
		case ASEBA_OP_BIT_OR: return valueOne | valueTwo;
    9526:	cb 01       	movw	r24, r22
    9528:	84 2b       	or	r24, r20
    952a:	95 2b       	or	r25, r21
    952c:	96 cf       	rjmp	.-212    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_BIT_XOR: return valueOne ^ valueTwo;
    952e:	cb 01       	movw	r24, r22
    9530:	84 27       	eor	r24, r20
    9532:	95 27       	eor	r25, r21
    9534:	92 cf       	rjmp	.-220    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_BIT_AND: return valueOne & valueTwo;
    9536:	cb 01       	movw	r24, r22
    9538:	84 23       	and	r24, r20
    953a:	95 23       	and	r25, r21
    953c:	8e cf       	rjmp	.-228    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		
		case ASEBA_OP_EQUAL: return valueOne == valueTwo;
		case ASEBA_OP_NOT_EQUAL: return valueOne != valueTwo;
    953e:	31 e0       	ldi	r19, 0x01	; 1
    9540:	20 e0       	ldi	r18, 0x00	; 0
    9542:	64 17       	cp	r22, r20
    9544:	75 07       	cpc	r23, r21
    9546:	09 f0       	breq	.+2      	; 0x954a <AsebaVMDoBinaryOperation+0x100>
    9548:	99 cf       	rjmp	.-206    	; 0x947c <AsebaVMDoBinaryOperation+0x32>
    954a:	a2 cf       	rjmp	.-188    	; 0x9490 <AsebaVMDoBinaryOperation+0x46>
		case ASEBA_OP_BIGGER_THAN: return valueOne > valueTwo;
    954c:	31 e0       	ldi	r19, 0x01	; 1
    954e:	20 e0       	ldi	r18, 0x00	; 0
    9550:	46 17       	cp	r20, r22
    9552:	57 07       	cpc	r21, r23
    9554:	0c f4       	brge	.+2      	; 0x9558 <AsebaVMDoBinaryOperation+0x10e>
    9556:	92 cf       	rjmp	.-220    	; 0x947c <AsebaVMDoBinaryOperation+0x32>
    9558:	9b cf       	rjmp	.-202    	; 0x9490 <AsebaVMDoBinaryOperation+0x46>
		case ASEBA_OP_BIGGER_EQUAL_THAN: return valueOne >= valueTwo;
    955a:	31 e0       	ldi	r19, 0x01	; 1
    955c:	20 e0       	ldi	r18, 0x00	; 0
    955e:	64 17       	cp	r22, r20
    9560:	75 07       	cpc	r23, r21
    9562:	0c f0       	brlt	.+2      	; 0x9566 <AsebaVMDoBinaryOperation+0x11c>
    9564:	8b cf       	rjmp	.-234    	; 0x947c <AsebaVMDoBinaryOperation+0x32>
    9566:	94 cf       	rjmp	.-216    	; 0x9490 <AsebaVMDoBinaryOperation+0x46>
		case ASEBA_OP_SMALLER_THAN: return valueOne < valueTwo;
    9568:	31 e0       	ldi	r19, 0x01	; 1
    956a:	20 e0       	ldi	r18, 0x00	; 0
    956c:	64 17       	cp	r22, r20
    956e:	75 07       	cpc	r23, r21
    9570:	0c f4       	brge	.+2      	; 0x9574 <AsebaVMDoBinaryOperation+0x12a>
    9572:	84 cf       	rjmp	.-248    	; 0x947c <AsebaVMDoBinaryOperation+0x32>
    9574:	8d cf       	rjmp	.-230    	; 0x9490 <AsebaVMDoBinaryOperation+0x46>
		case ASEBA_OP_SMALLER_EQUAL_THAN: return valueOne <= valueTwo;
    9576:	31 e0       	ldi	r19, 0x01	; 1
    9578:	20 e0       	ldi	r18, 0x00	; 0
    957a:	46 17       	cp	r20, r22
    957c:	57 07       	cpc	r21, r23
    957e:	0c f0       	brlt	.+2      	; 0x9582 <AsebaVMDoBinaryOperation+0x138>
    9580:	7d cf       	rjmp	.-262    	; 0x947c <AsebaVMDoBinaryOperation+0x32>
    9582:	86 cf       	rjmp	.-244    	; 0x9490 <AsebaVMDoBinaryOperation+0x46>
				AsebaSendMessageWords(vm, ASEBA_MESSAGE_DIVISION_BY_ZERO, &vm->pc, 1);
				return 0;
			}
			else
			{
				return valueOne / valueTwo;
    9584:	cb 01       	movw	r24, r22
    9586:	ba 01       	movw	r22, r20
    9588:	0e 94 c9 55 	call	0xab92	; 0xab92 <__divmodhi4>
    958c:	cb 01       	movw	r24, r22
    958e:	65 cf       	rjmp	.-310    	; 0x945a <AsebaVMDoBinaryOperation+0x10>
		case ASEBA_OP_BIGGER_THAN: return valueOne > valueTwo;
		case ASEBA_OP_BIGGER_EQUAL_THAN: return valueOne >= valueTwo;
		case ASEBA_OP_SMALLER_THAN: return valueOne < valueTwo;
		case ASEBA_OP_SMALLER_EQUAL_THAN: return valueOne <= valueTwo;
		
		case ASEBA_OP_OR: return valueOne || valueTwo;
    9590:	81 e0       	ldi	r24, 0x01	; 1
    9592:	90 e0       	ldi	r25, 0x00	; 0
    9594:	62 cf       	rjmp	.-316    	; 0x945a <AsebaVMDoBinaryOperation+0x10>

00009596 <AsebaVMInit>:
#define BIT_CLR(v, b) ((v) &= (~(1 << (b))))

void AsebaVMSendExecutionStateChanged(AsebaVMState *vm);

void AsebaVMInit(AsebaVMState *vm)
{
    9596:	fc 01       	movw	r30, r24
	vm->pc = 0;
    9598:	11 8a       	std	Z+17, r1	; 0x11
    959a:	10 8a       	std	Z+16, r1	; 0x10
	vm->flags = 0;
    959c:	17 86       	std	Z+15, r1	; 0x0f
    959e:	16 86       	std	Z+14, r1	; 0x0e
	vm->breakpointsCount = 0;
    95a0:	15 aa       	std	Z+53, r1	; 0x35
    95a2:	14 aa       	std	Z+52, r1	; 0x34
	
	// fill with no event
	vm->bytecode[0] = 0;
    95a4:	a4 81       	ldd	r26, Z+4	; 0x04
    95a6:	b5 81       	ldd	r27, Z+5	; 0x05
    95a8:	1d 92       	st	X+, r1
    95aa:	1c 92       	st	X, r1
	memset(vm->variables, 0, vm->variablesSize*sizeof(sint16));
    95ac:	46 81       	ldd	r20, Z+6	; 0x06
    95ae:	57 81       	ldd	r21, Z+7	; 0x07
    95b0:	44 0f       	add	r20, r20
    95b2:	55 1f       	adc	r21, r21
    95b4:	60 e0       	ldi	r22, 0x00	; 0
    95b6:	70 e0       	ldi	r23, 0x00	; 0
    95b8:	80 85       	ldd	r24, Z+8	; 0x08
    95ba:	91 85       	ldd	r25, Z+9	; 0x09
    95bc:	0c 94 f0 59 	jmp	0xb3e0	; 0xb3e0 <memset>

000095c0 <AsebaVMSetupEvent>:
	return 0;
}


uint16 AsebaVMSetupEvent(AsebaVMState *vm, uint16 event)
{
    95c0:	ef 92       	push	r14
    95c2:	ff 92       	push	r15
    95c4:	0f 93       	push	r16
    95c6:	1f 93       	push	r17
    95c8:	cf 93       	push	r28
    95ca:	df 93       	push	r29
    95cc:	00 d0       	rcall	.+0      	; 0x95ce <AsebaVMSetupEvent+0xe>
    95ce:	1f 92       	push	r1
    95d0:	cd b7       	in	r28, 0x3d	; 61
    95d2:	de b7       	in	r29, 0x3e	; 62
	memset(vm->variables, 0, vm->variablesSize*sizeof(sint16));
}

uint16 AsebaVMGetEventAddress(AsebaVMState *vm, uint16 event)
{
	uint16 eventVectorSize = vm->bytecode[0];
    95d4:	dc 01       	movw	r26, r24
    95d6:	14 96       	adiw	r26, 0x04	; 4
    95d8:	ed 91       	ld	r30, X+
    95da:	fc 91       	ld	r31, X
    95dc:	15 97       	sbiw	r26, 0x05	; 5
    95de:	00 81       	ld	r16, Z
    95e0:	11 81       	ldd	r17, Z+1	; 0x01
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
    95e2:	02 30       	cpi	r16, 0x02	; 2
    95e4:	11 05       	cpc	r17, r1
    95e6:	b8 f0       	brcs	.+46     	; 0x9616 <AsebaVMSetupEvent+0x56>
		if (vm->bytecode[i] == event)
    95e8:	22 81       	ldd	r18, Z+2	; 0x02
    95ea:	33 81       	ldd	r19, Z+3	; 0x03
    95ec:	62 17       	cp	r22, r18
    95ee:	73 07       	cpc	r23, r19
    95f0:	09 f4       	brne	.+2      	; 0x95f4 <AsebaVMSetupEvent+0x34>
    95f2:	5c c0       	rjmp	.+184    	; 0x96ac <AsebaVMSetupEvent+0xec>
    95f4:	df 01       	movw	r26, r30
    95f6:	21 e0       	ldi	r18, 0x01	; 1
    95f8:	30 e0       	ldi	r19, 0x00	; 0
    95fa:	08 c0       	rjmp	.+16     	; 0x960c <AsebaVMSetupEvent+0x4c>
    95fc:	14 96       	adiw	r26, 0x04	; 4
    95fe:	12 96       	adiw	r26, 0x02	; 2
    9600:	4d 91       	ld	r20, X+
    9602:	5c 91       	ld	r21, X
    9604:	13 97       	sbiw	r26, 0x03	; 3
    9606:	64 17       	cp	r22, r20
    9608:	75 07       	cpc	r23, r21
    960a:	99 f0       	breq	.+38     	; 0x9632 <AsebaVMSetupEvent+0x72>
{
	uint16 eventVectorSize = vm->bytecode[0];
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
    960c:	2e 5f       	subi	r18, 0xFE	; 254
    960e:	3f 4f       	sbci	r19, 0xFF	; 255
    9610:	20 17       	cp	r18, r16
    9612:	31 07       	cpc	r19, r17
    9614:	98 f3       	brcs	.-26     	; 0x95fc <AsebaVMSetupEvent+0x3c>
		if (vm->bytecode[i] == event)
			return vm->bytecode[i + 1];
	return 0;
    9616:	e1 2c       	mov	r14, r1
    9618:	f1 2c       	mov	r15, r1
		// if we are in step by step, notify
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK))
			AsebaVMSendExecutionStateChanged(vm);
	}
	return address;
}
    961a:	c7 01       	movw	r24, r14
    961c:	0f 90       	pop	r0
    961e:	0f 90       	pop	r0
    9620:	0f 90       	pop	r0
    9622:	0f 90       	pop	r0
    9624:	df 91       	pop	r29
    9626:	cf 91       	pop	r28
    9628:	1f 91       	pop	r17
    962a:	0f 91       	pop	r16
    962c:	ff 90       	pop	r15
    962e:	ef 90       	pop	r14
    9630:	08 95       	ret
    9632:	2f 5f       	subi	r18, 0xFF	; 255
    9634:	3f 4f       	sbci	r19, 0xFF	; 255
    9636:	22 0f       	add	r18, r18
    9638:	33 1f       	adc	r19, r19
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
		if (vm->bytecode[i] == event)
			return vm->bytecode[i + 1];
    963a:	e2 0f       	add	r30, r18
    963c:	f3 1f       	adc	r31, r19
    963e:	e0 80       	ld	r14, Z
    9640:	f1 80       	ldd	r15, Z+1	; 0x01


uint16 AsebaVMSetupEvent(AsebaVMState *vm, uint16 event)
{
	uint16 address = AsebaVMGetEventAddress(vm, event);
	if (address)
    9642:	e1 14       	cp	r14, r1
    9644:	f1 04       	cpc	r15, r1
    9646:	49 f3       	breq	.-46     	; 0x961a <AsebaVMSetupEvent+0x5a>
    9648:	8c 01       	movw	r16, r24
	{
		// if currently executing a thread, notify kill
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
    964a:	fc 01       	movw	r30, r24
    964c:	86 85       	ldd	r24, Z+14	; 0x0e
    964e:	97 85       	ldd	r25, Z+15	; 0x0f
    9650:	80 fd       	sbrc	r24, 0
    9652:	1c c0       	rjmp	.+56     	; 0x968c <AsebaVMSetupEvent+0xcc>
		{
			AsebaSendMessageWords(vm, ASEBA_MESSAGE_EVENT_EXECUTION_KILLED, &vm->pc, 1);
		}
		
		vm->pc = address;
    9654:	f8 01       	movw	r30, r16
    9656:	f1 8a       	std	Z+17, r15	; 0x11
    9658:	e0 8a       	std	Z+16, r14	; 0x10
		vm->sp = -1;
    965a:	2f ef       	ldi	r18, 0xFF	; 255
    965c:	3f ef       	ldi	r19, 0xFF	; 255
    965e:	33 8b       	std	Z+19, r19	; 0x13
    9660:	22 8b       	std	Z+18, r18	; 0x12
		AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK);
    9662:	9c 01       	movw	r18, r24
    9664:	21 60       	ori	r18, 0x01	; 1
    9666:	37 87       	std	Z+15, r19	; 0x0f
    9668:	26 87       	std	Z+14, r18	; 0x0e
		
		// if we are in step by step, notify
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK))
    966a:	81 ff       	sbrs	r24, 1
    966c:	d6 cf       	rjmp	.-84     	; 0x961a <AsebaVMSetupEvent+0x5a>

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    966e:	fa 82       	std	Y+2, r15	; 0x02
    9670:	e9 82       	std	Y+1, r14	; 0x01
	buffer[1] = vm->flags;
    9672:	3c 83       	std	Y+4, r19	; 0x04
    9674:	2b 83       	std	Y+3, r18	; 0x03
	AsebaSendMessageWords(vm, ASEBA_MESSAGE_EXECUTION_STATE_CHANGED, buffer, 2);
    9676:	24 e0       	ldi	r18, 0x04	; 4
    9678:	30 e0       	ldi	r19, 0x00	; 0
    967a:	ae 01       	movw	r20, r28
    967c:	4f 5f       	subi	r20, 0xFF	; 255
    967e:	5f 4f       	sbci	r21, 0xFF	; 255
    9680:	6a e0       	ldi	r22, 0x0A	; 10
    9682:	70 e9       	ldi	r23, 0x90	; 144
    9684:	c8 01       	movw	r24, r16
    9686:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
    968a:	c7 cf       	rjmp	.-114    	; 0x961a <AsebaVMSetupEvent+0x5a>
	if (address)
	{
		// if currently executing a thread, notify kill
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
		{
			AsebaSendMessageWords(vm, ASEBA_MESSAGE_EVENT_EXECUTION_KILLED, &vm->pc, 1);
    968c:	22 e0       	ldi	r18, 0x02	; 2
    968e:	30 e0       	ldi	r19, 0x00	; 0
    9690:	a8 01       	movw	r20, r16
    9692:	40 5f       	subi	r20, 0xF0	; 240
    9694:	5f 4f       	sbci	r21, 0xFF	; 255
    9696:	68 e0       	ldi	r22, 0x08	; 8
    9698:	70 e9       	ldi	r23, 0x90	; 144
    969a:	c8 01       	movw	r24, r16
    969c:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
    96a0:	d8 01       	movw	r26, r16
    96a2:	1e 96       	adiw	r26, 0x0e	; 14
    96a4:	8d 91       	ld	r24, X+
    96a6:	9c 91       	ld	r25, X
    96a8:	1f 97       	sbiw	r26, 0x0f	; 15
    96aa:	d4 cf       	rjmp	.-88     	; 0x9654 <AsebaVMSetupEvent+0x94>
	uint16 eventVectorSize = vm->bytecode[0];
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
		if (vm->bytecode[i] == event)
    96ac:	24 e0       	ldi	r18, 0x04	; 4
    96ae:	30 e0       	ldi	r19, 0x00	; 0
    96b0:	c4 cf       	rjmp	.-120    	; 0x963a <AsebaVMSetupEvent+0x7a>

000096b2 <AsebaVMStep>:
}

/*! Execute one bytecode of the current VM thread.
	VM must be ready for run otherwise trashes may occur. */
void AsebaVMStep(AsebaVMState *vm)
{
    96b2:	ef 92       	push	r14
    96b4:	ff 92       	push	r15
    96b6:	0f 93       	push	r16
    96b8:	1f 93       	push	r17
    96ba:	cf 93       	push	r28
    96bc:	df 93       	push	r29
    96be:	00 d0       	rcall	.+0      	; 0x96c0 <AsebaVMStep+0xe>
    96c0:	00 d0       	rcall	.+0      	; 0x96c2 <AsebaVMStep+0x10>
    96c2:	cd b7       	in	r28, 0x3d	; 61
    96c4:	de b7       	in	r29, 0x3e	; 62
	uint16 bytecode = vm->bytecode[vm->pc];
    96c6:	fc 01       	movw	r30, r24
    96c8:	a4 81       	ldd	r26, Z+4	; 0x04
    96ca:	b5 81       	ldd	r27, Z+5	; 0x05
    96cc:	40 89       	ldd	r20, Z+16	; 0x10
    96ce:	51 89       	ldd	r21, Z+17	; 0x11
    96d0:	9a 01       	movw	r18, r20
    96d2:	22 0f       	add	r18, r18
    96d4:	33 1f       	adc	r19, r19
    96d6:	a2 0f       	add	r26, r18
    96d8:	b3 1f       	adc	r27, r19
    96da:	ed 90       	ld	r14, X+
    96dc:	fc 90       	ld	r15, X
    96de:	11 97       	sbiw	r26, 0x01	; 1
	#ifdef ASEBA_ASSERT
	if (AsebaMaskIsClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
		AsebaAssert(vm, ASEBA_ASSERT_STEP_OUT_OF_RUN);
	#endif
	
	switch (bytecode >> 12)
    96e0:	f7 01       	movw	r30, r14
    96e2:	ef 2f       	mov	r30, r31
    96e4:	ff 27       	eor	r31, r31
    96e6:	e2 95       	swap	r30
    96e8:	ef 70       	andi	r30, 0x0F	; 15
    96ea:	ef 30       	cpi	r30, 0x0F	; 15
    96ec:	f1 05       	cpc	r31, r1
    96ee:	68 f5       	brcc	.+90     	; 0x974a <AsebaVMStep+0x98>
    96f0:	8c 01       	movw	r16, r24
    96f2:	88 27       	eor	r24, r24
    96f4:	e7 56       	subi	r30, 0x67	; 103
    96f6:	ff 4f       	sbci	r31, 0xFF	; 255
    96f8:	8f 4f       	sbci	r24, 0xFF	; 255
    96fa:	0c 94 1e 56 	jmp	0xac3c	; 0xac3c <__tablejump2__>
			if (vm->sp < 0)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get operand
			value = vm->stack[vm->sp];
    96fe:	d8 01       	movw	r26, r16
    9700:	52 96       	adiw	r26, 0x12	; 18
    9702:	ed 91       	ld	r30, X+
    9704:	fc 91       	ld	r31, X
    9706:	53 97       	sbiw	r26, 0x13	; 19
    9708:	ee 0f       	add	r30, r30
    970a:	ff 1f       	adc	r31, r31
    970c:	1c 96       	adiw	r26, 0x0c	; 12
    970e:	8d 91       	ld	r24, X+
    9710:	9c 91       	ld	r25, X
    9712:	1d 97       	sbiw	r26, 0x0d	; 13
    9714:	e8 0f       	add	r30, r24
    9716:	f9 1f       	adc	r31, r25
    9718:	80 81       	ld	r24, Z
    971a:	91 81       	ldd	r25, Z+1	; 0x01
			
			// do operation
			opResult = AsebaVMDoUnaryOperation(vm, value, bytecode & ASEBA_UNARY_OPERATOR_MASK);
    971c:	ff 24       	eor	r15, r15
	}
}

static sint16 AsebaVMDoUnaryOperation(AsebaVMState *vm, sint16 value, uint16 op)
{
	switch (op)
    971e:	b1 e0       	ldi	r27, 0x01	; 1
    9720:	eb 16       	cp	r14, r27
    9722:	f1 04       	cpc	r15, r1
    9724:	09 f4       	brne	.+2      	; 0x9728 <AsebaVMStep+0x76>
    9726:	6a c2       	rjmp	.+1236   	; 0x9bfc <AsebaVMStep+0x54a>
    9728:	08 f4       	brcc	.+2      	; 0x972c <AsebaVMStep+0x7a>
    972a:	6a c2       	rjmp	.+1236   	; 0x9c00 <AsebaVMStep+0x54e>
    972c:	a2 e0       	ldi	r26, 0x02	; 2
    972e:	ea 16       	cp	r14, r26
    9730:	f1 04       	cpc	r15, r1
    9732:	09 f0       	breq	.+2      	; 0x9736 <AsebaVMStep+0x84>
    9734:	76 c2       	rjmp	.+1260   	; 0x9c22 <AsebaVMStep+0x570>
	{
		case ASEBA_UNARY_OP_SUB: return -value;
		case ASEBA_UNARY_OP_ABS: return value >= 0 ? value : -value;
		case ASEBA_UNARY_OP_BIT_NOT: return ~value;
    9736:	80 95       	com	r24
    9738:	90 95       	com	r25
			
			// do operation
			opResult = AsebaVMDoUnaryOperation(vm, value, bytecode & ASEBA_UNARY_OPERATOR_MASK);
			
			// write result
			vm->stack[vm->sp] = opResult;
    973a:	91 83       	std	Z+1, r25	; 0x01
    973c:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc ++;
    973e:	f8 01       	movw	r30, r16
    9740:	80 89       	ldd	r24, Z+16	; 0x10
    9742:	91 89       	ldd	r25, Z+17	; 0x11
    9744:	01 96       	adiw	r24, 0x01	; 1
    9746:	91 8b       	std	Z+17, r25	; 0x11
    9748:	80 8b       	std	Z+16, r24	; 0x10
		#ifdef ASEBA_ASSERT
		AsebaAssert(vm, ASEBA_ASSERT_UNKNOWN_BYTECODE);
		#endif
		break;
	} // switch bytecode...
}
    974a:	26 96       	adiw	r28, 0x06	; 6
    974c:	0f b6       	in	r0, 0x3f	; 63
    974e:	f8 94       	cli
    9750:	de bf       	out	0x3e, r29	; 62
    9752:	0f be       	out	0x3f, r0	; 63
    9754:	cd bf       	out	0x3d, r28	; 61
    9756:	df 91       	pop	r29
    9758:	cf 91       	pop	r28
    975a:	1f 91       	pop	r17
    975c:	0f 91       	pop	r16
    975e:	ff 90       	pop	r15
    9760:	ef 90       	pop	r14
    9762:	08 95       	ret
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// store return value on stack
			vm->stack[++vm->sp] = vm->pc + 1;
    9764:	d8 01       	movw	r26, r16
    9766:	1c 96       	adiw	r26, 0x0c	; 12
    9768:	ed 91       	ld	r30, X+
    976a:	fc 91       	ld	r31, X
    976c:	1d 97       	sbiw	r26, 0x0d	; 13
    976e:	52 96       	adiw	r26, 0x12	; 18
    9770:	8d 91       	ld	r24, X+
    9772:	9c 91       	ld	r25, X
    9774:	53 97       	sbiw	r26, 0x13	; 19
    9776:	01 96       	adiw	r24, 0x01	; 1
    9778:	53 96       	adiw	r26, 0x13	; 19
    977a:	9c 93       	st	X, r25
    977c:	8e 93       	st	-X, r24
    977e:	52 97       	sbiw	r26, 0x12	; 18
    9780:	88 0f       	add	r24, r24
    9782:	99 1f       	adc	r25, r25
    9784:	e8 0f       	add	r30, r24
    9786:	f9 1f       	adc	r31, r25
    9788:	ca 01       	movw	r24, r20
    978a:	01 96       	adiw	r24, 0x01	; 1
    978c:	91 83       	std	Z+1, r25	; 0x01
    978e:	80 83       	st	Z, r24
		break;
		
		// Bytecode: Subroutine call
		case ASEBA_BYTECODE_SUB_CALL:
		{
			uint16 dest = bytecode & 0x0fff;
    9790:	bf e0       	ldi	r27, 0x0F	; 15
    9792:	fb 22       	and	r15, r27
			
			// store return value on stack
			vm->stack[++vm->sp] = vm->pc + 1;
			
			// jump
			vm->pc = dest;
    9794:	f8 01       	movw	r30, r16
    9796:	f1 8a       	std	Z+17, r15	; 0x11
    9798:	e0 8a       	std	Z+16, r14	; 0x10
		}
		break;
    979a:	d7 cf       	rjmp	.-82     	; 0x974a <AsebaVMStep+0x98>
			if (vm->sp < 0)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// do return
			vm->pc = vm->stack[vm->sp--];
    979c:	d8 01       	movw	r26, r16
    979e:	1c 96       	adiw	r26, 0x0c	; 12
    97a0:	ed 91       	ld	r30, X+
    97a2:	fc 91       	ld	r31, X
    97a4:	1d 97       	sbiw	r26, 0x0d	; 13
    97a6:	52 96       	adiw	r26, 0x12	; 18
    97a8:	8d 91       	ld	r24, X+
    97aa:	9c 91       	ld	r25, X
    97ac:	53 97       	sbiw	r26, 0x13	; 19
    97ae:	9c 01       	movw	r18, r24
    97b0:	21 50       	subi	r18, 0x01	; 1
    97b2:	31 09       	sbc	r19, r1
    97b4:	53 96       	adiw	r26, 0x13	; 19
    97b6:	3c 93       	st	X, r19
    97b8:	2e 93       	st	-X, r18
    97ba:	52 97       	sbiw	r26, 0x12	; 18
    97bc:	88 0f       	add	r24, r24
    97be:	99 1f       	adc	r25, r25
    97c0:	e8 0f       	add	r30, r24
    97c2:	f9 1f       	adc	r31, r25
    97c4:	80 81       	ld	r24, Z
    97c6:	91 81       	ldd	r25, Z+1	; 0x01
    97c8:	51 96       	adiw	r26, 0x11	; 17
    97ca:	9c 93       	st	X, r25
    97cc:	8e 93       	st	-X, r24
    97ce:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    97d0:	bc cf       	rjmp	.-136    	; 0x974a <AsebaVMStep+0x98>
	switch (bytecode >> 12)
	{
		// Bytecode: Stop
		case ASEBA_BYTECODE_STOP:
		{
			AsebaMaskClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK);
    97d2:	d8 01       	movw	r26, r16
    97d4:	1e 96       	adiw	r26, 0x0e	; 14
    97d6:	8d 91       	ld	r24, X+
    97d8:	9c 91       	ld	r25, X
    97da:	1f 97       	sbiw	r26, 0x0f	; 15
    97dc:	8e 7f       	andi	r24, 0xFE	; 254
    97de:	1f 96       	adiw	r26, 0x0f	; 15
    97e0:	9c 93       	st	X, r25
    97e2:	8e 93       	st	-X, r24
    97e4:	1e 97       	sbiw	r26, 0x0e	; 14
		}
		break;
    97e6:	b1 cf       	rjmp	.-158    	; 0x974a <AsebaVMStep+0x98>
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = value;
    97e8:	d8 01       	movw	r26, r16
    97ea:	1c 96       	adiw	r26, 0x0c	; 12
    97ec:	ed 91       	ld	r30, X+
    97ee:	fc 91       	ld	r31, X
    97f0:	1d 97       	sbiw	r26, 0x0d	; 13
    97f2:	52 96       	adiw	r26, 0x12	; 18
    97f4:	8d 91       	ld	r24, X+
    97f6:	9c 91       	ld	r25, X
    97f8:	53 97       	sbiw	r26, 0x13	; 19
    97fa:	01 96       	adiw	r24, 0x01	; 1
    97fc:	53 96       	adiw	r26, 0x13	; 19
    97fe:	9c 93       	st	X, r25
    9800:	8e 93       	st	-X, r24
    9802:	52 97       	sbiw	r26, 0x12	; 18
    9804:	88 0f       	add	r24, r24
    9806:	99 1f       	adc	r25, r25
    9808:	e8 0f       	add	r30, r24
    980a:	f9 1f       	adc	r31, r25
		break;
		
		// Bytecode: Small Immediate
		case ASEBA_BYTECODE_SMALL_IMMEDIATE:
		{
			sint16 value = ((sint16)(bytecode << 4)) >> 4;
    980c:	e2 94       	swap	r14
    980e:	f2 94       	swap	r15
    9810:	00 ef       	ldi	r16, 0xF0	; 240
    9812:	f0 22       	and	r15, r16
    9814:	fe 24       	eor	r15, r14
    9816:	e0 22       	and	r14, r16
    9818:	fe 24       	eor	r15, r14
    981a:	f5 94       	asr	r15
    981c:	e7 94       	ror	r14
    981e:	f5 94       	asr	r15
    9820:	e7 94       	ror	r14
    9822:	f5 94       	asr	r15
    9824:	e7 94       	ror	r14
    9826:	f5 94       	asr	r15
    9828:	e7 94       	ror	r14
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = value;
    982a:	f1 82       	std	Z+1, r15	; 0x01
    982c:	e0 82       	st	Z, r14
			
			// increment PC
			vm->pc ++;
    982e:	50 96       	adiw	r26, 0x10	; 16
    9830:	8d 91       	ld	r24, X+
    9832:	9c 91       	ld	r25, X
    9834:	51 97       	sbiw	r26, 0x11	; 17
    9836:	01 96       	adiw	r24, 0x01	; 1
    9838:	51 96       	adiw	r26, 0x11	; 17
    983a:	9c 93       	st	X, r25
    983c:	8e 93       	st	-X, r24
    983e:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    9840:	84 cf       	rjmp	.-248    	; 0x974a <AsebaVMStep+0x98>
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = vm->bytecode[vm->pc + 1];
    9842:	f8 01       	movw	r30, r16
    9844:	24 85       	ldd	r18, Z+12	; 0x0c
    9846:	35 85       	ldd	r19, Z+13	; 0x0d
    9848:	82 89       	ldd	r24, Z+18	; 0x12
    984a:	93 89       	ldd	r25, Z+19	; 0x13
    984c:	01 96       	adiw	r24, 0x01	; 1
    984e:	93 8b       	std	Z+19, r25	; 0x13
    9850:	82 8b       	std	Z+18, r24	; 0x12
    9852:	88 0f       	add	r24, r24
    9854:	99 1f       	adc	r25, r25
    9856:	f9 01       	movw	r30, r18
    9858:	e8 0f       	add	r30, r24
    985a:	f9 1f       	adc	r31, r25
    985c:	12 96       	adiw	r26, 0x02	; 2
    985e:	8d 91       	ld	r24, X+
    9860:	9c 91       	ld	r25, X
    9862:	13 97       	sbiw	r26, 0x03	; 3
    9864:	91 83       	std	Z+1, r25	; 0x01
    9866:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc += 2;
    9868:	d8 01       	movw	r26, r16
    986a:	50 96       	adiw	r26, 0x10	; 16
    986c:	8d 91       	ld	r24, X+
    986e:	9c 91       	ld	r25, X
    9870:	51 97       	sbiw	r26, 0x11	; 17
    9872:	02 96       	adiw	r24, 0x02	; 2
    9874:	51 96       	adiw	r26, 0x11	; 17
    9876:	9c 93       	st	X, r25
    9878:	8e 93       	st	-X, r24
    987a:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    987c:	66 cf       	rjmp	.-308    	; 0x974a <AsebaVMStep+0x98>
			if (variableIndex >= vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = vm->variables[variableIndex];
    987e:	f8 01       	movw	r30, r16
    9880:	44 85       	ldd	r20, Z+12	; 0x0c
    9882:	55 85       	ldd	r21, Z+13	; 0x0d
    9884:	82 89       	ldd	r24, Z+18	; 0x12
    9886:	93 89       	ldd	r25, Z+19	; 0x13
    9888:	01 96       	adiw	r24, 0x01	; 1
    988a:	93 8b       	std	Z+19, r25	; 0x13
    988c:	82 8b       	std	Z+18, r24	; 0x12
		break;
		
		// Bytecode: Load
		case ASEBA_BYTECODE_LOAD:
		{
			uint16 variableIndex = bytecode & 0x0fff;
    988e:	ff e0       	ldi	r31, 0x0F	; 15
    9890:	ff 22       	and	r15, r31
			if (variableIndex >= vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = vm->variables[variableIndex];
    9892:	ee 0c       	add	r14, r14
    9894:	ff 1c       	adc	r15, r15
    9896:	f8 01       	movw	r30, r16
    9898:	a0 85       	ldd	r26, Z+8	; 0x08
    989a:	b1 85       	ldd	r27, Z+9	; 0x09
    989c:	ae 0d       	add	r26, r14
    989e:	bf 1d       	adc	r27, r15
    98a0:	2d 91       	ld	r18, X+
    98a2:	3c 91       	ld	r19, X
    98a4:	88 0f       	add	r24, r24
    98a6:	99 1f       	adc	r25, r25
    98a8:	fa 01       	movw	r30, r20
    98aa:	e8 0f       	add	r30, r24
    98ac:	f9 1f       	adc	r31, r25
    98ae:	31 83       	std	Z+1, r19	; 0x01
    98b0:	20 83       	st	Z, r18
			
			// increment PC
			vm->pc ++;
    98b2:	d8 01       	movw	r26, r16
    98b4:	50 96       	adiw	r26, 0x10	; 16
    98b6:	8d 91       	ld	r24, X+
    98b8:	9c 91       	ld	r25, X
    98ba:	51 97       	sbiw	r26, 0x11	; 17
    98bc:	01 96       	adiw	r24, 0x01	; 1
    98be:	51 96       	adiw	r26, 0x11	; 17
    98c0:	9c 93       	st	X, r25
    98c2:	8e 93       	st	-X, r24
    98c4:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    98c6:	41 cf       	rjmp	.-382    	; 0x974a <AsebaVMStep+0x98>
		
		// Bytecode: Store
		case ASEBA_BYTECODE_STORE:
		{
			uint16 variableIndex = bytecode & 0x0fff;
    98c8:	bf e0       	ldi	r27, 0x0F	; 15
    98ca:	fb 22       	and	r15, r27
			if (variableIndex >= vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			
			// pop value from stack
			vm->variables[variableIndex] = vm->stack[vm->sp--];
    98cc:	ee 0c       	add	r14, r14
    98ce:	ff 1c       	adc	r15, r15
    98d0:	f8 01       	movw	r30, r16
    98d2:	a0 85       	ldd	r26, Z+8	; 0x08
    98d4:	b1 85       	ldd	r27, Z+9	; 0x09
    98d6:	ae 0d       	add	r26, r14
    98d8:	bf 1d       	adc	r27, r15
    98da:	44 85       	ldd	r20, Z+12	; 0x0c
    98dc:	55 85       	ldd	r21, Z+13	; 0x0d
    98de:	82 89       	ldd	r24, Z+18	; 0x12
    98e0:	93 89       	ldd	r25, Z+19	; 0x13
    98e2:	9c 01       	movw	r18, r24
    98e4:	21 50       	subi	r18, 0x01	; 1
    98e6:	31 09       	sbc	r19, r1
    98e8:	33 8b       	std	Z+19, r19	; 0x13
    98ea:	22 8b       	std	Z+18, r18	; 0x12
    98ec:	88 0f       	add	r24, r24
    98ee:	99 1f       	adc	r25, r25
    98f0:	fa 01       	movw	r30, r20
    98f2:	e8 0f       	add	r30, r24
    98f4:	f9 1f       	adc	r31, r25
    98f6:	80 81       	ld	r24, Z
    98f8:	91 81       	ldd	r25, Z+1	; 0x01
    98fa:	8d 93       	st	X+, r24
    98fc:	9c 93       	st	X, r25
			
			// increment PC
			vm->pc ++;
    98fe:	d8 01       	movw	r26, r16
    9900:	50 96       	adiw	r26, 0x10	; 16
    9902:	8d 91       	ld	r24, X+
    9904:	9c 91       	ld	r25, X
    9906:	51 97       	sbiw	r26, 0x11	; 17
    9908:	01 96       	adiw	r24, 0x01	; 1
    990a:	51 96       	adiw	r26, 0x11	; 17
    990c:	9c 93       	st	X, r25
    990e:	8e 93       	st	-X, r24
    9910:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    9912:	1b cf       	rjmp	.-458    	; 0x974a <AsebaVMStep+0x98>
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get indexes
			arrayIndex = bytecode & 0x0fff;
			arraySize = vm->bytecode[vm->pc + 1];
    9914:	12 96       	adiw	r26, 0x02	; 2
    9916:	8d 91       	ld	r24, X+
    9918:	9c 91       	ld	r25, X
    991a:	13 97       	sbiw	r26, 0x03	; 3
			variableIndex = vm->stack[vm->sp];
    991c:	d8 01       	movw	r26, r16
    991e:	52 96       	adiw	r26, 0x12	; 18
    9920:	ed 91       	ld	r30, X+
    9922:	fc 91       	ld	r31, X
    9924:	53 97       	sbiw	r26, 0x13	; 19
    9926:	ee 0f       	add	r30, r30
    9928:	ff 1f       	adc	r31, r31
    992a:	1c 96       	adiw	r26, 0x0c	; 12
    992c:	2d 91       	ld	r18, X+
    992e:	3c 91       	ld	r19, X
    9930:	1d 97       	sbiw	r26, 0x0d	; 13
    9932:	e2 0f       	add	r30, r18
    9934:	f3 1f       	adc	r31, r19
    9936:	a0 81       	ld	r26, Z
    9938:	b1 81       	ldd	r27, Z+1	; 0x01
			
			// check variable index
			if (variableIndex >= arraySize)
    993a:	a8 17       	cp	r26, r24
    993c:	b9 07       	cpc	r27, r25
    993e:	08 f0       	brcs	.+2      	; 0x9942 <AsebaVMStep+0x290>
    9940:	2f c1       	rjmp	.+606    	; 0x9ba0 <AsebaVMStep+0x4ee>
			if (vm->sp < 0)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get indexes
			arrayIndex = bytecode & 0x0fff;
    9942:	2f e0       	ldi	r18, 0x0F	; 15
    9944:	f2 22       	and	r15, r18
					AsebaVMErrorCB(vm,NULL);
				break;
			}
			
			// load variable
			vm->stack[vm->sp] = vm->variables[arrayIndex + variableIndex];
    9946:	ea 0e       	add	r14, r26
    9948:	fb 1e       	adc	r15, r27
    994a:	ee 0c       	add	r14, r14
    994c:	ff 1c       	adc	r15, r15
    994e:	d8 01       	movw	r26, r16
    9950:	18 96       	adiw	r26, 0x08	; 8
    9952:	8d 91       	ld	r24, X+
    9954:	9c 91       	ld	r25, X
    9956:	19 97       	sbiw	r26, 0x09	; 9
    9958:	dc 01       	movw	r26, r24
    995a:	ae 0d       	add	r26, r14
    995c:	bf 1d       	adc	r27, r15
    995e:	8d 91       	ld	r24, X+
    9960:	9c 91       	ld	r25, X
    9962:	91 83       	std	Z+1, r25	; 0x01
    9964:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc += 2;
    9966:	f8 01       	movw	r30, r16
    9968:	80 89       	ldd	r24, Z+16	; 0x10
    996a:	91 89       	ldd	r25, Z+17	; 0x11
    996c:	02 96       	adiw	r24, 0x02	; 2
    996e:	91 8b       	std	Z+17, r25	; 0x11
    9970:	80 8b       	std	Z+16, r24	; 0x10
		}
		break;
    9972:	eb ce       	rjmp	.-554    	; 0x974a <AsebaVMStep+0x98>
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get value and indexes
			arrayIndex = bytecode & 0x0fff;
			arraySize = vm->bytecode[vm->pc + 1];
    9974:	12 96       	adiw	r26, 0x02	; 2
    9976:	0d 90       	ld	r0, X+
    9978:	bc 91       	ld	r27, X
    997a:	a0 2d       	mov	r26, r0
			variableValue = vm->stack[vm->sp - 1];
    997c:	f8 01       	movw	r30, r16
    997e:	24 85       	ldd	r18, Z+12	; 0x0c
    9980:	35 85       	ldd	r19, Z+13	; 0x0d
    9982:	82 89       	ldd	r24, Z+18	; 0x12
    9984:	93 89       	ldd	r25, Z+19	; 0x13
    9986:	fc 01       	movw	r30, r24
    9988:	e1 50       	subi	r30, 0x01	; 1
    998a:	f0 48       	sbci	r31, 0x80	; 128
    998c:	ee 0f       	add	r30, r30
    998e:	ff 1f       	adc	r31, r31
    9990:	e2 0f       	add	r30, r18
    9992:	f3 1f       	adc	r31, r19
    9994:	80 81       	ld	r24, Z
    9996:	91 81       	ldd	r25, Z+1	; 0x01
			variableIndex = (uint16)vm->stack[vm->sp];
    9998:	02 80       	ldd	r0, Z+2	; 0x02
    999a:	f3 81       	ldd	r31, Z+3	; 0x03
    999c:	e0 2d       	mov	r30, r0
			
			// check variable index
			if (variableIndex >= arraySize)
    999e:	ea 17       	cp	r30, r26
    99a0:	fb 07       	cpc	r31, r27
    99a2:	08 f0       	brcs	.+2      	; 0x99a6 <AsebaVMStep+0x2f4>
    99a4:	1d c1       	rjmp	.+570    	; 0x9be0 <AsebaVMStep+0x52e>
			if (vm->sp < 1)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get value and indexes
			arrayIndex = bytecode & 0x0fff;
    99a6:	bf e0       	ldi	r27, 0x0F	; 15
    99a8:	fb 22       	and	r15, r27
					AsebaVMErrorCB(vm,NULL);
				break;
			}
			
			// store variable and change sp
			vm->variables[arrayIndex + variableIndex] = variableValue;
    99aa:	ee 0e       	add	r14, r30
    99ac:	ff 1e       	adc	r15, r31
    99ae:	ee 0c       	add	r14, r14
    99b0:	ff 1c       	adc	r15, r15
    99b2:	d8 01       	movw	r26, r16
    99b4:	18 96       	adiw	r26, 0x08	; 8
    99b6:	ed 91       	ld	r30, X+
    99b8:	fc 91       	ld	r31, X
    99ba:	19 97       	sbiw	r26, 0x09	; 9
    99bc:	ee 0d       	add	r30, r14
    99be:	ff 1d       	adc	r31, r15
    99c0:	91 83       	std	Z+1, r25	; 0x01
    99c2:	80 83       	st	Z, r24
			vm->sp -= 2;
    99c4:	52 96       	adiw	r26, 0x12	; 18
    99c6:	8d 91       	ld	r24, X+
    99c8:	9c 91       	ld	r25, X
    99ca:	53 97       	sbiw	r26, 0x13	; 19
    99cc:	02 97       	sbiw	r24, 0x02	; 2
    99ce:	53 96       	adiw	r26, 0x13	; 19
    99d0:	9c 93       	st	X, r25
    99d2:	8e 93       	st	-X, r24
    99d4:	52 97       	sbiw	r26, 0x12	; 18
			
			// increment PC
			vm->pc += 2;
    99d6:	50 96       	adiw	r26, 0x10	; 16
    99d8:	8d 91       	ld	r24, X+
    99da:	9c 91       	ld	r25, X
    99dc:	51 97       	sbiw	r26, 0x11	; 17
    99de:	02 96       	adiw	r24, 0x02	; 2
    99e0:	51 96       	adiw	r26, 0x11	; 17
    99e2:	9c 93       	st	X, r25
    99e4:	8e 93       	st	-X, r24
    99e6:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    99e8:	b0 ce       	rjmp	.-672    	; 0x974a <AsebaVMStep+0x98>
			if (vm->sp < 1)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get operands
			valueOne = vm->stack[vm->sp - 1];
    99ea:	d8 01       	movw	r26, r16
    99ec:	1c 96       	adiw	r26, 0x0c	; 12
    99ee:	4d 91       	ld	r20, X+
    99f0:	5c 91       	ld	r21, X
    99f2:	1d 97       	sbiw	r26, 0x0d	; 13
    99f4:	52 96       	adiw	r26, 0x12	; 18
    99f6:	8d 91       	ld	r24, X+
    99f8:	9c 91       	ld	r25, X
    99fa:	53 97       	sbiw	r26, 0x13	; 19
    99fc:	fc 01       	movw	r30, r24
    99fe:	e1 50       	subi	r30, 0x01	; 1
    9a00:	f0 48       	sbci	r31, 0x80	; 128
    9a02:	ee 0f       	add	r30, r30
    9a04:	ff 1f       	adc	r31, r31
			valueTwo = vm->stack[vm->sp];
			
			// do operation
			opResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
    9a06:	97 01       	movw	r18, r14
    9a08:	33 27       	eor	r19, r19
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get operands
			valueOne = vm->stack[vm->sp - 1];
			valueTwo = vm->stack[vm->sp];
    9a0a:	e4 0f       	add	r30, r20
    9a0c:	f5 1f       	adc	r31, r21
			
			// do operation
			opResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
    9a0e:	42 81       	ldd	r20, Z+2	; 0x02
    9a10:	53 81       	ldd	r21, Z+3	; 0x03
    9a12:	60 81       	ld	r22, Z
    9a14:	71 81       	ldd	r23, Z+1	; 0x01
    9a16:	c8 01       	movw	r24, r16
    9a18:	0e 94 25 4a 	call	0x944a	; 0x944a <AsebaVMDoBinaryOperation>
			
			// write result
			vm->sp--;
    9a1c:	f8 01       	movw	r30, r16
    9a1e:	22 89       	ldd	r18, Z+18	; 0x12
    9a20:	33 89       	ldd	r19, Z+19	; 0x13
    9a22:	21 50       	subi	r18, 0x01	; 1
    9a24:	31 09       	sbc	r19, r1
    9a26:	33 8b       	std	Z+19, r19	; 0x13
    9a28:	22 8b       	std	Z+18, r18	; 0x12
			vm->stack[vm->sp] = opResult;
    9a2a:	22 0f       	add	r18, r18
    9a2c:	33 1f       	adc	r19, r19
    9a2e:	04 84       	ldd	r0, Z+12	; 0x0c
    9a30:	f5 85       	ldd	r31, Z+13	; 0x0d
    9a32:	e0 2d       	mov	r30, r0
    9a34:	e2 0f       	add	r30, r18
    9a36:	f3 1f       	adc	r31, r19
    9a38:	91 83       	std	Z+1, r25	; 0x01
    9a3a:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc ++;
    9a3c:	d8 01       	movw	r26, r16
    9a3e:	50 96       	adiw	r26, 0x10	; 16
    9a40:	8d 91       	ld	r24, X+
    9a42:	9c 91       	ld	r25, X
    9a44:	51 97       	sbiw	r26, 0x11	; 17
    9a46:	01 96       	adiw	r24, 0x01	; 1
    9a48:	51 96       	adiw	r26, 0x11	; 17
    9a4a:	9c 93       	st	X, r25
    9a4c:	8e 93       	st	-X, r24
    9a4e:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    9a50:	7c ce       	rjmp	.-776    	; 0x974a <AsebaVMStep+0x98>
		
		// Bytecode: Jump
		case ASEBA_BYTECODE_JUMP:
		{
			sint16 disp = ((sint16)(bytecode << 4)) >> 4;
    9a52:	c7 01       	movw	r24, r14
    9a54:	82 95       	swap	r24
    9a56:	92 95       	swap	r25
    9a58:	90 7f       	andi	r25, 0xF0	; 240
    9a5a:	98 27       	eor	r25, r24
    9a5c:	80 7f       	andi	r24, 0xF0	; 240
    9a5e:	98 27       	eor	r25, r24
    9a60:	95 95       	asr	r25
    9a62:	87 95       	ror	r24
    9a64:	95 95       	asr	r25
    9a66:	87 95       	ror	r24
    9a68:	95 95       	asr	r25
    9a6a:	87 95       	ror	r24
    9a6c:	95 95       	asr	r25
    9a6e:	87 95       	ror	r24
			if ((vm->pc + disp < 0) || (vm->pc + disp >=  vm->bytecodeSize))
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_BYTECODE_BOUNDS);
			#endif
			
			// do jump
			vm->pc += disp;
    9a70:	84 0f       	add	r24, r20
    9a72:	95 1f       	adc	r25, r21
    9a74:	f8 01       	movw	r30, r16
    9a76:	91 8b       	std	Z+17, r25	; 0x11
    9a78:	80 8b       	std	Z+16, r24	; 0x10
		}
		break;
    9a7a:	67 ce       	rjmp	.-818    	; 0x974a <AsebaVMStep+0x98>
			if (vm->sp < 1)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// evaluate condition
			valueOne = vm->stack[vm->sp - 1];
    9a7c:	d8 01       	movw	r26, r16
    9a7e:	1c 96       	adiw	r26, 0x0c	; 12
    9a80:	2d 91       	ld	r18, X+
    9a82:	3c 91       	ld	r19, X
    9a84:	1d 97       	sbiw	r26, 0x0d	; 13
    9a86:	52 96       	adiw	r26, 0x12	; 18
    9a88:	8d 91       	ld	r24, X+
    9a8a:	9c 91       	ld	r25, X
    9a8c:	53 97       	sbiw	r26, 0x13	; 19
    9a8e:	fc 01       	movw	r30, r24
    9a90:	e1 50       	subi	r30, 0x01	; 1
    9a92:	f0 48       	sbci	r31, 0x80	; 128
    9a94:	ee 0f       	add	r30, r30
    9a96:	ff 1f       	adc	r31, r31
			valueTwo = vm->stack[vm->sp];
    9a98:	e2 0f       	add	r30, r18
    9a9a:	f3 1f       	adc	r31, r19
			conditionResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
    9a9c:	42 81       	ldd	r20, Z+2	; 0x02
    9a9e:	53 81       	ldd	r21, Z+3	; 0x03
    9aa0:	60 81       	ld	r22, Z
    9aa2:	71 81       	ldd	r23, Z+1	; 0x01
    9aa4:	97 01       	movw	r18, r14
    9aa6:	33 27       	eor	r19, r19
    9aa8:	c8 01       	movw	r24, r16
    9aaa:	0e 94 25 4a 	call	0x944a	; 0x944a <AsebaVMDoBinaryOperation>
			vm->sp -= 2;
    9aae:	f8 01       	movw	r30, r16
    9ab0:	22 89       	ldd	r18, Z+18	; 0x12
    9ab2:	33 89       	ldd	r19, Z+19	; 0x13
    9ab4:	22 50       	subi	r18, 0x02	; 2
    9ab6:	31 09       	sbc	r19, r1
    9ab8:	33 8b       	std	Z+19, r19	; 0x13
    9aba:	22 8b       	std	Z+18, r18	; 0x12
			
			// is the condition really true ?
			if (conditionResult && !(GET_BIT(bytecode, ASEBA_IF_IS_WHEN_BIT) && GET_BIT(bytecode, ASEBA_IF_WAS_TRUE_BIT)))
    9abc:	89 2b       	or	r24, r25
    9abe:	09 f4       	brne	.+2      	; 0x9ac2 <AsebaVMStep+0x410>
    9ac0:	4c c0       	rjmp	.+152    	; 0x9b5a <AsebaVMStep+0x4a8>
    9ac2:	ee 24       	eor	r14, r14
    9ac4:	f3 e0       	ldi	r31, 0x03	; 3
    9ac6:	ff 22       	and	r15, r31
    9ac8:	d8 01       	movw	r26, r16
    9aca:	14 96       	adiw	r26, 0x04	; 4
    9acc:	ed 91       	ld	r30, X+
    9ace:	fc 91       	ld	r31, X
    9ad0:	15 97       	sbiw	r26, 0x05	; 5
    9ad2:	e1 14       	cp	r14, r1
    9ad4:	23 e0       	ldi	r18, 0x03	; 3
    9ad6:	f2 06       	cpc	r15, r18
    9ad8:	09 f4       	brne	.+2      	; 0x9adc <AsebaVMStep+0x42a>
    9ada:	96 c0       	rjmp	.+300    	; 0x9c08 <AsebaVMStep+0x556>
    9adc:	50 96       	adiw	r26, 0x10	; 16
    9ade:	2d 91       	ld	r18, X+
    9ae0:	3c 91       	ld	r19, X
    9ae2:	51 97       	sbiw	r26, 0x11	; 17
    9ae4:	42 e0       	ldi	r20, 0x02	; 2
    9ae6:	50 e0       	ldi	r21, 0x00	; 0
				disp = (sint16)vm->bytecode[vm->pc + 1];
			}
			
			// write back condition result
			if (conditionResult)
				BIT_SET(vm->bytecode[vm->pc], ASEBA_IF_WAS_TRUE_BIT);
    9ae8:	22 0f       	add	r18, r18
    9aea:	33 1f       	adc	r19, r19
    9aec:	e2 0f       	add	r30, r18
    9aee:	f3 1f       	adc	r31, r19
    9af0:	80 81       	ld	r24, Z
    9af2:	91 81       	ldd	r25, Z+1	; 0x01
    9af4:	92 60       	ori	r25, 0x02	; 2
    9af6:	91 83       	std	Z+1, r25	; 0x01
    9af8:	80 83       	st	Z, r24
    9afa:	4a c0       	rjmp	.+148    	; 0x9b90 <AsebaVMStep+0x4de>
			
			#ifdef ASEBA_ASSERT
			if (length > ASEBA_MAX_EVENT_ARG_SIZE)
				AsebaAssert(vm, ASEBA_ASSERT_EMIT_BUFFER_TOO_LONG);
			#endif
			AsebaSendMessageWords(vm, bytecode & 0x0fff, vm->variables + start, length);
    9afc:	14 96       	adiw	r26, 0x04	; 4
    9afe:	2d 91       	ld	r18, X+
    9b00:	3c 91       	ld	r19, X
    9b02:	15 97       	sbiw	r26, 0x05	; 5
    9b04:	22 0f       	add	r18, r18
    9b06:	33 1f       	adc	r19, r19
    9b08:	12 96       	adiw	r26, 0x02	; 2
    9b0a:	4d 91       	ld	r20, X+
    9b0c:	5c 91       	ld	r21, X
    9b0e:	13 97       	sbiw	r26, 0x03	; 3
    9b10:	44 0f       	add	r20, r20
    9b12:	55 1f       	adc	r21, r21
    9b14:	d8 01       	movw	r26, r16
    9b16:	18 96       	adiw	r26, 0x08	; 8
    9b18:	8d 91       	ld	r24, X+
    9b1a:	9c 91       	ld	r25, X
    9b1c:	19 97       	sbiw	r26, 0x09	; 9
    9b1e:	48 0f       	add	r20, r24
    9b20:	59 1f       	adc	r21, r25
    9b22:	b7 01       	movw	r22, r14
    9b24:	7f 70       	andi	r23, 0x0F	; 15
    9b26:	c8 01       	movw	r24, r16
    9b28:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
			
			// increment PC
			vm->pc += 3;
    9b2c:	f8 01       	movw	r30, r16
    9b2e:	80 89       	ldd	r24, Z+16	; 0x10
    9b30:	91 89       	ldd	r25, Z+17	; 0x11
    9b32:	03 96       	adiw	r24, 0x03	; 3
    9b34:	91 8b       	std	Z+17, r25	; 0x11
    9b36:	80 8b       	std	Z+16, r24	; 0x10
		}
		break;
    9b38:	08 ce       	rjmp	.-1008   	; 0x974a <AsebaVMStep+0x98>
		
		// Bytecode: Call
		case ASEBA_BYTECODE_NATIVE_CALL:
		{
			// call native function
			AsebaNativeFunction(vm, bytecode & 0x0fff);
    9b3a:	b7 01       	movw	r22, r14
    9b3c:	7f 70       	andi	r23, 0x0F	; 15
    9b3e:	c8 01       	movw	r24, r16
    9b40:	0e 94 76 16 	call	0x2cec	; 0x2cec <AsebaNativeFunction>
			
			// increment PC
			vm->pc ++;
    9b44:	d8 01       	movw	r26, r16
    9b46:	50 96       	adiw	r26, 0x10	; 16
    9b48:	8d 91       	ld	r24, X+
    9b4a:	9c 91       	ld	r25, X
    9b4c:	51 97       	sbiw	r26, 0x11	; 17
    9b4e:	01 96       	adiw	r24, 0x01	; 1
    9b50:	51 96       	adiw	r26, 0x11	; 17
    9b52:	9c 93       	st	X, r25
    9b54:	8e 93       	st	-X, r24
    9b56:	50 97       	sbiw	r26, 0x10	; 16
		}
		break;
    9b58:	f8 cd       	rjmp	.-1040   	; 0x974a <AsebaVMStep+0x98>
				disp = 2;
			}
			else
			{
				// if false disp
				disp = (sint16)vm->bytecode[vm->pc + 1];
    9b5a:	d8 01       	movw	r26, r16
    9b5c:	04 80       	ldd	r0, Z+4	; 0x04
    9b5e:	f5 81       	ldd	r31, Z+5	; 0x05
    9b60:	e0 2d       	mov	r30, r0
    9b62:	50 96       	adiw	r26, 0x10	; 16
    9b64:	8d 91       	ld	r24, X+
    9b66:	9c 91       	ld	r25, X
    9b68:	51 97       	sbiw	r26, 0x11	; 17
    9b6a:	01 96       	adiw	r24, 0x01	; 1
    9b6c:	88 0f       	add	r24, r24
    9b6e:	99 1f       	adc	r25, r25
    9b70:	df 01       	movw	r26, r30
    9b72:	a8 0f       	add	r26, r24
    9b74:	b9 1f       	adc	r27, r25
    9b76:	3c 91       	ld	r19, X
    9b78:	11 96       	adiw	r26, 0x01	; 1
    9b7a:	2c 91       	ld	r18, X
			
			// write back condition result
			if (conditionResult)
				BIT_SET(vm->bytecode[vm->pc], ASEBA_IF_WAS_TRUE_BIT);
			else
				BIT_CLR(vm->bytecode[vm->pc], ASEBA_IF_WAS_TRUE_BIT);
    9b7c:	02 97       	sbiw	r24, 0x02	; 2
    9b7e:	e8 0f       	add	r30, r24
    9b80:	f9 1f       	adc	r31, r25
    9b82:	80 81       	ld	r24, Z
    9b84:	91 81       	ldd	r25, Z+1	; 0x01
    9b86:	9d 7f       	andi	r25, 0xFD	; 253
    9b88:	91 83       	std	Z+1, r25	; 0x01
    9b8a:	80 83       	st	Z, r24
    9b8c:	43 2f       	mov	r20, r19
    9b8e:	52 2f       	mov	r21, r18
			if ((vm->pc + disp < 0) || (vm->pc + disp >=  vm->bytecodeSize))
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_BYTECODE_BOUNDS);
			#endif
			
			// do branch
			vm->pc += disp;
    9b90:	f8 01       	movw	r30, r16
    9b92:	80 89       	ldd	r24, Z+16	; 0x10
    9b94:	91 89       	ldd	r25, Z+17	; 0x11
    9b96:	84 0f       	add	r24, r20
    9b98:	95 1f       	adc	r25, r21
    9b9a:	91 8b       	std	Z+17, r25	; 0x11
    9b9c:	80 8b       	std	Z+16, r24	; 0x10
		}
		break;
    9b9e:	d5 cd       	rjmp	.-1110   	; 0x974a <AsebaVMStep+0x98>
			
			// check variable index
			if (variableIndex >= arraySize)
			{
				uint16 buffer[3];
				buffer[0] = vm->pc;
    9ba0:	5a 83       	std	Y+2, r21	; 0x02
    9ba2:	49 83       	std	Y+1, r20	; 0x01
				buffer[1] = arraySize;
    9ba4:	9c 83       	std	Y+4, r25	; 0x04
    9ba6:	8b 83       	std	Y+3, r24	; 0x03
				buffer[2] = variableIndex;
    9ba8:	be 83       	std	Y+6, r27	; 0x06
    9baa:	ad 83       	std	Y+5, r26	; 0x05
				vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    9bac:	82 e0       	ldi	r24, 0x02	; 2
    9bae:	90 e0       	ldi	r25, 0x00	; 0
    9bb0:	f8 01       	movw	r30, r16
    9bb2:	97 87       	std	Z+15, r25	; 0x0f
    9bb4:	86 87       	std	Z+14, r24	; 0x0e
				uint16 buffer[3];
				buffer[0] = vm->pc;
				buffer[1] = arraySize;
				buffer[2] = variableIndex;
				vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
				AsebaSendMessageWords(vm, ASEBA_MESSAGE_ARRAY_ACCESS_OUT_OF_BOUNDS, buffer, 3);
    9bb6:	26 e0       	ldi	r18, 0x06	; 6
    9bb8:	30 e0       	ldi	r19, 0x00	; 0
    9bba:	ae 01       	movw	r20, r28
    9bbc:	4f 5f       	subi	r20, 0xFF	; 255
    9bbe:	5f 4f       	sbci	r21, 0xFF	; 255
    9bc0:	66 e0       	ldi	r22, 0x06	; 6
    9bc2:	70 e9       	ldi	r23, 0x90	; 144
    9bc4:	c8 01       	movw	r24, r16
    9bc6:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
				if(AsebaVMErrorCB)
    9bca:	80 e0       	ldi	r24, 0x00	; 0
    9bcc:	90 e0       	ldi	r25, 0x00	; 0
    9bce:	89 2b       	or	r24, r25
    9bd0:	09 f4       	brne	.+2      	; 0x9bd4 <AsebaVMStep+0x522>
    9bd2:	bb cd       	rjmp	.-1162   	; 0x974a <AsebaVMStep+0x98>
					AsebaVMErrorCB(vm,NULL);
    9bd4:	60 e0       	ldi	r22, 0x00	; 0
    9bd6:	70 e0       	ldi	r23, 0x00	; 0
    9bd8:	c8 01       	movw	r24, r16
    9bda:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    9bde:	b5 cd       	rjmp	.-1174   	; 0x974a <AsebaVMStep+0x98>
			
			// check variable index
			if (variableIndex >= arraySize)
			{
				uint16 buffer[3];
				buffer[0] = vm->pc;
    9be0:	5a 83       	std	Y+2, r21	; 0x02
    9be2:	49 83       	std	Y+1, r20	; 0x01
				buffer[1] = arraySize;
    9be4:	bc 83       	std	Y+4, r27	; 0x04
    9be6:	ab 83       	std	Y+3, r26	; 0x03
				buffer[2] = variableIndex;
    9be8:	fe 83       	std	Y+6, r31	; 0x06
    9bea:	ed 83       	std	Y+5, r30	; 0x05
				vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    9bec:	82 e0       	ldi	r24, 0x02	; 2
    9bee:	90 e0       	ldi	r25, 0x00	; 0
    9bf0:	d8 01       	movw	r26, r16
    9bf2:	1f 96       	adiw	r26, 0x0f	; 15
    9bf4:	9c 93       	st	X, r25
    9bf6:	8e 93       	st	-X, r24
    9bf8:	1e 97       	sbiw	r26, 0x0e	; 14
    9bfa:	dd cf       	rjmp	.-70     	; 0x9bb6 <AsebaVMStep+0x504>
static sint16 AsebaVMDoUnaryOperation(AsebaVMState *vm, sint16 value, uint16 op)
{
	switch (op)
	{
		case ASEBA_UNARY_OP_SUB: return -value;
		case ASEBA_UNARY_OP_ABS: return value >= 0 ? value : -value;
    9bfc:	97 ff       	sbrs	r25, 7
    9bfe:	9d cd       	rjmp	.-1222   	; 0x973a <AsebaVMStep+0x88>
    9c00:	91 95       	neg	r25
    9c02:	81 95       	neg	r24
    9c04:	91 09       	sbc	r25, r1
    9c06:	99 cd       	rjmp	.-1230   	; 0x973a <AsebaVMStep+0x88>
				disp = 2;
			}
			else
			{
				// if false disp
				disp = (sint16)vm->bytecode[vm->pc + 1];
    9c08:	50 96       	adiw	r26, 0x10	; 16
    9c0a:	2d 91       	ld	r18, X+
    9c0c:	3c 91       	ld	r19, X
    9c0e:	51 97       	sbiw	r26, 0x11	; 17
    9c10:	d9 01       	movw	r26, r18
    9c12:	11 96       	adiw	r26, 0x01	; 1
    9c14:	aa 0f       	add	r26, r26
    9c16:	bb 1f       	adc	r27, r27
    9c18:	ae 0f       	add	r26, r30
    9c1a:	bf 1f       	adc	r27, r31
    9c1c:	4d 91       	ld	r20, X+
    9c1e:	5c 91       	ld	r21, X
    9c20:	63 cf       	rjmp	.-314    	; 0x9ae8 <AsebaVMStep+0x436>
		
		default:
		#ifdef ASEBA_ASSERT
		AsebaAssert(vm, ASEBA_ASSERT_UNKNOWN_UNARY_OPERATOR);
		#endif
		return 0;
    9c22:	80 e0       	ldi	r24, 0x00	; 0
    9c24:	90 e0       	ldi	r25, 0x00	; 0
    9c26:	89 cd       	rjmp	.-1262   	; 0x973a <AsebaVMStep+0x88>

00009c28 <AsebaVMRun>:
	
	AsebaMaskClear(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
}

uint16 AsebaVMRun(AsebaVMState *vm, uint16 stepsLimit)
{
    9c28:	4f 92       	push	r4
    9c2a:	5f 92       	push	r5
    9c2c:	6f 92       	push	r6
    9c2e:	7f 92       	push	r7
    9c30:	8f 92       	push	r8
    9c32:	9f 92       	push	r9
    9c34:	af 92       	push	r10
    9c36:	bf 92       	push	r11
    9c38:	cf 92       	push	r12
    9c3a:	df 92       	push	r13
    9c3c:	ef 92       	push	r14
    9c3e:	ff 92       	push	r15
    9c40:	0f 93       	push	r16
    9c42:	1f 93       	push	r17
    9c44:	cf 93       	push	r28
    9c46:	df 93       	push	r29
    9c48:	00 d0       	rcall	.+0      	; 0x9c4a <AsebaVMRun+0x22>
    9c4a:	00 d0       	rcall	.+0      	; 0x9c4c <AsebaVMRun+0x24>
    9c4c:	cd b7       	in	r28, 0x3d	; 61
    9c4e:	de b7       	in	r29, 0x3e	; 62
    9c50:	8c 01       	movw	r16, r24
    9c52:	7b 01       	movw	r14, r22
	// if there is nothing to execute, just return
	if (AsebaMaskIsClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
    9c54:	dc 01       	movw	r26, r24
    9c56:	1e 96       	adiw	r26, 0x0e	; 14
    9c58:	2d 91       	ld	r18, X+
    9c5a:	3c 91       	ld	r19, X
    9c5c:	1f 97       	sbiw	r26, 0x0f	; 15
    9c5e:	20 ff       	sbrs	r18, 0
    9c60:	3f c0       	rjmp	.+126    	; 0x9ce0 <AsebaVMRun+0xb8>
		return 0;
	
	// if we are running step by step, just return either
	if (AsebaMaskIsSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK))
    9c62:	21 fd       	sbrc	r18, 1
    9c64:	3d c0       	rjmp	.+122    	; 0x9ce0 <AsebaVMRun+0xb8>
		return 0;
	
	// run until something stops the vm
	if (vm->breakpointsCount)
    9c66:	d4 96       	adiw	r26, 0x34	; 52
    9c68:	8d 91       	ld	r24, X+
    9c6a:	9c 91       	ld	r25, X
    9c6c:	d5 97       	sbiw	r26, 0x35	; 53

/*! Run with support of breakpoints.
	Also check ASEBA_VM_EVENT_RUNNING_MASK to exit on interrupts. */
void AsebaDebugBreakpointRun(AsebaVMState *vm, uint16 stepsLimit)
{
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
    9c6e:	a9 01       	movw	r20, r18
    9c70:	44 60       	ori	r20, 0x04	; 4
	// if we are running step by step, just return either
	if (AsebaMaskIsSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK))
		return 0;
	
	// run until something stops the vm
	if (vm->breakpointsCount)
    9c72:	00 97       	sbiw	r24, 0x00	; 0
    9c74:	09 f0       	breq	.+2      	; 0x9c78 <AsebaVMRun+0x50>
    9c76:	bd c2       	rjmp	.+1402   	; 0xa1f2 <AsebaVMRun+0x5ca>

/*! Run without support of breakpoints.
	Check ASEBA_VM_EVENT_RUNNING_MASK to exit on interrupts or stepsLimit if > 0. */
void AsebaDebugBareRun(AsebaVMState *vm, uint16 stepsLimit)
{
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
    9c78:	d8 01       	movw	r26, r16
    9c7a:	1f 96       	adiw	r26, 0x0f	; 15
    9c7c:	5c 93       	st	X, r21
    9c7e:	4e 93       	st	-X, r20
    9c80:	1e 97       	sbiw	r26, 0x0e	; 14
	
	if (stepsLimit > 0)
    9c82:	67 2b       	or	r22, r23
    9c84:	09 f0       	breq	.+2      	; 0x9c88 <AsebaVMRun+0x60>
    9c86:	45 c0       	rjmp	.+138    	; 0x9d12 <AsebaVMRun+0xea>
    9c88:	4a 01       	movw	r8, r20
    9c8a:	b5 e0       	ldi	r27, 0x05	; 5
    9c8c:	8b 22       	and	r8, r27
    9c8e:	99 24       	eor	r9, r9
			valueTwo = vm->stack[vm->sp];
			conditionResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
			vm->sp -= 2;
			
			// is the condition really true ?
			if (conditionResult && !(GET_BIT(bytecode, ASEBA_IF_IS_WHEN_BIT) && GET_BIT(bytecode, ASEBA_IF_WAS_TRUE_BIT)))
    9c90:	62 e0       	ldi	r22, 0x02	; 2
    9c92:	a6 2e       	mov	r10, r22
    9c94:	b1 2c       	mov	r11, r1
				buffer[0] = vm->pc;
				buffer[1] = arraySize;
				buffer[2] = variableIndex;
				vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
				AsebaSendMessageWords(vm, ASEBA_MESSAGE_ARRAY_ACCESS_OUT_OF_BOUNDS, buffer, 3);
				if(AsebaVMErrorCB)
    9c96:	70 e0       	ldi	r23, 0x00	; 0
    9c98:	c7 2e       	mov	r12, r23
    9c9a:	70 e0       	ldi	r23, 0x00	; 0
    9c9c:	d7 2e       	mov	r13, r23
    9c9e:	b5 e0       	ldi	r27, 0x05	; 5
    9ca0:	8b 16       	cp	r8, r27
    9ca2:	91 04       	cpc	r9, r1
    9ca4:	09 f0       	breq	.+2      	; 0x9ca8 <AsebaVMRun+0x80>
    9ca6:	4f c0       	rjmp	.+158    	; 0x9d46 <AsebaVMRun+0x11e>
    9ca8:	f8 01       	movw	r30, r16
    9caa:	a0 89       	ldd	r26, Z+16	; 0x10
    9cac:	b1 89       	ldd	r27, Z+17	; 0x11
    9cae:	24 81       	ldd	r18, Z+4	; 0x04
    9cb0:	35 81       	ldd	r19, Z+5	; 0x05

/*! Execute one bytecode of the current VM thread.
	VM must be ready for run otherwise trashes may occur. */
void AsebaVMStep(AsebaVMState *vm)
{
	uint16 bytecode = vm->bytecode[vm->pc];
    9cb2:	fd 01       	movw	r30, r26
    9cb4:	ee 0f       	add	r30, r30
    9cb6:	ff 1f       	adc	r31, r31
    9cb8:	e2 0f       	add	r30, r18
    9cba:	f3 1f       	adc	r31, r19
    9cbc:	e0 80       	ld	r14, Z
    9cbe:	f1 80       	ldd	r15, Z+1	; 0x01
	#ifdef ASEBA_ASSERT
	if (AsebaMaskIsClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
		AsebaAssert(vm, ASEBA_ASSERT_STEP_OUT_OF_RUN);
	#endif
	
	switch (bytecode >> 12)
    9cc0:	c7 01       	movw	r24, r14
    9cc2:	89 2f       	mov	r24, r25
    9cc4:	99 27       	eor	r25, r25
    9cc6:	82 95       	swap	r24
    9cc8:	8f 70       	andi	r24, 0x0F	; 15
    9cca:	2c 01       	movw	r4, r24
    9ccc:	8f 30       	cpi	r24, 0x0F	; 15
    9cce:	91 05       	cpc	r25, r1
    9cd0:	e8 f7       	brcc	.-6      	; 0x9ccc <AsebaVMRun+0xa4>
    9cd2:	f2 01       	movw	r30, r4
    9cd4:	88 27       	eor	r24, r24
    9cd6:	e8 55       	subi	r30, 0x58	; 88
    9cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    9cda:	8f 4f       	sbci	r24, 0xFF	; 255
    9cdc:	0c 94 1e 56 	jmp	0xac3c	; 0xac3c <__tablejump2__>

uint16 AsebaVMRun(AsebaVMState *vm, uint16 stepsLimit)
{
	// if there is nothing to execute, just return
	if (AsebaMaskIsClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
		return 0;
    9ce0:	80 e0       	ldi	r24, 0x00	; 0
    9ce2:	90 e0       	ldi	r25, 0x00	; 0
		AsebaDebugBreakpointRun(vm, stepsLimit);
	else
		AsebaDebugBareRun(vm, stepsLimit);
	
	return 1;
}
    9ce4:	26 96       	adiw	r28, 0x06	; 6
    9ce6:	0f b6       	in	r0, 0x3f	; 63
    9ce8:	f8 94       	cli
    9cea:	de bf       	out	0x3e, r29	; 62
    9cec:	0f be       	out	0x3f, r0	; 63
    9cee:	cd bf       	out	0x3d, r28	; 61
    9cf0:	df 91       	pop	r29
    9cf2:	cf 91       	pop	r28
    9cf4:	1f 91       	pop	r17
    9cf6:	0f 91       	pop	r16
    9cf8:	ff 90       	pop	r15
    9cfa:	ef 90       	pop	r14
    9cfc:	df 90       	pop	r13
    9cfe:	cf 90       	pop	r12
    9d00:	bf 90       	pop	r11
    9d02:	af 90       	pop	r10
    9d04:	9f 90       	pop	r9
    9d06:	8f 90       	pop	r8
    9d08:	7f 90       	pop	r7
    9d0a:	6f 90       	pop	r6
    9d0c:	5f 90       	pop	r5
    9d0e:	4f 90       	pop	r4
    9d10:	08 95       	ret
    9d12:	25 70       	andi	r18, 0x05	; 5
    9d14:	33 27       	eor	r19, r19
    9d16:	24 60       	ori	r18, 0x04	; 4
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
	
	if (stepsLimit > 0)
	{
		// no breakpoint, still poll the mask and check stepsLimit
		while (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK) &&
    9d18:	25 30       	cpi	r18, 0x05	; 5
    9d1a:	31 05       	cpc	r19, r1
    9d1c:	21 f0       	breq	.+8      	; 0x9d26 <AsebaVMRun+0xfe>
    9d1e:	13 c0       	rjmp	.+38     	; 0x9d46 <AsebaVMRun+0x11e>
			AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK) &&
    9d20:	e1 14       	cp	r14, r1
    9d22:	f1 04       	cpc	r15, r1
    9d24:	81 f0       	breq	.+32     	; 0x9d46 <AsebaVMRun+0x11e>
			stepsLimit
		)
		{
			AsebaVMStep(vm);
    9d26:	c8 01       	movw	r24, r16
    9d28:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <AsebaVMStep>
			stepsLimit--;
    9d2c:	e1 e0       	ldi	r30, 0x01	; 1
    9d2e:	ee 1a       	sub	r14, r30
    9d30:	f1 08       	sbc	r15, r1
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
	
	if (stepsLimit > 0)
	{
		// no breakpoint, still poll the mask and check stepsLimit
		while (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK) &&
    9d32:	d8 01       	movw	r26, r16
    9d34:	1e 96       	adiw	r26, 0x0e	; 14
    9d36:	4d 91       	ld	r20, X+
    9d38:	5c 91       	ld	r21, X
    9d3a:	1f 97       	sbiw	r26, 0x0f	; 15
    9d3c:	ca 01       	movw	r24, r20
    9d3e:	85 70       	andi	r24, 0x05	; 5
    9d40:	99 27       	eor	r25, r25
    9d42:	05 97       	sbiw	r24, 0x05	; 5
    9d44:	69 f3       	breq	.-38     	; 0x9d20 <AsebaVMRun+0xf8>
			AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK) 
		)
			AsebaVMStep(vm);
	}
	
	AsebaMaskClear(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
    9d46:	4b 7f       	andi	r20, 0xFB	; 251
    9d48:	d8 01       	movw	r26, r16
    9d4a:	1f 96       	adiw	r26, 0x0f	; 15
    9d4c:	5c 93       	st	X, r21
    9d4e:	4e 93       	st	-X, r20
    9d50:	1e 97       	sbiw	r26, 0x0e	; 14
	if (vm->breakpointsCount)
		AsebaDebugBreakpointRun(vm, stepsLimit);
	else
		AsebaDebugBareRun(vm, stepsLimit);
	
	return 1;
    9d52:	81 e0       	ldi	r24, 0x01	; 1
    9d54:	90 e0       	ldi	r25, 0x00	; 0
    9d56:	c6 cf       	rjmp	.-116    	; 0x9ce4 <AsebaVMRun+0xbc>
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// store return value on stack
			vm->stack[++vm->sp] = vm->pc + 1;
    9d58:	f8 01       	movw	r30, r16
    9d5a:	24 85       	ldd	r18, Z+12	; 0x0c
    9d5c:	35 85       	ldd	r19, Z+13	; 0x0d
    9d5e:	82 89       	ldd	r24, Z+18	; 0x12
    9d60:	93 89       	ldd	r25, Z+19	; 0x13
    9d62:	01 96       	adiw	r24, 0x01	; 1
    9d64:	93 8b       	std	Z+19, r25	; 0x13
    9d66:	82 8b       	std	Z+18, r24	; 0x12
    9d68:	88 0f       	add	r24, r24
    9d6a:	99 1f       	adc	r25, r25
    9d6c:	f9 01       	movw	r30, r18
    9d6e:	e8 0f       	add	r30, r24
    9d70:	f9 1f       	adc	r31, r25
    9d72:	11 96       	adiw	r26, 0x01	; 1
    9d74:	b1 83       	std	Z+1, r27	; 0x01
    9d76:	a0 83       	st	Z, r26
		break;
		
		// Bytecode: Subroutine call
		case ASEBA_BYTECODE_SUB_CALL:
		{
			uint16 dest = bytecode & 0x0fff;
    9d78:	ff e0       	ldi	r31, 0x0F	; 15
    9d7a:	ff 22       	and	r15, r31
			
			// store return value on stack
			vm->stack[++vm->sp] = vm->pc + 1;
			
			// jump
			vm->pc = dest;
    9d7c:	d8 01       	movw	r26, r16
    9d7e:	51 96       	adiw	r26, 0x11	; 17
    9d80:	fc 92       	st	X, r15
    9d82:	ee 92       	st	-X, r14
    9d84:	50 97       	sbiw	r26, 0x10	; 16
    9d86:	1e 96       	adiw	r26, 0x0e	; 14
    9d88:	4d 91       	ld	r20, X+
    9d8a:	5c 91       	ld	r21, X
    9d8c:	1f 97       	sbiw	r26, 0x0f	; 15
    9d8e:	4a 01       	movw	r8, r20
    9d90:	b5 e0       	ldi	r27, 0x05	; 5
    9d92:	8b 22       	and	r8, r27
    9d94:	99 24       	eor	r9, r9
    9d96:	83 cf       	rjmp	.-250    	; 0x9c9e <AsebaVMRun+0x76>
		
		// Bytecode: Call
		case ASEBA_BYTECODE_NATIVE_CALL:
		{
			// call native function
			AsebaNativeFunction(vm, bytecode & 0x0fff);
    9d98:	b7 01       	movw	r22, r14
    9d9a:	7f 70       	andi	r23, 0x0F	; 15
    9d9c:	c8 01       	movw	r24, r16
    9d9e:	0e 94 76 16 	call	0x2cec	; 0x2cec <AsebaNativeFunction>
			
			// increment PC
			vm->pc ++;
    9da2:	d8 01       	movw	r26, r16
    9da4:	50 96       	adiw	r26, 0x10	; 16
    9da6:	8d 91       	ld	r24, X+
    9da8:	9c 91       	ld	r25, X
    9daa:	51 97       	sbiw	r26, 0x11	; 17
    9dac:	01 96       	adiw	r24, 0x01	; 1
    9dae:	51 96       	adiw	r26, 0x11	; 17
    9db0:	9c 93       	st	X, r25
    9db2:	8e 93       	st	-X, r24
    9db4:	50 97       	sbiw	r26, 0x10	; 16
    9db6:	1e 96       	adiw	r26, 0x0e	; 14
    9db8:	4d 91       	ld	r20, X+
    9dba:	5c 91       	ld	r21, X
    9dbc:	1f 97       	sbiw	r26, 0x0f	; 15
    9dbe:	4a 01       	movw	r8, r20
    9dc0:	b5 e0       	ldi	r27, 0x05	; 5
    9dc2:	8b 22       	and	r8, r27
    9dc4:	99 24       	eor	r9, r9
    9dc6:	6b cf       	rjmp	.-298    	; 0x9c9e <AsebaVMRun+0x76>
		
		// Bytecode: Emit
		case ASEBA_BYTECODE_EMIT:
		{
			// emit event
			uint16 start = vm->bytecode[vm->pc + 1];
    9dc8:	11 96       	adiw	r26, 0x01	; 1
    9dca:	aa 0f       	add	r26, r26
    9dcc:	bb 1f       	adc	r27, r27
			uint16 length = vm->bytecode[vm->pc + 2];
    9dce:	a2 0f       	add	r26, r18
    9dd0:	b3 1f       	adc	r27, r19
			
			#ifdef ASEBA_ASSERT
			if (length > ASEBA_MAX_EVENT_ARG_SIZE)
				AsebaAssert(vm, ASEBA_ASSERT_EMIT_BUFFER_TOO_LONG);
			#endif
			AsebaSendMessageWords(vm, bytecode & 0x0fff, vm->variables + start, length);
    9dd2:	12 96       	adiw	r26, 0x02	; 2
    9dd4:	2d 91       	ld	r18, X+
    9dd6:	3c 91       	ld	r19, X
    9dd8:	13 97       	sbiw	r26, 0x03	; 3
    9dda:	22 0f       	add	r18, r18
    9ddc:	33 1f       	adc	r19, r19
    9dde:	4d 91       	ld	r20, X+
    9de0:	5c 91       	ld	r21, X
    9de2:	ca 01       	movw	r24, r20
    9de4:	88 0f       	add	r24, r24
    9de6:	99 1f       	adc	r25, r25
    9de8:	d8 01       	movw	r26, r16
    9dea:	18 96       	adiw	r26, 0x08	; 8
    9dec:	4d 91       	ld	r20, X+
    9dee:	5c 91       	ld	r21, X
    9df0:	19 97       	sbiw	r26, 0x09	; 9
    9df2:	48 0f       	add	r20, r24
    9df4:	59 1f       	adc	r21, r25
    9df6:	b7 01       	movw	r22, r14
    9df8:	7f 70       	andi	r23, 0x0F	; 15
    9dfa:	c8 01       	movw	r24, r16
    9dfc:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
			
			// increment PC
			vm->pc += 3;
    9e00:	f8 01       	movw	r30, r16
    9e02:	80 89       	ldd	r24, Z+16	; 0x10
    9e04:	91 89       	ldd	r25, Z+17	; 0x11
    9e06:	03 96       	adiw	r24, 0x03	; 3
    9e08:	91 8b       	std	Z+17, r25	; 0x11
    9e0a:	80 8b       	std	Z+16, r24	; 0x10
    9e0c:	46 85       	ldd	r20, Z+14	; 0x0e
    9e0e:	57 85       	ldd	r21, Z+15	; 0x0f
    9e10:	4a 01       	movw	r8, r20
    9e12:	f5 e0       	ldi	r31, 0x05	; 5
    9e14:	8f 22       	and	r8, r31
    9e16:	99 24       	eor	r9, r9
    9e18:	42 cf       	rjmp	.-380    	; 0x9c9e <AsebaVMRun+0x76>
			if (vm->sp < 1)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// evaluate condition
			valueOne = vm->stack[vm->sp - 1];
    9e1a:	d8 01       	movw	r26, r16
    9e1c:	1c 96       	adiw	r26, 0x0c	; 12
    9e1e:	ed 91       	ld	r30, X+
    9e20:	fc 91       	ld	r31, X
    9e22:	1d 97       	sbiw	r26, 0x0d	; 13
    9e24:	52 96       	adiw	r26, 0x12	; 18
    9e26:	8d 91       	ld	r24, X+
    9e28:	9c 91       	ld	r25, X
    9e2a:	53 97       	sbiw	r26, 0x13	; 19
    9e2c:	81 50       	subi	r24, 0x01	; 1
    9e2e:	90 48       	sbci	r25, 0x80	; 128
    9e30:	88 0f       	add	r24, r24
    9e32:	99 1f       	adc	r25, r25
			valueTwo = vm->stack[vm->sp];
    9e34:	e8 0f       	add	r30, r24
    9e36:	f9 1f       	adc	r31, r25
			conditionResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
    9e38:	42 81       	ldd	r20, Z+2	; 0x02
    9e3a:	53 81       	ldd	r21, Z+3	; 0x03
    9e3c:	60 81       	ld	r22, Z
    9e3e:	71 81       	ldd	r23, Z+1	; 0x01
    9e40:	97 01       	movw	r18, r14
    9e42:	33 27       	eor	r19, r19
    9e44:	c8 01       	movw	r24, r16
    9e46:	0e 94 25 4a 	call	0x944a	; 0x944a <AsebaVMDoBinaryOperation>
			vm->sp -= 2;
    9e4a:	f8 01       	movw	r30, r16
    9e4c:	22 89       	ldd	r18, Z+18	; 0x12
    9e4e:	33 89       	ldd	r19, Z+19	; 0x13
    9e50:	22 50       	subi	r18, 0x02	; 2
    9e52:	31 09       	sbc	r19, r1
    9e54:	33 8b       	std	Z+19, r19	; 0x13
    9e56:	22 8b       	std	Z+18, r18	; 0x12
			
			// is the condition really true ?
			if (conditionResult && !(GET_BIT(bytecode, ASEBA_IF_IS_WHEN_BIT) && GET_BIT(bytecode, ASEBA_IF_WAS_TRUE_BIT)))
    9e58:	89 2b       	or	r24, r25
    9e5a:	09 f4       	brne	.+2      	; 0x9e5e <AsebaVMRun+0x236>
    9e5c:	50 c3       	rjmp	.+1696   	; 0xa4fe <AsebaVMRun+0x8d6>
    9e5e:	ee 24       	eor	r14, r14
    9e60:	f3 e0       	ldi	r31, 0x03	; 3
    9e62:	ff 22       	and	r15, r31
    9e64:	d8 01       	movw	r26, r16
    9e66:	e1 14       	cp	r14, r1
    9e68:	23 e0       	ldi	r18, 0x03	; 3
    9e6a:	f2 06       	cpc	r15, r18
    9e6c:	09 f4       	brne	.+2      	; 0x9e70 <AsebaVMRun+0x248>
    9e6e:	76 c3       	rjmp	.+1772   	; 0xa55c <AsebaVMRun+0x934>
    9e70:	50 96       	adiw	r26, 0x10	; 16
    9e72:	2d 91       	ld	r18, X+
    9e74:	3c 91       	ld	r19, X
    9e76:	51 97       	sbiw	r26, 0x11	; 17
    9e78:	14 96       	adiw	r26, 0x04	; 4
    9e7a:	ed 91       	ld	r30, X+
    9e7c:	fc 91       	ld	r31, X
    9e7e:	15 97       	sbiw	r26, 0x05	; 5
    9e80:	42 e0       	ldi	r20, 0x02	; 2
    9e82:	50 e0       	ldi	r21, 0x00	; 0
				disp = (sint16)vm->bytecode[vm->pc + 1];
			}
			
			// write back condition result
			if (conditionResult)
				BIT_SET(vm->bytecode[vm->pc], ASEBA_IF_WAS_TRUE_BIT);
    9e84:	22 0f       	add	r18, r18
    9e86:	33 1f       	adc	r19, r19
    9e88:	e2 0f       	add	r30, r18
    9e8a:	f3 1f       	adc	r31, r19
    9e8c:	80 81       	ld	r24, Z
    9e8e:	91 81       	ldd	r25, Z+1	; 0x01
    9e90:	92 60       	ori	r25, 0x02	; 2
    9e92:	91 83       	std	Z+1, r25	; 0x01
    9e94:	80 83       	st	Z, r24
    9e96:	4e c3       	rjmp	.+1692   	; 0xa534 <AsebaVMRun+0x90c>
		break;
		
		// Bytecode: Jump
		case ASEBA_BYTECODE_JUMP:
		{
			sint16 disp = ((sint16)(bytecode << 4)) >> 4;
    9e98:	e2 94       	swap	r14
    9e9a:	f2 94       	swap	r15
    9e9c:	80 ef       	ldi	r24, 0xF0	; 240
    9e9e:	f8 22       	and	r15, r24
    9ea0:	fe 24       	eor	r15, r14
    9ea2:	e8 22       	and	r14, r24
    9ea4:	fe 24       	eor	r15, r14
    9ea6:	f5 94       	asr	r15
    9ea8:	e7 94       	ror	r14
    9eaa:	f5 94       	asr	r15
    9eac:	e7 94       	ror	r14
    9eae:	f5 94       	asr	r15
    9eb0:	e7 94       	ror	r14
    9eb2:	f5 94       	asr	r15
    9eb4:	e7 94       	ror	r14
			if ((vm->pc + disp < 0) || (vm->pc + disp >=  vm->bytecodeSize))
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_BYTECODE_BOUNDS);
			#endif
			
			// do jump
			vm->pc += disp;
    9eb6:	ae 0d       	add	r26, r14
    9eb8:	bf 1d       	adc	r27, r15
    9eba:	f8 01       	movw	r30, r16
    9ebc:	b1 8b       	std	Z+17, r27	; 0x11
    9ebe:	a0 8b       	std	Z+16, r26	; 0x10
    9ec0:	ee ce       	rjmp	.-548    	; 0x9c9e <AsebaVMRun+0x76>
			if (vm->sp < 1)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get operands
			valueOne = vm->stack[vm->sp - 1];
    9ec2:	d8 01       	movw	r26, r16
    9ec4:	1c 96       	adiw	r26, 0x0c	; 12
    9ec6:	ed 91       	ld	r30, X+
    9ec8:	fc 91       	ld	r31, X
    9eca:	1d 97       	sbiw	r26, 0x0d	; 13
    9ecc:	52 96       	adiw	r26, 0x12	; 18
    9ece:	8d 91       	ld	r24, X+
    9ed0:	9c 91       	ld	r25, X
    9ed2:	53 97       	sbiw	r26, 0x13	; 19
    9ed4:	81 50       	subi	r24, 0x01	; 1
    9ed6:	90 48       	sbci	r25, 0x80	; 128
    9ed8:	88 0f       	add	r24, r24
    9eda:	99 1f       	adc	r25, r25
			valueTwo = vm->stack[vm->sp];
			
			// do operation
			opResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
    9edc:	97 01       	movw	r18, r14
    9ede:	33 27       	eor	r19, r19
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get operands
			valueOne = vm->stack[vm->sp - 1];
			valueTwo = vm->stack[vm->sp];
    9ee0:	e8 0f       	add	r30, r24
    9ee2:	f9 1f       	adc	r31, r25
			
			// do operation
			opResult = AsebaVMDoBinaryOperation(vm, valueOne, valueTwo, bytecode & ASEBA_BINARY_OPERATOR_MASK);
    9ee4:	42 81       	ldd	r20, Z+2	; 0x02
    9ee6:	53 81       	ldd	r21, Z+3	; 0x03
    9ee8:	60 81       	ld	r22, Z
    9eea:	71 81       	ldd	r23, Z+1	; 0x01
    9eec:	c8 01       	movw	r24, r16
    9eee:	0e 94 25 4a 	call	0x944a	; 0x944a <AsebaVMDoBinaryOperation>
			
			// write result
			vm->sp--;
    9ef2:	f8 01       	movw	r30, r16
    9ef4:	22 89       	ldd	r18, Z+18	; 0x12
    9ef6:	33 89       	ldd	r19, Z+19	; 0x13
    9ef8:	21 50       	subi	r18, 0x01	; 1
    9efa:	31 09       	sbc	r19, r1
    9efc:	33 8b       	std	Z+19, r19	; 0x13
    9efe:	22 8b       	std	Z+18, r18	; 0x12
			vm->stack[vm->sp] = opResult;
    9f00:	22 0f       	add	r18, r18
    9f02:	33 1f       	adc	r19, r19
    9f04:	04 84       	ldd	r0, Z+12	; 0x0c
    9f06:	f5 85       	ldd	r31, Z+13	; 0x0d
    9f08:	e0 2d       	mov	r30, r0
    9f0a:	e2 0f       	add	r30, r18
    9f0c:	f3 1f       	adc	r31, r19
    9f0e:	91 83       	std	Z+1, r25	; 0x01
    9f10:	80 83       	st	Z, r24
    9f12:	47 cf       	rjmp	.-370    	; 0x9da2 <AsebaVMRun+0x17a>
			if (vm->sp < 0)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get operand
			value = vm->stack[vm->sp];
    9f14:	d8 01       	movw	r26, r16
    9f16:	52 96       	adiw	r26, 0x12	; 18
    9f18:	ed 91       	ld	r30, X+
    9f1a:	fc 91       	ld	r31, X
    9f1c:	53 97       	sbiw	r26, 0x13	; 19
    9f1e:	cf 01       	movw	r24, r30
    9f20:	88 0f       	add	r24, r24
    9f22:	99 1f       	adc	r25, r25
    9f24:	1c 96       	adiw	r26, 0x0c	; 12
    9f26:	ed 91       	ld	r30, X+
    9f28:	fc 91       	ld	r31, X
    9f2a:	1d 97       	sbiw	r26, 0x0d	; 13
    9f2c:	e8 0f       	add	r30, r24
    9f2e:	f9 1f       	adc	r31, r25
    9f30:	80 81       	ld	r24, Z
    9f32:	91 81       	ldd	r25, Z+1	; 0x01
			
			// do operation
			opResult = AsebaVMDoUnaryOperation(vm, value, bytecode & ASEBA_UNARY_OPERATOR_MASK);
    9f34:	ff 24       	eor	r15, r15
	}
}

static sint16 AsebaVMDoUnaryOperation(AsebaVMState *vm, sint16 value, uint16 op)
{
	switch (op)
    9f36:	b1 e0       	ldi	r27, 0x01	; 1
    9f38:	eb 16       	cp	r14, r27
    9f3a:	f1 04       	cpc	r15, r1
    9f3c:	09 f4       	brne	.+2      	; 0x9f40 <AsebaVMRun+0x318>
    9f3e:	08 c3       	rjmp	.+1552   	; 0xa550 <AsebaVMRun+0x928>
    9f40:	08 f4       	brcc	.+2      	; 0x9f44 <AsebaVMRun+0x31c>
    9f42:	08 c3       	rjmp	.+1552   	; 0xa554 <AsebaVMRun+0x92c>
    9f44:	a2 e0       	ldi	r26, 0x02	; 2
    9f46:	ea 16       	cp	r14, r26
    9f48:	f1 04       	cpc	r15, r1
    9f4a:	09 f0       	breq	.+2      	; 0x9f4e <AsebaVMRun+0x326>
    9f4c:	18 c3       	rjmp	.+1584   	; 0xa57e <AsebaVMRun+0x956>
	{
		case ASEBA_UNARY_OP_SUB: return -value;
		case ASEBA_UNARY_OP_ABS: return value >= 0 ? value : -value;
		case ASEBA_UNARY_OP_BIT_NOT: return ~value;
    9f4e:	80 95       	com	r24
    9f50:	90 95       	com	r25
			
			// do operation
			opResult = AsebaVMDoUnaryOperation(vm, value, bytecode & ASEBA_UNARY_OPERATOR_MASK);
			
			// write result
			vm->stack[vm->sp] = opResult;
    9f52:	91 83       	std	Z+1, r25	; 0x01
    9f54:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc ++;
    9f56:	f8 01       	movw	r30, r16
    9f58:	80 89       	ldd	r24, Z+16	; 0x10
    9f5a:	91 89       	ldd	r25, Z+17	; 0x11
    9f5c:	01 96       	adiw	r24, 0x01	; 1
    9f5e:	91 8b       	std	Z+17, r25	; 0x11
    9f60:	80 8b       	std	Z+16, r24	; 0x10
    9f62:	46 85       	ldd	r20, Z+14	; 0x0e
    9f64:	57 85       	ldd	r21, Z+15	; 0x0f
    9f66:	4a 01       	movw	r8, r20
    9f68:	f5 e0       	ldi	r31, 0x05	; 5
    9f6a:	8f 22       	and	r8, r31
    9f6c:	99 24       	eor	r9, r9
    9f6e:	97 ce       	rjmp	.-722    	; 0x9c9e <AsebaVMRun+0x76>
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get value and indexes
			arrayIndex = bytecode & 0x0fff;
			arraySize = vm->bytecode[vm->pc + 1];
    9f70:	cd 01       	movw	r24, r26
    9f72:	01 96       	adiw	r24, 0x01	; 1
    9f74:	88 0f       	add	r24, r24
    9f76:	99 1f       	adc	r25, r25
    9f78:	f9 01       	movw	r30, r18
    9f7a:	e8 0f       	add	r30, r24
    9f7c:	f9 1f       	adc	r31, r25
    9f7e:	20 81       	ld	r18, Z
    9f80:	31 81       	ldd	r19, Z+1	; 0x01
			variableValue = vm->stack[vm->sp - 1];
    9f82:	f8 01       	movw	r30, r16
    9f84:	44 85       	ldd	r20, Z+12	; 0x0c
    9f86:	55 85       	ldd	r21, Z+13	; 0x0d
    9f88:	82 89       	ldd	r24, Z+18	; 0x12
    9f8a:	93 89       	ldd	r25, Z+19	; 0x13
    9f8c:	81 50       	subi	r24, 0x01	; 1
    9f8e:	90 48       	sbci	r25, 0x80	; 128
    9f90:	88 0f       	add	r24, r24
    9f92:	99 1f       	adc	r25, r25
    9f94:	fa 01       	movw	r30, r20
    9f96:	e8 0f       	add	r30, r24
    9f98:	f9 1f       	adc	r31, r25
    9f9a:	40 81       	ld	r20, Z
    9f9c:	51 81       	ldd	r21, Z+1	; 0x01
			variableIndex = (uint16)vm->stack[vm->sp];
    9f9e:	82 81       	ldd	r24, Z+2	; 0x02
    9fa0:	93 81       	ldd	r25, Z+3	; 0x03
			
			// check variable index
			if (variableIndex >= arraySize)
    9fa2:	82 17       	cp	r24, r18
    9fa4:	93 07       	cpc	r25, r19
    9fa6:	08 f0       	brcs	.+2      	; 0x9faa <AsebaVMRun+0x382>
    9fa8:	ff c0       	rjmp	.+510    	; 0xa1a8 <AsebaVMRun+0x580>
			if (vm->sp < 1)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get value and indexes
			arrayIndex = bytecode & 0x0fff;
    9faa:	2f e0       	ldi	r18, 0x0F	; 15
    9fac:	f2 22       	and	r15, r18
					AsebaVMErrorCB(vm,NULL);
				break;
			}
			
			// store variable and change sp
			vm->variables[arrayIndex + variableIndex] = variableValue;
    9fae:	8e 0d       	add	r24, r14
    9fb0:	9f 1d       	adc	r25, r15
    9fb2:	88 0f       	add	r24, r24
    9fb4:	99 1f       	adc	r25, r25
    9fb6:	d8 01       	movw	r26, r16
    9fb8:	18 96       	adiw	r26, 0x08	; 8
    9fba:	ed 91       	ld	r30, X+
    9fbc:	fc 91       	ld	r31, X
    9fbe:	19 97       	sbiw	r26, 0x09	; 9
    9fc0:	e8 0f       	add	r30, r24
    9fc2:	f9 1f       	adc	r31, r25
    9fc4:	51 83       	std	Z+1, r21	; 0x01
    9fc6:	40 83       	st	Z, r20
			vm->sp -= 2;
    9fc8:	52 96       	adiw	r26, 0x12	; 18
    9fca:	8d 91       	ld	r24, X+
    9fcc:	9c 91       	ld	r25, X
    9fce:	53 97       	sbiw	r26, 0x13	; 19
    9fd0:	02 97       	sbiw	r24, 0x02	; 2
    9fd2:	53 96       	adiw	r26, 0x13	; 19
    9fd4:	9c 93       	st	X, r25
    9fd6:	8e 93       	st	-X, r24
    9fd8:	52 97       	sbiw	r26, 0x12	; 18
    9fda:	b8 c0       	rjmp	.+368    	; 0xa14c <AsebaVMRun+0x524>
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get indexes
			arrayIndex = bytecode & 0x0fff;
			arraySize = vm->bytecode[vm->pc + 1];
    9fdc:	cd 01       	movw	r24, r26
    9fde:	01 96       	adiw	r24, 0x01	; 1
    9fe0:	88 0f       	add	r24, r24
    9fe2:	99 1f       	adc	r25, r25
    9fe4:	f9 01       	movw	r30, r18
    9fe6:	e8 0f       	add	r30, r24
    9fe8:	f9 1f       	adc	r31, r25
    9fea:	20 81       	ld	r18, Z
    9fec:	31 81       	ldd	r19, Z+1	; 0x01
			variableIndex = vm->stack[vm->sp];
    9fee:	f8 01       	movw	r30, r16
    9ff0:	42 89       	ldd	r20, Z+18	; 0x12
    9ff2:	53 89       	ldd	r21, Z+19	; 0x13
    9ff4:	ca 01       	movw	r24, r20
    9ff6:	88 0f       	add	r24, r24
    9ff8:	99 1f       	adc	r25, r25
    9ffa:	44 85       	ldd	r20, Z+12	; 0x0c
    9ffc:	55 85       	ldd	r21, Z+13	; 0x0d
    9ffe:	48 0f       	add	r20, r24
    a000:	59 1f       	adc	r21, r25
    a002:	fa 01       	movw	r30, r20
    a004:	80 81       	ld	r24, Z
    a006:	91 81       	ldd	r25, Z+1	; 0x01
			
			// check variable index
			if (variableIndex >= arraySize)
    a008:	82 17       	cp	r24, r18
    a00a:	93 07       	cpc	r25, r19
    a00c:	08 f0       	brcs	.+2      	; 0xa010 <AsebaVMRun+0x3e8>
    a00e:	cc c0       	rjmp	.+408    	; 0xa1a8 <AsebaVMRun+0x580>
			if (vm->sp < 0)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// get indexes
			arrayIndex = bytecode & 0x0fff;
    a010:	2f e0       	ldi	r18, 0x0F	; 15
    a012:	f2 22       	and	r15, r18
					AsebaVMErrorCB(vm,NULL);
				break;
			}
			
			// load variable
			vm->stack[vm->sp] = vm->variables[arrayIndex + variableIndex];
    a014:	8e 0d       	add	r24, r14
    a016:	9f 1d       	adc	r25, r15
    a018:	88 0f       	add	r24, r24
    a01a:	99 1f       	adc	r25, r25
    a01c:	d8 01       	movw	r26, r16
    a01e:	18 96       	adiw	r26, 0x08	; 8
    a020:	ed 91       	ld	r30, X+
    a022:	fc 91       	ld	r31, X
    a024:	19 97       	sbiw	r26, 0x09	; 9
    a026:	e8 0f       	add	r30, r24
    a028:	f9 1f       	adc	r31, r25
    a02a:	80 81       	ld	r24, Z
    a02c:	91 81       	ldd	r25, Z+1	; 0x01
    a02e:	fa 01       	movw	r30, r20
    a030:	91 83       	std	Z+1, r25	; 0x01
    a032:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc += 2;
    a034:	50 96       	adiw	r26, 0x10	; 16
    a036:	8d 91       	ld	r24, X+
    a038:	9c 91       	ld	r25, X
    a03a:	51 97       	sbiw	r26, 0x11	; 17
    a03c:	02 96       	adiw	r24, 0x02	; 2
    a03e:	51 96       	adiw	r26, 0x11	; 17
    a040:	9c 93       	st	X, r25
    a042:	8e 93       	st	-X, r24
    a044:	50 97       	sbiw	r26, 0x10	; 16
    a046:	1e 96       	adiw	r26, 0x0e	; 14
    a048:	4d 91       	ld	r20, X+
    a04a:	5c 91       	ld	r21, X
    a04c:	1f 97       	sbiw	r26, 0x0f	; 15
    a04e:	4a 01       	movw	r8, r20
    a050:	f5 e0       	ldi	r31, 0x05	; 5
    a052:	8f 22       	and	r8, r31
    a054:	99 24       	eor	r9, r9
    a056:	23 ce       	rjmp	.-954    	; 0x9c9e <AsebaVMRun+0x76>
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = value;
    a058:	d8 01       	movw	r26, r16
    a05a:	1c 96       	adiw	r26, 0x0c	; 12
    a05c:	ed 91       	ld	r30, X+
    a05e:	fc 91       	ld	r31, X
    a060:	1d 97       	sbiw	r26, 0x0d	; 13
    a062:	52 96       	adiw	r26, 0x12	; 18
    a064:	8d 91       	ld	r24, X+
    a066:	9c 91       	ld	r25, X
    a068:	53 97       	sbiw	r26, 0x13	; 19
    a06a:	01 96       	adiw	r24, 0x01	; 1
    a06c:	53 96       	adiw	r26, 0x13	; 19
    a06e:	9c 93       	st	X, r25
    a070:	8e 93       	st	-X, r24
    a072:	52 97       	sbiw	r26, 0x12	; 18
    a074:	88 0f       	add	r24, r24
    a076:	99 1f       	adc	r25, r25
    a078:	e8 0f       	add	r30, r24
    a07a:	f9 1f       	adc	r31, r25
		break;
		
		// Bytecode: Small Immediate
		case ASEBA_BYTECODE_SMALL_IMMEDIATE:
		{
			sint16 value = ((sint16)(bytecode << 4)) >> 4;
    a07c:	e2 94       	swap	r14
    a07e:	f2 94       	swap	r15
    a080:	30 ef       	ldi	r19, 0xF0	; 240
    a082:	f3 22       	and	r15, r19
    a084:	fe 24       	eor	r15, r14
    a086:	e3 22       	and	r14, r19
    a088:	fe 24       	eor	r15, r14
    a08a:	f5 94       	asr	r15
    a08c:	e7 94       	ror	r14
    a08e:	f5 94       	asr	r15
    a090:	e7 94       	ror	r14
    a092:	f5 94       	asr	r15
    a094:	e7 94       	ror	r14
    a096:	f5 94       	asr	r15
    a098:	e7 94       	ror	r14
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = value;
    a09a:	f1 82       	std	Z+1, r15	; 0x01
    a09c:	e0 82       	st	Z, r14
    a09e:	82 ce       	rjmp	.-764    	; 0x9da4 <AsebaVMRun+0x17c>
	switch (bytecode >> 12)
	{
		// Bytecode: Stop
		case ASEBA_BYTECODE_STOP:
		{
			AsebaMaskClear(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK);
    a0a0:	4e 7f       	andi	r20, 0xFE	; 254
    a0a2:	f8 01       	movw	r30, r16
    a0a4:	57 87       	std	Z+15, r21	; 0x0f
    a0a6:	46 87       	std	Z+14, r20	; 0x0e
    a0a8:	4a 01       	movw	r8, r20
    a0aa:	f5 e0       	ldi	r31, 0x05	; 5
    a0ac:	8f 22       	and	r8, r31
    a0ae:	99 24       	eor	r9, r9
    a0b0:	f6 cd       	rjmp	.-1044   	; 0x9c9e <AsebaVMRun+0x76>
			if (vm->sp < 0)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_UNDERFLOW);
			#endif
			
			// do return
			vm->pc = vm->stack[vm->sp--];
    a0b2:	d8 01       	movw	r26, r16
    a0b4:	1c 96       	adiw	r26, 0x0c	; 12
    a0b6:	ed 91       	ld	r30, X+
    a0b8:	fc 91       	ld	r31, X
    a0ba:	1d 97       	sbiw	r26, 0x0d	; 13
    a0bc:	52 96       	adiw	r26, 0x12	; 18
    a0be:	8d 91       	ld	r24, X+
    a0c0:	9c 91       	ld	r25, X
    a0c2:	53 97       	sbiw	r26, 0x13	; 19
    a0c4:	9c 01       	movw	r18, r24
    a0c6:	21 50       	subi	r18, 0x01	; 1
    a0c8:	31 09       	sbc	r19, r1
    a0ca:	53 96       	adiw	r26, 0x13	; 19
    a0cc:	3c 93       	st	X, r19
    a0ce:	2e 93       	st	-X, r18
    a0d0:	52 97       	sbiw	r26, 0x12	; 18
    a0d2:	88 0f       	add	r24, r24
    a0d4:	99 1f       	adc	r25, r25
    a0d6:	e8 0f       	add	r30, r24
    a0d8:	f9 1f       	adc	r31, r25
    a0da:	80 81       	ld	r24, Z
    a0dc:	91 81       	ldd	r25, Z+1	; 0x01
    a0de:	51 96       	adiw	r26, 0x11	; 17
    a0e0:	9c 93       	st	X, r25
    a0e2:	8e 93       	st	-X, r24
    a0e4:	50 97       	sbiw	r26, 0x10	; 16
    a0e6:	db cd       	rjmp	.-1098   	; 0x9c9e <AsebaVMRun+0x76>
			if (variableIndex >= vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = vm->variables[variableIndex];
    a0e8:	f8 01       	movw	r30, r16
    a0ea:	44 85       	ldd	r20, Z+12	; 0x0c
    a0ec:	55 85       	ldd	r21, Z+13	; 0x0d
    a0ee:	82 89       	ldd	r24, Z+18	; 0x12
    a0f0:	93 89       	ldd	r25, Z+19	; 0x13
    a0f2:	01 96       	adiw	r24, 0x01	; 1
    a0f4:	93 8b       	std	Z+19, r25	; 0x13
    a0f6:	82 8b       	std	Z+18, r24	; 0x12
		break;
		
		// Bytecode: Load
		case ASEBA_BYTECODE_LOAD:
		{
			uint16 variableIndex = bytecode & 0x0fff;
    a0f8:	ff e0       	ldi	r31, 0x0F	; 15
    a0fa:	ff 22       	and	r15, r31
			if (variableIndex >= vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = vm->variables[variableIndex];
    a0fc:	ee 0c       	add	r14, r14
    a0fe:	ff 1c       	adc	r15, r15
    a100:	f8 01       	movw	r30, r16
    a102:	a0 85       	ldd	r26, Z+8	; 0x08
    a104:	b1 85       	ldd	r27, Z+9	; 0x09
    a106:	ae 0d       	add	r26, r14
    a108:	bf 1d       	adc	r27, r15
    a10a:	2d 91       	ld	r18, X+
    a10c:	3c 91       	ld	r19, X
    a10e:	88 0f       	add	r24, r24
    a110:	99 1f       	adc	r25, r25
    a112:	fa 01       	movw	r30, r20
    a114:	e8 0f       	add	r30, r24
    a116:	f9 1f       	adc	r31, r25
    a118:	31 83       	std	Z+1, r19	; 0x01
    a11a:	20 83       	st	Z, r18
    a11c:	42 ce       	rjmp	.-892    	; 0x9da2 <AsebaVMRun+0x17a>
			if (vm->sp + 1 >= vm->stackSize)
				AsebaAssert(vm, ASEBA_ASSERT_STACK_OVERFLOW);
			#endif
			
			// push value in stack
			vm->stack[++vm->sp] = vm->bytecode[vm->pc + 1];
    a11e:	f8 01       	movw	r30, r16
    a120:	44 85       	ldd	r20, Z+12	; 0x0c
    a122:	55 85       	ldd	r21, Z+13	; 0x0d
    a124:	82 89       	ldd	r24, Z+18	; 0x12
    a126:	93 89       	ldd	r25, Z+19	; 0x13
    a128:	01 96       	adiw	r24, 0x01	; 1
    a12a:	93 8b       	std	Z+19, r25	; 0x13
    a12c:	82 8b       	std	Z+18, r24	; 0x12
    a12e:	88 0f       	add	r24, r24
    a130:	99 1f       	adc	r25, r25
    a132:	fa 01       	movw	r30, r20
    a134:	e8 0f       	add	r30, r24
    a136:	f9 1f       	adc	r31, r25
    a138:	11 96       	adiw	r26, 0x01	; 1
    a13a:	aa 0f       	add	r26, r26
    a13c:	bb 1f       	adc	r27, r27
    a13e:	a2 0f       	add	r26, r18
    a140:	b3 1f       	adc	r27, r19
    a142:	8d 91       	ld	r24, X+
    a144:	9c 91       	ld	r25, X
    a146:	91 83       	std	Z+1, r25	; 0x01
    a148:	80 83       	st	Z, r24
			
			// increment PC
			vm->pc += 2;
    a14a:	d8 01       	movw	r26, r16
			// store variable and change sp
			vm->variables[arrayIndex + variableIndex] = variableValue;
			vm->sp -= 2;
			
			// increment PC
			vm->pc += 2;
    a14c:	50 96       	adiw	r26, 0x10	; 16
    a14e:	8d 91       	ld	r24, X+
    a150:	9c 91       	ld	r25, X
    a152:	51 97       	sbiw	r26, 0x11	; 17
    a154:	02 96       	adiw	r24, 0x02	; 2
    a156:	51 96       	adiw	r26, 0x11	; 17
    a158:	9c 93       	st	X, r25
    a15a:	8e 93       	st	-X, r24
    a15c:	50 97       	sbiw	r26, 0x10	; 16
    a15e:	1e 96       	adiw	r26, 0x0e	; 14
    a160:	4d 91       	ld	r20, X+
    a162:	5c 91       	ld	r21, X
    a164:	1f 97       	sbiw	r26, 0x0f	; 15
    a166:	4a 01       	movw	r8, r20
    a168:	b5 e0       	ldi	r27, 0x05	; 5
    a16a:	8b 22       	and	r8, r27
    a16c:	99 24       	eor	r9, r9
    a16e:	97 cd       	rjmp	.-1234   	; 0x9c9e <AsebaVMRun+0x76>
		break;
		
		// Bytecode: Store
		case ASEBA_BYTECODE_STORE:
		{
			uint16 variableIndex = bytecode & 0x0fff;
    a170:	ef e0       	ldi	r30, 0x0F	; 15
    a172:	fe 22       	and	r15, r30
			if (variableIndex >= vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			
			// pop value from stack
			vm->variables[variableIndex] = vm->stack[vm->sp--];
    a174:	ee 0c       	add	r14, r14
    a176:	ff 1c       	adc	r15, r15
    a178:	f8 01       	movw	r30, r16
    a17a:	a0 85       	ldd	r26, Z+8	; 0x08
    a17c:	b1 85       	ldd	r27, Z+9	; 0x09
    a17e:	ae 0d       	add	r26, r14
    a180:	bf 1d       	adc	r27, r15
    a182:	44 85       	ldd	r20, Z+12	; 0x0c
    a184:	55 85       	ldd	r21, Z+13	; 0x0d
    a186:	82 89       	ldd	r24, Z+18	; 0x12
    a188:	93 89       	ldd	r25, Z+19	; 0x13
    a18a:	9c 01       	movw	r18, r24
    a18c:	21 50       	subi	r18, 0x01	; 1
    a18e:	31 09       	sbc	r19, r1
    a190:	33 8b       	std	Z+19, r19	; 0x13
    a192:	22 8b       	std	Z+18, r18	; 0x12
    a194:	88 0f       	add	r24, r24
    a196:	99 1f       	adc	r25, r25
    a198:	fa 01       	movw	r30, r20
    a19a:	e8 0f       	add	r30, r24
    a19c:	f9 1f       	adc	r31, r25
    a19e:	80 81       	ld	r24, Z
    a1a0:	91 81       	ldd	r25, Z+1	; 0x01
    a1a2:	8d 93       	st	X+, r24
    a1a4:	9c 93       	st	X, r25
    a1a6:	fd cd       	rjmp	.-1030   	; 0x9da2 <AsebaVMRun+0x17a>
			
			// check variable index
			if (variableIndex >= arraySize)
			{
				uint16 buffer[3];
				buffer[0] = vm->pc;
    a1a8:	ba 83       	std	Y+2, r27	; 0x02
    a1aa:	a9 83       	std	Y+1, r26	; 0x01
				buffer[1] = arraySize;
    a1ac:	3c 83       	std	Y+4, r19	; 0x04
    a1ae:	2b 83       	std	Y+3, r18	; 0x03
				buffer[2] = variableIndex;
    a1b0:	9e 83       	std	Y+6, r25	; 0x06
    a1b2:	8d 83       	std	Y+5, r24	; 0x05
				vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    a1b4:	d8 01       	movw	r26, r16
    a1b6:	1f 96       	adiw	r26, 0x0f	; 15
    a1b8:	bc 92       	st	X, r11
    a1ba:	ae 92       	st	-X, r10
    a1bc:	1e 97       	sbiw	r26, 0x0e	; 14
				AsebaSendMessageWords(vm, ASEBA_MESSAGE_ARRAY_ACCESS_OUT_OF_BOUNDS, buffer, 3);
    a1be:	26 e0       	ldi	r18, 0x06	; 6
    a1c0:	30 e0       	ldi	r19, 0x00	; 0
    a1c2:	ae 01       	movw	r20, r28
    a1c4:	4f 5f       	subi	r20, 0xFF	; 255
    a1c6:	5f 4f       	sbci	r21, 0xFF	; 255
    a1c8:	66 e0       	ldi	r22, 0x06	; 6
    a1ca:	70 e9       	ldi	r23, 0x90	; 144
    a1cc:	c8 01       	movw	r24, r16
    a1ce:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
				if(AsebaVMErrorCB)
    a1d2:	c1 14       	cp	r12, r1
    a1d4:	d1 04       	cpc	r13, r1
    a1d6:	29 f0       	breq	.+10     	; 0xa1e2 <AsebaVMRun+0x5ba>
					AsebaVMErrorCB(vm,NULL);
    a1d8:	60 e0       	ldi	r22, 0x00	; 0
    a1da:	70 e0       	ldi	r23, 0x00	; 0
    a1dc:	c8 01       	movw	r24, r16
    a1de:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    a1e2:	f8 01       	movw	r30, r16
    a1e4:	46 85       	ldd	r20, Z+14	; 0x0e
    a1e6:	57 85       	ldd	r21, Z+15	; 0x0f
    a1e8:	4a 01       	movw	r8, r20
    a1ea:	f5 e0       	ldi	r31, 0x05	; 5
    a1ec:	8f 22       	and	r8, r31
    a1ee:	99 24       	eor	r9, r9
    a1f0:	56 cd       	rjmp	.-1364   	; 0x9c9e <AsebaVMRun+0x76>

/*! Run with support of breakpoints.
	Also check ASEBA_VM_EVENT_RUNNING_MASK to exit on interrupts. */
void AsebaDebugBreakpointRun(AsebaVMState *vm, uint16 stepsLimit)
{
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
    a1f2:	1f 96       	adiw	r26, 0x0f	; 15
    a1f4:	5c 93       	st	X, r21
    a1f6:	4e 93       	st	-X, r20
    a1f8:	1e 97       	sbiw	r26, 0x0e	; 14
    a1fa:	25 70       	andi	r18, 0x05	; 5
    a1fc:	33 27       	eor	r19, r19
    a1fe:	24 60       	ori	r18, 0x04	; 4
	
	if (stepsLimit > 0)
    a200:	67 2b       	or	r22, r23
    a202:	09 f0       	breq	.+2      	; 0xa206 <AsebaVMRun+0x5de>
    a204:	c8 c0       	rjmp	.+400    	; 0xa396 <AsebaVMRun+0x76e>
		}
	}
	else
	{
		// breakpoints, check before each step and poll the mask
		while (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK) &&
    a206:	25 30       	cpi	r18, 0x05	; 5
    a208:	31 05       	cpc	r19, r1
    a20a:	09 f4       	brne	.+2      	; 0xa20e <AsebaVMRun+0x5e6>
    a20c:	9b c0       	rjmp	.+310    	; 0xa344 <AsebaVMRun+0x71c>
    a20e:	bc c0       	rjmp	.+376    	; 0xa388 <AsebaVMRun+0x760>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a210:	82 30       	cpi	r24, 0x02	; 2
    a212:	91 05       	cpc	r25, r1
    a214:	08 f4       	brcc	.+2      	; 0xa218 <AsebaVMRun+0x5f0>
    a216:	85 c0       	rjmp	.+266    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a218:	66 89       	ldd	r22, Z+22	; 0x16
    a21a:	77 89       	ldd	r23, Z+23	; 0x17
    a21c:	26 17       	cp	r18, r22
    a21e:	37 07       	cpc	r19, r23
    a220:	09 f4       	brne	.+2      	; 0xa224 <AsebaVMRun+0x5fc>
    a222:	9b c0       	rjmp	.+310    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a224:	82 30       	cpi	r24, 0x02	; 2
    a226:	91 05       	cpc	r25, r1
    a228:	09 f4       	brne	.+2      	; 0xa22c <AsebaVMRun+0x604>
    a22a:	7b c0       	rjmp	.+246    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a22c:	60 8d       	ldd	r22, Z+24	; 0x18
    a22e:	71 8d       	ldd	r23, Z+25	; 0x19
    a230:	26 17       	cp	r18, r22
    a232:	37 07       	cpc	r19, r23
    a234:	09 f4       	brne	.+2      	; 0xa238 <AsebaVMRun+0x610>
    a236:	91 c0       	rjmp	.+290    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a238:	83 30       	cpi	r24, 0x03	; 3
    a23a:	91 05       	cpc	r25, r1
    a23c:	09 f4       	brne	.+2      	; 0xa240 <AsebaVMRun+0x618>
    a23e:	71 c0       	rjmp	.+226    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a240:	62 8d       	ldd	r22, Z+26	; 0x1a
    a242:	73 8d       	ldd	r23, Z+27	; 0x1b
    a244:	26 17       	cp	r18, r22
    a246:	37 07       	cpc	r19, r23
    a248:	09 f4       	brne	.+2      	; 0xa24c <AsebaVMRun+0x624>
    a24a:	87 c0       	rjmp	.+270    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a24c:	84 30       	cpi	r24, 0x04	; 4
    a24e:	91 05       	cpc	r25, r1
    a250:	09 f4       	brne	.+2      	; 0xa254 <AsebaVMRun+0x62c>
    a252:	67 c0       	rjmp	.+206    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a254:	64 8d       	ldd	r22, Z+28	; 0x1c
    a256:	75 8d       	ldd	r23, Z+29	; 0x1d
    a258:	26 17       	cp	r18, r22
    a25a:	37 07       	cpc	r19, r23
    a25c:	09 f4       	brne	.+2      	; 0xa260 <AsebaVMRun+0x638>
    a25e:	92 c0       	rjmp	.+292    	; 0xa384 <AsebaVMRun+0x75c>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a260:	85 30       	cpi	r24, 0x05	; 5
    a262:	91 05       	cpc	r25, r1
    a264:	09 f4       	brne	.+2      	; 0xa268 <AsebaVMRun+0x640>
    a266:	5d c0       	rjmp	.+186    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a268:	66 8d       	ldd	r22, Z+30	; 0x1e
    a26a:	77 8d       	ldd	r23, Z+31	; 0x1f
    a26c:	26 17       	cp	r18, r22
    a26e:	37 07       	cpc	r19, r23
    a270:	09 f4       	brne	.+2      	; 0xa274 <AsebaVMRun+0x64c>
    a272:	73 c0       	rjmp	.+230    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a274:	86 30       	cpi	r24, 0x06	; 6
    a276:	91 05       	cpc	r25, r1
    a278:	09 f4       	brne	.+2      	; 0xa27c <AsebaVMRun+0x654>
    a27a:	53 c0       	rjmp	.+166    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a27c:	60 a1       	ldd	r22, Z+32	; 0x20
    a27e:	71 a1       	ldd	r23, Z+33	; 0x21
    a280:	26 17       	cp	r18, r22
    a282:	37 07       	cpc	r19, r23
    a284:	09 f4       	brne	.+2      	; 0xa288 <AsebaVMRun+0x660>
    a286:	69 c0       	rjmp	.+210    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a288:	87 30       	cpi	r24, 0x07	; 7
    a28a:	91 05       	cpc	r25, r1
    a28c:	09 f4       	brne	.+2      	; 0xa290 <AsebaVMRun+0x668>
    a28e:	49 c0       	rjmp	.+146    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a290:	62 a1       	ldd	r22, Z+34	; 0x22
    a292:	73 a1       	ldd	r23, Z+35	; 0x23
    a294:	26 17       	cp	r18, r22
    a296:	37 07       	cpc	r19, r23
    a298:	09 f4       	brne	.+2      	; 0xa29c <AsebaVMRun+0x674>
    a29a:	5f c0       	rjmp	.+190    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a29c:	88 30       	cpi	r24, 0x08	; 8
    a29e:	91 05       	cpc	r25, r1
    a2a0:	09 f4       	brne	.+2      	; 0xa2a4 <AsebaVMRun+0x67c>
    a2a2:	3f c0       	rjmp	.+126    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a2a4:	64 a1       	ldd	r22, Z+36	; 0x24
    a2a6:	75 a1       	ldd	r23, Z+37	; 0x25
    a2a8:	26 17       	cp	r18, r22
    a2aa:	37 07       	cpc	r19, r23
    a2ac:	09 f4       	brne	.+2      	; 0xa2b0 <AsebaVMRun+0x688>
    a2ae:	55 c0       	rjmp	.+170    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a2b0:	89 30       	cpi	r24, 0x09	; 9
    a2b2:	91 05       	cpc	r25, r1
    a2b4:	b1 f1       	breq	.+108    	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a2b6:	66 a1       	ldd	r22, Z+38	; 0x26
    a2b8:	77 a1       	ldd	r23, Z+39	; 0x27
    a2ba:	26 17       	cp	r18, r22
    a2bc:	37 07       	cpc	r19, r23
    a2be:	09 f4       	brne	.+2      	; 0xa2c2 <AsebaVMRun+0x69a>
    a2c0:	61 c0       	rjmp	.+194    	; 0xa384 <AsebaVMRun+0x75c>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a2c2:	8a 30       	cpi	r24, 0x0A	; 10
    a2c4:	91 05       	cpc	r25, r1
    a2c6:	69 f1       	breq	.+90     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a2c8:	60 a5       	ldd	r22, Z+40	; 0x28
    a2ca:	71 a5       	ldd	r23, Z+41	; 0x29
    a2cc:	26 17       	cp	r18, r22
    a2ce:	37 07       	cpc	r19, r23
    a2d0:	09 f4       	brne	.+2      	; 0xa2d4 <AsebaVMRun+0x6ac>
    a2d2:	43 c0       	rjmp	.+134    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a2d4:	8b 30       	cpi	r24, 0x0B	; 11
    a2d6:	91 05       	cpc	r25, r1
    a2d8:	21 f1       	breq	.+72     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a2da:	62 a5       	ldd	r22, Z+42	; 0x2a
    a2dc:	73 a5       	ldd	r23, Z+43	; 0x2b
    a2de:	26 17       	cp	r18, r22
    a2e0:	37 07       	cpc	r19, r23
    a2e2:	d9 f1       	breq	.+118    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a2e4:	8c 30       	cpi	r24, 0x0C	; 12
    a2e6:	91 05       	cpc	r25, r1
    a2e8:	e1 f0       	breq	.+56     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a2ea:	64 a5       	ldd	r22, Z+44	; 0x2c
    a2ec:	75 a5       	ldd	r23, Z+45	; 0x2d
    a2ee:	26 17       	cp	r18, r22
    a2f0:	37 07       	cpc	r19, r23
    a2f2:	99 f1       	breq	.+102    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a2f4:	8d 30       	cpi	r24, 0x0D	; 13
    a2f6:	91 05       	cpc	r25, r1
    a2f8:	a1 f0       	breq	.+40     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a2fa:	66 a5       	ldd	r22, Z+46	; 0x2e
    a2fc:	77 a5       	ldd	r23, Z+47	; 0x2f
    a2fe:	26 17       	cp	r18, r22
    a300:	37 07       	cpc	r19, r23
    a302:	59 f1       	breq	.+86     	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a304:	8e 30       	cpi	r24, 0x0E	; 14
    a306:	91 05       	cpc	r25, r1
    a308:	61 f0       	breq	.+24     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a30a:	60 a9       	ldd	r22, Z+48	; 0x30
    a30c:	71 a9       	ldd	r23, Z+49	; 0x31
    a30e:	26 17       	cp	r18, r22
    a310:	37 07       	cpc	r19, r23
    a312:	c1 f1       	breq	.+112    	; 0xa384 <AsebaVMRun+0x75c>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a314:	0f 97       	sbiw	r24, 0x0f	; 15
    a316:	29 f0       	breq	.+10     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a318:	82 a9       	ldd	r24, Z+50	; 0x32
    a31a:	93 a9       	ldd	r25, Z+51	; 0x33
    a31c:	28 17       	cp	r18, r24
    a31e:	39 07       	cpc	r19, r25
    a320:	e1 f0       	breq	.+56     	; 0xa35a <AsebaVMRun+0x732>
			{
				AsebaMaskSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
				AsebaVMSendExecutionStateChanged(vm);
				return;
			}
			AsebaVMStep(vm);
    a322:	c8 01       	movw	r24, r16
    a324:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <AsebaVMStep>
		}
	}
	else
	{
		// breakpoints, check before each step and poll the mask
		while (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK) &&
    a328:	d8 01       	movw	r26, r16
    a32a:	1e 96       	adiw	r26, 0x0e	; 14
    a32c:	4d 91       	ld	r20, X+
    a32e:	5c 91       	ld	r21, X
    a330:	1f 97       	sbiw	r26, 0x0f	; 15
    a332:	ca 01       	movw	r24, r20
    a334:	85 70       	andi	r24, 0x05	; 5
    a336:	99 27       	eor	r25, r25
    a338:	05 97       	sbiw	r24, 0x05	; 5
    a33a:	31 f5       	brne	.+76     	; 0xa388 <AsebaVMRun+0x760>
    a33c:	d4 96       	adiw	r26, 0x34	; 52
    a33e:	8d 91       	ld	r24, X+
    a340:	9c 91       	ld	r25, X
    a342:	d5 97       	sbiw	r26, 0x35	; 53
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a344:	00 97       	sbiw	r24, 0x00	; 0
    a346:	69 f3       	breq	.-38     	; 0xa322 <AsebaVMRun+0x6fa>
	{
		if (vm->breakpoints[i] == vm->pc)
    a348:	f8 01       	movw	r30, r16
    a34a:	20 89       	ldd	r18, Z+16	; 0x10
    a34c:	31 89       	ldd	r19, Z+17	; 0x11
    a34e:	64 89       	ldd	r22, Z+20	; 0x14
    a350:	75 89       	ldd	r23, Z+21	; 0x15
    a352:	62 17       	cp	r22, r18
    a354:	73 07       	cpc	r23, r19
    a356:	09 f0       	breq	.+2      	; 0xa35a <AsebaVMRun+0x732>
    a358:	5b cf       	rjmp	.-330    	; 0xa210 <AsebaVMRun+0x5e8>
			AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK)
		)
		{
			if (AsebaVMCheckBreakpoint(vm) != 0)
			{
				AsebaMaskSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
    a35a:	42 60       	ori	r20, 0x02	; 2
    a35c:	f8 01       	movw	r30, r16
    a35e:	57 87       	std	Z+15, r21	; 0x0f
    a360:	46 87       	std	Z+14, r20	; 0x0e

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    a362:	3a 83       	std	Y+2, r19	; 0x02
    a364:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = vm->flags;
    a366:	5c 83       	std	Y+4, r21	; 0x04
    a368:	4b 83       	std	Y+3, r20	; 0x03
	AsebaSendMessageWords(vm, ASEBA_MESSAGE_EXECUTION_STATE_CHANGED, buffer, 2);
    a36a:	24 e0       	ldi	r18, 0x04	; 4
    a36c:	30 e0       	ldi	r19, 0x00	; 0
    a36e:	ae 01       	movw	r20, r28
    a370:	4f 5f       	subi	r20, 0xFF	; 255
    a372:	5f 4f       	sbci	r21, 0xFF	; 255
    a374:	6a e0       	ldi	r22, 0x0A	; 10
    a376:	70 e9       	ldi	r23, 0x90	; 144
    a378:	c8 01       	movw	r24, r16
    a37a:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
	if (vm->breakpointsCount)
		AsebaDebugBreakpointRun(vm, stepsLimit);
	else
		AsebaDebugBareRun(vm, stepsLimit);
	
	return 1;
    a37e:	81 e0       	ldi	r24, 0x01	; 1
    a380:	90 e0       	ldi	r25, 0x00	; 0
    a382:	b0 cc       	rjmp	.-1696   	; 0x9ce4 <AsebaVMRun+0xbc>
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
	{
		if (vm->breakpoints[i] == vm->pc)
    a384:	9b 01       	movw	r18, r22
    a386:	e9 cf       	rjmp	.-46     	; 0xa35a <AsebaVMRun+0x732>
			}
			AsebaVMStep(vm);
		}
	}
	
	AsebaMaskClear(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
    a388:	4b 7f       	andi	r20, 0xFB	; 251
    a38a:	f8 01       	movw	r30, r16
    a38c:	57 87       	std	Z+15, r21	; 0x0f
    a38e:	46 87       	std	Z+14, r20	; 0x0e
	if (vm->breakpointsCount)
		AsebaDebugBreakpointRun(vm, stepsLimit);
	else
		AsebaDebugBareRun(vm, stepsLimit);
	
	return 1;
    a390:	81 e0       	ldi	r24, 0x01	; 1
    a392:	90 e0       	ldi	r25, 0x00	; 0
    a394:	a7 cc       	rjmp	.-1714   	; 0x9ce4 <AsebaVMRun+0xbc>
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
	
	if (stepsLimit > 0)
	{
		// breakpoints, check before each step, poll the mask, and check stepsLimit
		while (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK) &&
    a396:	25 30       	cpi	r18, 0x05	; 5
    a398:	31 05       	cpc	r19, r1
    a39a:	09 f4       	brne	.+2      	; 0xa39e <AsebaVMRun+0x776>
    a39c:	a4 c0       	rjmp	.+328    	; 0xa4e6 <AsebaVMRun+0x8be>
    a39e:	f4 cf       	rjmp	.-24     	; 0xa388 <AsebaVMRun+0x760>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a3a0:	82 30       	cpi	r24, 0x02	; 2
    a3a2:	91 05       	cpc	r25, r1
    a3a4:	08 f4       	brcc	.+2      	; 0xa3a8 <AsebaVMRun+0x780>
    a3a6:	86 c0       	rjmp	.+268    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a3a8:	66 89       	ldd	r22, Z+22	; 0x16
    a3aa:	77 89       	ldd	r23, Z+23	; 0x17
    a3ac:	26 17       	cp	r18, r22
    a3ae:	37 07       	cpc	r19, r23
    a3b0:	a1 f2       	breq	.-88     	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a3b2:	82 30       	cpi	r24, 0x02	; 2
    a3b4:	91 05       	cpc	r25, r1
    a3b6:	09 f4       	brne	.+2      	; 0xa3ba <AsebaVMRun+0x792>
    a3b8:	7d c0       	rjmp	.+250    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a3ba:	60 8d       	ldd	r22, Z+24	; 0x18
    a3bc:	71 8d       	ldd	r23, Z+25	; 0x19
    a3be:	26 17       	cp	r18, r22
    a3c0:	37 07       	cpc	r19, r23
    a3c2:	59 f2       	breq	.-106    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a3c4:	83 30       	cpi	r24, 0x03	; 3
    a3c6:	91 05       	cpc	r25, r1
    a3c8:	09 f4       	brne	.+2      	; 0xa3cc <AsebaVMRun+0x7a4>
    a3ca:	74 c0       	rjmp	.+232    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a3cc:	62 8d       	ldd	r22, Z+26	; 0x1a
    a3ce:	73 8d       	ldd	r23, Z+27	; 0x1b
    a3d0:	26 17       	cp	r18, r22
    a3d2:	37 07       	cpc	r19, r23
    a3d4:	11 f2       	breq	.-124    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a3d6:	84 30       	cpi	r24, 0x04	; 4
    a3d8:	91 05       	cpc	r25, r1
    a3da:	09 f4       	brne	.+2      	; 0xa3de <AsebaVMRun+0x7b6>
    a3dc:	6b c0       	rjmp	.+214    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a3de:	64 8d       	ldd	r22, Z+28	; 0x1c
    a3e0:	75 8d       	ldd	r23, Z+29	; 0x1d
    a3e2:	26 17       	cp	r18, r22
    a3e4:	37 07       	cpc	r19, r23
    a3e6:	71 f2       	breq	.-100    	; 0xa384 <AsebaVMRun+0x75c>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a3e8:	85 30       	cpi	r24, 0x05	; 5
    a3ea:	91 05       	cpc	r25, r1
    a3ec:	09 f4       	brne	.+2      	; 0xa3f0 <AsebaVMRun+0x7c8>
    a3ee:	62 c0       	rjmp	.+196    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a3f0:	66 8d       	ldd	r22, Z+30	; 0x1e
    a3f2:	77 8d       	ldd	r23, Z+31	; 0x1f
    a3f4:	26 17       	cp	r18, r22
    a3f6:	37 07       	cpc	r19, r23
    a3f8:	09 f4       	brne	.+2      	; 0xa3fc <AsebaVMRun+0x7d4>
    a3fa:	af cf       	rjmp	.-162    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a3fc:	86 30       	cpi	r24, 0x06	; 6
    a3fe:	91 05       	cpc	r25, r1
    a400:	09 f4       	brne	.+2      	; 0xa404 <AsebaVMRun+0x7dc>
    a402:	58 c0       	rjmp	.+176    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a404:	60 a1       	ldd	r22, Z+32	; 0x20
    a406:	71 a1       	ldd	r23, Z+33	; 0x21
    a408:	26 17       	cp	r18, r22
    a40a:	37 07       	cpc	r19, r23
    a40c:	09 f4       	brne	.+2      	; 0xa410 <AsebaVMRun+0x7e8>
    a40e:	a5 cf       	rjmp	.-182    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a410:	87 30       	cpi	r24, 0x07	; 7
    a412:	91 05       	cpc	r25, r1
    a414:	09 f4       	brne	.+2      	; 0xa418 <AsebaVMRun+0x7f0>
    a416:	4e c0       	rjmp	.+156    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a418:	62 a1       	ldd	r22, Z+34	; 0x22
    a41a:	73 a1       	ldd	r23, Z+35	; 0x23
    a41c:	26 17       	cp	r18, r22
    a41e:	37 07       	cpc	r19, r23
    a420:	09 f4       	brne	.+2      	; 0xa424 <AsebaVMRun+0x7fc>
    a422:	9b cf       	rjmp	.-202    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a424:	88 30       	cpi	r24, 0x08	; 8
    a426:	91 05       	cpc	r25, r1
    a428:	09 f4       	brne	.+2      	; 0xa42c <AsebaVMRun+0x804>
    a42a:	44 c0       	rjmp	.+136    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a42c:	64 a1       	ldd	r22, Z+36	; 0x24
    a42e:	75 a1       	ldd	r23, Z+37	; 0x25
    a430:	26 17       	cp	r18, r22
    a432:	37 07       	cpc	r19, r23
    a434:	09 f4       	brne	.+2      	; 0xa438 <AsebaVMRun+0x810>
    a436:	91 cf       	rjmp	.-222    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a438:	89 30       	cpi	r24, 0x09	; 9
    a43a:	91 05       	cpc	r25, r1
    a43c:	d9 f1       	breq	.+118    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a43e:	66 a1       	ldd	r22, Z+38	; 0x26
    a440:	77 a1       	ldd	r23, Z+39	; 0x27
    a442:	26 17       	cp	r18, r22
    a444:	37 07       	cpc	r19, r23
    a446:	09 f4       	brne	.+2      	; 0xa44a <AsebaVMRun+0x822>
    a448:	9d cf       	rjmp	.-198    	; 0xa384 <AsebaVMRun+0x75c>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a44a:	8a 30       	cpi	r24, 0x0A	; 10
    a44c:	91 05       	cpc	r25, r1
    a44e:	91 f1       	breq	.+100    	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a450:	60 a5       	ldd	r22, Z+40	; 0x28
    a452:	71 a5       	ldd	r23, Z+41	; 0x29
    a454:	26 17       	cp	r18, r22
    a456:	37 07       	cpc	r19, r23
    a458:	09 f4       	brne	.+2      	; 0xa45c <AsebaVMRun+0x834>
    a45a:	7f cf       	rjmp	.-258    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a45c:	8b 30       	cpi	r24, 0x0B	; 11
    a45e:	91 05       	cpc	r25, r1
    a460:	49 f1       	breq	.+82     	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a462:	62 a5       	ldd	r22, Z+42	; 0x2a
    a464:	73 a5       	ldd	r23, Z+43	; 0x2b
    a466:	26 17       	cp	r18, r22
    a468:	37 07       	cpc	r19, r23
    a46a:	09 f4       	brne	.+2      	; 0xa46e <AsebaVMRun+0x846>
    a46c:	76 cf       	rjmp	.-276    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a46e:	8c 30       	cpi	r24, 0x0C	; 12
    a470:	91 05       	cpc	r25, r1
    a472:	01 f1       	breq	.+64     	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a474:	64 a5       	ldd	r22, Z+44	; 0x2c
    a476:	75 a5       	ldd	r23, Z+45	; 0x2d
    a478:	26 17       	cp	r18, r22
    a47a:	37 07       	cpc	r19, r23
    a47c:	09 f4       	brne	.+2      	; 0xa480 <AsebaVMRun+0x858>
    a47e:	6d cf       	rjmp	.-294    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a480:	8d 30       	cpi	r24, 0x0D	; 13
    a482:	91 05       	cpc	r25, r1
    a484:	b9 f0       	breq	.+46     	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a486:	66 a5       	ldd	r22, Z+46	; 0x2e
    a488:	77 a5       	ldd	r23, Z+47	; 0x2f
    a48a:	26 17       	cp	r18, r22
    a48c:	37 07       	cpc	r19, r23
    a48e:	09 f4       	brne	.+2      	; 0xa492 <AsebaVMRun+0x86a>
    a490:	64 cf       	rjmp	.-312    	; 0xa35a <AsebaVMRun+0x732>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a492:	8e 30       	cpi	r24, 0x0E	; 14
    a494:	91 05       	cpc	r25, r1
    a496:	71 f0       	breq	.+28     	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a498:	60 a9       	ldd	r22, Z+48	; 0x30
    a49a:	71 a9       	ldd	r23, Z+49	; 0x31
    a49c:	26 17       	cp	r18, r22
    a49e:	37 07       	cpc	r19, r23
    a4a0:	09 f4       	brne	.+2      	; 0xa4a4 <AsebaVMRun+0x87c>
    a4a2:	70 cf       	rjmp	.-288    	; 0xa384 <AsebaVMRun+0x75c>
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a4a4:	0f 97       	sbiw	r24, 0x0f	; 15
    a4a6:	31 f0       	breq	.+12     	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a4a8:	82 a9       	ldd	r24, Z+50	; 0x32
    a4aa:	93 a9       	ldd	r25, Z+51	; 0x33
    a4ac:	28 17       	cp	r18, r24
    a4ae:	39 07       	cpc	r19, r25
    a4b0:	09 f4       	brne	.+2      	; 0xa4b4 <AsebaVMRun+0x88c>
    a4b2:	53 cf       	rjmp	.-346    	; 0xa35a <AsebaVMRun+0x732>
			{
				AsebaMaskSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
				AsebaVMSendExecutionStateChanged(vm);
				return;
			}
			AsebaVMStep(vm);
    a4b4:	c8 01       	movw	r24, r16
    a4b6:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <AsebaVMStep>
			stepsLimit--;
    a4ba:	f1 e0       	ldi	r31, 0x01	; 1
    a4bc:	ef 1a       	sub	r14, r31
    a4be:	f1 08       	sbc	r15, r1
	AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK);
	
	if (stepsLimit > 0)
	{
		// breakpoints, check before each step, poll the mask, and check stepsLimit
		while (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK) &&
    a4c0:	d8 01       	movw	r26, r16
    a4c2:	1e 96       	adiw	r26, 0x0e	; 14
    a4c4:	4d 91       	ld	r20, X+
    a4c6:	5c 91       	ld	r21, X
    a4c8:	1f 97       	sbiw	r26, 0x0f	; 15
    a4ca:	ca 01       	movw	r24, r20
    a4cc:	85 70       	andi	r24, 0x05	; 5
    a4ce:	99 27       	eor	r25, r25
    a4d0:	05 97       	sbiw	r24, 0x05	; 5
    a4d2:	09 f0       	breq	.+2      	; 0xa4d6 <AsebaVMRun+0x8ae>
    a4d4:	59 cf       	rjmp	.-334    	; 0xa388 <AsebaVMRun+0x760>
			AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_RUNNING_MASK) &&
    a4d6:	e1 14       	cp	r14, r1
    a4d8:	f1 04       	cpc	r15, r1
    a4da:	09 f4       	brne	.+2      	; 0xa4de <AsebaVMRun+0x8b6>
    a4dc:	55 cf       	rjmp	.-342    	; 0xa388 <AsebaVMRun+0x760>
    a4de:	d4 96       	adiw	r26, 0x34	; 52
    a4e0:	8d 91       	ld	r24, X+
    a4e2:	9c 91       	ld	r25, X
    a4e4:	d5 97       	sbiw	r26, 0x35	; 53
	Return 1 if breakpoint was seen, 0 otherwise.
	VM must be ready for run otherwise trashes may occur. */
uint16 AsebaVMCheckBreakpoint(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a4e6:	00 97       	sbiw	r24, 0x00	; 0
    a4e8:	29 f3       	breq	.-54     	; 0xa4b4 <AsebaVMRun+0x88c>
	{
		if (vm->breakpoints[i] == vm->pc)
    a4ea:	f8 01       	movw	r30, r16
    a4ec:	20 89       	ldd	r18, Z+16	; 0x10
    a4ee:	31 89       	ldd	r19, Z+17	; 0x11
    a4f0:	64 89       	ldd	r22, Z+20	; 0x14
    a4f2:	75 89       	ldd	r23, Z+21	; 0x15
    a4f4:	62 17       	cp	r22, r18
    a4f6:	73 07       	cpc	r23, r19
    a4f8:	09 f0       	breq	.+2      	; 0xa4fc <AsebaVMRun+0x8d4>
    a4fa:	52 cf       	rjmp	.-348    	; 0xa3a0 <AsebaVMRun+0x778>
    a4fc:	2e cf       	rjmp	.-420    	; 0xa35a <AsebaVMRun+0x732>
				disp = 2;
			}
			else
			{
				// if false disp
				disp = (sint16)vm->bytecode[vm->pc + 1];
    a4fe:	d8 01       	movw	r26, r16
    a500:	04 80       	ldd	r0, Z+4	; 0x04
    a502:	f5 81       	ldd	r31, Z+5	; 0x05
    a504:	e0 2d       	mov	r30, r0
    a506:	50 96       	adiw	r26, 0x10	; 16
    a508:	8d 91       	ld	r24, X+
    a50a:	9c 91       	ld	r25, X
    a50c:	51 97       	sbiw	r26, 0x11	; 17
    a50e:	01 96       	adiw	r24, 0x01	; 1
    a510:	88 0f       	add	r24, r24
    a512:	99 1f       	adc	r25, r25
    a514:	df 01       	movw	r26, r30
    a516:	a8 0f       	add	r26, r24
    a518:	b9 1f       	adc	r27, r25
    a51a:	3c 91       	ld	r19, X
    a51c:	11 96       	adiw	r26, 0x01	; 1
    a51e:	2c 91       	ld	r18, X
			
			// write back condition result
			if (conditionResult)
				BIT_SET(vm->bytecode[vm->pc], ASEBA_IF_WAS_TRUE_BIT);
			else
				BIT_CLR(vm->bytecode[vm->pc], ASEBA_IF_WAS_TRUE_BIT);
    a520:	02 97       	sbiw	r24, 0x02	; 2
    a522:	e8 0f       	add	r30, r24
    a524:	f9 1f       	adc	r31, r25
    a526:	80 81       	ld	r24, Z
    a528:	91 81       	ldd	r25, Z+1	; 0x01
    a52a:	9d 7f       	andi	r25, 0xFD	; 253
    a52c:	91 83       	std	Z+1, r25	; 0x01
    a52e:	80 83       	st	Z, r24
    a530:	43 2f       	mov	r20, r19
    a532:	52 2f       	mov	r21, r18
			if ((vm->pc + disp < 0) || (vm->pc + disp >=  vm->bytecodeSize))
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_BYTECODE_BOUNDS);
			#endif
			
			// do branch
			vm->pc += disp;
    a534:	f8 01       	movw	r30, r16
    a536:	80 89       	ldd	r24, Z+16	; 0x10
    a538:	91 89       	ldd	r25, Z+17	; 0x11
    a53a:	84 0f       	add	r24, r20
    a53c:	95 1f       	adc	r25, r21
    a53e:	91 8b       	std	Z+17, r25	; 0x11
    a540:	80 8b       	std	Z+16, r24	; 0x10
    a542:	46 85       	ldd	r20, Z+14	; 0x0e
    a544:	57 85       	ldd	r21, Z+15	; 0x0f
    a546:	4a 01       	movw	r8, r20
    a548:	f5 e0       	ldi	r31, 0x05	; 5
    a54a:	8f 22       	and	r8, r31
    a54c:	99 24       	eor	r9, r9
    a54e:	a7 cb       	rjmp	.-2226   	; 0x9c9e <AsebaVMRun+0x76>
static sint16 AsebaVMDoUnaryOperation(AsebaVMState *vm, sint16 value, uint16 op)
{
	switch (op)
	{
		case ASEBA_UNARY_OP_SUB: return -value;
		case ASEBA_UNARY_OP_ABS: return value >= 0 ? value : -value;
    a550:	97 ff       	sbrs	r25, 7
    a552:	ff cc       	rjmp	.-1538   	; 0x9f52 <AsebaVMRun+0x32a>
    a554:	91 95       	neg	r25
    a556:	81 95       	neg	r24
    a558:	91 09       	sbc	r25, r1
    a55a:	fb cc       	rjmp	.-1546   	; 0x9f52 <AsebaVMRun+0x32a>
				disp = 2;
			}
			else
			{
				// if false disp
				disp = (sint16)vm->bytecode[vm->pc + 1];
    a55c:	14 96       	adiw	r26, 0x04	; 4
    a55e:	ed 91       	ld	r30, X+
    a560:	fc 91       	ld	r31, X
    a562:	15 97       	sbiw	r26, 0x05	; 5
    a564:	50 96       	adiw	r26, 0x10	; 16
    a566:	2d 91       	ld	r18, X+
    a568:	3c 91       	ld	r19, X
    a56a:	51 97       	sbiw	r26, 0x11	; 17
    a56c:	d9 01       	movw	r26, r18
    a56e:	11 96       	adiw	r26, 0x01	; 1
    a570:	aa 0f       	add	r26, r26
    a572:	bb 1f       	adc	r27, r27
    a574:	ae 0f       	add	r26, r30
    a576:	bf 1f       	adc	r27, r31
    a578:	4d 91       	ld	r20, X+
    a57a:	5c 91       	ld	r21, X
    a57c:	83 cc       	rjmp	.-1786   	; 0x9e84 <AsebaVMRun+0x25c>
		
		default:
		#ifdef ASEBA_ASSERT
		AsebaAssert(vm, ASEBA_ASSERT_UNKNOWN_UNARY_OPERATOR);
		#endif
		return 0;
    a57e:	80 e0       	ldi	r24, 0x00	; 0
    a580:	90 e0       	ldi	r25, 0x00	; 0
    a582:	e7 cc       	rjmp	.-1586   	; 0x9f52 <AsebaVMRun+0x32a>

0000a584 <AsebaVMDebugMessage>:
			BIT_CLR(vm->bytecode[i], ASEBA_IF_WAS_TRUE_BIT);
	}
}

void AsebaVMDebugMessage(AsebaVMState *vm, uint16 id, uint16 *data, uint16 dataLength)
{
    a584:	ef 92       	push	r14
    a586:	ff 92       	push	r15
    a588:	0f 93       	push	r16
    a58a:	1f 93       	push	r17
    a58c:	cf 93       	push	r28
    a58e:	df 93       	push	r29
    a590:	00 d0       	rcall	.+0      	; 0xa592 <AsebaVMDebugMessage+0xe>
    a592:	1f 92       	push	r1
    a594:	cd b7       	in	r28, 0x3d	; 61
    a596:	de b7       	in	r29, 0x3e	; 62
    a598:	8c 01       	movw	r16, r24
	// react to global presence
	if (id == ASEBA_MESSAGE_GET_DESCRIPTION)
    a59a:	61 15       	cp	r22, r1
    a59c:	80 ea       	ldi	r24, 0xA0	; 160
    a59e:	78 07       	cpc	r23, r24
    a5a0:	d9 f0       	breq	.+54     	; 0xa5d8 <AsebaVMDebugMessage+0x54>
		if (protocolVersion <= 4)
			AsebaSendDescription(vm);
		return;
	}
	// react to global list nodes
	if (id == ASEBA_MESSAGE_LIST_NODES)
    a5a2:	61 31       	cpi	r22, 0x11	; 17
    a5a4:	b0 ea       	ldi	r27, 0xA0	; 160
    a5a6:	7b 07       	cpc	r23, r27
    a5a8:	61 f1       	breq	.+88     	; 0xa602 <AsebaVMDebugMessage+0x7e>
		AsebaSendMessageWords(vm, ASEBA_MESSAGE_NODE_PRESENT, &protocolVersion, 1);
		return;
	}
	
	// safety check to avoid memory trash in case of unknown messages with 0 length
	if (dataLength == 0)
    a5aa:	21 15       	cp	r18, r1
    a5ac:	31 05       	cpc	r19, r1
    a5ae:	49 f0       	breq	.+18     	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		return;
	
	// assume we have a command message, check if we are the destination, return otherwise
	if (bswap16(data[0]) != vm->nodeId)
    a5b0:	da 01       	movw	r26, r20
    a5b2:	ed 91       	ld	r30, X+
    a5b4:	fc 91       	ld	r31, X
    a5b6:	d8 01       	movw	r26, r16
    a5b8:	8d 91       	ld	r24, X+
    a5ba:	9c 91       	ld	r25, X
    a5bc:	e8 17       	cp	r30, r24
    a5be:	f9 07       	cpc	r31, r25
    a5c0:	a1 f0       	breq	.+40     	; 0xa5ea <AsebaVMDebugMessage+0x66>
		break;
		
		default:
		break;
	}
}
    a5c2:	0f 90       	pop	r0
    a5c4:	0f 90       	pop	r0
    a5c6:	0f 90       	pop	r0
    a5c8:	0f 90       	pop	r0
    a5ca:	df 91       	pop	r29
    a5cc:	cf 91       	pop	r28
    a5ce:	1f 91       	pop	r17
    a5d0:	0f 91       	pop	r16
    a5d2:	ff 90       	pop	r15
    a5d4:	ef 90       	pop	r14
    a5d6:	08 95       	ret
	// react to global presence
	if (id == ASEBA_MESSAGE_GET_DESCRIPTION)
	{
		const uint16 protocolVersion = bswap16(data[0]);
		// up to protocol version 4 included, target must answer to GetDescription
		if (protocolVersion <= 4)
    a5d8:	da 01       	movw	r26, r20
    a5da:	8d 91       	ld	r24, X+
    a5dc:	9c 91       	ld	r25, X
    a5de:	05 97       	sbiw	r24, 0x05	; 5
    a5e0:	80 f7       	brcc	.-32     	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		case ASEBA_MESSAGE_SUSPEND_TO_RAM:
		AsebaPutVmToSleep(vm);
		break;
		
		case ASEBA_MESSAGE_GET_NODE_DESCRIPTION:
		AsebaSendDescription(vm);
    a5e2:	c8 01       	movw	r24, r16
    a5e4:	0e 94 50 47 	call	0x8ea0	; 0x8ea0 <AsebaSendDescription>
		break;
    a5e8:	ec cf       	rjmp	.-40     	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		return;

	data++;
	dataLength--;
	
	switch (id)
    a5ea:	fb 01       	movw	r30, r22
    a5ec:	e1 50       	subi	r30, 0x01	; 1
    a5ee:	f0 4a       	sbci	r31, 0xA0	; 160
    a5f0:	e0 31       	cpi	r30, 0x10	; 16
    a5f2:	f1 05       	cpc	r31, r1
    a5f4:	30 f7       	brcc	.-52     	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
    a5f6:	88 27       	eor	r24, r24
    a5f8:	e9 54       	subi	r30, 0x49	; 73
    a5fa:	ff 4f       	sbci	r31, 0xFF	; 255
    a5fc:	8f 4f       	sbci	r24, 0xFF	; 255
    a5fe:	0c 94 1e 56 	jmp	0xac3c	; 0xac3c <__tablejump2__>
		return;
	}
	// react to global list nodes
	if (id == ASEBA_MESSAGE_LIST_NODES)
	{
		const uint16 protocolVersion = ASEBA_PROTOCOL_VERSION;
    a602:	85 e0       	ldi	r24, 0x05	; 5
    a604:	90 e0       	ldi	r25, 0x00	; 0
    a606:	9a 83       	std	Y+2, r25	; 0x02
    a608:	89 83       	std	Y+1, r24	; 0x01
		AsebaSendMessageWords(vm, ASEBA_MESSAGE_NODE_PRESENT, &protocolVersion, 1);
    a60a:	22 e0       	ldi	r18, 0x02	; 2
    a60c:	30 e0       	ldi	r19, 0x00	; 0
    a60e:	ae 01       	movw	r20, r28
    a610:	4f 5f       	subi	r20, 0xFF	; 255
    a612:	5f 4f       	sbci	r21, 0xFF	; 255
    a614:	6c e0       	ldi	r22, 0x0C	; 12
    a616:	70 e9       	ldi	r23, 0x90	; 144
    a618:	c8 01       	movw	r24, r16
    a61a:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
    a61e:	d1 cf       	rjmp	.-94     	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	
	switch (id)
	{
		case ASEBA_MESSAGE_SET_BYTECODE:
		{
			uint16 start = bswap16(data[0]);
    a620:	fa 01       	movw	r30, r20
    a622:	a2 81       	ldd	r26, Z+2	; 0x02
    a624:	b3 81       	ldd	r27, Z+3	; 0x03
			uint16 i;
			#ifdef ASEBA_ASSERT
			if (start + length > vm->bytecodeSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_BYTECODE_BOUNDS);
			#endif
			for (i = 0; i < length; i++)
    a626:	22 30       	cpi	r18, 0x02	; 2
    a628:	31 05       	cpc	r19, r1
    a62a:	b9 f0       	breq	.+46     	; 0xa65a <AsebaVMDebugMessage+0xd6>
    a62c:	34 96       	adiw	r30, 0x04	; 4
    a62e:	cd 01       	movw	r24, r26
    a630:	88 0f       	add	r24, r24
    a632:	99 1f       	adc	r25, r25
    a634:	d8 01       	movw	r26, r16
    a636:	14 96       	adiw	r26, 0x04	; 4
    a638:	6d 91       	ld	r22, X+
    a63a:	7c 91       	ld	r23, X
    a63c:	15 97       	sbiw	r26, 0x05	; 5
    a63e:	db 01       	movw	r26, r22
    a640:	a8 0f       	add	r26, r24
    a642:	b9 1f       	adc	r27, r25
    a644:	22 0f       	add	r18, r18
    a646:	33 1f       	adc	r19, r19
    a648:	42 0f       	add	r20, r18
    a64a:	53 1f       	adc	r21, r19
				vm->bytecode[start+i] = bswap16(data[i+1]);
    a64c:	81 91       	ld	r24, Z+
    a64e:	91 91       	ld	r25, Z+
    a650:	8d 93       	st	X+, r24
    a652:	9d 93       	st	X+, r25
			uint16 i;
			#ifdef ASEBA_ASSERT
			if (start + length > vm->bytecodeSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_BYTECODE_BOUNDS);
			#endif
			for (i = 0; i < length; i++)
    a654:	e4 17       	cp	r30, r20
    a656:	f5 07       	cpc	r31, r21
    a658:	c9 f7       	brne	.-14     	; 0xa64c <AsebaVMDebugMessage+0xc8>
				vm->bytecode[start+i] = bswap16(data[i+1]);
		}
		// There is no break here because we want to do a reset after a set bytecode
		
		case ASEBA_MESSAGE_RESET:
		vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    a65a:	82 e0       	ldi	r24, 0x02	; 2
    a65c:	90 e0       	ldi	r25, 0x00	; 0
    a65e:	f8 01       	movw	r30, r16
    a660:	97 87       	std	Z+15, r25	; 0x0f
    a662:	86 87       	std	Z+14, r24	; 0x0e

/*! Reset all when flags in their default states in the bytecode */
static void AsebaVMResetWhenFlags(AsebaVMState *vm)
{
	uint16 i;
	for (i = 0; i < vm->bytecodeSize; i++)
    a664:	62 81       	ldd	r22, Z+2	; 0x02
    a666:	73 81       	ldd	r23, Z+3	; 0x03
    a668:	61 15       	cp	r22, r1
    a66a:	71 05       	cpc	r23, r1
    a66c:	09 f4       	brne	.+2      	; 0xa670 <AsebaVMDebugMessage+0xec>
    a66e:	d7 c1       	rjmp	.+942    	; 0xaa1e <AsebaVMDebugMessage+0x49a>
    a670:	04 80       	ldd	r0, Z+4	; 0x04
    a672:	f5 81       	ldd	r31, Z+5	; 0x05
    a674:	e0 2d       	mov	r30, r0
    a676:	80 e0       	ldi	r24, 0x00	; 0
    a678:	90 e0       	ldi	r25, 0x00	; 0
    a67a:	06 c0       	rjmp	.+12     	; 0xa688 <AsebaVMDebugMessage+0x104>
    a67c:	01 96       	adiw	r24, 0x01	; 1
    a67e:	32 96       	adiw	r30, 0x02	; 2
    a680:	86 17       	cp	r24, r22
    a682:	97 07       	cpc	r25, r23
    a684:	08 f0       	brcs	.+2      	; 0xa688 <AsebaVMDebugMessage+0x104>
    a686:	cb c1       	rjmp	.+918    	; 0xaa1e <AsebaVMDebugMessage+0x49a>
	{
		uint16 bytecode = vm->bytecode[i];
    a688:	20 81       	ld	r18, Z
    a68a:	31 81       	ldd	r19, Z+1	; 0x01
		if ((bytecode >> 12) == ASEBA_BYTECODE_CONDITIONAL_BRANCH)
    a68c:	a9 01       	movw	r20, r18
    a68e:	45 2f       	mov	r20, r21
    a690:	55 27       	eor	r21, r21
    a692:	42 95       	swap	r20
    a694:	4f 70       	andi	r20, 0x0F	; 15
    a696:	4a 30       	cpi	r20, 0x0A	; 10
    a698:	51 05       	cpc	r21, r1
    a69a:	81 f7       	brne	.-32     	; 0xa67c <AsebaVMDebugMessage+0xf8>
			BIT_CLR(vm->bytecode[i], ASEBA_IF_WAS_TRUE_BIT);
    a69c:	3d 7f       	andi	r19, 0xFD	; 253
    a69e:	31 83       	std	Z+1, r19	; 0x01
    a6a0:	20 83       	st	Z, r18
    a6a2:	d8 01       	movw	r26, r16
    a6a4:	12 96       	adiw	r26, 0x02	; 2
    a6a6:	6d 91       	ld	r22, X+
    a6a8:	7c 91       	ld	r23, X
    a6aa:	13 97       	sbiw	r26, 0x03	; 3
    a6ac:	e7 cf       	rjmp	.-50     	; 0xa67c <AsebaVMDebugMessage+0xf8>
		case ASEBA_MESSAGE_REBOOT:
		AsebaResetIntoBootloader(vm);
		break;
		
		case ASEBA_MESSAGE_SUSPEND_TO_RAM:
		AsebaPutVmToSleep(vm);
    a6ae:	c8 01       	movw	r24, r16
    a6b0:	0e 94 75 16 	call	0x2cea	; 0x2cea <AsebaPutVmToSleep>
		break;
    a6b4:	86 cf       	rjmp	.-244    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		case ASEBA_MESSAGE_WRITE_BYTECODE:
		AsebaWriteBytecode(vm);
		break;
		
		case ASEBA_MESSAGE_REBOOT:
		AsebaResetIntoBootloader(vm);
    a6b6:	c8 01       	movw	r24, r16
    a6b8:	0e 94 b1 1a 	call	0x3562	; 0x3562 <AsebaResetIntoBootloader>
		break;
    a6bc:	82 cf       	rjmp	.-252    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
				vm->variables[start+i] = bswap16(data[i+1]);
		}
		break;
		
		case ASEBA_MESSAGE_WRITE_BYTECODE:
		AsebaWriteBytecode(vm);
    a6be:	c8 01       	movw	r24, r16
    a6c0:	0e 94 87 1a 	call	0x350e	; 0x350e <AsebaWriteBytecode>
		break;
    a6c4:	7e cf       	rjmp	.-260    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		}
		break;
		
		case ASEBA_MESSAGE_SET_VARIABLES:
		{
			uint16 start = bswap16(data[0]);
    a6c6:	fa 01       	movw	r30, r20
    a6c8:	a2 81       	ldd	r26, Z+2	; 0x02
    a6ca:	b3 81       	ldd	r27, Z+3	; 0x03
			uint16 i;
			#ifdef ASEBA_ASSERT
			if (start + length > vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			for (i = 0; i < length; i++)
    a6cc:	22 30       	cpi	r18, 0x02	; 2
    a6ce:	31 05       	cpc	r19, r1
    a6d0:	09 f4       	brne	.+2      	; 0xa6d4 <AsebaVMDebugMessage+0x150>
    a6d2:	77 cf       	rjmp	.-274    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
    a6d4:	34 96       	adiw	r30, 0x04	; 4
    a6d6:	cd 01       	movw	r24, r26
    a6d8:	88 0f       	add	r24, r24
    a6da:	99 1f       	adc	r25, r25
    a6dc:	d8 01       	movw	r26, r16
    a6de:	18 96       	adiw	r26, 0x08	; 8
    a6e0:	6d 91       	ld	r22, X+
    a6e2:	7c 91       	ld	r23, X
    a6e4:	19 97       	sbiw	r26, 0x09	; 9
    a6e6:	db 01       	movw	r26, r22
    a6e8:	a8 0f       	add	r26, r24
    a6ea:	b9 1f       	adc	r27, r25
    a6ec:	22 0f       	add	r18, r18
    a6ee:	33 1f       	adc	r19, r19
    a6f0:	42 0f       	add	r20, r18
    a6f2:	53 1f       	adc	r21, r19
				vm->variables[start+i] = bswap16(data[i+1]);
    a6f4:	81 91       	ld	r24, Z+
    a6f6:	91 91       	ld	r25, Z+
    a6f8:	8d 93       	st	X+, r24
    a6fa:	9d 93       	st	X+, r25
			uint16 i;
			#ifdef ASEBA_ASSERT
			if (start + length > vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			for (i = 0; i < length; i++)
    a6fc:	e4 17       	cp	r30, r20
    a6fe:	f5 07       	cpc	r31, r21
    a700:	c9 f7       	brne	.-14     	; 0xa6f4 <AsebaVMDebugMessage+0x170>
    a702:	5f cf       	rjmp	.-322    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
			uint16 length = bswap16(data[1]);
			#ifdef ASEBA_ASSERT
			if (start + length > vm->variablesSize)
				AsebaAssert(vm, ASEBA_ASSERT_OUT_OF_VARIABLES_BOUNDS);
			#endif
			AsebaSendVariables(vm, start, length);
    a704:	da 01       	movw	r26, r20
    a706:	14 96       	adiw	r26, 0x04	; 4
    a708:	8d 91       	ld	r24, X+
    a70a:	9c 91       	ld	r25, X
    a70c:	15 97       	sbiw	r26, 0x05	; 5
    a70e:	12 96       	adiw	r26, 0x02	; 2
    a710:	6d 91       	ld	r22, X+
    a712:	7c 91       	ld	r23, X
    a714:	13 97       	sbiw	r26, 0x03	; 3
    a716:	ac 01       	movw	r20, r24
    a718:	c8 01       	movw	r24, r16
    a71a:	0e 94 e4 46 	call	0x8dc8	; 0x8dc8 <AsebaSendVariables>
		}
		break;
    a71e:	51 cf       	rjmp	.-350    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
}

/*! Clear all breakpoints. */
void AsebaVMClearBreakpoints(AsebaVMState *vm)
{
	vm->breakpointsCount = 0;
    a720:	f8 01       	movw	r30, r16
    a722:	15 aa       	std	Z+53, r1	; 0x35
    a724:	14 aa       	std	Z+52, r1	; 0x34
    a726:	4d cf       	rjmp	.-358    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
			AsebaSendMessageWords(vm, ASEBA_MESSAGE_BREAKPOINT_SET_RESULT, buffer, 2);
		}
		break;
		
		case ASEBA_MESSAGE_BREAKPOINT_CLEAR:
		AsebaVMClearBreakpoint(vm, bswap16(data[0]));
    a728:	fa 01       	movw	r30, r20
    a72a:	82 81       	ldd	r24, Z+2	; 0x02
    a72c:	93 81       	ldd	r25, Z+3	; 0x03

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a72e:	d8 01       	movw	r26, r16
    a730:	d4 96       	adiw	r26, 0x34	; 52
    a732:	2d 91       	ld	r18, X+
    a734:	3c 91       	ld	r19, X
    a736:	d5 97       	sbiw	r26, 0x35	; 53
    a738:	21 15       	cp	r18, r1
    a73a:	31 05       	cpc	r19, r1
    a73c:	09 f4       	brne	.+2      	; 0xa740 <AsebaVMDebugMessage+0x1bc>
    a73e:	41 cf       	rjmp	.-382    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a740:	54 96       	adiw	r26, 0x14	; 20
    a742:	4d 91       	ld	r20, X+
    a744:	5c 91       	ld	r21, X
    a746:	55 97       	sbiw	r26, 0x15	; 21
    a748:	84 17       	cp	r24, r20
    a74a:	95 07       	cpc	r25, r21
    a74c:	09 f4       	brne	.+2      	; 0xa750 <AsebaVMDebugMessage+0x1cc>
    a74e:	d0 c1       	rjmp	.+928    	; 0xaaf0 <AsebaVMDebugMessage+0x56c>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a750:	22 30       	cpi	r18, 0x02	; 2
    a752:	31 05       	cpc	r19, r1
    a754:	08 f4       	brcc	.+2      	; 0xa758 <AsebaVMDebugMessage+0x1d4>
    a756:	35 cf       	rjmp	.-406    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a758:	d8 01       	movw	r26, r16
    a75a:	56 96       	adiw	r26, 0x16	; 22
    a75c:	4d 91       	ld	r20, X+
    a75e:	5c 91       	ld	r21, X
    a760:	57 97       	sbiw	r26, 0x17	; 23
    a762:	84 17       	cp	r24, r20
    a764:	95 07       	cpc	r25, r21
    a766:	09 f4       	brne	.+2      	; 0xa76a <AsebaVMDebugMessage+0x1e6>
    a768:	cf c1       	rjmp	.+926    	; 0xab08 <AsebaVMDebugMessage+0x584>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a76a:	22 30       	cpi	r18, 0x02	; 2
    a76c:	31 05       	cpc	r19, r1
    a76e:	09 f4       	brne	.+2      	; 0xa772 <AsebaVMDebugMessage+0x1ee>
    a770:	28 cf       	rjmp	.-432    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a772:	58 96       	adiw	r26, 0x18	; 24
    a774:	4d 91       	ld	r20, X+
    a776:	5c 91       	ld	r21, X
    a778:	59 97       	sbiw	r26, 0x19	; 25
    a77a:	84 17       	cp	r24, r20
    a77c:	95 07       	cpc	r25, r21
    a77e:	09 f4       	brne	.+2      	; 0xa782 <AsebaVMDebugMessage+0x1fe>
    a780:	c9 c1       	rjmp	.+914    	; 0xab14 <AsebaVMDebugMessage+0x590>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a782:	23 30       	cpi	r18, 0x03	; 3
    a784:	31 05       	cpc	r19, r1
    a786:	09 f4       	brne	.+2      	; 0xa78a <AsebaVMDebugMessage+0x206>
    a788:	1c cf       	rjmp	.-456    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a78a:	5a 96       	adiw	r26, 0x1a	; 26
    a78c:	4d 91       	ld	r20, X+
    a78e:	5c 91       	ld	r21, X
    a790:	5b 97       	sbiw	r26, 0x1b	; 27
    a792:	84 17       	cp	r24, r20
    a794:	95 07       	cpc	r25, r21
    a796:	09 f4       	brne	.+2      	; 0xa79a <AsebaVMDebugMessage+0x216>
    a798:	ba c1       	rjmp	.+884    	; 0xab0e <AsebaVMDebugMessage+0x58a>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a79a:	24 30       	cpi	r18, 0x04	; 4
    a79c:	31 05       	cpc	r19, r1
    a79e:	09 f4       	brne	.+2      	; 0xa7a2 <AsebaVMDebugMessage+0x21e>
    a7a0:	10 cf       	rjmp	.-480    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a7a2:	5c 96       	adiw	r26, 0x1c	; 28
    a7a4:	4d 91       	ld	r20, X+
    a7a6:	5c 91       	ld	r21, X
    a7a8:	5d 97       	sbiw	r26, 0x1d	; 29
    a7aa:	84 17       	cp	r24, r20
    a7ac:	95 07       	cpc	r25, r21
    a7ae:	09 f4       	brne	.+2      	; 0xa7b2 <AsebaVMDebugMessage+0x22e>
    a7b0:	c9 c1       	rjmp	.+914    	; 0xab44 <AsebaVMDebugMessage+0x5c0>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a7b2:	25 30       	cpi	r18, 0x05	; 5
    a7b4:	31 05       	cpc	r19, r1
    a7b6:	09 f4       	brne	.+2      	; 0xa7ba <AsebaVMDebugMessage+0x236>
    a7b8:	04 cf       	rjmp	.-504    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a7ba:	5e 96       	adiw	r26, 0x1e	; 30
    a7bc:	4d 91       	ld	r20, X+
    a7be:	5c 91       	ld	r21, X
    a7c0:	5f 97       	sbiw	r26, 0x1f	; 31
    a7c2:	84 17       	cp	r24, r20
    a7c4:	95 07       	cpc	r25, r21
    a7c6:	09 f4       	brne	.+2      	; 0xa7ca <AsebaVMDebugMessage+0x246>
    a7c8:	ba c1       	rjmp	.+884    	; 0xab3e <AsebaVMDebugMessage+0x5ba>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a7ca:	26 30       	cpi	r18, 0x06	; 6
    a7cc:	31 05       	cpc	r19, r1
    a7ce:	09 f4       	brne	.+2      	; 0xa7d2 <AsebaVMDebugMessage+0x24e>
    a7d0:	f8 ce       	rjmp	.-528    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a7d2:	90 96       	adiw	r26, 0x20	; 32
    a7d4:	4d 91       	ld	r20, X+
    a7d6:	5c 91       	ld	r21, X
    a7d8:	91 97       	sbiw	r26, 0x21	; 33
    a7da:	84 17       	cp	r24, r20
    a7dc:	95 07       	cpc	r25, r21
    a7de:	09 f4       	brne	.+2      	; 0xa7e2 <AsebaVMDebugMessage+0x25e>
    a7e0:	ab c1       	rjmp	.+854    	; 0xab38 <AsebaVMDebugMessage+0x5b4>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a7e2:	27 30       	cpi	r18, 0x07	; 7
    a7e4:	31 05       	cpc	r19, r1
    a7e6:	09 f4       	brne	.+2      	; 0xa7ea <AsebaVMDebugMessage+0x266>
    a7e8:	ec ce       	rjmp	.-552    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a7ea:	92 96       	adiw	r26, 0x22	; 34
    a7ec:	4d 91       	ld	r20, X+
    a7ee:	5c 91       	ld	r21, X
    a7f0:	93 97       	sbiw	r26, 0x23	; 35
    a7f2:	84 17       	cp	r24, r20
    a7f4:	95 07       	cpc	r25, r21
    a7f6:	09 f4       	brne	.+2      	; 0xa7fa <AsebaVMDebugMessage+0x276>
    a7f8:	9c c1       	rjmp	.+824    	; 0xab32 <AsebaVMDebugMessage+0x5ae>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a7fa:	28 30       	cpi	r18, 0x08	; 8
    a7fc:	31 05       	cpc	r19, r1
    a7fe:	09 f4       	brne	.+2      	; 0xa802 <AsebaVMDebugMessage+0x27e>
    a800:	e0 ce       	rjmp	.-576    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a802:	94 96       	adiw	r26, 0x24	; 36
    a804:	4d 91       	ld	r20, X+
    a806:	5c 91       	ld	r21, X
    a808:	95 97       	sbiw	r26, 0x25	; 37
    a80a:	84 17       	cp	r24, r20
    a80c:	95 07       	cpc	r25, r21
    a80e:	09 f4       	brne	.+2      	; 0xa812 <AsebaVMDebugMessage+0x28e>
    a810:	8d c1       	rjmp	.+794    	; 0xab2c <AsebaVMDebugMessage+0x5a8>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a812:	29 30       	cpi	r18, 0x09	; 9
    a814:	31 05       	cpc	r19, r1
    a816:	09 f4       	brne	.+2      	; 0xa81a <AsebaVMDebugMessage+0x296>
    a818:	d4 ce       	rjmp	.-600    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a81a:	96 96       	adiw	r26, 0x26	; 38
    a81c:	4d 91       	ld	r20, X+
    a81e:	5c 91       	ld	r21, X
    a820:	97 97       	sbiw	r26, 0x27	; 39
    a822:	84 17       	cp	r24, r20
    a824:	95 07       	cpc	r25, r21
    a826:	09 f4       	brne	.+2      	; 0xa82a <AsebaVMDebugMessage+0x2a6>
    a828:	7e c1       	rjmp	.+764    	; 0xab26 <AsebaVMDebugMessage+0x5a2>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a82a:	2a 30       	cpi	r18, 0x0A	; 10
    a82c:	31 05       	cpc	r19, r1
    a82e:	09 f4       	brne	.+2      	; 0xa832 <AsebaVMDebugMessage+0x2ae>
    a830:	c8 ce       	rjmp	.-624    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a832:	98 96       	adiw	r26, 0x28	; 40
    a834:	4d 91       	ld	r20, X+
    a836:	5c 91       	ld	r21, X
    a838:	99 97       	sbiw	r26, 0x29	; 41
    a83a:	84 17       	cp	r24, r20
    a83c:	95 07       	cpc	r25, r21
    a83e:	09 f4       	brne	.+2      	; 0xa842 <AsebaVMDebugMessage+0x2be>
    a840:	6f c1       	rjmp	.+734    	; 0xab20 <AsebaVMDebugMessage+0x59c>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a842:	2b 30       	cpi	r18, 0x0B	; 11
    a844:	31 05       	cpc	r19, r1
    a846:	09 f4       	brne	.+2      	; 0xa84a <AsebaVMDebugMessage+0x2c6>
    a848:	bc ce       	rjmp	.-648    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a84a:	9a 96       	adiw	r26, 0x2a	; 42
    a84c:	4d 91       	ld	r20, X+
    a84e:	5c 91       	ld	r21, X
    a850:	9b 97       	sbiw	r26, 0x2b	; 43
    a852:	84 17       	cp	r24, r20
    a854:	95 07       	cpc	r25, r21
    a856:	09 f4       	brne	.+2      	; 0xa85a <AsebaVMDebugMessage+0x2d6>
    a858:	60 c1       	rjmp	.+704    	; 0xab1a <AsebaVMDebugMessage+0x596>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a85a:	2c 30       	cpi	r18, 0x0C	; 12
    a85c:	31 05       	cpc	r19, r1
    a85e:	09 f4       	brne	.+2      	; 0xa862 <AsebaVMDebugMessage+0x2de>
    a860:	b0 ce       	rjmp	.-672    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a862:	9c 96       	adiw	r26, 0x2c	; 44
    a864:	4d 91       	ld	r20, X+
    a866:	5c 91       	ld	r21, X
    a868:	9d 97       	sbiw	r26, 0x2d	; 45
    a86a:	84 17       	cp	r24, r20
    a86c:	95 07       	cpc	r25, r21
    a86e:	09 f4       	brne	.+2      	; 0xa872 <AsebaVMDebugMessage+0x2ee>
    a870:	45 c1       	rjmp	.+650    	; 0xaafc <AsebaVMDebugMessage+0x578>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a872:	2d 30       	cpi	r18, 0x0D	; 13
    a874:	31 05       	cpc	r19, r1
    a876:	09 f4       	brne	.+2      	; 0xa87a <AsebaVMDebugMessage+0x2f6>
    a878:	a4 ce       	rjmp	.-696    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a87a:	9e 96       	adiw	r26, 0x2e	; 46
    a87c:	4d 91       	ld	r20, X+
    a87e:	5c 91       	ld	r21, X
    a880:	9f 97       	sbiw	r26, 0x2f	; 47
    a882:	84 17       	cp	r24, r20
    a884:	95 07       	cpc	r25, r21
    a886:	09 f4       	brne	.+2      	; 0xa88a <AsebaVMDebugMessage+0x306>
    a888:	36 c1       	rjmp	.+620    	; 0xaaf6 <AsebaVMDebugMessage+0x572>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a88a:	2e 30       	cpi	r18, 0x0E	; 14
    a88c:	31 05       	cpc	r19, r1
    a88e:	09 f4       	brne	.+2      	; 0xa892 <AsebaVMDebugMessage+0x30e>
    a890:	98 ce       	rjmp	.-720    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a892:	d0 96       	adiw	r26, 0x30	; 48
    a894:	4d 91       	ld	r20, X+
    a896:	5c 91       	ld	r21, X
    a898:	d1 97       	sbiw	r26, 0x31	; 49
    a89a:	84 17       	cp	r24, r20
    a89c:	95 07       	cpc	r25, r21
    a89e:	09 f4       	brne	.+2      	; 0xa8a2 <AsebaVMDebugMessage+0x31e>
    a8a0:	30 c1       	rjmp	.+608    	; 0xab02 <AsebaVMDebugMessage+0x57e>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a8a2:	2f 30       	cpi	r18, 0x0F	; 15
    a8a4:	31 05       	cpc	r19, r1
    a8a6:	09 f4       	brne	.+2      	; 0xa8aa <AsebaVMDebugMessage+0x326>
    a8a8:	8c ce       	rjmp	.-744    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
	{
		if (vm->breakpoints[i] == pc)
    a8aa:	d2 96       	adiw	r26, 0x32	; 50
    a8ac:	4d 91       	ld	r20, X+
    a8ae:	5c 91       	ld	r21, X
    a8b0:	d3 97       	sbiw	r26, 0x33	; 51
    a8b2:	84 17       	cp	r24, r20
    a8b4:	95 07       	cpc	r25, r21
    a8b6:	09 f0       	breq	.+2      	; 0xa8ba <AsebaVMDebugMessage+0x336>
    a8b8:	84 ce       	rjmp	.-760    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    a8ba:	4f e0       	ldi	r20, 0x0F	; 15
    a8bc:	50 e0       	ldi	r21, 0x00	; 0
	{
		if (vm->breakpoints[i] == pc)
		{
			uint16 j;
			// displace
			vm->breakpointsCount--;
    a8be:	c9 01       	movw	r24, r18
    a8c0:	01 97       	sbiw	r24, 0x01	; 1
    a8c2:	f8 01       	movw	r30, r16
    a8c4:	95 ab       	std	Z+53, r25	; 0x35
    a8c6:	84 ab       	std	Z+52, r24	; 0x34
			for (j = i; j < vm->breakpointsCount; j++)
    a8c8:	48 17       	cp	r20, r24
    a8ca:	59 07       	cpc	r21, r25
    a8cc:	08 f0       	brcs	.+2      	; 0xa8d0 <AsebaVMDebugMessage+0x34c>
    a8ce:	79 ce       	rjmp	.-782    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
				vm->breakpoints[j] = vm->breakpoints[j+1];
    a8d0:	ca 01       	movw	r24, r20
    a8d2:	88 0f       	add	r24, r24
    a8d4:	99 1f       	adc	r25, r25
    a8d6:	21 50       	subi	r18, 0x01	; 1
    a8d8:	30 48       	sbci	r19, 0x80	; 128
    a8da:	b9 01       	movw	r22, r18
    a8dc:	64 1b       	sub	r22, r20
    a8de:	75 0b       	sbc	r23, r21
    a8e0:	ab 01       	movw	r20, r22
    a8e2:	44 0f       	add	r20, r20
    a8e4:	55 1f       	adc	r21, r21
    a8e6:	bc 01       	movw	r22, r24
    a8e8:	6a 5e       	subi	r22, 0xEA	; 234
    a8ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a8ec:	60 0f       	add	r22, r16
    a8ee:	71 1f       	adc	r23, r17
    a8f0:	44 96       	adiw	r24, 0x14	; 20
    a8f2:	80 0f       	add	r24, r16
    a8f4:	91 1f       	adc	r25, r17
    a8f6:	0e 94 de 59 	call	0xb3bc	; 0xb3bc <memmove>
    a8fa:	63 ce       	rjmp	.-826    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		break;
		
		case ASEBA_MESSAGE_BREAKPOINT_SET:
		{
			uint16 buffer[2];
			buffer[0] = bswap16(data[0]);
    a8fc:	fa 01       	movw	r30, r20
    a8fe:	22 81       	ldd	r18, Z+2	; 0x02
    a900:	33 81       	ldd	r19, Z+3	; 0x03
    a902:	3a 83       	std	Y+2, r19	; 0x02
    a904:	29 83       	std	Y+1, r18	; 0x01
	#ifdef ASEBA_ASSERT
	if (pc >= vm->bytecodeSize)
		AsebaAssert(vm, ASEBA_ASSERT_BREAKPOINT_OUT_OF_BYTECODE_BOUNDS);
	#endif
	
	if (vm->breakpointsCount < ASEBA_MAX_BREAKPOINTS)
    a906:	d8 01       	movw	r26, r16
    a908:	d4 96       	adiw	r26, 0x34	; 52
    a90a:	8d 91       	ld	r24, X+
    a90c:	9c 91       	ld	r25, X
    a90e:	d5 97       	sbiw	r26, 0x35	; 53
    a910:	80 31       	cpi	r24, 0x10	; 16
    a912:	91 05       	cpc	r25, r1
    a914:	08 f0       	brcs	.+2      	; 0xa918 <AsebaVMDebugMessage+0x394>
    a916:	db c0       	rjmp	.+438    	; 0xaace <AsebaVMDebugMessage+0x54a>
	{
		vm->breakpoints[vm->breakpointsCount++] = pc;
    a918:	ac 01       	movw	r20, r24
    a91a:	4f 5f       	subi	r20, 0xFF	; 255
    a91c:	5f 4f       	sbci	r21, 0xFF	; 255
    a91e:	d5 96       	adiw	r26, 0x35	; 53
    a920:	5c 93       	st	X, r21
    a922:	4e 93       	st	-X, r20
    a924:	d4 97       	sbiw	r26, 0x34	; 52
    a926:	fc 01       	movw	r30, r24
    a928:	3a 96       	adiw	r30, 0x0a	; 10
    a92a:	ee 0f       	add	r30, r30
    a92c:	ff 1f       	adc	r31, r31
    a92e:	e0 0f       	add	r30, r16
    a930:	f1 1f       	adc	r31, r17
    a932:	31 83       	std	Z+1, r19	; 0x01
    a934:	20 83       	st	Z, r18
    a936:	81 e0       	ldi	r24, 0x01	; 1
    a938:	90 e0       	ldi	r25, 0x00	; 0
		
		case ASEBA_MESSAGE_BREAKPOINT_SET:
		{
			uint16 buffer[2];
			buffer[0] = bswap16(data[0]);
			buffer[1] = AsebaVMSetBreakpoint(vm, buffer[0]);
    a93a:	9c 83       	std	Y+4, r25	; 0x04
    a93c:	8b 83       	std	Y+3, r24	; 0x03
			AsebaSendMessageWords(vm, ASEBA_MESSAGE_BREAKPOINT_SET_RESULT, buffer, 2);
    a93e:	24 e0       	ldi	r18, 0x04	; 4
    a940:	30 e0       	ldi	r19, 0x00	; 0
    a942:	ae 01       	movw	r20, r28
    a944:	4f 5f       	subi	r20, 0xFF	; 255
    a946:	5f 4f       	sbci	r21, 0xFF	; 255
    a948:	6b e0       	ldi	r22, 0x0B	; 11
    a94a:	70 e9       	ldi	r23, 0x90	; 144
    a94c:	c8 01       	movw	r24, r16
    a94e:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
		}
		break;
    a952:	37 ce       	rjmp	.-914    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    a954:	d8 01       	movw	r26, r16
    a956:	50 96       	adiw	r26, 0x10	; 16
    a958:	8d 91       	ld	r24, X+
    a95a:	9c 91       	ld	r25, X
    a95c:	51 97       	sbiw	r26, 0x11	; 17
    a95e:	9a 83       	std	Y+2, r25	; 0x02
    a960:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = vm->flags;
    a962:	1e 96       	adiw	r26, 0x0e	; 14
    a964:	8d 91       	ld	r24, X+
    a966:	9c 91       	ld	r25, X
    a968:	1f 97       	sbiw	r26, 0x0f	; 15
    a96a:	9c 83       	std	Y+4, r25	; 0x04
    a96c:	8b 83       	std	Y+3, r24	; 0x03
	AsebaSendMessageWords(vm, ASEBA_MESSAGE_EXECUTION_STATE_CHANGED, buffer, 2);
    a96e:	24 e0       	ldi	r18, 0x04	; 4
    a970:	30 e0       	ldi	r19, 0x00	; 0
    a972:	ae 01       	movw	r20, r28
    a974:	4f 5f       	subi	r20, 0xFF	; 255
    a976:	5f 4f       	sbci	r21, 0xFF	; 255
    a978:	6a e0       	ldi	r22, 0x0A	; 10
    a97a:	70 e9       	ldi	r23, 0x90	; 144
    a97c:	c8 01       	movw	r24, r16
    a97e:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
    a982:	1f ce       	rjmp	.-962    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
			AsebaVMSendExecutionStateChanged(vm);
		}
		break;
		
		case ASEBA_MESSAGE_STOP:
		vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
    a984:	82 e0       	ldi	r24, 0x02	; 2
    a986:	90 e0       	ldi	r25, 0x00	; 0
    a988:	f8 01       	movw	r30, r16
    a98a:	97 87       	std	Z+15, r25	; 0x0f
    a98c:	86 87       	std	Z+14, r24	; 0x0e

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    a98e:	20 89       	ldd	r18, Z+16	; 0x10
    a990:	31 89       	ldd	r19, Z+17	; 0x11
    a992:	3a 83       	std	Y+2, r19	; 0x02
    a994:	29 83       	std	Y+1, r18	; 0x01
    a996:	e9 cf       	rjmp	.-46     	; 0xa96a <AsebaVMDebugMessage+0x3e6>
		AsebaMaskSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
		AsebaVMSendExecutionStateChanged(vm);
		break;
		
		case ASEBA_MESSAGE_STEP:
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
    a998:	f8 01       	movw	r30, r16
    a99a:	86 85       	ldd	r24, Z+14	; 0x0e
    a99c:	80 ff       	sbrs	r24, 0
    a99e:	11 ce       	rjmp	.-990    	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		{
			AsebaVMStep(vm);
    a9a0:	c8 01       	movw	r24, r16
    a9a2:	0e 94 59 4b 	call	0x96b2	; 0x96b2 <AsebaVMStep>

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    a9a6:	d8 01       	movw	r26, r16
    a9a8:	50 96       	adiw	r26, 0x10	; 16
    a9aa:	8d 91       	ld	r24, X+
    a9ac:	9c 91       	ld	r25, X
    a9ae:	51 97       	sbiw	r26, 0x11	; 17
    a9b0:	9a 83       	std	Y+2, r25	; 0x02
    a9b2:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = vm->flags;
    a9b4:	1e 96       	adiw	r26, 0x0e	; 14
    a9b6:	8d 91       	ld	r24, X+
    a9b8:	9c 91       	ld	r25, X
    a9ba:	1f 97       	sbiw	r26, 0x0f	; 15
    a9bc:	d6 cf       	rjmp	.-84     	; 0xa96a <AsebaVMDebugMessage+0x3e6>
		if (AsebaVMRunCB)
			AsebaVMRunCB(vm);
		break;
		
		case ASEBA_MESSAGE_PAUSE:
		AsebaMaskSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
    a9be:	d8 01       	movw	r26, r16
    a9c0:	1e 96       	adiw	r26, 0x0e	; 14
    a9c2:	8d 91       	ld	r24, X+
    a9c4:	9c 91       	ld	r25, X
    a9c6:	1f 97       	sbiw	r26, 0x0f	; 15
    a9c8:	82 60       	ori	r24, 0x02	; 2
    a9ca:	1f 96       	adiw	r26, 0x0f	; 15
    a9cc:	9c 93       	st	X, r25
    a9ce:	8e 93       	st	-X, r24
    a9d0:	1e 97       	sbiw	r26, 0x0e	; 14

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    a9d2:	50 96       	adiw	r26, 0x10	; 16
    a9d4:	2d 91       	ld	r18, X+
    a9d6:	3c 91       	ld	r19, X
    a9d8:	51 97       	sbiw	r26, 0x11	; 17
    a9da:	3a 83       	std	Y+2, r19	; 0x02
    a9dc:	29 83       	std	Y+1, r18	; 0x01
    a9de:	c5 cf       	rjmp	.-118    	; 0xa96a <AsebaVMDebugMessage+0x3e6>
		if (AsebaVMSetupEvent(vm, ASEBA_EVENT_INIT) == 0)
			AsebaVMSendExecutionStateChanged(vm);
		break;
		
		case ASEBA_MESSAGE_RUN:
		AsebaMaskClear(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
    a9e0:	f8 01       	movw	r30, r16
    a9e2:	86 85       	ldd	r24, Z+14	; 0x0e
    a9e4:	97 85       	ldd	r25, Z+15	; 0x0f
    a9e6:	8d 7f       	andi	r24, 0xFD	; 253
    a9e8:	97 87       	std	Z+15, r25	; 0x0f
    a9ea:	86 87       	std	Z+14, r24	; 0x0e

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    a9ec:	20 89       	ldd	r18, Z+16	; 0x10
    a9ee:	31 89       	ldd	r19, Z+17	; 0x11
    a9f0:	3a 83       	std	Y+2, r19	; 0x02
    a9f2:	29 83       	std	Y+1, r18	; 0x01
	buffer[1] = vm->flags;
    a9f4:	9c 83       	std	Y+4, r25	; 0x04
    a9f6:	8b 83       	std	Y+3, r24	; 0x03
	AsebaSendMessageWords(vm, ASEBA_MESSAGE_EXECUTION_STATE_CHANGED, buffer, 2);
    a9f8:	24 e0       	ldi	r18, 0x04	; 4
    a9fa:	30 e0       	ldi	r19, 0x00	; 0
    a9fc:	ae 01       	movw	r20, r28
    a9fe:	4f 5f       	subi	r20, 0xFF	; 255
    aa00:	5f 4f       	sbci	r21, 0xFF	; 255
    aa02:	6a e0       	ldi	r22, 0x0A	; 10
    aa04:	70 e9       	ldi	r23, 0x90	; 144
    aa06:	c8 01       	movw	r24, r16
    aa08:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
		break;
		
		case ASEBA_MESSAGE_RUN:
		AsebaMaskClear(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK);
		AsebaVMSendExecutionStateChanged(vm);
		if (AsebaVMRunCB)
    aa0c:	80 e0       	ldi	r24, 0x00	; 0
    aa0e:	90 e0       	ldi	r25, 0x00	; 0
    aa10:	89 2b       	or	r24, r25
    aa12:	09 f4       	brne	.+2      	; 0xaa16 <AsebaVMDebugMessage+0x492>
    aa14:	d6 cd       	rjmp	.-1108   	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
			AsebaVMRunCB(vm);
    aa16:	c8 01       	movw	r24, r16
    aa18:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    aa1c:	d2 cd       	rjmp	.-1116   	; 0xa5c2 <AsebaVMDebugMessage+0x3e>
		// There is no break here because we want to do a reset after a set bytecode
		
		case ASEBA_MESSAGE_RESET:
		vm->flags = ASEBA_VM_STEP_BY_STEP_MASK;
		AsebaVMResetWhenFlags(vm);
		if (AsebaVMResetCB)
    aa1e:	80 e0       	ldi	r24, 0x00	; 0
    aa20:	90 e0       	ldi	r25, 0x00	; 0
    aa22:	89 2b       	or	r24, r25
    aa24:	19 f0       	breq	.+6      	; 0xaa2c <AsebaVMDebugMessage+0x4a8>
			AsebaVMResetCB(vm);
    aa26:	c8 01       	movw	r24, r16
    aa28:	0e 94 00 00 	call	0	; 0x0 <__vectors>
	memset(vm->variables, 0, vm->variablesSize*sizeof(sint16));
}

uint16 AsebaVMGetEventAddress(AsebaVMState *vm, uint16 event)
{
	uint16 eventVectorSize = vm->bytecode[0];
    aa2c:	d8 01       	movw	r26, r16
    aa2e:	14 96       	adiw	r26, 0x04	; 4
    aa30:	ed 91       	ld	r30, X+
    aa32:	fc 91       	ld	r31, X
    aa34:	15 97       	sbiw	r26, 0x05	; 5
    aa36:	40 81       	ld	r20, Z
    aa38:	51 81       	ldd	r21, Z+1	; 0x01
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
    aa3a:	42 30       	cpi	r20, 0x02	; 2
    aa3c:	51 05       	cpc	r21, r1
    aa3e:	a0 f0       	brcs	.+40     	; 0xaa68 <AsebaVMDebugMessage+0x4e4>
		if (vm->bytecode[i] == event)
    aa40:	82 81       	ldd	r24, Z+2	; 0x02
    aa42:	93 81       	ldd	r25, Z+3	; 0x03
    aa44:	01 96       	adiw	r24, 0x01	; 1
    aa46:	c1 f0       	breq	.+48     	; 0xaa78 <AsebaVMDebugMessage+0x4f4>
    aa48:	df 01       	movw	r26, r30
    aa4a:	81 e0       	ldi	r24, 0x01	; 1
    aa4c:	90 e0       	ldi	r25, 0x00	; 0
    aa4e:	08 c0       	rjmp	.+16     	; 0xaa60 <AsebaVMDebugMessage+0x4dc>
    aa50:	14 96       	adiw	r26, 0x04	; 4
    aa52:	12 96       	adiw	r26, 0x02	; 2
    aa54:	2d 91       	ld	r18, X+
    aa56:	3c 91       	ld	r19, X
    aa58:	13 97       	sbiw	r26, 0x03	; 3
    aa5a:	2f 3f       	cpi	r18, 0xFF	; 255
    aa5c:	3f 4f       	sbci	r19, 0xFF	; 255
    aa5e:	71 f0       	breq	.+28     	; 0xaa7c <AsebaVMDebugMessage+0x4f8>
{
	uint16 eventVectorSize = vm->bytecode[0];
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
    aa60:	02 96       	adiw	r24, 0x02	; 2
    aa62:	84 17       	cp	r24, r20
    aa64:	95 07       	cpc	r25, r21
    aa66:	a0 f3       	brcs	.-24     	; 0xaa50 <AsebaVMDebugMessage+0x4cc>

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    aa68:	f8 01       	movw	r30, r16
    aa6a:	80 89       	ldd	r24, Z+16	; 0x10
    aa6c:	91 89       	ldd	r25, Z+17	; 0x11
    aa6e:	9a 83       	std	Y+2, r25	; 0x02
    aa70:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = vm->flags;
    aa72:	86 85       	ldd	r24, Z+14	; 0x0e
    aa74:	97 85       	ldd	r25, Z+15	; 0x0f
    aa76:	79 cf       	rjmp	.-270    	; 0xa96a <AsebaVMDebugMessage+0x3e6>
{
	uint16 eventVectorSize = vm->bytecode[0];
	uint16 i;

	// look into event vectors and if event match execute corresponding bytecode
	for (i = 1; i < eventVectorSize; i += 2)
    aa78:	81 e0       	ldi	r24, 0x01	; 1
    aa7a:	90 e0       	ldi	r25, 0x00	; 0
		if (vm->bytecode[i] == event)
			return vm->bytecode[i + 1];
    aa7c:	01 96       	adiw	r24, 0x01	; 1
    aa7e:	88 0f       	add	r24, r24
    aa80:	99 1f       	adc	r25, r25
    aa82:	e8 0f       	add	r30, r24
    aa84:	f9 1f       	adc	r31, r25
    aa86:	e0 80       	ld	r14, Z
    aa88:	f1 80       	ldd	r15, Z+1	; 0x01


uint16 AsebaVMSetupEvent(AsebaVMState *vm, uint16 event)
{
	uint16 address = AsebaVMGetEventAddress(vm, event);
	if (address)
    aa8a:	e1 14       	cp	r14, r1
    aa8c:	f1 04       	cpc	r15, r1
    aa8e:	61 f3       	breq	.-40     	; 0xaa68 <AsebaVMDebugMessage+0x4e4>
	{
		// if currently executing a thread, notify kill
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
    aa90:	d8 01       	movw	r26, r16
    aa92:	1e 96       	adiw	r26, 0x0e	; 14
    aa94:	8d 91       	ld	r24, X+
    aa96:	9c 91       	ld	r25, X
    aa98:	1f 97       	sbiw	r26, 0x0f	; 15
    aa9a:	80 fd       	sbrc	r24, 0
    aa9c:	1b c0       	rjmp	.+54     	; 0xaad4 <AsebaVMDebugMessage+0x550>
		{
			AsebaSendMessageWords(vm, ASEBA_MESSAGE_EVENT_EXECUTION_KILLED, &vm->pc, 1);
		}
		
		vm->pc = address;
    aa9e:	d8 01       	movw	r26, r16
    aaa0:	51 96       	adiw	r26, 0x11	; 17
    aaa2:	fc 92       	st	X, r15
    aaa4:	ee 92       	st	-X, r14
    aaa6:	50 97       	sbiw	r26, 0x10	; 16
		vm->sp = -1;
    aaa8:	2f ef       	ldi	r18, 0xFF	; 255
    aaaa:	3f ef       	ldi	r19, 0xFF	; 255
    aaac:	53 96       	adiw	r26, 0x13	; 19
    aaae:	3c 93       	st	X, r19
    aab0:	2e 93       	st	-X, r18
    aab2:	52 97       	sbiw	r26, 0x12	; 18
		AsebaMaskSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK);
    aab4:	9c 01       	movw	r18, r24
    aab6:	21 60       	ori	r18, 0x01	; 1
    aab8:	1f 96       	adiw	r26, 0x0f	; 15
    aaba:	3c 93       	st	X, r19
    aabc:	2e 93       	st	-X, r18
    aabe:	1e 97       	sbiw	r26, 0x0e	; 14
		
		// if we are in step by step, notify
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_STEP_BY_STEP_MASK))
    aac0:	81 ff       	sbrs	r24, 1
    aac2:	7f cd       	rjmp	.-1282   	; 0xa5c2 <AsebaVMDebugMessage+0x3e>

/*! Send an execution state changed message */
void AsebaVMSendExecutionStateChanged(AsebaVMState *vm)
{
	uint16 buffer[2];
	buffer[0] = vm->pc;
    aac4:	fa 82       	std	Y+2, r15	; 0x02
    aac6:	e9 82       	std	Y+1, r14	; 0x01
	buffer[1] = vm->flags;
    aac8:	3c 83       	std	Y+4, r19	; 0x04
    aaca:	2b 83       	std	Y+3, r18	; 0x03
    aacc:	50 cf       	rjmp	.-352    	; 0xa96e <AsebaVMDebugMessage+0x3ea>
	#ifdef ASEBA_ASSERT
	if (pc >= vm->bytecodeSize)
		AsebaAssert(vm, ASEBA_ASSERT_BREAKPOINT_OUT_OF_BYTECODE_BOUNDS);
	#endif
	
	if (vm->breakpointsCount < ASEBA_MAX_BREAKPOINTS)
    aace:	80 e0       	ldi	r24, 0x00	; 0
    aad0:	90 e0       	ldi	r25, 0x00	; 0
    aad2:	33 cf       	rjmp	.-410    	; 0xa93a <AsebaVMDebugMessage+0x3b6>
	if (address)
	{
		// if currently executing a thread, notify kill
		if (AsebaMaskIsSet(vm->flags, ASEBA_VM_EVENT_ACTIVE_MASK))
		{
			AsebaSendMessageWords(vm, ASEBA_MESSAGE_EVENT_EXECUTION_KILLED, &vm->pc, 1);
    aad4:	22 e0       	ldi	r18, 0x02	; 2
    aad6:	30 e0       	ldi	r19, 0x00	; 0
    aad8:	a8 01       	movw	r20, r16
    aada:	40 5f       	subi	r20, 0xF0	; 240
    aadc:	5f 4f       	sbci	r21, 0xFF	; 255
    aade:	68 e0       	ldi	r22, 0x08	; 8
    aae0:	70 e9       	ldi	r23, 0x90	; 144
    aae2:	c8 01       	movw	r24, r16
    aae4:	0e 94 ac 46 	call	0x8d58	; 0x8d58 <AsebaSendMessage>
    aae8:	f8 01       	movw	r30, r16
    aaea:	86 85       	ldd	r24, Z+14	; 0x0e
    aaec:	97 85       	ldd	r25, Z+15	; 0x0f
    aaee:	d7 cf       	rjmp	.-82     	; 0xaa9e <AsebaVMDebugMessage+0x51a>

/*! Clear the breakpoint at a specific location. */
uint16 AsebaVMClearBreakpoint(AsebaVMState *vm, uint16 pc)
{
	uint16 i;
	for (i = 0; i < vm->breakpointsCount; i++)
    aaf0:	40 e0       	ldi	r20, 0x00	; 0
    aaf2:	50 e0       	ldi	r21, 0x00	; 0
    aaf4:	e4 ce       	rjmp	.-568    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    aaf6:	4d e0       	ldi	r20, 0x0D	; 13
    aaf8:	50 e0       	ldi	r21, 0x00	; 0
    aafa:	e1 ce       	rjmp	.-574    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    aafc:	4c e0       	ldi	r20, 0x0C	; 12
    aafe:	50 e0       	ldi	r21, 0x00	; 0
    ab00:	de ce       	rjmp	.-580    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab02:	4e e0       	ldi	r20, 0x0E	; 14
    ab04:	50 e0       	ldi	r21, 0x00	; 0
    ab06:	db ce       	rjmp	.-586    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab08:	41 e0       	ldi	r20, 0x01	; 1
    ab0a:	50 e0       	ldi	r21, 0x00	; 0
    ab0c:	d8 ce       	rjmp	.-592    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab0e:	43 e0       	ldi	r20, 0x03	; 3
    ab10:	50 e0       	ldi	r21, 0x00	; 0
    ab12:	d5 ce       	rjmp	.-598    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab14:	42 e0       	ldi	r20, 0x02	; 2
    ab16:	50 e0       	ldi	r21, 0x00	; 0
    ab18:	d2 ce       	rjmp	.-604    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab1a:	4b e0       	ldi	r20, 0x0B	; 11
    ab1c:	50 e0       	ldi	r21, 0x00	; 0
    ab1e:	cf ce       	rjmp	.-610    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab20:	4a e0       	ldi	r20, 0x0A	; 10
    ab22:	50 e0       	ldi	r21, 0x00	; 0
    ab24:	cc ce       	rjmp	.-616    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab26:	49 e0       	ldi	r20, 0x09	; 9
    ab28:	50 e0       	ldi	r21, 0x00	; 0
    ab2a:	c9 ce       	rjmp	.-622    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab2c:	48 e0       	ldi	r20, 0x08	; 8
    ab2e:	50 e0       	ldi	r21, 0x00	; 0
    ab30:	c6 ce       	rjmp	.-628    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab32:	47 e0       	ldi	r20, 0x07	; 7
    ab34:	50 e0       	ldi	r21, 0x00	; 0
    ab36:	c3 ce       	rjmp	.-634    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab38:	46 e0       	ldi	r20, 0x06	; 6
    ab3a:	50 e0       	ldi	r21, 0x00	; 0
    ab3c:	c0 ce       	rjmp	.-640    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab3e:	45 e0       	ldi	r20, 0x05	; 5
    ab40:	50 e0       	ldi	r21, 0x00	; 0
    ab42:	bd ce       	rjmp	.-646    	; 0xa8be <AsebaVMDebugMessage+0x33a>
    ab44:	44 e0       	ldi	r20, 0x04	; 4
    ab46:	50 e0       	ldi	r21, 0x00	; 0
    ab48:	ba ce       	rjmp	.-652    	; 0xa8be <AsebaVMDebugMessage+0x33a>

0000ab4a <__mulsi3>:
    ab4a:	db 01       	movw	r26, r22
    ab4c:	8f 93       	push	r24
    ab4e:	9f 93       	push	r25
    ab50:	0e 94 44 56 	call	0xac88	; 0xac88 <__muluhisi3>
    ab54:	bf 91       	pop	r27
    ab56:	af 91       	pop	r26
    ab58:	a2 9f       	mul	r26, r18
    ab5a:	80 0d       	add	r24, r0
    ab5c:	91 1d       	adc	r25, r1
    ab5e:	a3 9f       	mul	r26, r19
    ab60:	90 0d       	add	r25, r0
    ab62:	b2 9f       	mul	r27, r18
    ab64:	90 0d       	add	r25, r0
    ab66:	11 24       	eor	r1, r1
    ab68:	08 95       	ret

0000ab6a <__udivmodhi4>:
    ab6a:	aa 1b       	sub	r26, r26
    ab6c:	bb 1b       	sub	r27, r27
    ab6e:	51 e1       	ldi	r21, 0x11	; 17
    ab70:	07 c0       	rjmp	.+14     	; 0xab80 <__udivmodhi4_ep>

0000ab72 <__udivmodhi4_loop>:
    ab72:	aa 1f       	adc	r26, r26
    ab74:	bb 1f       	adc	r27, r27
    ab76:	a6 17       	cp	r26, r22
    ab78:	b7 07       	cpc	r27, r23
    ab7a:	10 f0       	brcs	.+4      	; 0xab80 <__udivmodhi4_ep>
    ab7c:	a6 1b       	sub	r26, r22
    ab7e:	b7 0b       	sbc	r27, r23

0000ab80 <__udivmodhi4_ep>:
    ab80:	88 1f       	adc	r24, r24
    ab82:	99 1f       	adc	r25, r25
    ab84:	5a 95       	dec	r21
    ab86:	a9 f7       	brne	.-22     	; 0xab72 <__udivmodhi4_loop>
    ab88:	80 95       	com	r24
    ab8a:	90 95       	com	r25
    ab8c:	bc 01       	movw	r22, r24
    ab8e:	cd 01       	movw	r24, r26
    ab90:	08 95       	ret

0000ab92 <__divmodhi4>:
    ab92:	97 fb       	bst	r25, 7
    ab94:	07 2e       	mov	r0, r23
    ab96:	16 f4       	brtc	.+4      	; 0xab9c <__divmodhi4+0xa>
    ab98:	00 94       	com	r0
    ab9a:	07 d0       	rcall	.+14     	; 0xabaa <__divmodhi4_neg1>
    ab9c:	77 fd       	sbrc	r23, 7
    ab9e:	09 d0       	rcall	.+18     	; 0xabb2 <__divmodhi4_neg2>
    aba0:	0e 94 b5 55 	call	0xab6a	; 0xab6a <__udivmodhi4>
    aba4:	07 fc       	sbrc	r0, 7
    aba6:	05 d0       	rcall	.+10     	; 0xabb2 <__divmodhi4_neg2>
    aba8:	3e f4       	brtc	.+14     	; 0xabb8 <__divmodhi4_exit>

0000abaa <__divmodhi4_neg1>:
    abaa:	90 95       	com	r25
    abac:	81 95       	neg	r24
    abae:	9f 4f       	sbci	r25, 0xFF	; 255
    abb0:	08 95       	ret

0000abb2 <__divmodhi4_neg2>:
    abb2:	70 95       	com	r23
    abb4:	61 95       	neg	r22
    abb6:	7f 4f       	sbci	r23, 0xFF	; 255

0000abb8 <__divmodhi4_exit>:
    abb8:	08 95       	ret

0000abba <__udivmodsi4>:
    abba:	a1 e2       	ldi	r26, 0x21	; 33
    abbc:	1a 2e       	mov	r1, r26
    abbe:	aa 1b       	sub	r26, r26
    abc0:	bb 1b       	sub	r27, r27
    abc2:	fd 01       	movw	r30, r26
    abc4:	0d c0       	rjmp	.+26     	; 0xabe0 <__udivmodsi4_ep>

0000abc6 <__udivmodsi4_loop>:
    abc6:	aa 1f       	adc	r26, r26
    abc8:	bb 1f       	adc	r27, r27
    abca:	ee 1f       	adc	r30, r30
    abcc:	ff 1f       	adc	r31, r31
    abce:	a2 17       	cp	r26, r18
    abd0:	b3 07       	cpc	r27, r19
    abd2:	e4 07       	cpc	r30, r20
    abd4:	f5 07       	cpc	r31, r21
    abd6:	20 f0       	brcs	.+8      	; 0xabe0 <__udivmodsi4_ep>
    abd8:	a2 1b       	sub	r26, r18
    abda:	b3 0b       	sbc	r27, r19
    abdc:	e4 0b       	sbc	r30, r20
    abde:	f5 0b       	sbc	r31, r21

0000abe0 <__udivmodsi4_ep>:
    abe0:	66 1f       	adc	r22, r22
    abe2:	77 1f       	adc	r23, r23
    abe4:	88 1f       	adc	r24, r24
    abe6:	99 1f       	adc	r25, r25
    abe8:	1a 94       	dec	r1
    abea:	69 f7       	brne	.-38     	; 0xabc6 <__udivmodsi4_loop>
    abec:	60 95       	com	r22
    abee:	70 95       	com	r23
    abf0:	80 95       	com	r24
    abf2:	90 95       	com	r25
    abf4:	9b 01       	movw	r18, r22
    abf6:	ac 01       	movw	r20, r24
    abf8:	bd 01       	movw	r22, r26
    abfa:	cf 01       	movw	r24, r30
    abfc:	08 95       	ret

0000abfe <__divmodsi4>:
    abfe:	05 2e       	mov	r0, r21
    ac00:	97 fb       	bst	r25, 7
    ac02:	1e f4       	brtc	.+6      	; 0xac0a <__divmodsi4+0xc>
    ac04:	00 94       	com	r0
    ac06:	0e 94 16 56 	call	0xac2c	; 0xac2c <__negsi2>
    ac0a:	57 fd       	sbrc	r21, 7
    ac0c:	07 d0       	rcall	.+14     	; 0xac1c <__divmodsi4_neg2>
    ac0e:	0e 94 dd 55 	call	0xabba	; 0xabba <__udivmodsi4>
    ac12:	07 fc       	sbrc	r0, 7
    ac14:	03 d0       	rcall	.+6      	; 0xac1c <__divmodsi4_neg2>
    ac16:	4e f4       	brtc	.+18     	; 0xac2a <__divmodsi4_exit>
    ac18:	0c 94 16 56 	jmp	0xac2c	; 0xac2c <__negsi2>

0000ac1c <__divmodsi4_neg2>:
    ac1c:	50 95       	com	r21
    ac1e:	40 95       	com	r20
    ac20:	30 95       	com	r19
    ac22:	21 95       	neg	r18
    ac24:	3f 4f       	sbci	r19, 0xFF	; 255
    ac26:	4f 4f       	sbci	r20, 0xFF	; 255
    ac28:	5f 4f       	sbci	r21, 0xFF	; 255

0000ac2a <__divmodsi4_exit>:
    ac2a:	08 95       	ret

0000ac2c <__negsi2>:
    ac2c:	90 95       	com	r25
    ac2e:	80 95       	com	r24
    ac30:	70 95       	com	r23
    ac32:	61 95       	neg	r22
    ac34:	7f 4f       	sbci	r23, 0xFF	; 255
    ac36:	8f 4f       	sbci	r24, 0xFF	; 255
    ac38:	9f 4f       	sbci	r25, 0xFF	; 255
    ac3a:	08 95       	ret

0000ac3c <__tablejump2__>:
    ac3c:	ee 0f       	add	r30, r30
    ac3e:	ff 1f       	adc	r31, r31
    ac40:	88 1f       	adc	r24, r24
    ac42:	8b bf       	out	0x3b, r24	; 59
    ac44:	07 90       	elpm	r0, Z+
    ac46:	f6 91       	elpm	r31, Z
    ac48:	e0 2d       	mov	r30, r0
    ac4a:	19 94       	eijmp

0000ac4c <__mulhisi3>:
    ac4c:	0e 94 2e 56 	call	0xac5c	; 0xac5c <__umulhisi3>
    ac50:	33 23       	and	r19, r19
    ac52:	12 f4       	brpl	.+4      	; 0xac58 <__mulhisi3+0xc>
    ac54:	8a 1b       	sub	r24, r26
    ac56:	9b 0b       	sbc	r25, r27
    ac58:	0c 94 3f 56 	jmp	0xac7e	; 0xac7e <__usmulhisi3_tail>

0000ac5c <__umulhisi3>:
    ac5c:	a2 9f       	mul	r26, r18
    ac5e:	b0 01       	movw	r22, r0
    ac60:	b3 9f       	mul	r27, r19
    ac62:	c0 01       	movw	r24, r0
    ac64:	a3 9f       	mul	r26, r19
    ac66:	70 0d       	add	r23, r0
    ac68:	81 1d       	adc	r24, r1
    ac6a:	11 24       	eor	r1, r1
    ac6c:	91 1d       	adc	r25, r1
    ac6e:	b2 9f       	mul	r27, r18
    ac70:	70 0d       	add	r23, r0
    ac72:	81 1d       	adc	r24, r1
    ac74:	11 24       	eor	r1, r1
    ac76:	91 1d       	adc	r25, r1
    ac78:	08 95       	ret

0000ac7a <__usmulhisi3>:
    ac7a:	0e 94 2e 56 	call	0xac5c	; 0xac5c <__umulhisi3>

0000ac7e <__usmulhisi3_tail>:
    ac7e:	b7 ff       	sbrs	r27, 7
    ac80:	08 95       	ret
    ac82:	82 1b       	sub	r24, r18
    ac84:	93 0b       	sbc	r25, r19
    ac86:	08 95       	ret

0000ac88 <__muluhisi3>:
    ac88:	0e 94 2e 56 	call	0xac5c	; 0xac5c <__umulhisi3>
    ac8c:	a5 9f       	mul	r26, r21
    ac8e:	90 0d       	add	r25, r0
    ac90:	b4 9f       	mul	r27, r20
    ac92:	90 0d       	add	r25, r0
    ac94:	a4 9f       	mul	r26, r20
    ac96:	80 0d       	add	r24, r0
    ac98:	91 1d       	adc	r25, r1
    ac9a:	11 24       	eor	r1, r1
    ac9c:	08 95       	ret

0000ac9e <__subdi3>:
    ac9e:	2a 19       	sub	r18, r10
    aca0:	3b 09       	sbc	r19, r11
    aca2:	4c 09       	sbc	r20, r12
    aca4:	5d 09       	sbc	r21, r13
    aca6:	6e 09       	sbc	r22, r14
    aca8:	7f 09       	sbc	r23, r15
    acaa:	80 0b       	sbc	r24, r16
    acac:	91 0b       	sbc	r25, r17
    acae:	08 95       	ret

0000acb0 <__subsf3>:
    acb0:	50 58       	subi	r21, 0x80	; 128

0000acb2 <__addsf3>:
    acb2:	bb 27       	eor	r27, r27
    acb4:	aa 27       	eor	r26, r26
    acb6:	0e 94 70 56 	call	0xace0	; 0xace0 <__addsf3x>
    acba:	0c 94 8a 58 	jmp	0xb114	; 0xb114 <__fp_round>
    acbe:	0e 94 51 58 	call	0xb0a2	; 0xb0a2 <__fp_pscA>
    acc2:	38 f0       	brcs	.+14     	; 0xacd2 <__addsf3+0x20>
    acc4:	0e 94 58 58 	call	0xb0b0	; 0xb0b0 <__fp_pscB>
    acc8:	20 f0       	brcs	.+8      	; 0xacd2 <__addsf3+0x20>
    acca:	39 f4       	brne	.+14     	; 0xacda <__addsf3+0x28>
    accc:	9f 3f       	cpi	r25, 0xFF	; 255
    acce:	19 f4       	brne	.+6      	; 0xacd6 <__addsf3+0x24>
    acd0:	26 f4       	brtc	.+8      	; 0xacda <__addsf3+0x28>
    acd2:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <__fp_nan>
    acd6:	0e f4       	brtc	.+2      	; 0xacda <__addsf3+0x28>
    acd8:	e0 95       	com	r30
    acda:	e7 fb       	bst	r30, 7
    acdc:	0c 94 21 58 	jmp	0xb042	; 0xb042 <__fp_inf>

0000ace0 <__addsf3x>:
    ace0:	e9 2f       	mov	r30, r25
    ace2:	0e 94 af 58 	call	0xb15e	; 0xb15e <__fp_split3>
    ace6:	58 f3       	brcs	.-42     	; 0xacbe <__addsf3+0xc>
    ace8:	ba 17       	cp	r27, r26
    acea:	62 07       	cpc	r22, r18
    acec:	73 07       	cpc	r23, r19
    acee:	84 07       	cpc	r24, r20
    acf0:	95 07       	cpc	r25, r21
    acf2:	20 f0       	brcs	.+8      	; 0xacfc <__addsf3x+0x1c>
    acf4:	79 f4       	brne	.+30     	; 0xad14 <__addsf3x+0x34>
    acf6:	a6 f5       	brtc	.+104    	; 0xad60 <__addsf3x+0x80>
    acf8:	0c 94 d1 58 	jmp	0xb1a2	; 0xb1a2 <__fp_zero>
    acfc:	0e f4       	brtc	.+2      	; 0xad00 <__addsf3x+0x20>
    acfe:	e0 95       	com	r30
    ad00:	0b 2e       	mov	r0, r27
    ad02:	ba 2f       	mov	r27, r26
    ad04:	a0 2d       	mov	r26, r0
    ad06:	0b 01       	movw	r0, r22
    ad08:	b9 01       	movw	r22, r18
    ad0a:	90 01       	movw	r18, r0
    ad0c:	0c 01       	movw	r0, r24
    ad0e:	ca 01       	movw	r24, r20
    ad10:	a0 01       	movw	r20, r0
    ad12:	11 24       	eor	r1, r1
    ad14:	ff 27       	eor	r31, r31
    ad16:	59 1b       	sub	r21, r25
    ad18:	99 f0       	breq	.+38     	; 0xad40 <__addsf3x+0x60>
    ad1a:	59 3f       	cpi	r21, 0xF9	; 249
    ad1c:	50 f4       	brcc	.+20     	; 0xad32 <__addsf3x+0x52>
    ad1e:	50 3e       	cpi	r21, 0xE0	; 224
    ad20:	68 f1       	brcs	.+90     	; 0xad7c <__addsf3x+0x9c>
    ad22:	1a 16       	cp	r1, r26
    ad24:	f0 40       	sbci	r31, 0x00	; 0
    ad26:	a2 2f       	mov	r26, r18
    ad28:	23 2f       	mov	r18, r19
    ad2a:	34 2f       	mov	r19, r20
    ad2c:	44 27       	eor	r20, r20
    ad2e:	58 5f       	subi	r21, 0xF8	; 248
    ad30:	f3 cf       	rjmp	.-26     	; 0xad18 <__addsf3x+0x38>
    ad32:	46 95       	lsr	r20
    ad34:	37 95       	ror	r19
    ad36:	27 95       	ror	r18
    ad38:	a7 95       	ror	r26
    ad3a:	f0 40       	sbci	r31, 0x00	; 0
    ad3c:	53 95       	inc	r21
    ad3e:	c9 f7       	brne	.-14     	; 0xad32 <__addsf3x+0x52>
    ad40:	7e f4       	brtc	.+30     	; 0xad60 <__addsf3x+0x80>
    ad42:	1f 16       	cp	r1, r31
    ad44:	ba 0b       	sbc	r27, r26
    ad46:	62 0b       	sbc	r22, r18
    ad48:	73 0b       	sbc	r23, r19
    ad4a:	84 0b       	sbc	r24, r20
    ad4c:	ba f0       	brmi	.+46     	; 0xad7c <__addsf3x+0x9c>
    ad4e:	91 50       	subi	r25, 0x01	; 1
    ad50:	a1 f0       	breq	.+40     	; 0xad7a <__addsf3x+0x9a>
    ad52:	ff 0f       	add	r31, r31
    ad54:	bb 1f       	adc	r27, r27
    ad56:	66 1f       	adc	r22, r22
    ad58:	77 1f       	adc	r23, r23
    ad5a:	88 1f       	adc	r24, r24
    ad5c:	c2 f7       	brpl	.-16     	; 0xad4e <__addsf3x+0x6e>
    ad5e:	0e c0       	rjmp	.+28     	; 0xad7c <__addsf3x+0x9c>
    ad60:	ba 0f       	add	r27, r26
    ad62:	62 1f       	adc	r22, r18
    ad64:	73 1f       	adc	r23, r19
    ad66:	84 1f       	adc	r24, r20
    ad68:	48 f4       	brcc	.+18     	; 0xad7c <__addsf3x+0x9c>
    ad6a:	87 95       	ror	r24
    ad6c:	77 95       	ror	r23
    ad6e:	67 95       	ror	r22
    ad70:	b7 95       	ror	r27
    ad72:	f7 95       	ror	r31
    ad74:	9e 3f       	cpi	r25, 0xFE	; 254
    ad76:	08 f0       	brcs	.+2      	; 0xad7a <__addsf3x+0x9a>
    ad78:	b0 cf       	rjmp	.-160    	; 0xacda <__addsf3+0x28>
    ad7a:	93 95       	inc	r25
    ad7c:	88 0f       	add	r24, r24
    ad7e:	08 f0       	brcs	.+2      	; 0xad82 <__addsf3x+0xa2>
    ad80:	99 27       	eor	r25, r25
    ad82:	ee 0f       	add	r30, r30
    ad84:	97 95       	ror	r25
    ad86:	87 95       	ror	r24
    ad88:	08 95       	ret
    ad8a:	0e 94 51 58 	call	0xb0a2	; 0xb0a2 <__fp_pscA>
    ad8e:	60 f0       	brcs	.+24     	; 0xada8 <__addsf3x+0xc8>
    ad90:	80 e8       	ldi	r24, 0x80	; 128
    ad92:	91 e0       	ldi	r25, 0x01	; 1
    ad94:	09 f4       	brne	.+2      	; 0xad98 <__addsf3x+0xb8>
    ad96:	9e ef       	ldi	r25, 0xFE	; 254
    ad98:	0e 94 58 58 	call	0xb0b0	; 0xb0b0 <__fp_pscB>
    ad9c:	28 f0       	brcs	.+10     	; 0xada8 <__addsf3x+0xc8>
    ad9e:	40 e8       	ldi	r20, 0x80	; 128
    ada0:	51 e0       	ldi	r21, 0x01	; 1
    ada2:	71 f4       	brne	.+28     	; 0xadc0 <atan2+0x10>
    ada4:	5e ef       	ldi	r21, 0xFE	; 254
    ada6:	0c c0       	rjmp	.+24     	; 0xadc0 <atan2+0x10>
    ada8:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <__fp_nan>
    adac:	0c 94 d1 58 	jmp	0xb1a2	; 0xb1a2 <__fp_zero>

0000adb0 <atan2>:
    adb0:	e9 2f       	mov	r30, r25
    adb2:	e0 78       	andi	r30, 0x80	; 128
    adb4:	0e 94 af 58 	call	0xb15e	; 0xb15e <__fp_split3>
    adb8:	40 f3       	brcs	.-48     	; 0xad8a <__addsf3x+0xaa>
    adba:	09 2e       	mov	r0, r25
    adbc:	05 2a       	or	r0, r21
    adbe:	b1 f3       	breq	.-20     	; 0xadac <__addsf3x+0xcc>
    adc0:	26 17       	cp	r18, r22
    adc2:	37 07       	cpc	r19, r23
    adc4:	48 07       	cpc	r20, r24
    adc6:	59 07       	cpc	r21, r25
    adc8:	38 f0       	brcs	.+14     	; 0xadd8 <atan2+0x28>
    adca:	0e 2e       	mov	r0, r30
    adcc:	07 f8       	bld	r0, 7
    adce:	e0 25       	eor	r30, r0
    add0:	69 f0       	breq	.+26     	; 0xadec <atan2+0x3c>
    add2:	e0 25       	eor	r30, r0
    add4:	e0 64       	ori	r30, 0x40	; 64
    add6:	0a c0       	rjmp	.+20     	; 0xadec <atan2+0x3c>
    add8:	ef 63       	ori	r30, 0x3F	; 63
    adda:	07 f8       	bld	r0, 7
    addc:	00 94       	com	r0
    adde:	07 fa       	bst	r0, 7
    ade0:	db 01       	movw	r26, r22
    ade2:	b9 01       	movw	r22, r18
    ade4:	9d 01       	movw	r18, r26
    ade6:	dc 01       	movw	r26, r24
    ade8:	ca 01       	movw	r24, r20
    adea:	ad 01       	movw	r20, r26
    adec:	ef 93       	push	r30
    adee:	0e 94 53 57 	call	0xaea6	; 0xaea6 <__divsf3_pse>
    adf2:	0e 94 8a 58 	call	0xb114	; 0xb114 <__fp_round>
    adf6:	0e 94 08 57 	call	0xae10	; 0xae10 <atan>
    adfa:	5f 91       	pop	r21
    adfc:	55 23       	and	r21, r21
    adfe:	39 f0       	breq	.+14     	; 0xae0e <atan2+0x5e>
    ae00:	2b ed       	ldi	r18, 0xDB	; 219
    ae02:	3f e0       	ldi	r19, 0x0F	; 15
    ae04:	49 e4       	ldi	r20, 0x49	; 73
    ae06:	50 fd       	sbrc	r21, 0
    ae08:	49 ec       	ldi	r20, 0xC9	; 201
    ae0a:	0c 94 59 56 	jmp	0xacb2	; 0xacb2 <__addsf3>
    ae0e:	08 95       	ret

0000ae10 <atan>:
    ae10:	df 93       	push	r29
    ae12:	dd 27       	eor	r29, r29
    ae14:	b9 2f       	mov	r27, r25
    ae16:	bf 77       	andi	r27, 0x7F	; 127
    ae18:	40 e8       	ldi	r20, 0x80	; 128
    ae1a:	5f e3       	ldi	r21, 0x3F	; 63
    ae1c:	16 16       	cp	r1, r22
    ae1e:	17 06       	cpc	r1, r23
    ae20:	48 07       	cpc	r20, r24
    ae22:	5b 07       	cpc	r21, r27
    ae24:	18 f4       	brcc	.+6      	; 0xae2c <atan+0x1c>
    ae26:	d9 2f       	mov	r29, r25
    ae28:	0e 94 d8 58 	call	0xb1b0	; 0xb1b0 <inverse>
    ae2c:	9f 93       	push	r25
    ae2e:	8f 93       	push	r24
    ae30:	7f 93       	push	r23
    ae32:	6f 93       	push	r22
    ae34:	0e 94 55 59 	call	0xb2aa	; 0xb2aa <square>
    ae38:	ee e8       	ldi	r30, 0x8E	; 142
    ae3a:	f1 e0       	ldi	r31, 0x01	; 1
    ae3c:	0e 94 2a 58 	call	0xb054	; 0xb054 <__fp_powser>
    ae40:	0e 94 8a 58 	call	0xb114	; 0xb114 <__fp_round>
    ae44:	2f 91       	pop	r18
    ae46:	3f 91       	pop	r19
    ae48:	4f 91       	pop	r20
    ae4a:	5f 91       	pop	r21
    ae4c:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <__mulsf3x>
    ae50:	dd 23       	and	r29, r29
    ae52:	51 f0       	breq	.+20     	; 0xae68 <atan+0x58>
    ae54:	90 58       	subi	r25, 0x80	; 128
    ae56:	a2 ea       	ldi	r26, 0xA2	; 162
    ae58:	2a ed       	ldi	r18, 0xDA	; 218
    ae5a:	3f e0       	ldi	r19, 0x0F	; 15
    ae5c:	49 ec       	ldi	r20, 0xC9	; 201
    ae5e:	5f e3       	ldi	r21, 0x3F	; 63
    ae60:	d0 78       	andi	r29, 0x80	; 128
    ae62:	5d 27       	eor	r21, r29
    ae64:	0e 94 70 56 	call	0xace0	; 0xace0 <__addsf3x>
    ae68:	df 91       	pop	r29
    ae6a:	0c 94 8a 58 	jmp	0xb114	; 0xb114 <__fp_round>

0000ae6e <cos>:
    ae6e:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <__fp_rempio2>
    ae72:	e3 95       	inc	r30
    ae74:	0c 94 9b 58 	jmp	0xb136	; 0xb136 <__fp_sinus>

0000ae78 <__divsf3>:
    ae78:	0e 94 50 57 	call	0xaea0	; 0xaea0 <__divsf3x>
    ae7c:	0c 94 8a 58 	jmp	0xb114	; 0xb114 <__fp_round>
    ae80:	0e 94 58 58 	call	0xb0b0	; 0xb0b0 <__fp_pscB>
    ae84:	58 f0       	brcs	.+22     	; 0xae9c <__divsf3+0x24>
    ae86:	0e 94 51 58 	call	0xb0a2	; 0xb0a2 <__fp_pscA>
    ae8a:	40 f0       	brcs	.+16     	; 0xae9c <__divsf3+0x24>
    ae8c:	29 f4       	brne	.+10     	; 0xae98 <__divsf3+0x20>
    ae8e:	5f 3f       	cpi	r21, 0xFF	; 255
    ae90:	29 f0       	breq	.+10     	; 0xae9c <__divsf3+0x24>
    ae92:	0c 94 21 58 	jmp	0xb042	; 0xb042 <__fp_inf>
    ae96:	51 11       	cpse	r21, r1
    ae98:	0c 94 d2 58 	jmp	0xb1a4	; 0xb1a4 <__fp_szero>
    ae9c:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <__fp_nan>

0000aea0 <__divsf3x>:
    aea0:	0e 94 af 58 	call	0xb15e	; 0xb15e <__fp_split3>
    aea4:	68 f3       	brcs	.-38     	; 0xae80 <__divsf3+0x8>

0000aea6 <__divsf3_pse>:
    aea6:	99 23       	and	r25, r25
    aea8:	b1 f3       	breq	.-20     	; 0xae96 <__divsf3+0x1e>
    aeaa:	55 23       	and	r21, r21
    aeac:	91 f3       	breq	.-28     	; 0xae92 <__divsf3+0x1a>
    aeae:	95 1b       	sub	r25, r21
    aeb0:	55 0b       	sbc	r21, r21
    aeb2:	bb 27       	eor	r27, r27
    aeb4:	aa 27       	eor	r26, r26
    aeb6:	62 17       	cp	r22, r18
    aeb8:	73 07       	cpc	r23, r19
    aeba:	84 07       	cpc	r24, r20
    aebc:	38 f0       	brcs	.+14     	; 0xaecc <__divsf3_pse+0x26>
    aebe:	9f 5f       	subi	r25, 0xFF	; 255
    aec0:	5f 4f       	sbci	r21, 0xFF	; 255
    aec2:	22 0f       	add	r18, r18
    aec4:	33 1f       	adc	r19, r19
    aec6:	44 1f       	adc	r20, r20
    aec8:	aa 1f       	adc	r26, r26
    aeca:	a9 f3       	breq	.-22     	; 0xaeb6 <__divsf3_pse+0x10>
    aecc:	35 d0       	rcall	.+106    	; 0xaf38 <__divsf3_pse+0x92>
    aece:	0e 2e       	mov	r0, r30
    aed0:	3a f0       	brmi	.+14     	; 0xaee0 <__divsf3_pse+0x3a>
    aed2:	e0 e8       	ldi	r30, 0x80	; 128
    aed4:	32 d0       	rcall	.+100    	; 0xaf3a <__divsf3_pse+0x94>
    aed6:	91 50       	subi	r25, 0x01	; 1
    aed8:	50 40       	sbci	r21, 0x00	; 0
    aeda:	e6 95       	lsr	r30
    aedc:	00 1c       	adc	r0, r0
    aede:	ca f7       	brpl	.-14     	; 0xaed2 <__divsf3_pse+0x2c>
    aee0:	2b d0       	rcall	.+86     	; 0xaf38 <__divsf3_pse+0x92>
    aee2:	fe 2f       	mov	r31, r30
    aee4:	29 d0       	rcall	.+82     	; 0xaf38 <__divsf3_pse+0x92>
    aee6:	66 0f       	add	r22, r22
    aee8:	77 1f       	adc	r23, r23
    aeea:	88 1f       	adc	r24, r24
    aeec:	bb 1f       	adc	r27, r27
    aeee:	26 17       	cp	r18, r22
    aef0:	37 07       	cpc	r19, r23
    aef2:	48 07       	cpc	r20, r24
    aef4:	ab 07       	cpc	r26, r27
    aef6:	b0 e8       	ldi	r27, 0x80	; 128
    aef8:	09 f0       	breq	.+2      	; 0xaefc <__divsf3_pse+0x56>
    aefa:	bb 0b       	sbc	r27, r27
    aefc:	80 2d       	mov	r24, r0
    aefe:	bf 01       	movw	r22, r30
    af00:	ff 27       	eor	r31, r31
    af02:	93 58       	subi	r25, 0x83	; 131
    af04:	5f 4f       	sbci	r21, 0xFF	; 255
    af06:	3a f0       	brmi	.+14     	; 0xaf16 <__divsf3_pse+0x70>
    af08:	9e 3f       	cpi	r25, 0xFE	; 254
    af0a:	51 05       	cpc	r21, r1
    af0c:	78 f0       	brcs	.+30     	; 0xaf2c <__divsf3_pse+0x86>
    af0e:	0c 94 21 58 	jmp	0xb042	; 0xb042 <__fp_inf>
    af12:	0c 94 d2 58 	jmp	0xb1a4	; 0xb1a4 <__fp_szero>
    af16:	5f 3f       	cpi	r21, 0xFF	; 255
    af18:	e4 f3       	brlt	.-8      	; 0xaf12 <__divsf3_pse+0x6c>
    af1a:	98 3e       	cpi	r25, 0xE8	; 232
    af1c:	d4 f3       	brlt	.-12     	; 0xaf12 <__divsf3_pse+0x6c>
    af1e:	86 95       	lsr	r24
    af20:	77 95       	ror	r23
    af22:	67 95       	ror	r22
    af24:	b7 95       	ror	r27
    af26:	f7 95       	ror	r31
    af28:	9f 5f       	subi	r25, 0xFF	; 255
    af2a:	c9 f7       	brne	.-14     	; 0xaf1e <__divsf3_pse+0x78>
    af2c:	88 0f       	add	r24, r24
    af2e:	91 1d       	adc	r25, r1
    af30:	96 95       	lsr	r25
    af32:	87 95       	ror	r24
    af34:	97 f9       	bld	r25, 7
    af36:	08 95       	ret
    af38:	e1 e0       	ldi	r30, 0x01	; 1
    af3a:	66 0f       	add	r22, r22
    af3c:	77 1f       	adc	r23, r23
    af3e:	88 1f       	adc	r24, r24
    af40:	bb 1f       	adc	r27, r27
    af42:	62 17       	cp	r22, r18
    af44:	73 07       	cpc	r23, r19
    af46:	84 07       	cpc	r24, r20
    af48:	ba 07       	cpc	r27, r26
    af4a:	20 f0       	brcs	.+8      	; 0xaf54 <__divsf3_pse+0xae>
    af4c:	62 1b       	sub	r22, r18
    af4e:	73 0b       	sbc	r23, r19
    af50:	84 0b       	sbc	r24, r20
    af52:	ba 0b       	sbc	r27, r26
    af54:	ee 1f       	adc	r30, r30
    af56:	88 f7       	brcc	.-30     	; 0xaf3a <__divsf3_pse+0x94>
    af58:	e0 95       	com	r30
    af5a:	08 95       	ret

0000af5c <__fixsfsi>:
    af5c:	0e 94 b5 57 	call	0xaf6a	; 0xaf6a <__fixunssfsi>
    af60:	68 94       	set
    af62:	b1 11       	cpse	r27, r1
    af64:	0c 94 d2 58 	jmp	0xb1a4	; 0xb1a4 <__fp_szero>
    af68:	08 95       	ret

0000af6a <__fixunssfsi>:
    af6a:	0e 94 b7 58 	call	0xb16e	; 0xb16e <__fp_splitA>
    af6e:	88 f0       	brcs	.+34     	; 0xaf92 <__fixunssfsi+0x28>
    af70:	9f 57       	subi	r25, 0x7F	; 127
    af72:	98 f0       	brcs	.+38     	; 0xaf9a <__fixunssfsi+0x30>
    af74:	b9 2f       	mov	r27, r25
    af76:	99 27       	eor	r25, r25
    af78:	b7 51       	subi	r27, 0x17	; 23
    af7a:	b0 f0       	brcs	.+44     	; 0xafa8 <__fixunssfsi+0x3e>
    af7c:	e1 f0       	breq	.+56     	; 0xafb6 <__fixunssfsi+0x4c>
    af7e:	66 0f       	add	r22, r22
    af80:	77 1f       	adc	r23, r23
    af82:	88 1f       	adc	r24, r24
    af84:	99 1f       	adc	r25, r25
    af86:	1a f0       	brmi	.+6      	; 0xaf8e <__fixunssfsi+0x24>
    af88:	ba 95       	dec	r27
    af8a:	c9 f7       	brne	.-14     	; 0xaf7e <__fixunssfsi+0x14>
    af8c:	14 c0       	rjmp	.+40     	; 0xafb6 <__fixunssfsi+0x4c>
    af8e:	b1 30       	cpi	r27, 0x01	; 1
    af90:	91 f0       	breq	.+36     	; 0xafb6 <__fixunssfsi+0x4c>
    af92:	0e 94 d1 58 	call	0xb1a2	; 0xb1a2 <__fp_zero>
    af96:	b1 e0       	ldi	r27, 0x01	; 1
    af98:	08 95       	ret
    af9a:	0c 94 d1 58 	jmp	0xb1a2	; 0xb1a2 <__fp_zero>
    af9e:	67 2f       	mov	r22, r23
    afa0:	78 2f       	mov	r23, r24
    afa2:	88 27       	eor	r24, r24
    afa4:	b8 5f       	subi	r27, 0xF8	; 248
    afa6:	39 f0       	breq	.+14     	; 0xafb6 <__fixunssfsi+0x4c>
    afa8:	b9 3f       	cpi	r27, 0xF9	; 249
    afaa:	cc f3       	brlt	.-14     	; 0xaf9e <__fixunssfsi+0x34>
    afac:	86 95       	lsr	r24
    afae:	77 95       	ror	r23
    afb0:	67 95       	ror	r22
    afb2:	b3 95       	inc	r27
    afb4:	d9 f7       	brne	.-10     	; 0xafac <__fixunssfsi+0x42>
    afb6:	3e f4       	brtc	.+14     	; 0xafc6 <__fixunssfsi+0x5c>
    afb8:	90 95       	com	r25
    afba:	80 95       	com	r24
    afbc:	70 95       	com	r23
    afbe:	61 95       	neg	r22
    afc0:	7f 4f       	sbci	r23, 0xFF	; 255
    afc2:	8f 4f       	sbci	r24, 0xFF	; 255
    afc4:	9f 4f       	sbci	r25, 0xFF	; 255
    afc6:	08 95       	ret

0000afc8 <__floatunsisf>:
    afc8:	e8 94       	clt
    afca:	09 c0       	rjmp	.+18     	; 0xafde <__floatsisf+0x12>

0000afcc <__floatsisf>:
    afcc:	97 fb       	bst	r25, 7
    afce:	3e f4       	brtc	.+14     	; 0xafde <__floatsisf+0x12>
    afd0:	90 95       	com	r25
    afd2:	80 95       	com	r24
    afd4:	70 95       	com	r23
    afd6:	61 95       	neg	r22
    afd8:	7f 4f       	sbci	r23, 0xFF	; 255
    afda:	8f 4f       	sbci	r24, 0xFF	; 255
    afdc:	9f 4f       	sbci	r25, 0xFF	; 255
    afde:	99 23       	and	r25, r25
    afe0:	a9 f0       	breq	.+42     	; 0xb00c <__floatsisf+0x40>
    afe2:	f9 2f       	mov	r31, r25
    afe4:	96 e9       	ldi	r25, 0x96	; 150
    afe6:	bb 27       	eor	r27, r27
    afe8:	93 95       	inc	r25
    afea:	f6 95       	lsr	r31
    afec:	87 95       	ror	r24
    afee:	77 95       	ror	r23
    aff0:	67 95       	ror	r22
    aff2:	b7 95       	ror	r27
    aff4:	f1 11       	cpse	r31, r1
    aff6:	f8 cf       	rjmp	.-16     	; 0xafe8 <__floatsisf+0x1c>
    aff8:	fa f4       	brpl	.+62     	; 0xb038 <__floatsisf+0x6c>
    affa:	bb 0f       	add	r27, r27
    affc:	11 f4       	brne	.+4      	; 0xb002 <__floatsisf+0x36>
    affe:	60 ff       	sbrs	r22, 0
    b000:	1b c0       	rjmp	.+54     	; 0xb038 <__floatsisf+0x6c>
    b002:	6f 5f       	subi	r22, 0xFF	; 255
    b004:	7f 4f       	sbci	r23, 0xFF	; 255
    b006:	8f 4f       	sbci	r24, 0xFF	; 255
    b008:	9f 4f       	sbci	r25, 0xFF	; 255
    b00a:	16 c0       	rjmp	.+44     	; 0xb038 <__floatsisf+0x6c>
    b00c:	88 23       	and	r24, r24
    b00e:	11 f0       	breq	.+4      	; 0xb014 <__floatsisf+0x48>
    b010:	96 e9       	ldi	r25, 0x96	; 150
    b012:	11 c0       	rjmp	.+34     	; 0xb036 <__floatsisf+0x6a>
    b014:	77 23       	and	r23, r23
    b016:	21 f0       	breq	.+8      	; 0xb020 <__floatsisf+0x54>
    b018:	9e e8       	ldi	r25, 0x8E	; 142
    b01a:	87 2f       	mov	r24, r23
    b01c:	76 2f       	mov	r23, r22
    b01e:	05 c0       	rjmp	.+10     	; 0xb02a <__floatsisf+0x5e>
    b020:	66 23       	and	r22, r22
    b022:	71 f0       	breq	.+28     	; 0xb040 <__floatsisf+0x74>
    b024:	96 e8       	ldi	r25, 0x86	; 134
    b026:	86 2f       	mov	r24, r22
    b028:	70 e0       	ldi	r23, 0x00	; 0
    b02a:	60 e0       	ldi	r22, 0x00	; 0
    b02c:	2a f0       	brmi	.+10     	; 0xb038 <__floatsisf+0x6c>
    b02e:	9a 95       	dec	r25
    b030:	66 0f       	add	r22, r22
    b032:	77 1f       	adc	r23, r23
    b034:	88 1f       	adc	r24, r24
    b036:	da f7       	brpl	.-10     	; 0xb02e <__floatsisf+0x62>
    b038:	88 0f       	add	r24, r24
    b03a:	96 95       	lsr	r25
    b03c:	87 95       	ror	r24
    b03e:	97 f9       	bld	r25, 7
    b040:	08 95       	ret

0000b042 <__fp_inf>:
    b042:	97 f9       	bld	r25, 7
    b044:	9f 67       	ori	r25, 0x7F	; 127
    b046:	80 e8       	ldi	r24, 0x80	; 128
    b048:	70 e0       	ldi	r23, 0x00	; 0
    b04a:	60 e0       	ldi	r22, 0x00	; 0
    b04c:	08 95       	ret

0000b04e <__fp_nan>:
    b04e:	9f ef       	ldi	r25, 0xFF	; 255
    b050:	80 ec       	ldi	r24, 0xC0	; 192
    b052:	08 95       	ret

0000b054 <__fp_powser>:
    b054:	df 93       	push	r29
    b056:	cf 93       	push	r28
    b058:	1f 93       	push	r17
    b05a:	0f 93       	push	r16
    b05c:	ff 92       	push	r15
    b05e:	ef 92       	push	r14
    b060:	df 92       	push	r13
    b062:	7b 01       	movw	r14, r22
    b064:	8c 01       	movw	r16, r24
    b066:	68 94       	set
    b068:	06 c0       	rjmp	.+12     	; 0xb076 <__fp_powser+0x22>
    b06a:	da 2e       	mov	r13, r26
    b06c:	ef 01       	movw	r28, r30
    b06e:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <__mulsf3x>
    b072:	fe 01       	movw	r30, r28
    b074:	e8 94       	clt
    b076:	a5 91       	lpm	r26, Z+
    b078:	25 91       	lpm	r18, Z+
    b07a:	35 91       	lpm	r19, Z+
    b07c:	45 91       	lpm	r20, Z+
    b07e:	55 91       	lpm	r21, Z+
    b080:	a6 f3       	brts	.-24     	; 0xb06a <__fp_powser+0x16>
    b082:	ef 01       	movw	r28, r30
    b084:	0e 94 70 56 	call	0xace0	; 0xace0 <__addsf3x>
    b088:	fe 01       	movw	r30, r28
    b08a:	97 01       	movw	r18, r14
    b08c:	a8 01       	movw	r20, r16
    b08e:	da 94       	dec	r13
    b090:	69 f7       	brne	.-38     	; 0xb06c <__fp_powser+0x18>
    b092:	df 90       	pop	r13
    b094:	ef 90       	pop	r14
    b096:	ff 90       	pop	r15
    b098:	0f 91       	pop	r16
    b09a:	1f 91       	pop	r17
    b09c:	cf 91       	pop	r28
    b09e:	df 91       	pop	r29
    b0a0:	08 95       	ret

0000b0a2 <__fp_pscA>:
    b0a2:	00 24       	eor	r0, r0
    b0a4:	0a 94       	dec	r0
    b0a6:	16 16       	cp	r1, r22
    b0a8:	17 06       	cpc	r1, r23
    b0aa:	18 06       	cpc	r1, r24
    b0ac:	09 06       	cpc	r0, r25
    b0ae:	08 95       	ret

0000b0b0 <__fp_pscB>:
    b0b0:	00 24       	eor	r0, r0
    b0b2:	0a 94       	dec	r0
    b0b4:	12 16       	cp	r1, r18
    b0b6:	13 06       	cpc	r1, r19
    b0b8:	14 06       	cpc	r1, r20
    b0ba:	05 06       	cpc	r0, r21
    b0bc:	08 95       	ret
    b0be:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <__fp_nan>

0000b0c2 <__fp_rempio2>:
    b0c2:	0e 94 b7 58 	call	0xb16e	; 0xb16e <__fp_splitA>
    b0c6:	d8 f3       	brcs	.-10     	; 0xb0be <__fp_pscB+0xe>
    b0c8:	e8 94       	clt
    b0ca:	e0 e0       	ldi	r30, 0x00	; 0
    b0cc:	bb 27       	eor	r27, r27
    b0ce:	9f 57       	subi	r25, 0x7F	; 127
    b0d0:	f0 f0       	brcs	.+60     	; 0xb10e <__fp_rempio2+0x4c>
    b0d2:	2a ed       	ldi	r18, 0xDA	; 218
    b0d4:	3f e0       	ldi	r19, 0x0F	; 15
    b0d6:	49 ec       	ldi	r20, 0xC9	; 201
    b0d8:	06 c0       	rjmp	.+12     	; 0xb0e6 <__fp_rempio2+0x24>
    b0da:	ee 0f       	add	r30, r30
    b0dc:	bb 0f       	add	r27, r27
    b0de:	66 1f       	adc	r22, r22
    b0e0:	77 1f       	adc	r23, r23
    b0e2:	88 1f       	adc	r24, r24
    b0e4:	28 f0       	brcs	.+10     	; 0xb0f0 <__fp_rempio2+0x2e>
    b0e6:	b2 3a       	cpi	r27, 0xA2	; 162
    b0e8:	62 07       	cpc	r22, r18
    b0ea:	73 07       	cpc	r23, r19
    b0ec:	84 07       	cpc	r24, r20
    b0ee:	28 f0       	brcs	.+10     	; 0xb0fa <__fp_rempio2+0x38>
    b0f0:	b2 5a       	subi	r27, 0xA2	; 162
    b0f2:	62 0b       	sbc	r22, r18
    b0f4:	73 0b       	sbc	r23, r19
    b0f6:	84 0b       	sbc	r24, r20
    b0f8:	e3 95       	inc	r30
    b0fa:	9a 95       	dec	r25
    b0fc:	72 f7       	brpl	.-36     	; 0xb0da <__fp_rempio2+0x18>
    b0fe:	80 38       	cpi	r24, 0x80	; 128
    b100:	30 f4       	brcc	.+12     	; 0xb10e <__fp_rempio2+0x4c>
    b102:	9a 95       	dec	r25
    b104:	bb 0f       	add	r27, r27
    b106:	66 1f       	adc	r22, r22
    b108:	77 1f       	adc	r23, r23
    b10a:	88 1f       	adc	r24, r24
    b10c:	d2 f7       	brpl	.-12     	; 0xb102 <__fp_rempio2+0x40>
    b10e:	90 48       	sbci	r25, 0x80	; 128
    b110:	0c 94 5b 59 	jmp	0xb2b6	; 0xb2b6 <__fp_mpack_finite>

0000b114 <__fp_round>:
    b114:	09 2e       	mov	r0, r25
    b116:	03 94       	inc	r0
    b118:	00 0c       	add	r0, r0
    b11a:	11 f4       	brne	.+4      	; 0xb120 <__fp_round+0xc>
    b11c:	88 23       	and	r24, r24
    b11e:	52 f0       	brmi	.+20     	; 0xb134 <__fp_round+0x20>
    b120:	bb 0f       	add	r27, r27
    b122:	40 f4       	brcc	.+16     	; 0xb134 <__fp_round+0x20>
    b124:	bf 2b       	or	r27, r31
    b126:	11 f4       	brne	.+4      	; 0xb12c <__fp_round+0x18>
    b128:	60 ff       	sbrs	r22, 0
    b12a:	04 c0       	rjmp	.+8      	; 0xb134 <__fp_round+0x20>
    b12c:	6f 5f       	subi	r22, 0xFF	; 255
    b12e:	7f 4f       	sbci	r23, 0xFF	; 255
    b130:	8f 4f       	sbci	r24, 0xFF	; 255
    b132:	9f 4f       	sbci	r25, 0xFF	; 255
    b134:	08 95       	ret

0000b136 <__fp_sinus>:
    b136:	ef 93       	push	r30
    b138:	e0 ff       	sbrs	r30, 0
    b13a:	07 c0       	rjmp	.+14     	; 0xb14a <__fp_sinus+0x14>
    b13c:	a2 ea       	ldi	r26, 0xA2	; 162
    b13e:	2a ed       	ldi	r18, 0xDA	; 218
    b140:	3f e0       	ldi	r19, 0x0F	; 15
    b142:	49 ec       	ldi	r20, 0xC9	; 201
    b144:	5f eb       	ldi	r21, 0xBF	; 191
    b146:	0e 94 70 56 	call	0xace0	; 0xace0 <__addsf3x>
    b14a:	0e 94 8a 58 	call	0xb114	; 0xb114 <__fp_round>
    b14e:	0f 90       	pop	r0
    b150:	03 94       	inc	r0
    b152:	01 fc       	sbrc	r0, 1
    b154:	90 58       	subi	r25, 0x80	; 128
    b156:	eb eb       	ldi	r30, 0xBB	; 187
    b158:	f1 e0       	ldi	r31, 0x01	; 1
    b15a:	0c 94 67 59 	jmp	0xb2ce	; 0xb2ce <__fp_powsodd>

0000b15e <__fp_split3>:
    b15e:	57 fd       	sbrc	r21, 7
    b160:	90 58       	subi	r25, 0x80	; 128
    b162:	44 0f       	add	r20, r20
    b164:	55 1f       	adc	r21, r21
    b166:	59 f0       	breq	.+22     	; 0xb17e <__fp_splitA+0x10>
    b168:	5f 3f       	cpi	r21, 0xFF	; 255
    b16a:	71 f0       	breq	.+28     	; 0xb188 <__fp_splitA+0x1a>
    b16c:	47 95       	ror	r20

0000b16e <__fp_splitA>:
    b16e:	88 0f       	add	r24, r24
    b170:	97 fb       	bst	r25, 7
    b172:	99 1f       	adc	r25, r25
    b174:	61 f0       	breq	.+24     	; 0xb18e <__fp_splitA+0x20>
    b176:	9f 3f       	cpi	r25, 0xFF	; 255
    b178:	79 f0       	breq	.+30     	; 0xb198 <__fp_splitA+0x2a>
    b17a:	87 95       	ror	r24
    b17c:	08 95       	ret
    b17e:	12 16       	cp	r1, r18
    b180:	13 06       	cpc	r1, r19
    b182:	14 06       	cpc	r1, r20
    b184:	55 1f       	adc	r21, r21
    b186:	f2 cf       	rjmp	.-28     	; 0xb16c <__fp_split3+0xe>
    b188:	46 95       	lsr	r20
    b18a:	f1 df       	rcall	.-30     	; 0xb16e <__fp_splitA>
    b18c:	08 c0       	rjmp	.+16     	; 0xb19e <__fp_splitA+0x30>
    b18e:	16 16       	cp	r1, r22
    b190:	17 06       	cpc	r1, r23
    b192:	18 06       	cpc	r1, r24
    b194:	99 1f       	adc	r25, r25
    b196:	f1 cf       	rjmp	.-30     	; 0xb17a <__fp_splitA+0xc>
    b198:	86 95       	lsr	r24
    b19a:	71 05       	cpc	r23, r1
    b19c:	61 05       	cpc	r22, r1
    b19e:	08 94       	sec
    b1a0:	08 95       	ret

0000b1a2 <__fp_zero>:
    b1a2:	e8 94       	clt

0000b1a4 <__fp_szero>:
    b1a4:	bb 27       	eor	r27, r27
    b1a6:	66 27       	eor	r22, r22
    b1a8:	77 27       	eor	r23, r23
    b1aa:	cb 01       	movw	r24, r22
    b1ac:	97 f9       	bld	r25, 7
    b1ae:	08 95       	ret

0000b1b0 <inverse>:
    b1b0:	9b 01       	movw	r18, r22
    b1b2:	ac 01       	movw	r20, r24
    b1b4:	60 e0       	ldi	r22, 0x00	; 0
    b1b6:	70 e0       	ldi	r23, 0x00	; 0
    b1b8:	80 e8       	ldi	r24, 0x80	; 128
    b1ba:	9f e3       	ldi	r25, 0x3F	; 63
    b1bc:	0c 94 3c 57 	jmp	0xae78	; 0xae78 <__divsf3>

0000b1c0 <__mulsf3>:
    b1c0:	0e 94 f3 58 	call	0xb1e6	; 0xb1e6 <__mulsf3x>
    b1c4:	0c 94 8a 58 	jmp	0xb114	; 0xb114 <__fp_round>
    b1c8:	0e 94 51 58 	call	0xb0a2	; 0xb0a2 <__fp_pscA>
    b1cc:	38 f0       	brcs	.+14     	; 0xb1dc <__mulsf3+0x1c>
    b1ce:	0e 94 58 58 	call	0xb0b0	; 0xb0b0 <__fp_pscB>
    b1d2:	20 f0       	brcs	.+8      	; 0xb1dc <__mulsf3+0x1c>
    b1d4:	95 23       	and	r25, r21
    b1d6:	11 f0       	breq	.+4      	; 0xb1dc <__mulsf3+0x1c>
    b1d8:	0c 94 21 58 	jmp	0xb042	; 0xb042 <__fp_inf>
    b1dc:	0c 94 27 58 	jmp	0xb04e	; 0xb04e <__fp_nan>
    b1e0:	11 24       	eor	r1, r1
    b1e2:	0c 94 d2 58 	jmp	0xb1a4	; 0xb1a4 <__fp_szero>

0000b1e6 <__mulsf3x>:
    b1e6:	0e 94 af 58 	call	0xb15e	; 0xb15e <__fp_split3>
    b1ea:	70 f3       	brcs	.-36     	; 0xb1c8 <__mulsf3+0x8>

0000b1ec <__mulsf3_pse>:
    b1ec:	95 9f       	mul	r25, r21
    b1ee:	c1 f3       	breq	.-16     	; 0xb1e0 <__mulsf3+0x20>
    b1f0:	95 0f       	add	r25, r21
    b1f2:	50 e0       	ldi	r21, 0x00	; 0
    b1f4:	55 1f       	adc	r21, r21
    b1f6:	62 9f       	mul	r22, r18
    b1f8:	f0 01       	movw	r30, r0
    b1fa:	72 9f       	mul	r23, r18
    b1fc:	bb 27       	eor	r27, r27
    b1fe:	f0 0d       	add	r31, r0
    b200:	b1 1d       	adc	r27, r1
    b202:	63 9f       	mul	r22, r19
    b204:	aa 27       	eor	r26, r26
    b206:	f0 0d       	add	r31, r0
    b208:	b1 1d       	adc	r27, r1
    b20a:	aa 1f       	adc	r26, r26
    b20c:	64 9f       	mul	r22, r20
    b20e:	66 27       	eor	r22, r22
    b210:	b0 0d       	add	r27, r0
    b212:	a1 1d       	adc	r26, r1
    b214:	66 1f       	adc	r22, r22
    b216:	82 9f       	mul	r24, r18
    b218:	22 27       	eor	r18, r18
    b21a:	b0 0d       	add	r27, r0
    b21c:	a1 1d       	adc	r26, r1
    b21e:	62 1f       	adc	r22, r18
    b220:	73 9f       	mul	r23, r19
    b222:	b0 0d       	add	r27, r0
    b224:	a1 1d       	adc	r26, r1
    b226:	62 1f       	adc	r22, r18
    b228:	83 9f       	mul	r24, r19
    b22a:	a0 0d       	add	r26, r0
    b22c:	61 1d       	adc	r22, r1
    b22e:	22 1f       	adc	r18, r18
    b230:	74 9f       	mul	r23, r20
    b232:	33 27       	eor	r19, r19
    b234:	a0 0d       	add	r26, r0
    b236:	61 1d       	adc	r22, r1
    b238:	23 1f       	adc	r18, r19
    b23a:	84 9f       	mul	r24, r20
    b23c:	60 0d       	add	r22, r0
    b23e:	21 1d       	adc	r18, r1
    b240:	82 2f       	mov	r24, r18
    b242:	76 2f       	mov	r23, r22
    b244:	6a 2f       	mov	r22, r26
    b246:	11 24       	eor	r1, r1
    b248:	9f 57       	subi	r25, 0x7F	; 127
    b24a:	50 40       	sbci	r21, 0x00	; 0
    b24c:	9a f0       	brmi	.+38     	; 0xb274 <__mulsf3_pse+0x88>
    b24e:	f1 f0       	breq	.+60     	; 0xb28c <__mulsf3_pse+0xa0>
    b250:	88 23       	and	r24, r24
    b252:	4a f0       	brmi	.+18     	; 0xb266 <__mulsf3_pse+0x7a>
    b254:	ee 0f       	add	r30, r30
    b256:	ff 1f       	adc	r31, r31
    b258:	bb 1f       	adc	r27, r27
    b25a:	66 1f       	adc	r22, r22
    b25c:	77 1f       	adc	r23, r23
    b25e:	88 1f       	adc	r24, r24
    b260:	91 50       	subi	r25, 0x01	; 1
    b262:	50 40       	sbci	r21, 0x00	; 0
    b264:	a9 f7       	brne	.-22     	; 0xb250 <__mulsf3_pse+0x64>
    b266:	9e 3f       	cpi	r25, 0xFE	; 254
    b268:	51 05       	cpc	r21, r1
    b26a:	80 f0       	brcs	.+32     	; 0xb28c <__mulsf3_pse+0xa0>
    b26c:	0c 94 21 58 	jmp	0xb042	; 0xb042 <__fp_inf>
    b270:	0c 94 d2 58 	jmp	0xb1a4	; 0xb1a4 <__fp_szero>
    b274:	5f 3f       	cpi	r21, 0xFF	; 255
    b276:	e4 f3       	brlt	.-8      	; 0xb270 <__mulsf3_pse+0x84>
    b278:	98 3e       	cpi	r25, 0xE8	; 232
    b27a:	d4 f3       	brlt	.-12     	; 0xb270 <__mulsf3_pse+0x84>
    b27c:	86 95       	lsr	r24
    b27e:	77 95       	ror	r23
    b280:	67 95       	ror	r22
    b282:	b7 95       	ror	r27
    b284:	f7 95       	ror	r31
    b286:	e7 95       	ror	r30
    b288:	9f 5f       	subi	r25, 0xFF	; 255
    b28a:	c1 f7       	brne	.-16     	; 0xb27c <__mulsf3_pse+0x90>
    b28c:	fe 2b       	or	r31, r30
    b28e:	88 0f       	add	r24, r24
    b290:	91 1d       	adc	r25, r1
    b292:	96 95       	lsr	r25
    b294:	87 95       	ror	r24
    b296:	97 f9       	bld	r25, 7
    b298:	08 95       	ret

0000b29a <sin>:
    b29a:	9f 93       	push	r25
    b29c:	0e 94 61 58 	call	0xb0c2	; 0xb0c2 <__fp_rempio2>
    b2a0:	0f 90       	pop	r0
    b2a2:	07 fc       	sbrc	r0, 7
    b2a4:	ee 5f       	subi	r30, 0xFE	; 254
    b2a6:	0c 94 9b 58 	jmp	0xb136	; 0xb136 <__fp_sinus>

0000b2aa <square>:
    b2aa:	9b 01       	movw	r18, r22
    b2ac:	ac 01       	movw	r20, r24
    b2ae:	0c 94 e0 58 	jmp	0xb1c0	; 0xb1c0 <__mulsf3>

0000b2b2 <__fp_mpack>:
    b2b2:	9f 3f       	cpi	r25, 0xFF	; 255
    b2b4:	31 f0       	breq	.+12     	; 0xb2c2 <__fp_mpack_finite+0xc>

0000b2b6 <__fp_mpack_finite>:
    b2b6:	91 50       	subi	r25, 0x01	; 1
    b2b8:	20 f4       	brcc	.+8      	; 0xb2c2 <__fp_mpack_finite+0xc>
    b2ba:	87 95       	ror	r24
    b2bc:	77 95       	ror	r23
    b2be:	67 95       	ror	r22
    b2c0:	b7 95       	ror	r27
    b2c2:	88 0f       	add	r24, r24
    b2c4:	91 1d       	adc	r25, r1
    b2c6:	96 95       	lsr	r25
    b2c8:	87 95       	ror	r24
    b2ca:	97 f9       	bld	r25, 7
    b2cc:	08 95       	ret

0000b2ce <__fp_powsodd>:
    b2ce:	9f 93       	push	r25
    b2d0:	8f 93       	push	r24
    b2d2:	7f 93       	push	r23
    b2d4:	6f 93       	push	r22
    b2d6:	ff 93       	push	r31
    b2d8:	ef 93       	push	r30
    b2da:	9b 01       	movw	r18, r22
    b2dc:	ac 01       	movw	r20, r24
    b2de:	0e 94 e0 58 	call	0xb1c0	; 0xb1c0 <__mulsf3>
    b2e2:	ef 91       	pop	r30
    b2e4:	ff 91       	pop	r31
    b2e6:	0e 94 2a 58 	call	0xb054	; 0xb054 <__fp_powser>
    b2ea:	2f 91       	pop	r18
    b2ec:	3f 91       	pop	r19
    b2ee:	4f 91       	pop	r20
    b2f0:	5f 91       	pop	r21
    b2f2:	0c 94 e0 58 	jmp	0xb1c0	; 0xb1c0 <__mulsf3>

0000b2f6 <do_rand>:
    b2f6:	8f 92       	push	r8
    b2f8:	9f 92       	push	r9
    b2fa:	af 92       	push	r10
    b2fc:	bf 92       	push	r11
    b2fe:	cf 92       	push	r12
    b300:	df 92       	push	r13
    b302:	ef 92       	push	r14
    b304:	ff 92       	push	r15
    b306:	cf 93       	push	r28
    b308:	df 93       	push	r29
    b30a:	ec 01       	movw	r28, r24
    b30c:	68 81       	ld	r22, Y
    b30e:	79 81       	ldd	r23, Y+1	; 0x01
    b310:	8a 81       	ldd	r24, Y+2	; 0x02
    b312:	9b 81       	ldd	r25, Y+3	; 0x03
    b314:	61 15       	cp	r22, r1
    b316:	71 05       	cpc	r23, r1
    b318:	81 05       	cpc	r24, r1
    b31a:	91 05       	cpc	r25, r1
    b31c:	21 f4       	brne	.+8      	; 0xb326 <do_rand+0x30>
    b31e:	64 e2       	ldi	r22, 0x24	; 36
    b320:	79 ed       	ldi	r23, 0xD9	; 217
    b322:	8b e5       	ldi	r24, 0x5B	; 91
    b324:	97 e0       	ldi	r25, 0x07	; 7
    b326:	2d e1       	ldi	r18, 0x1D	; 29
    b328:	33 ef       	ldi	r19, 0xF3	; 243
    b32a:	41 e0       	ldi	r20, 0x01	; 1
    b32c:	50 e0       	ldi	r21, 0x00	; 0
    b32e:	0e 94 ff 55 	call	0xabfe	; 0xabfe <__divmodsi4>
    b332:	49 01       	movw	r8, r18
    b334:	5a 01       	movw	r10, r20
    b336:	9b 01       	movw	r18, r22
    b338:	ac 01       	movw	r20, r24
    b33a:	a7 ea       	ldi	r26, 0xA7	; 167
    b33c:	b1 e4       	ldi	r27, 0x41	; 65
    b33e:	0e 94 44 56 	call	0xac88	; 0xac88 <__muluhisi3>
    b342:	6b 01       	movw	r12, r22
    b344:	7c 01       	movw	r14, r24
    b346:	ac ee       	ldi	r26, 0xEC	; 236
    b348:	b4 ef       	ldi	r27, 0xF4	; 244
    b34a:	a5 01       	movw	r20, r10
    b34c:	94 01       	movw	r18, r8
    b34e:	0e 94 53 5a 	call	0xb4a6	; 0xb4a6 <__mulohisi3>
    b352:	dc 01       	movw	r26, r24
    b354:	cb 01       	movw	r24, r22
    b356:	8c 0d       	add	r24, r12
    b358:	9d 1d       	adc	r25, r13
    b35a:	ae 1d       	adc	r26, r14
    b35c:	bf 1d       	adc	r27, r15
    b35e:	b7 ff       	sbrs	r27, 7
    b360:	03 c0       	rjmp	.+6      	; 0xb368 <do_rand+0x72>
    b362:	01 97       	sbiw	r24, 0x01	; 1
    b364:	a1 09       	sbc	r26, r1
    b366:	b0 48       	sbci	r27, 0x80	; 128
    b368:	88 83       	st	Y, r24
    b36a:	99 83       	std	Y+1, r25	; 0x01
    b36c:	aa 83       	std	Y+2, r26	; 0x02
    b36e:	bb 83       	std	Y+3, r27	; 0x03
    b370:	9f 77       	andi	r25, 0x7F	; 127
    b372:	df 91       	pop	r29
    b374:	cf 91       	pop	r28
    b376:	ff 90       	pop	r15
    b378:	ef 90       	pop	r14
    b37a:	df 90       	pop	r13
    b37c:	cf 90       	pop	r12
    b37e:	bf 90       	pop	r11
    b380:	af 90       	pop	r10
    b382:	9f 90       	pop	r9
    b384:	8f 90       	pop	r8
    b386:	08 95       	ret

0000b388 <rand_r>:
    b388:	0c 94 7b 59 	jmp	0xb2f6	; 0xb2f6 <do_rand>

0000b38c <rand>:
    b38c:	80 e0       	ldi	r24, 0x00	; 0
    b38e:	92 e0       	ldi	r25, 0x02	; 2
    b390:	0c 94 7b 59 	jmp	0xb2f6	; 0xb2f6 <do_rand>

0000b394 <srand>:
    b394:	a0 e0       	ldi	r26, 0x00	; 0
    b396:	b0 e0       	ldi	r27, 0x00	; 0
    b398:	80 93 00 02 	sts	0x0200, r24
    b39c:	90 93 01 02 	sts	0x0201, r25
    b3a0:	a0 93 02 02 	sts	0x0202, r26
    b3a4:	b0 93 03 02 	sts	0x0203, r27
    b3a8:	08 95       	ret

0000b3aa <memcpy>:
    b3aa:	fb 01       	movw	r30, r22
    b3ac:	dc 01       	movw	r26, r24
    b3ae:	02 c0       	rjmp	.+4      	; 0xb3b4 <memcpy+0xa>
    b3b0:	01 90       	ld	r0, Z+
    b3b2:	0d 92       	st	X+, r0
    b3b4:	41 50       	subi	r20, 0x01	; 1
    b3b6:	50 40       	sbci	r21, 0x00	; 0
    b3b8:	d8 f7       	brcc	.-10     	; 0xb3b0 <memcpy+0x6>
    b3ba:	08 95       	ret

0000b3bc <memmove>:
    b3bc:	68 17       	cp	r22, r24
    b3be:	79 07       	cpc	r23, r25
    b3c0:	68 f4       	brcc	.+26     	; 0xb3dc <memmove+0x20>
    b3c2:	fb 01       	movw	r30, r22
    b3c4:	dc 01       	movw	r26, r24
    b3c6:	e4 0f       	add	r30, r20
    b3c8:	f5 1f       	adc	r31, r21
    b3ca:	a4 0f       	add	r26, r20
    b3cc:	b5 1f       	adc	r27, r21
    b3ce:	02 c0       	rjmp	.+4      	; 0xb3d4 <memmove+0x18>
    b3d0:	02 90       	ld	r0, -Z
    b3d2:	0e 92       	st	-X, r0
    b3d4:	41 50       	subi	r20, 0x01	; 1
    b3d6:	50 40       	sbci	r21, 0x00	; 0
    b3d8:	d8 f7       	brcc	.-10     	; 0xb3d0 <memmove+0x14>
    b3da:	08 95       	ret
    b3dc:	0c 94 d5 59 	jmp	0xb3aa	; 0xb3aa <memcpy>

0000b3e0 <memset>:
    b3e0:	dc 01       	movw	r26, r24
    b3e2:	01 c0       	rjmp	.+2      	; 0xb3e6 <memset+0x6>
    b3e4:	6d 93       	st	X+, r22
    b3e6:	41 50       	subi	r20, 0x01	; 1
    b3e8:	50 40       	sbci	r21, 0x00	; 0
    b3ea:	e0 f7       	brcc	.-8      	; 0xb3e4 <memset+0x4>
    b3ec:	08 95       	ret

0000b3ee <eeprom_read_block>:
    b3ee:	dc 01       	movw	r26, r24
    b3f0:	cb 01       	movw	r24, r22

0000b3f2 <eeprom_read_blraw>:
    b3f2:	fc 01       	movw	r30, r24
    b3f4:	f9 99       	sbic	0x1f, 1	; 31
    b3f6:	fe cf       	rjmp	.-4      	; 0xb3f4 <eeprom_read_blraw+0x2>
    b3f8:	06 c0       	rjmp	.+12     	; 0xb406 <eeprom_read_blraw+0x14>
    b3fa:	f2 bd       	out	0x22, r31	; 34
    b3fc:	e1 bd       	out	0x21, r30	; 33
    b3fe:	f8 9a       	sbi	0x1f, 0	; 31
    b400:	31 96       	adiw	r30, 0x01	; 1
    b402:	00 b4       	in	r0, 0x20	; 32
    b404:	0d 92       	st	X+, r0
    b406:	41 50       	subi	r20, 0x01	; 1
    b408:	50 40       	sbci	r21, 0x00	; 0
    b40a:	b8 f7       	brcc	.-18     	; 0xb3fa <eeprom_read_blraw+0x8>
    b40c:	08 95       	ret

0000b40e <eeprom_read_byte>:
    b40e:	f9 99       	sbic	0x1f, 1	; 31
    b410:	fe cf       	rjmp	.-4      	; 0xb40e <eeprom_read_byte>
    b412:	92 bd       	out	0x22, r25	; 34
    b414:	81 bd       	out	0x21, r24	; 33
    b416:	f8 9a       	sbi	0x1f, 0	; 31
    b418:	99 27       	eor	r25, r25
    b41a:	80 b5       	in	r24, 0x20	; 32
    b41c:	08 95       	ret

0000b41e <eeprom_read_word>:
    b41e:	a8 e1       	ldi	r26, 0x18	; 24
    b420:	b0 e0       	ldi	r27, 0x00	; 0
    b422:	42 e0       	ldi	r20, 0x02	; 2
    b424:	50 e0       	ldi	r21, 0x00	; 0
    b426:	0c 94 f9 59 	jmp	0xb3f2	; 0xb3f2 <eeprom_read_blraw>

0000b42a <eeprom_update_block>:
    b42a:	dc 01       	movw	r26, r24
    b42c:	a4 0f       	add	r26, r20
    b42e:	b5 1f       	adc	r27, r21
    b430:	41 50       	subi	r20, 0x01	; 1
    b432:	50 40       	sbci	r21, 0x00	; 0
    b434:	48 f0       	brcs	.+18     	; 0xb448 <eeprom_update_block+0x1e>
    b436:	cb 01       	movw	r24, r22
    b438:	84 0f       	add	r24, r20
    b43a:	95 1f       	adc	r25, r21
    b43c:	2e 91       	ld	r18, -X
    b43e:	0e 94 26 5a 	call	0xb44c	; 0xb44c <eeprom_update_r18>
    b442:	41 50       	subi	r20, 0x01	; 1
    b444:	50 40       	sbci	r21, 0x00	; 0
    b446:	d0 f7       	brcc	.-12     	; 0xb43c <eeprom_update_block+0x12>
    b448:	08 95       	ret

0000b44a <eeprom_update_byte>:
    b44a:	26 2f       	mov	r18, r22

0000b44c <eeprom_update_r18>:
    b44c:	f9 99       	sbic	0x1f, 1	; 31
    b44e:	fe cf       	rjmp	.-4      	; 0xb44c <eeprom_update_r18>
    b450:	92 bd       	out	0x22, r25	; 34
    b452:	81 bd       	out	0x21, r24	; 33
    b454:	f8 9a       	sbi	0x1f, 0	; 31
    b456:	01 97       	sbiw	r24, 0x01	; 1
    b458:	00 b4       	in	r0, 0x20	; 32
    b45a:	02 16       	cp	r0, r18
    b45c:	39 f0       	breq	.+14     	; 0xb46c <eeprom_update_r18+0x20>
    b45e:	1f ba       	out	0x1f, r1	; 31
    b460:	20 bd       	out	0x20, r18	; 32
    b462:	0f b6       	in	r0, 0x3f	; 63
    b464:	f8 94       	cli
    b466:	fa 9a       	sbi	0x1f, 2	; 31
    b468:	f9 9a       	sbi	0x1f, 1	; 31
    b46a:	0f be       	out	0x3f, r0	; 63
    b46c:	08 95       	ret

0000b46e <eeprom_update_word>:
    b46e:	01 96       	adiw	r24, 0x01	; 1
    b470:	27 2f       	mov	r18, r23
    b472:	0e 94 26 5a 	call	0xb44c	; 0xb44c <eeprom_update_r18>
    b476:	0c 94 25 5a 	jmp	0xb44a	; 0xb44a <eeprom_update_byte>

0000b47a <eeprom_write_byte>:
    b47a:	26 2f       	mov	r18, r22

0000b47c <eeprom_write_r18>:
    b47c:	f9 99       	sbic	0x1f, 1	; 31
    b47e:	fe cf       	rjmp	.-4      	; 0xb47c <eeprom_write_r18>
    b480:	1f ba       	out	0x1f, r1	; 31
    b482:	92 bd       	out	0x22, r25	; 34
    b484:	81 bd       	out	0x21, r24	; 33
    b486:	20 bd       	out	0x20, r18	; 32
    b488:	0f b6       	in	r0, 0x3f	; 63
    b48a:	f8 94       	cli
    b48c:	fa 9a       	sbi	0x1f, 2	; 31
    b48e:	f9 9a       	sbi	0x1f, 1	; 31
    b490:	0f be       	out	0x3f, r0	; 63
    b492:	01 96       	adiw	r24, 0x01	; 1
    b494:	08 95       	ret

0000b496 <eeprom_write_word>:
    b496:	0e 94 3d 5a 	call	0xb47a	; 0xb47a <eeprom_write_byte>
    b49a:	27 2f       	mov	r18, r23
    b49c:	0c 94 3e 5a 	jmp	0xb47c	; 0xb47c <eeprom_write_r18>

0000b4a0 <__mulshisi3>:
    b4a0:	b7 ff       	sbrs	r27, 7
    b4a2:	0c 94 44 56 	jmp	0xac88	; 0xac88 <__muluhisi3>

0000b4a6 <__mulohisi3>:
    b4a6:	0e 94 44 56 	call	0xac88	; 0xac88 <__muluhisi3>
    b4aa:	82 1b       	sub	r24, r18
    b4ac:	93 0b       	sbc	r25, r19
    b4ae:	08 95       	ret

0000b4b0 <_exit>:
    b4b0:	f8 94       	cli

0000b4b2 <__stop_program>:
    b4b2:	ff cf       	rjmp	.-2      	; 0xb4b2 <__stop_program>
